#####################################
### Here, There Be Dragons Events ###
### by Gogabor			  ###
#####################################

namespace = htbd_gl

@incubation_time = 5000
# change together with one in htbd_compat.txt
@mod_version = 225

# Create dragon/country at game start
event = {
	id = htbd_gl.1
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes

	trigger = {
		has_leviathans = yes
	}

	immediate = {
		# htbd_debug_setup = yes
		htbd_create_country = yes
		event_target:htbd_country = {
			country_event = { id = htbd_gl.11 }
		}
	}
}

country_event = {
	id = htbd_gl.9
	hide_window = yes
	#is_triggered_only = yes

	trigger = {
		has_leviathans = yes
		is_country_type = htbd_horde
		any_country = {
			htbd_is_neutral_faction = yes
			is_hostile = root
		}
	}

	immediate = {
		every_country = {
			limit = {
				htbd_is_neutral_faction = yes
				is_hostile = root
			}
			log = "[This.GetName] is set as neutral to [Root.GetName]"
			set_faction_hostility = {
				target = event_target:htbd_country
				set_hostile = no
				set_neutral = yes
				set_friendly = no
			}
		}
	}
}

# Populate game with dragons when country is created
country_event = {
	id = htbd_gl.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_leviathans = yes
		is_country_type = htbd_horde
	}

	immediate = {
		set_variable = { which = htbd_version value = @mod_version }

		add_modifier = {
			modifier = htbd_power
			days = -1
		}

		give_technology = { tech = tech_wormhole_stabilization message = no }
		give_technology = { tech = tech_gateway_activation message = no }
		add_seen_bypass_type = wormhole

		# establish communications with all countries and make some neutral
		every_country = {
			establish_communications_no_message = root
		}
		htbd_set_neutral_countries = yes

		# log = "Add dragons depending on amount of stars"
		while = {
			limit = {
				OR = {
					AND = {
						any_system = {
							always = yes
							count = 750
						}
						num_fleets < 7
					}
					AND = {
						any_system = {
							always = yes
							count = 550
						}
						num_fleets < 5
					}
					AND = {
						any_system = {
							always = yes
							count = 350
						}
						num_fleets < 4
					}
					AND = {
						any_system = {
							always = yes
							count = 150
						}
						num_fleets < 3
					}
				}
			}
			random_system = {
				limit = {
					NOR = {
						exists = space_owner
						has_star_flag = guardian
						has_star_flag = empire_cluster
						has_star_flag = enclave
						has_star_flag = hostile_system
						is_fe_cluster = yes
						is_star_class = sc_black_hole
						is_star_class = sc_pulsar
						is_star_class = sc_neutron_star
						any_system_planet = { is_capital = yes }
						is_bottleneck_system = yes
					}
					NOT = {
						any_ship_in_system = {
							fleet = {
								exists = owner
								owner = { is_country_type = htbd_horde }
							}
						}
					}
					any_system_planet = {
						is_planet_class = pc_molten
						NOT = { has_planet_flag = egg_incubated }
					}
				}
				random_system_planet = {
					limit = {
						is_planet_class = pc_molten
						NOT = { has_planet_flag = egg_incubated }
					}
					random_list = {
						5 = {
							modifier = {
								factor = 2
								root = {
									num_fleets < 1
								}
							}
							htbd_new_fleet = yes
							last_created_fleet = {
								htbd_dragon_grand = yes
								set_fleet_flag = htbd_idle
								log = "Wyrm [this.GetName] in [prev.GetName]"
							}
						}
						10 = {
							htbd_new_fleet = yes
							last_created_fleet = {
								htbd_dragon_adult = yes
								set_fleet_flag = htbd_idle
								log = "Dragon [this.GetName] in [prev.GetName]"
							}
						}
						30 = {
							htbd_new_fleet = yes
							last_created_fleet = {
								htbd_dragon_teen = yes
								set_fleet_flag = htbd_idle
								log = "Teen [this.GetName] in [prev.GetName]"
							}
						}
						50 = {
							modifier = {
								factor = 0.1

								any_system = {
									any_system_planet = {
										has_planet_flag = egg_incubated
									}
									count = 2
								}
							}
							modifier = {
								factor = 1.5
								solar_system = {
									any_system_planet = { is_planet_class = pc_asteroid }
								}
							}
							log = "Egg at [This.GetName]"
							set_planet_flag = egg_incubated
						}
					}
				}
			}
		}
		# Add an 'old failed experiment' - Ether Dwarf into the game
		random_system = {
			limit = {
				NOR = {
					exists = space_owner
					has_star_flag = guardian
					has_star_flag = empire_cluster
					has_star_flag = enclave
					has_star_flag = hostile_system
					is_fe_cluster = yes
					any_system_planet = { is_capital = yes }
				}
				OR = {
					has_star_flag = ruined_ring_system
					has_star_flag = ruined_sentry_system
					has_star_flag = ruined_nexus_system
					has_star_flag = ruined_dyson_system
					any_system_planet = {
						is_planet_class = pc_nuked
					}
				}
			}
			log = "Exile system [This.GetName]"
			random_system_planet = {
				htbd_exile_dwarf = yes
				last_created_fleet = {
					set_fleet_flag = htbd_idle
					log = "Old project in [prev.GetName]"
				}
			}
		}
	}
}

# Savegame compatibility, create country if none
event = {
	id = htbd_gl.12
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes

	trigger = {
		has_leviathans = yes
		NOT = {
			any_country = { is_country_type = htbd_horde }
		}
	}
	immediate = {
		log = "HTBD: create country for just enabled mod"
		htbd_create_country = yes
		event_target:htbd_country = {
			country_event = { id = htbd_gl.11 }
		}
	}
}

# Savegames compatibility between different mod versions
country_event = {
	id = htbd_gl.13
	hide_window = yes
	fire_only_once = yes

	trigger = {
		has_leviathans = yes
		is_country_type = htbd_horde
		check_variable = { which = htbd_version value < @mod_version }
	}
	immediate = {
		# check all modifiers are enabled
		if = {
			limit = {
				NOT = { has_modifier = htbd_power }
			}
			log = "HTBD: add 'Dragon Power' modifier"
			add_modifier = { modifier = htbd_power days = -1 }
		}
		# version 202 added countries neutrality
		if = {
			limit = {
				check_variable = { which = htbd_version value < 202 }
			}
			log = "HTBD: add neutral countries"
			htbd_set_neutral_countries = yes
		}

		# version 225 added ether holes stabilization
		if = {
			limit = {
				check_variable = { which = htbd_version value < 225 }
			}
			# log = "HTBD: connect ether holes with stars"
			every_owned_megastructure = {
				limit = { is_megastructure_type = htbd_hole }
				solar_system = {
					log = "Hole in [This.GetName]"
					htbd_spawn_hole = yes
				}
				remove_megastructure = this
			}
		}
		# set new version for the current game finally
		set_variable = { which = htbd_version value = @mod_version }
	}
}

# re-create dragons if all killed early (e.g. by Fallen)
event = {
	id = htbd_gl.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_leviathans = yes
		exists = event_target:htbd_country
		event_target:htbd_country = {
			NOT = { has_country_flag = htbd_lair_found }
			num_fleets < 2
		}
	}

	immediate = {
		log = "More dragons enter the galaxy"
		random_system = {
			limit = {
				NOR = {
					has_star_flag = htbd_pass_stay
					has_star_flag = guardian
					has_star_flag = enclave
					has_star_flag = hostile_system
					is_fe_cluster = yes
				}
				any_system_planet = {
					is_star = yes
					NOR = {
						is_planet_class = pc_black_hole
						is_planet_class = pc_pulsar
						is_planet_class = pc_neutron_star
					}
				}
			}

			htbd_spawn_hole = yes
			set_timed_star_flag = { flag = htbd_pass_stay days = @htbd_pass_time_short }
			set_star_flag = htbd_pass_to

			random_system_megastructure = {
				limit = { is_megastructure_type = htbd_hole }
				random_list = {
					5 = {
						htbd_new_fleet = yes
						last_created_fleet = {
							htbd_dragon_grand = yes
							set_fleet_flag = htbd_idle
							log = "Wyrm [this.GetName] in [prevprev.GetName]"
						}
					}
					10 = {
						htbd_new_fleet = yes
						last_created_fleet = {
							htbd_dragon_adult = yes
							set_fleet_flag = htbd_idle
							log = "Dragon [this.GetName] in [prevprev.GetName]"
						}
					}
					30 = {
						htbd_new_fleet = yes
						last_created_fleet = {
							htbd_dragon_teen = yes
							set_fleet_flag = htbd_idle
							log = "Teen [this.GetName] in [prevprev.GetName]"
						}
					}
				}
			}
		}
	}
}

# if planet with an Egg occured
planet_event = {
	id = htbd_gl.15
	hide_window = yes

	trigger = {
		has_planet_flag = egg_incubated
	}
	
	mean_time_to_happen = {
		days = @incubation_time
		
		modifier = {
			factor = 0.8
			solar_system = { is_star_class = sc_f }
		}
		modifier = {
			factor = 1.2
			solar_system = { is_star_class = sc_k }
		}
		modifier = {
			factor = 1.5
			solar_system = { is_star_class = sc_m }
		}
	}
	
	immediate = {
		planet_event = { id = htbd_gl.16 }
	}
}

# New dragon is born
planet_event = {
	id = htbd_gl.16
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_planet_flag = egg_incubated
		has_anomaly = no
	}
	
	immediate = {
		remove_planet_flag = egg_incubated
		remove_planet_flag = htbd_hidden_egg
		htbd_new_fleet = yes
		# htbd_new_leader = yes
		last_created_fleet = {
			#assign_leader = last_created_leader
			htbd_dragon_kid = yes
			fleet_event = { id = htbd.13 }
		}
	}
}

# Notify countries about Egg planets if applicable
event = {
	id = htbd_gl.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = default
			has_country_flag = htbd_dragonborn_done
		}
		any_system = {
			any_system_planet = {
				has_planet_flag = egg_incubated
				NOT = { has_planet_flag = htbd_hidden_egg }
			}
		}
	}

	immediate = {
		every_country = {
			limit = {
				is_country_type = default
				has_country_flag = htbd_dragonborn_done
				any_system = {
					any_system_planet = {
						has_planet_flag = egg_incubated
						NOT = { has_planet_flag = htbd_hidden_egg }
						NOT = { has_planet_flag = htbd_egg_check_@prevprev }
					}
					NAND = {
						exists = space_owner
						space_owner = { has_closed_borders = prev }
					}
				}
			}
			# log = "[This.GetName] has an access to system with Egg"
			random_list = {
				2 = {
					#modifier = {
					#	factor = 5
					#	has_edict = htbd_egg_search
					#}
					modifier = {
						factor = 5
						any_system_within_border = {
							any_ship_in_system = {
								fleet = { has_fleet_flag = htbd_hatching }
							}
						}
					}
					country_event = { id = htbd_ev.83 days = 12 random = 10 }
				}
				40 = {}
			}
		}
	}
}

# Hunt for dragons
event = {
	id = htbd_gl.7
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:htbd_country = {
			NOT = { has_country_flag = htbd_dragon_hunt }
			num_fleets > 40
		}
	}

	immediate = {
		event_target:htbd_country = {
			set_timed_country_flag = { flag = htbd_dragon_hunt days = 1500 }
		}
		log = "Dragon Hunt was started"
	}
}

country_event = {
	id = htbd_gl.70
	hide_window = yes

	mean_time_to_happen = {
		months = 3
	}

	trigger = {
		is_at_war = no
		event_target:htbd_country = {
			has_country_flag = htbd_dragon_hunt
			num_fleets > 15
		}
		OR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
		NOT = { has_country_flag = htbd_dragon_scent }
		NOT = { 
			any_owned_fleet = { has_fleet_flag = htbd_hunter }
		}
		any_owned_fleet = {
			NOT = { is_ship_class = shipclass_starbase }
			fleet_power > 20000
		}
	}

	immediate = {
		random_country = {
			limit = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				is_at_war = no
				NOT = { has_country_flag = htbd_dragon_scent }
				NOT = { 
					any_owned_fleet = { has_fleet_flag = htbd_hunter }
				}
			}
			random_owned_fleet = {
				limit = {
					NOT = {
						is_ship_class = shipclass_starbase
					}
					is_fleet_idle = yes
					fleet_power > 20000
				}
				log = "[This.GetName] is a hunter"
				set_fleet_flag = htbd_hunter
				fleet_event = { id = htbd_gl.71 }
			}
		}
	}
}

fleet_event = {
	id = htbd_gl.71
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_fleet_flag = htbd_hunter
		NOT = { has_fleet_flag = htbd_hunting }
	}

	immediate = {
		set_fleet_flag = htbd_hunting
		queue_actions = {
			repeat = {
				while = {
					id = htbd_gl.71.while.1

					has_hp_percentage > 0.5
					has_fleet_flag = htbd_hunter
				}
				find_closest_system = {
					trigger = {
						id = htbd_gl.71.trigger.1

						any_ship_in_system = {
							OR = {
								is_ship_size = space_dragon_grand
								is_ship_size = space_dragon_adult
							}
						}
						NOT = { has_star_flag = htbd_stop }
					}
					found_system = {
						move_to = this
						effect = {
							id = htbd_gl.71.effect.1

							if = {
								limit = {
									root.solar_system = {
										is_same_value = prev
									}
								}
								log = "[Root.GetName] arrived at [This.GetName]"
							}
							else = {
								# log = "[Root.GetName] can't move to [This.GetName]"
								set_timed_star_flag = { flag = htbd_stop years = 3 }
							}
						}
					}
					failed = {
						# can't find big dragons, stop hunting
						effect = {
							id = htbd_gl.71.effect.2

							log = "[Root.GetName] stops hunting (no big dragons)"
							event_target:htbd_country = { remove_country_flag = htbd_dragon_hunt }
							root = {
								remove_fleet_flag = htbd_hunter
								remove_fleet_flag = htbd_hunting
								clear_fleet_actions = this
							}
						}
					}
				}
			}
		}
	}
}

fleet_event = {
	id = htbd_gl.72
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_fleet_flag = htbd_hunting
		event_target:htbd_country = {
			OR = {
				NOT = { has_country_flag = htbd_dragon_hunt }
				num_fleets < 15
			}
		}
	}

	immediate = {
		set_fleet_flag = htbd_hunting
		log = "[Root.GetName] stops hunting (time or amount)"
		event_target:htbd_country = { remove_country_flag = htbd_dragon_hunt }
		remove_fleet_flag = htbd_hunter
		remove_fleet_flag = htbd_hunting
		clear_orders = yes
		clear_fleet_actions = this
	}
}

# debug event, just creates new dragon being issued from console
planet_event = {
	id = htbd_gl.42
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		htbd_new_fleet = yes
		last_created_fleet = {
			htbd_dragon_grand = yes
			fleet_event = { id = htbd.13 }
		}
	}
}

# there is no way to issue effect when edict ENDs, so make that via event.
# At first, dragons become neutral when 'Dragon Friend' edict ends
country_event = {
	id = htbd_gl.5
	hide_window = yes

	mean_time_to_happen = { months = 7 }

	trigger = {
		has_country_flag = htbd_dragon_friend
		htbd_has_friend_edict = no
		has_country_flag = htbd_dragon_scent
	}
	immediate = {
		set_faction_hostility = {
			target = event_target:htbd_country
			set_hostile = no
			set_neutral = yes
			set_friendly = no
		}
		remove_country_flag = htbd_dragon_scent
		set_timed_country_flag = { flag = htbd_dragon_trust days = @htbd_trust_duration }
	}
}

# After a while dragons become hostile if edict wasn't prolonged ( in about 3 years )
country_event = {
	id = htbd_gl.51
	hide_window = yes

	mean_time_to_happen = { months = 7 }

	trigger = {
		NOT = { is_country_type = htbd_horde }
		htbd_is_neutral_faction = no
		NOT = { is_hostile = event_target:htbd_country }
		htbd_has_friend_edict = no
		NOT = {	has_country_flag = htbd_dragon_scent }
		NOT = { has_country_flag = htbd_dragon_trust }
	}
	immediate = {
		#log = "Dragons are hostile to [This.GetName] now"
		set_faction_hostility = {
			target = event_target:htbd_country
			set_hostile = yes
			set_neutral = no
			set_friendly = no
		}
	}
}

# Turn dragons hostile if attacked
fleet_event = {
	id = htbd_gl.52
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			is_country_type = htbd_horde
		}
		from.owner = {
			NOT = { is_hostile = event_target:htbd_country }
		}
	}
	immediate = {
		from.owner = {
			set_faction_hostility = {
				target = event_target:htbd_country
				set_hostile = yes
				set_neutral = no
				set_friendly = no
			}
			remove_country_flag = htbd_dragon_scent
			remove_country_flag = htbd_dragon_trust
		}
	}
}

country_event = {
	id = htbd_gl.60
	hide_window = yes

	mean_time_to_happen = { months = 5 }

	trigger = {
		is_country_type = htbd_horde
		any_owned_megastructure = {
			is_megastructure_type = htbd_hole
			solar_system = { NOT = { has_star_flag = htbd_pass_stay } }
		}
	}
	immediate = {
		every_owned_megastructure = {
			limit = {
				is_megastructure_type = htbd_hole
				solar_system = { NOT = { has_star_flag = htbd_pass_stay } }
			}
			solar_system = {
				remove_star_flag = htbd_pass_to
				remove_star_flag = htbd_pass_from
			}
			remove_megastructure = this
		}
	}
}

# debug info
event = {
	id = htbd_gl.100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_leviathans = yes
		any_country = {
			is_country_type = htbd_horde
		}
		htbd_debug = yes
	}

	immediate = {
		every_country = {
			limit = { is_country_type = htbd_horde }
			every_owned_fleet = {
				log = "-------------"
				log = "[This.GetName], "
				switch = {
					trigger = is_ship_size
					space_dragon_kid = { log = "	Kid" }
					space_dragon_teen = { log = "	Teen"}
					space_dragon_adult = { log = "	Adult" }
					space_dragon_grand = { log = "	Grandpa" }
					space_dragon_dwarf = { log = "	Dwarf" }
				}
				if = { limit = { has_fleet_flag = htbd_curious }
					log = "	curious"
				}
				if = { limit = { has_fleet_flag = htbd_caution }
					log = "	caution"
				}
				if = { limit = { has_fleet_flag = htbd_stupid } log = "	stupid" }
				if = { limit = { has_fleet_flag = htbd_clever } log = "	clever" }
				if = { limit = { has_fleet_flag = htbd_mad } log = "	mad" }
				if = { limit = { has_fleet_flag = htbd_apathic } log = "	apathic" }
				if = { limit = { has_fleet_flag = htbd_hermit } log = "	hermit" }
				if = { limit = { has_fleet_flag = htbd_social } log = "	social" }
				if = { limit = { has_fleet_flag = htbd_hatching }
					log = "	is hatching in [This.System.GetName]"
				}
				if = { limit = { has_fleet_flag = htbd_roaming }
					log = "	is roaming in [This.System.GetName]"
				}
				if = { limit = { has_fleet_flag = htbd_travel }
					log = "	is traveling"
				}
			}
		}
		every_country = {
			limit = {
				OR = {
					is_country_type = default
					is_ai = no
				}
				NOR = {
					is_country_type = htbd_horde
				}
			}
			log = "HTBD stats for [This.GetName] --------------------"
			if = {
				limit = { htbd_foe_way_is_done = yes }
				log = "--- has FEAR researched!"
			}
			if = {
				limit = { htbd_has_fear_edict = yes }
				log = "--- has FEAR enabled!"
			}
			if = {
				limit = { htbd_friend_way_is_done = yes }
				log = "--- has FRIEND researched!"
			}
			if = {
				limit = { htbd_has_friend_edict = yes }
				log = "--- has FRIEND enabled!"
			}
			if = {
				limit = { has_country_flag = htbd_pass_seen }
				log = "--- found Ether Hole!"
			}
			if = {
				limit = { has_country_flag = htbd_pass_origin_known }
				log = "--- discover Ether Hole origin!"
			}
			#save_event_target_as = this
			event_target:htbd_country = {
				every_owned_ship = {
					limit = { is_inside_border = PREV }
					log = "---> [fleet.GetName] is in borders"
				}
			}
		}
	}
}

# Fleet scope
fleet_event = {
	id = htbd_gl.101
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		htbd_debug = yes
	}

	immediate = {
		solar_system = {
		save_event_target_as = htbd_dbg_system
		log = "[Root.GetName] wants to leave [htbd_dbg_system.GetName]"
		if = {
			limit = { exists = starbase }
			log = "[htbd_dbg_system.GetName] has starbase!"
		}
		if = {
			limit = {
				htbd_has_ftl_inhibitor = yes
			}
			log = "[htbd_dbg_system.GetName] has an inhibitor!"
		}
		log = "---------- by HYPERLANES to:"
		every_neighbor_system = {
			limit = { always = yes }
			htbd_system_stats = yes
		}
		if = {
			limit = {
				has_natural_wormhole = yes
			}
			log = "[htbd_dbg_system.GetName] has WORMHOLE, try to find its pair by jump distance:"
			every_system = {
				limit = {
					has_natural_wormhole = yes
					distance = { source = prev type=hyperlane use_bypasses=yes bypass_empire=event_target:htbd_country min_jumps = 1 max_jumps = 1 }
				}
				log = "[Prev.GetName] has wormhole to [This.GetName]"
				htbd_system_stats = yes
			}
		}
		if = {
			limit = {
				has_star_flag = htbd_pass_stay
			}
			log = "---------- by ETHER HOLES:"
			every_system = {
				limit = {
					OR = {
						AND = {
							prev = { has_star_flag = htbd_pass_to }
							has_star_flag = htbd_pass_from
						}
						AND = {
							prev = { has_star_flag = htbd_pass_from }
							has_star_flag = htbd_pass_to
						}
					}
				}
				htbd_system_stats = yes
			}
		}
		}
	}
}

# FROM is system
planet_event = {
	id = htbd_gl.102
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		htbd_debug = yes
	}

	immediate = {
		solar_system = {
			log = "-> [this.GetName] system"
			if = {
				limit = { exists = space_owner }
				log = "		-> is owned by [space_owner.GetName]"
			}
			if = {
				limit = { htbd_friend_system = yes }
				if = {
					limit = {
						space_owner = { htbd_has_friend_edict = yes }
					}
					log = "		-> FRIEND (active edict)"
				}
				else = {
					log = "		-> FRIEND"
				}
			}
			if = {
				limit = { has_star_flag = htbd_recent_star_@prevprev }
				log = "		-> RECENT"
			}
			if = {
				limit = { htbd_has_fear_station = yes }
				log = "		-> FEAR"
			}
			else_if = {
				limit = { htbd_has_fear_aura = yes }
				log = "		-> FEAR AURA"
			}
			if = {
				limit = { htbd_good_system = yes }
				log = "		-> GOOD"
			}
			if = {
				limit = { htbd_bad_system = yes }
				log = "		-> BAD"
			}
			if = {
				limit = { htbd_avoid_system = yes }
				log = "		-> AVOID"
			}
			if = {
				limit = { has_star_flag = hostile_system }
				log = "		-> hostile"
			}
			if = {
				limit = { is_bottleneck_system = yes }
				log = "		-> bottleneck"
			}
			if = {
				limit = { htbd_has_ftl_inhibitor = yes }
				log = "		-> has an inhibitor!"
			}
			if = {
				limit = { has_star_flag = htbd_pass_stay }
				log = "		-> ETHER HOLE"
			}
		}
	}
}