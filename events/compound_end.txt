namespace = compound_end

# Compound dies
planet_event = {
	id = compound_end.001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		stop_crisis_sound = yes

		# End compound event chain
		remove_global_flag = compound_invasion_ongoing
		set_global_flag = compound_destroyed
		every_country = {
			limit = { has_event_chain = "compound_crisis_chain" }
			end_event_chain = "compound_crisis_chain"
		}

		# Remove wormhole in compound system
		event_target:ehof_compound_system_1 = {
			every_system_megastructure = {
				limit = { is_megastructure_type = ehof_megastructure_compound_gateway_exit }
				delete_megastructure = this
			}
		}

		# Replace the Micro EHOF
		event_target:ehof_seized_country = {
			save_event_target_as = ehof_handover
			remove_country_flag = ehof_can_activate
			if = {
				limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_05 } }
				random_system_within_border = {
					limit = { has_star_flag = ehof_megastructure_system@event_target:ehof_handover }
					remove_star_flag = ehof_megastructure_system@event_target:ehof_handover
					every_system_planet = { remove_planet_flag = cant_target_this_planet remove_planet_flag = cant_build_here }
					random_system_planet = {
						limit = { has_planet_flag = ehof_micro@event_target:ehof_handover }
						save_event_target_as = ehof_micro
					}
					every_system_megastructure = {
						limit = { has_megastructure_flag = ehof_phase_05 }
						delete_megastructure = this
					}
					spawn_megastructure = {
						type = "ehof_megastructure_phase5_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						owner = event_target:ehof_handover
						location = event_target:ehof_micro
					}
				}
			}
		}

		# Destroy all compound fleets in ehof system
		event_target:compound_invasion_entry = {
			every_fleet_in_system = {
				limit = { exists = owner owner = { is_same_value = event_target:compound_country } }
				destroy_fleet = this
			}

			# Return ownership of system to original owner
			create_starbase = { size = starbase_outpost owner = event_target:ehof_handover }

			# Restore previous EHOF phase
			if = {
				limit = { any_system_megastructure = { is_megastructure_type = ehof_compound_phase1 } }
				random_system_megastructure = {
					limit = { is_megastructure_type = ehof_compound_phase1 }
					delete_megastructure = this
				}
				event_target:ehof_handover = { set_variable = { which = ehof_phase value = 1 } }
				set_star_flag = ehof_megastructure_system@event_target:ehof_handover
				every_system_planet = { set_planet_flag = cant_build_here set_planet_flag = cant_target_this_planet } # Prevents NDB & QSO
				spawn_megastructure = {
					type = "ehof_megastructure_phase1_idle"
					orbit_angle = 0
					orbit_distance = 0
					owner = event_target:ehof_handover
					location = star
					init_effect = { set_megastructure_flag = ehof_phase_01 }
				}
			}
			else_if = {
				limit = { any_system_megastructure = { is_megastructure_type = ehof_compound_phase2 } }
				random_system_megastructure = {
					limit = { is_megastructure_type = ehof_compound_phase2 }
					delete_megastructure = this
				}
				event_target:ehof_handover = { set_variable = { which = ehof_phase value = 2 } }
				set_star_flag = ehof_megastructure_system@event_target:ehof_handover
				every_system_planet = { set_planet_flag = cant_build_here set_planet_flag = cant_target_this_planet } # Prevents NDB & QSO
				spawn_megastructure = {
					type = "ehof_megastructure_phase2_idle"
					orbit_angle = 0
					orbit_distance = 0
					owner = event_target:ehof_handover
					location = star
					init_effect = { set_megastructure_flag = ehof_phase_02 }
				}
			}
			else_if = {
				limit = { any_system_megastructure = { is_megastructure_type = ehof_compound_phase3 } }
				random_system_megastructure = {
					limit = { is_megastructure_type = ehof_compound_phase3 }
					delete_megastructure = this
				}
				event_target:ehof_handover = { set_variable = { which = ehof_phase value = 3 } }
				set_star_flag = ehof_megastructure_system@event_target:ehof_handover
				every_system_planet = { set_planet_flag = cant_build_here set_planet_flag = cant_target_this_planet } # Prevents NDB & QSO
				spawn_megastructure = {
					type = "ehof_megastructure_phase3_idle"
					orbit_angle = 0
					orbit_distance = 0
					owner = event_target:ehof_handover
					location = star
					init_effect = { set_megastructure_flag = ehof_phase_03 }
				}
			}
			else_if = {
				limit = { any_system_megastructure = { is_megastructure_type = ehof_compound_phase4 } }
				random_system_megastructure = {
					limit = { is_megastructure_type = ehof_compound_phase4 }
					delete_megastructure = this
				}
				event_target:ehof_handover = { set_variable = { which = ehof_phase value = 4 } }
				set_star_flag = ehof_megastructure_system@event_target:ehof_handover
				every_system_planet = { set_planet_flag = cant_build_here set_planet_flag = cant_target_this_planet } # Prevents NDB & QSO
				spawn_megastructure = {
					type = "ehof_megastructure_phase4_idle"
					orbit_angle = 0
					orbit_distance = 0
					owner = event_target:ehof_handover
					location = star
					init_effect = { set_megastructure_flag = ehof_phase_04 }
				}
			}
		}

		if = {
			limit = { has_global_flag = annihilator_destroyed_sphere }
			# Create death animation
			event_target:compound_capital_system = {
				set_star_flag = compound_sphere_destroyed
				random_system_ambient_object = {
					limit = { has_ambient_object_flag = sa_firing_at_sphere }
					destroy_ambient_object = this
				}
				random_system_planet = {
					limit = { has_planet_flag = sa_firing_source }
					create_ambient_object = {
						type = "sa_fired_at_sphere"
						location = this
						use_3d_location = yes
						base_angle_towards = star
						entity_face_object = star
						entity_offset = 0
						entity_scale_to_size = yes
						entity_offset_height = 17
					}
					last_created_ambient_object = { set_ambient_object_flag = sa_fired_at_sphere }
					annihilator_death = yes
					clear_deposits = yes
					remove_planet = yes
				}
				event_target:ehof_annihilator = {
					queue_actions = {
						find_random_planet = {
							trigger = {
								id = sa_final_destination.1
								has_planet_flag = compound_home_sphere
							}
							found_planet = {
								move_to = this
							}
						}
					}
				}
			}

			# Give discoverer a relic
			event_target:discoverer_country = { country_event = { id = compound_end.002 days = 10 random = 10 } }
			event_target:creators_country = { country_event = { id = annihilator.012 days = 5 } }	# Kill Annihilator (For Good)

			every_country = {
				limit = { ehof_default_country = yes }
				country_event = { id = annihilator_dialog.012 days = 30 }							# Notification: Sphere and Annihalor are dead
			}
		}
		else_if = {
			limit = { has_global_flag = bombardment_destroyed_sphere }

			# Give discoverer a relic
			event_target:preservation_sphere_destroyer = { country_event = { id = compound_end.002 days = 10 random = 10 } }
			event_target:creators_country = { country_event = { id = annihilator.012 days = 5 } }	# Kill Annihilator (For Good)

			# Notify Sphere was bombarded & Annihilator is gone
			every_country = {
				limit = { ehof_default_country = yes }
				country_event = { id = compound_dialog.20 }

				if = {
					limit = { has_event_chain = compound_solution_chain }
					end_event_chain = compound_solution_chain
					if = { limit = { has_special_project = REPAIR_ANNIHILATOR }				abort_special_project = { type = REPAIR_ANNIHILATOR } }
					if = { limit = { has_special_project = ENTERING_LEVIATHAN }				abort_special_project = { type = ENTERING_LEVIATHAN } }
					if = { limit = { has_special_project = INVESTIGATE_DORMANT_LEVIATHAN }	abort_special_project = { type = INVESTIGATE_DORMANT_LEVIATHAN } }
					if = { limit = { has_special_project = INVESTIGATE_STELLAR_WOUND }		abort_special_project = { type = INVESTIGATE_STELLAR_WOUND } }
					if = { limit = { has_special_project = INVESTIGATE_WOUNDED_STAR }		abort_special_project = { type = INVESTIGATE_WOUNDED_STAR } }
				}
			}
		}

		# The traders are open for business
		if = {
			limit = { exists = event_target:ehof_trader_country }
			every_country = {
				limit = {
					ehof_default_country = yes
					has_country_flag = ehof_traders_first_time
				}
				country_event = { id = ehof_mega_trader.014 days = 60 }
			}
		}

		# Remove sphere from star and create debris
		event_target:compound_capital_system = {
			every_system_ambient_object = { limit = { has_ambient_object_flag = fake_sphere } destroy_ambient_object = this }
			random_system_planet = {
				limit = { has_planet_flag = compound_home_sphere }
				destroy_colony = yes
				change_pc = pc_wh_star
				set_name = "ehof_whitehole"
				ehof_field_debris = yes
			}

			# Spawn Primordial Pylon
			spawn_megastructure = {
				type = "ehof_gateway"
				location = solar_system
				orbit_distance = 30
				orbit_angle = 45
			}

			# Spawn Ruined Preservation Sphere
			spawn_megastructure = {
				type = "ehof_presphere_ruined"
				location = solar_system
				orbit_distance = 0
				orbit_angle = 0
			}
		}

		# Remove the compound
		random_country = {
			limit = { is_country_type = compound_empire }
			every_owned_pop = { kill_pop = yes }
			every_owned_fleet = { delete_fleet = this }
			every_controlled_planet = { remove_all_buildings = yes }
			destroy_country = yes
		}

	}
}

# Creators Shard
country_event = {
	id = compound_end.002
	title = "compound_end.002.name"
	desc = "compound_end.002.desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "shattered_planet_room" }
	show_sound = event_mystic_reveal
	is_triggered_only = yes

	option = {
		custom_gui = "ehof_eventui_option"
		name = GOOD
		add_relic = r_creator_shard
	}
}