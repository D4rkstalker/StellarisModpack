namespace = esap_ascension_paths

#Mind Supression, adds modifier on war declared. 
country_event = {
	id = esap_ascension_paths.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {	
		has_global_flag = esap_psi_1_picked_flag
		from = {
			any_war_participant = { 
				is_at_war_with = root
				has_ascension_perk = ap_esap_psi_bonus
			}
		}
		Not = {
			has_ascension_perk = ap_esap_psi_bonus
			has_ethic = ethic_gestalt_consciousness
		}
	}
	
	immediate = {
		add_modifier = {
			modifier = "mod_esap_psi_1"
			days = -1
		}
	}
}

#Mind Supression, removes modifier when war ends.
country_event = {
	id = esap_ascension_paths.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {	
		has_modifier = mod_esap_psi_1
		Or = {
			is_at_war = no
			Not = {
				any_country = {
					is_at_war_with = root
					has_ascension_perk = ap_esap_psi_bonus
				}
			}
		}
	}
	
	immediate = {
		remove_modifier = "mod_esap_psi_1"
	}
}

# Synthetic Evolution
country_event = {
	id = esap_ascension_paths.3
	title = "utopia.2550.name"
	desc = "utopia.2550.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_laboratory_sound
	trackable = yes
	
	is_triggered_only = yes
	
	option = {
		name = "utopia.2550.a"
		hidden_effect = { save_event_target_as = synth_evo_owner }
		capital_scope = {
			enable_special_project = {
				name = "ESAP_SYNTHETIC_EVOLUTION_PROJECT"
				location = this
				owner = root
			}
		}
	}
}

# The Synthetic Age
country_event = {
	id = esap_ascension_paths.4
	title = "utopia.2551.name"
	desc = "utopia.2551.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = synthetic_empire
		
		give_technology = { tech = tech_bio_reactor message = no }
		
		if = {
			limit = {
				Not = {
					has_ascension_perk = ap_mind_over_matter
				}
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
				}
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}
	
					rename_species = {
						prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = ascension_list
					}
					
					save_event_target_as = new_robotic_species
				}
			}
		}
		if = {
			limit = {
				has_ascension_perk = ap_mind_over_matter
				Not = {
					has_ascension_perk = ap_transcendence
				}
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_latent_psionic"
				}
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}
	
					rename_species = {
						prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = ascension_list
					}
					
					save_event_target_as = new_robotic_species
				}
			}
		}
		if = {
			limit = {
				has_ascension_perk = ap_transcendence
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_psionic"
				}
				
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							}
						}
					}
	
					rename_species = {
						prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = ascension_list
					}
					
					save_event_target_as = new_robotic_species
				}
			}
		}

		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_cybernetic 
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		
		every_owned_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		
		observer_event = { id = observer.4 }
		every_country = {
			limit = { 
				is_ai = no 
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
	}
	
	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
	}
}