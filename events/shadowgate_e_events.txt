namespace = shadowgate_e

country_event = {
	id = shadowgate_e.1
	title = shadowgate.discovery.title
	desc = shadowgate.discovery.main.desc
	picture = GFX_evt_shadowgate
	location = from.solar_system
	show_sound = pc_shadowgate
	is_triggered_only = yes

	immediate = {
		from.solar_system = { save_event_target_as = shadowgate_origin_system random_system_planet = { limit = { has_planet_flag = shadowgate_planet } save_event_target_as = shadowgate_planet } }
	}

	option = {
		name = ONSCREEN
		hidden_effect = { owner = { country_event = { id = shadowgate_e.2 days = 1 } } }
	}
}

country_event = {
	id = shadowgate_e.2
	title = shadowgate.discovery.title
	desc = shadowgate.discovery.complete.firstcontact.desc
	location = event_target:shadowgate_planet
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { event_target:shadowgate_planet = { set_surveyed = { surveyor = prev surveyed = yes } } }
	
	option = {
		name = shadowgate.discovery.complete.firstcontact.answer
		custom_tooltip = shadowgate.discovery.complete.firstcontact.answer.tooltip
		hidden_effect = {
			country_event = { id = shadowgate_galactic.5 days = 3 }
		}
	}
}

planet_event = {
	id = shadowgate_e.3
	title = shadowgate.main.title
	location = this
	desc = {
		exclusive_trigger = { owner = { has_country_flag = shadowgate_previously_accessed } }
		text = shadowgate.returning.end.desc
	}
	desc = {
		trigger = { owner = { NOT = { has_country_flag = shadowgate_transferred } } }
		text = shadowgate.discovery.end.desc
	}
	desc = {
		trigger = { owner = { has_country_flag = shadowgate_transferred } }
		text = shadowgate.other.end.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		save_event_target_as = shadowgate_planet
		solar_system = { save_event_target_as = shadowgate_origin_system }
		owner = {
			save_event_target_as = shadowgate_owner
			set_country_flag = encountered_shadowgate
			if = { limit = { OR = { has_country_flag = shadowgate_tutorial_bypass is_ai = yes } }
				set_country_flag = has_shadow_anchors
				set_country_flag = shadowgate_first_rift_summoned
				set_country_flag = shadowrift_assault_notified
				set_country_flag = shadowgate_seen_disabled
				set_country_flag = shadowgate_dl_knowledge
			}
			if = { limit = { is_ai = yes OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
				root = {
					apply_shadowrift_core_fortification = { AMOUNT = 30 }
					apply_shadowrift_barrier_fortification = { AMOUNT = 30 }
				}
				country_event = { id = shadowgate_galactic.130 }
			}
		}
	}
	
	option = {
		name = shadowgate.discovery.end.answer
		trigger = { owner = { NOR = { is_ai = yes has_country_flag = shadowgate_previously_accessed } } }
		owner = {
			add_resource = { sr_living_metal = 253 }
			add_resource = { sr_dark_matter = 132 }
			hidden_effect = {
				set_country_flag = shadowgate_previously_accessed
				set_country_flag = shadowgate_first_settled
				remove_country_flag = shadowgate_transferred
				prev = { planet_event = { id = shadowgate_e.100 } }
			}
		}
		ai_chance = { factor = 0 }
	}

	option = {
		name = shadowgate.returning.end.answer
		trigger = { owner = { OR = { is_ai = yes has_country_flag = shadowgate_previously_accessed } } }
		hidden_effect = {
			owner = {
				if = { limit = { is_ai = no } remove_shadowgate_accessed = { SHADOWGATE = e } }
				set_country_flag = shadowgate_previously_accessed
				remove_country_flag = shadowgate_transferred
			}
		}
		ai_chance = { factor = 100 }
	}

	option = {
		name = shadowgate.discovery.complete.bypass.answer
		trigger = { owner = { NOR = { is_ai = yes has_country_flag = shadowgate_tutorial_bypass } } }
		if = { limit = { hidden_trigger = { owner = { NOT = { has_country_flag = shadowgate_previously_accessed } } } }
			owner = {
				add_resource = { sr_living_metal = 253 }
				add_resource = { sr_dark_matter = 132 }
				hidden_effect = {
					set_country_flag = shadowgate_first_settled
					prev = { planet_event = { id = shadowgate_e.100 } }
				}
			}
		}
		else = {
			hidden_effect = {
				owner = {
					if = { limit = { is_ai = no } remove_shadowgate_accessed = { SHADOWGATE = e } }
				}
			}
		}
		custom_tooltip = shadowgate.discovery.complete.bypass.answer.tooltip
		hidden_effect = { owner = { set_country_flag = shadowgate_previously_accessed remove_country_flag = shadowgate_transferred set_country_flag = shadowgate_tutorial_bypass } }
		ai_chance = { factor = 0 }
	}
}


##################################################################
# Main Menu
##################################################################
planet_event = {
	id = shadowgate_e.100
	title = shadowgate.main.title
	desc = {
		text = shadowgate.main.firstgreeting
		exclusive_trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_first_settled } }
	}
	desc = {
		text = shadowgate.main.bombardment.greeting
		exclusive_trigger = { has_orbital_bombardment = yes }
	}
	desc = {
		text = shadowgate.main.greeting.access.denied
		exclusive_trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_origin_access_denied } }
	}
	desc = {
		text = shadowgate.main.greeting.1
		trigger = { NOT = { has_planet_flag = shadowgate_still_here } }
	}
	desc = {
		text = shadowgate.main.greeting.2
		trigger = { NOT = { has_planet_flag = shadowgate_still_here } }
	}
	desc = {
		text = shadowgate.main.greeting.3
		trigger = { NOT = { has_planet_flag = shadowgate_still_here } }
	}
	desc = {
		text = shadowgate.main.still.here.1
		trigger = { has_planet_flag = shadowgate_still_here }
	}
	desc = {
		text = shadowgate.main.still.here.2
		trigger = { has_planet_flag = shadowgate_still_here }
	}
	desc = {
		text = shadowgate.main.still.here.3
		trigger = { has_planet_flag = shadowgate_still_here }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	location = this

	trigger = { exists = owner owner = { is_ai = no } }
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		save_event_target_as = shadowgate_planet
		owner = {
			save_event_target_as = shadowgate_owner
			if = { limit = { NOT = { is_variable_set = ShadowgateLodestonesOwned } } set_variable = { which = ShadowgateLodestonesOwned value = 0 } }
		}
		event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } }
		set_shadowgate_accessed = yes
	}
	
	option = {
		name = shadowgate.open.shadowrift
		custom_tooltip = shadowgate.open.shadowrift.tooltip
		allow = {
			hidden_trigger = { NOR = { has_global_flag = shadowgate_opening has_planet_flag = shadowrift_nascent } }
			custom_tooltip = { fail_text = shadowgate_origin_access_denied owner = { NOT = { has_country_flag = shadowgate_origin_access_denied } } }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.queued.tooltip NOT = { has_planet_flag = shadowrift_queued } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.summoning.tooltip NOT = { has_modifier = pm_shadowgate_summoning } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.cooldown.tooltip NOT = { has_modifier = pm_shadowgate_cooldown } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { if = { limit = { is_variable_set = ShadowgateListedCount } clear_variable = ShadowgateListedCount } planet_event = { id = shadowgate_e.101 } set_planet_flag = shadowgate_still_here }
	}
	
	option = {
		name = shadowgate.questions
		custom_tooltip = shadowgate.questions.tooltip
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate_origin_access_denied owner = { NOT = { has_country_flag = shadowgate_origin_access_denied } } }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.400 } set_planet_flag = shadowgate_still_here }
	}

	option = {
		name = shadowgate.questions.special
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.questions.tooltip
		trigger = { event_target:shadowgate_owner = { OR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate_origin_access_denied owner = { NOT = { has_country_flag = shadowgate_origin_access_denied } } }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.400 } set_planet_flag = shadowgate_still_here }
	}

	option = {
		name = shadowgate.functions
		custom_tooltip = shadowgate.functions.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate_origin_access_denied owner = { NOT = { has_country_flag = shadowgate_origin_access_denied } } }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.102 } set_planet_flag = shadowgate_still_here }
	}
	
	option = {
		name = shadowgate.exit
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_shadowgate_accessed = { SHADOWGATE = e }
		}
	}
	
	after = {
		hidden_effect = { event_target:shadowgate_owner = { remove_country_flag = shadowgate_first_settled } }
	}
}

##################################################################
# Shadowrift Menu
##################################################################
planet_event = {
	id = shadowgate_e.101
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.open.shadowrift.desc
				NOR = { has_planet_flag = shadowgate_sp_origin_set has_planet_flag = shadowgate_sp_origin_reset }
			}
			success_text = {
				text = shadowgate.open.shadowrift.origin.changed
				has_planet_flag = shadowgate_sp_origin_set
			}
			success_text = {
				text = shadowgate.open.shadowrift.origin.reset
				has_planet_flag = shadowgate_sp_origin_reset
			}
			success_text = {
				text = shadowgate.open.shadowrift.current.origin
				has_planet_flag = shadowgate_sp_effect
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		random_system = { limit = { has_star_flag = has_shadowrift_e NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_e_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin }
		event_target:shadowgate_owner = {
			if = { limit = { has_country_flag = shadowgate_tutorial_bypass }
				set_country_flag = has_shadow_anchors
			}
			else_if = { limit = { NOT = { has_country_flag = has_shadow_anchors } }
				set_country_flag = shadowgate_seen_shadow_anchors
			}
		}
	}

	option = {
		name = shadowgate.open.shadowrift.systems
		custom_tooltip = shadowgate.open.shadowrift.systems.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			planet_event = { id = shadowgate_e.103 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires
		custom_tooltip = shadowgate.open.shadowrift.empires.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			planet_event = { id = shadowgate_e.107 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.locked
		custom_tooltip = shadowgate.open.shadowrift.anchors.tooltip.dummy
		trigger = { event_target:shadowgate_owner = { NOT = { has_country_flag = has_shadow_anchors } } }
		allow = { custom_tooltip = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } fail_text = shadowgate.open.shadowrift.anchors.locked.tooltip } }
	}
	option = {
		name = shadowgate.open.shadowrift.anchors
		custom_tooltip = shadowgate.open.shadowrift.anchors.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { any_megastructure = { is_megastructure_type = shadow_anchor } fail_text = shadowgate.open.shadowrift.anchors.notfound.tooltip }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			planet_event = { id = shadowgate_e.115 }
		}
	}
	option = {
		name = shadowgate.sp.move.origin
		custom_tooltip = shadowgate.sp.move.origin.tooltip
		trigger = { has_planet_flag = shadowgate_sp_effect has_planet_flag = shadowrift_active exists = event_target:shadowgate_sp_move_origin event_target:shadowgate_origin_system = { NOT = { is_same_value = event_target:shadowgate_sp_move_origin } } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
			event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_e_sp_origin }
			set_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			planet_event = { id = shadowgate_e.101 }
		}
	}
	option = {
		name = shadowgate.sp.reset.origin
		custom_tooltip = shadowgate.sp.reset.origin.tooltip
		trigger = { has_planet_flag = shadowgate_sp_effect solar_system = { NOT = { is_same_value = event_target:shadowgate_origin_system } } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
			solar_system = { set_star_flag = shadowrift_e_sp_origin }
			set_planet_flag = shadowgate_sp_origin_reset
			remove_planet_flag = shadowgate_sp_origin_set
			planet_event = { id = shadowgate_e.101 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.100 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Functions Menu
##################################################################
planet_event = {
	id = shadowgate_e.102
	title = shadowgate.main.title
	desc = shadowgate.functions.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		event_target:shadowgate_owner = {
			if = { limit = { has_country_flag = shadowgate_tutorial_bypass }
				set_country_flag = has_shadow_anchors
			}
			else_if = { limit = { NOT = { has_country_flag = has_shadow_anchors } }
				set_country_flag = shadowgate_seen_shadow_anchors
			}
		}
	}

	option = {
		name = shadowgate.adjustseals
		custom_tooltip = shadowgate.adjustseals.tooltip
		allow = { custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } } }
		hidden_effect = {
			set_planet_flag = shadowgate_function_adjusting_seal
			set_planet_flag = shadowgate_sealing_country
			planet_event = { id = shadowgate_e.107 }
		}
	}

	option = {
		name = shadowgate.anchor.management.locked
		custom_tooltip = shadowgate.anchor.management.tooltip.dummy
		trigger = { event_target:shadowgate_owner = { NOT = { has_country_flag = has_shadow_anchors } } }
		allow = { custom_tooltip = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } fail_text = shadowgate.anchor.management.locked.tooltip } }
	}

	option = {
		name = shadowgate.anchor.management
		custom_tooltip = shadowgate.anchor.management.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } }
		allow = { 
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.119 } }
	}

	option = {
		name = shadowgate.dimensionalshift.locked
		custom_tooltip = shadowgate.dimensionalshift.tooltip.dummy
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = has_dimensional_shift } } }
		allow = { custom_tooltip = { fail_text = shadowgate.functions.notadvanced.tooltip event_target:shadowgate_owner = { has_country_flag = shadowgate_dimensional_shift_unlocked } } }
	}

	option = {
		name = shadowgate.dimensionalshift.locked
		custom_tooltip = shadowgate.dimensionalshift.tooltip.dummy
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_dimensional_shift_unlocked NOT = { has_country_flag = has_dimensional_shift } } }
		allow = { custom_tooltip = { event_target:shadowgate_owner = { has_country_flag = has_dimensional_shift } fail_text = shadowgate.dimensionalshift.locked.tooltip } }
	}

	option = {
		name = shadowgate.dimensionalshift
		custom_tooltip = shadowgate.dimensionalshift.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = has_dimensional_shift } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.summoning.tooltip NOT = { has_modifier = pm_shadowgate_summoning } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.banishing.tooltip NOT = { has_modifier = pm_shadowgate_banishing } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.cooldown.tooltip NOT = { has_modifier = pm_shadowgate_cooldown } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.shadowrift.under.assault.fail NOT = { shadowgate_shadowrift_is_under_assault = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.missing.remnant event_target:shadowgate_owner = { any_system_within_border = { has_star_flag = shadowgate_shadow_remnant starbase = { owner = { is_same_value = event_target:shadowgate_owner } } } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = { save_event_target_as = shadowgate_target_country }
			set_planet_flag = shadowgate_dimensional_shift
			planet_event = { id = shadowgate_e.2005 }
		}
	}

	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.100 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Systems Menu
##################################################################
planet_event = {
	id = shadowgate_e.103
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.systems.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { update_shadowgate_origin_system = { SHADOWGATE = e } }

	option = {
		name = shadowgate.open.shadowrift.systems.galaxy.random
		custom_tooltip = shadowgate.open.shadowrift.systems.galaxy.random.tooltip
		trigger = { any_system = { system_is_valid_random_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { system_is_valid_random_shadowrift_target = yes } save_event_target_as = shadowgate_destination_system }
			set_planet_flag = open_shadowgate_to_random_galactic
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.systems.specific
		custom_tooltip = shadowgate.open.shadowrift.systems.specific.tooltip
		trigger = { any_system = { NOT = { has_star_flag = shadowgate_solar_system } system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.106 } }
	}
	option = {
		name = shadowgate.open.shadowrift.systems.special
		custom_tooltip = shadowgate.open.shadowrift.systems.special.tooltip
		trigger = { OR = { has_global_flag = l_cluster_opened has_planet_flag = shadowgate_vc_effect AND = { exists = event_target:caravaneer_home_system event_target:caravaneer_home_system = { system_is_valid_shadowrift_target = yes } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.104 } }
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = { 
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.101 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Special Galactic Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.104
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.systems.special.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { update_shadowgate_origin_system = { SHADOWGATE = e } }

	option = {
		name = shadowgate.open.shadowrift.systems.special.remnant
		custom_tooltip = shadowgate.open.shadowrift.systems.special.remnant.tooltip
		trigger = { has_planet_flag = shadowgate_vc_effect any_system = { has_star_flag = shadowgate_shadow_remnant event_target:shadowgate_owner = { intel_level = { level > none system = prev } } } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.vc.remnant.fail if = { limit = { has_planet_flag = shadowgate_sp_effect } event_target:shadowgate_origin_system = { OR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant } } } }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.1040 } }
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.tooltip
		trigger = { has_global_flag = l_cluster_opened any_system = { has_star_flag = lcluster system_is_valid_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.105 } }
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.caravaneer
		custom_tooltip = shadowgate.open.shadowrift.systems.special.caravaneer.tooltip
		trigger = { exists = event_target:caravaneer_home_system event_target:caravaneer_home_system = { system_is_valid_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:caravaneer_home_system = { save_event_target_as = shadowgate_destination_system }
			planet_event = { id = shadowgate_e.1000 }
			set_planet_flag = open_shadowgate_to_caravaneer
		}
	}

	option = {
		name = shadowgate.sp.reset.origin
		custom_tooltip = shadowgate.sp.reset.origin.tooltip
		trigger = {
			has_planet_flag = shadowgate_sp_effect
			has_planet_flag = shadowgate_vc_effect
			event_target:shadowgate_origin_system = { NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant } }
		}
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
			solar_system = { set_star_flag = shadowrift_e_sp_origin }
			planet_event = { id = shadowgate_e.104 }
		}
	}
	
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.103 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# L-Cluster Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.105
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.systems.special.lcluster.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { update_shadowgate_origin_system = { SHADOWGATE = e } }
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster.random
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.random.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { system_is_valid_random_shadowrift_target = yes has_star_flag = lcluster NOT = { has_star_flag = lcluster_lgate } } save_event_target_as = shadowgate_destination_system }
			if = { limit = { exists = event_target:shadowgate_destination_system event_target:shadowgate_destination_system = { has_star_flag = lcluster } } set_planet_flag = open_shadowgate_to_lcluster_random }
			else = { random_system = { limit = { has_star_flag = lcluster_lgate } save_event_target_as = shadowgate_destination_system } set_planet_flag = open_shadowgate_to_lcluster }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster.terminalegress
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.terminalegress.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { has_star_flag = lcluster_lgate } save_event_target_as = shadowgate_destination_system }
			set_planet_flag = open_shadowgate_to_lcluster
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.104 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Specific Galactic Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.106
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.specific.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			every_system = { limit = { system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
				add_to_shadowgate_target_list_switch = yes
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_1 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_2 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_3 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_4 = yes
		}
	}

	option = {
		name = shadowgate.open.shadowrift.specific.system1
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_specific
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system2
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_specific
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system3
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_specific
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system4
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_specific
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.next
		custom_tooltip = shadowgate.open.shadowrift.specific.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.106 } }
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.specific.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.106 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.103 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Empire Type Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.107
	title = shadowgate.main.title
	desc = {
		text = shadowgate.open.shadowrift.empires.desc
		trigger = { NOT = { has_planet_flag = shadowgate_sealing_country } }
	}
	desc = {
		text = shadowgate.sealingcountry.desc
		trigger = { has_planet_flag = shadowgate_sealing_country }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		remove_planet_flag = open_shadowgate_to_neutral
		remove_planet_flag = open_shadowgate_to_hostile
		remove_planet_flag = open_shadowgate_to_allied
		remove_planet_flag = open_shadowgate_to_fallenawakened
		remove_planet_flag = open_shadowgate_to_marauder
	}
	
	option = {
		name = shadowgate.open.shadowrift.empires.own
		custom_tooltip = shadowgate.open.shadowrift.empires.own.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_owner = { save_event_target_as = shadowgate_target_country }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				planet_event = { id = shadowgate_e.117 }
			}
			else = { planet_event = { id = shadowgate_e.109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.neutral
		custom_tooltip = shadowgate.open.shadowrift.empires.neutral.tooltip
		trigger = { any_country = { has_communications = event_target:shadowgate_owner is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner shadowgate_is_hidden_country = yes } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_neutral
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.hostile
		custom_tooltip = shadowgate.open.shadowrift.empires.hostile.tooltip
		trigger = {
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal } count_country = { count > 0 limit = { is_at_war_with = event_target:shadowgate_owner NOT = { shadowgate_is_hidden_country = yes } } } }
			else = { OR = { has_crisis = yes count_country = { count > 0 limit = { is_at_war_with = event_target:shadowgate_owner NOT = { shadowgate_is_hidden_country = yes } } } } }
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_hostile
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.allied
		custom_tooltip = shadowgate.open.shadowrift.empires.allied.tooltip
		trigger = { count_country = { count > 0 limit = { is_in_federation_with = event_target:shadowgate_owner NOT = { shadowgate_is_hidden_country = yes } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_allied
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.fallenawakened
		custom_tooltip = shadowgate.open.shadowrift.empires.fallenawakened.tooltip
		trigger = { count_country = { count > 0 limit = { has_communications = event_target:shadowgate_owner NOR = { is_same_value = event_target:shadowgate_owner shadowgate_is_hidden_country = yes } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_fallenawakened
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.marauder
		custom_tooltip = shadowgate.open.shadowrift.empires.marauder.tooltip
		trigger = { count_country = { count > 0 limit = { has_communications = event_target:shadowgate_owner NOR = { is_same_value = event_target:shadowgate_owner shadowgate_is_hidden_country = yes } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_marauder
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					planet_event = { id = shadowgate_e.102 }
				}
				else = { planet_event = { id = shadowgate_e.101 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_sealing_country
			remove_planet_flag = shadowgate_function_adjusting_seal
		}
	}
}

##################################################################
# Empire Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.108
	title = shadowgate.main.title
	desc = {
		text = shadowgate.sealingcountry.desc
		exclusive_trigger = { has_planet_flag = shadowgate_sealing_country }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.neutral.desc
		trigger = { has_planet_flag = open_shadowgate_to_neutral }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.hostile.desc
		trigger = { has_planet_flag = open_shadowgate_to_hostile }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.allied.desc
		trigger = { has_planet_flag = open_shadowgate_to_allied }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.fallenawakened.weak.desc
		trigger = { NOT = { any_country = { NOT = { is_same_value = root.owner } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } relative_power = { who = root.owner value <= equivalent } } } has_planet_flag = open_shadowgate_to_fallenawakened }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.fallenawakened.strong.desc
		trigger = { any_country = { NOT = { is_same_value = root.owner } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } relative_power = { who = root.owner value <= equivalent } } has_planet_flag = open_shadowgate_to_fallenawakened }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.marauder.desc
		trigger = { has_planet_flag = open_shadowgate_to_marauder }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_owner = {
				if = { limit = { root = { has_planet_flag = open_shadowgate_to_neutral } }
					every_relation = { limit = { is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner shadowgate_is_hidden_country = yes } }
						add_to_shadowgate_target_list_switch = yes
					}
				}
				else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_hostile } }
					every_relation = { limit = { NOT = { shadowgate_is_hidden_country = yes } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
						add_to_shadowgate_target_list_switch = yes
					}
				}
				else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_allied } }
					every_federation_ally = { limit = { NOT = { shadowgate_is_hidden_country = yes } } 
						add_to_shadowgate_target_list_switch = yes
					}
				}
				else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_fallenawakened } }
					every_relation = { limit = { NOR = { is_same_value = event_target:shadowgate_owner shadowgate_is_hidden_country = yes } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
						add_to_shadowgate_target_list_switch = yes
					}
				}
				else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_marauder } }
					every_relation = { limit = { NOT = { shadowgate_is_hidden_country = yes } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
						add_to_shadowgate_target_list_switch = yes
					}
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_owner = {
			random_relation = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_relation = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_relation = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_relation = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire1
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				planet_event = { id = shadowgate_e.117 }
			}
			else = { planet_event = { id = shadowgate_e.109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire2
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				planet_event = { id = shadowgate_e.117 }
			}
			else = { planet_event = { id = shadowgate_e.109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire3
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				planet_event = { id = shadowgate_e.117 }
			}
			else = { planet_event = { id = shadowgate_e.109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire4
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				planet_event = { id = shadowgate_e.117 }
			}
			else = { planet_event = { id = shadowgate_e.109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire.next
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire.refresh
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.108 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_country_targets = { SHADOWGATE = e }
			remove_planet_flag = open_shadowgate_to_neutral
			remove_planet_flag = open_shadowgate_to_hostile
			remove_planet_flag = open_shadowgate_to_allied
			remove_planet_flag = open_shadowgate_to_fallenawakened
			remove_planet_flag = open_shadowgate_to_marauder
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.107 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Empire System Type Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.109
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.own.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				event_target:shadowgate_target_country = { is_same_value = event_target:shadowgate_owner }
			}
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.neutral.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				has_planet_flag = open_shadowgate_to_neutral
			}
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.hostile.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				has_planet_flag = open_shadowgate_to_hostile
			}
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.allied.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				has_planet_flag = open_shadowgate_to_allied
			}
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.fallenawakened.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				has_planet_flag = open_shadowgate_to_fallenawakened
			}
			success_text = {
				text = shadowgate.open.shadowrift.empires.select.marauder.desc
				NOT = { has_planet_flag = shadowgate_placing_shadow_anchor }
				has_planet_flag = open_shadowgate_to_marauder
			}
			success_text = {
				text = shadowgate.sealcountry.active.desc
				NOR = {
					has_planet_flag = shadowgate_placing_shadow_anchor
					event_target:shadowgate_target_country = { is_crisis_faction = yes }
				}
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } }
			}
			success_text = {
				text = shadowgate.sealcountry.inactive.desc
				NOR = {
					has_planet_flag = shadowgate_placing_shadow_anchor
					event_target:shadowgate_target_country = { is_crisis_faction = yes }
				}
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value = 0 } }
			}
			success_text = {
				text = shadowgate.placinganchor.desc
				has_planet_flag = shadowgate_placing_shadow_anchor
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		event_target:shadowgate_target_country = {
			if = { limit = { exists = capital_scope } capital_scope = { solar_system = { save_event_target_as = shadowgate_target_country_capital } } }
			else = { random_system_within_border = { save_event_target_as = shadowgate_target_country_capital } }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.empires.random
		custom_tooltip = shadowgate.open.shadowrift.empires.random.tooltip
		trigger = { 
			event_target:shadowgate_target_country = { count_system_within_border = { count >= 3 limit = { system_is_valid_random_shadowrift_target = yes } } }
			NOR = { has_planet_flag = shadowgate_placing_shadow_anchor event_target:shadowgate_target_country = { is_crisis_faction = yes } }
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_country = { random_system_within_border = { limit = { system_is_valid_random_shadowrift_target = yes } save_event_target_as = shadowgate_destination_system } }
			set_planet_flag = open_shadowgate_to_empire_random
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.inhabited
		custom_tooltip = shadowgate.open.shadowrift.empires.inhabited.tooltip
		trigger = { event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes any_system_planet = { is_colony = yes } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes any_system_planet = { is_colony = yes } NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_inhabited
			if = { limit = { event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital }
			planet_event = { id = shadowgate_e.110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.uninhabited
		custom_tooltip = shadowgate.open.shadowrift.empires.uninhabited.tooltip
		trigger = { event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadowgate_hidden_system has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant any_system_planet = { is_colony = yes } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant any_system_planet = { is_colony = yes } } NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_uninhabited
			planet_event = { id = shadowgate_e.110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.assets
		custom_tooltip = shadowgate.open.shadowrift.empires.assets.tooltip
		trigger = {
			event_target:shadowgate_target_country = {
				OR = {
					count_owned_ship = { count > 0 limit = { fleet = { shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } } }
					count_owned_ship = { count > 0 limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } }
					any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } event_target:shadowgate_owner = { intel_level = { system = prev level > low } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes }
				}
			}
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.empires.empire.noassets if = { limit = { has_planet_flag = open_shadowgate_to_asset } event_target:shadowgate_target_country = { OR = { count_owned_ship = { count > 0 limit = { OR = { shadowgate_is_civilian_ship = yes fleet = { shadowgate_is_military_fleet = yes } } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes } } } any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { OR = { count_owned_ship = { count > 0 limit = { OR = { shadowgate_is_civilian_ship = yes fleet = { shadowgate_is_military_fleet = yes } } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_asset
			planet_event = { id = shadowgate_e.111 }
		}
	}
	option = {
		name = shadowgate.adjustseals.specific
		custom_tooltip = shadowgate.adjustseals.specific.tooltip
		trigger = {
			NOR = {
				has_planet_flag = shadowgate_placing_shadow_anchor
				event_target:shadowgate_target_country = { is_crisis_faction = yes }
			}
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_empire_adjusting_seal
			set_planet_flag = shadowgate_sealing_country
			planet_event = { id = shadowgate_e.117 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } planet_event = { id = shadowgate_e.119 } }
				else_if = { limit = { NOR = { has_planet_flag = open_shadowgate_to_neutral has_planet_flag = open_shadowgate_to_hostile has_planet_flag = open_shadowgate_to_allied has_planet_flag = open_shadowgate_to_fallenawakened has_planet_flag = open_shadowgate_to_marauder } }
					planet_event = { id = shadowgate_e.107 }
				}
				else = { planet_event = { id = shadowgate_e.108 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_placing_shadow_anchor
		}
	}
}

##################################################################
# Empire System Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_e.110
	title = shadowgate.main.title
	desc = {
		text = shadowgate.placinganchor.desc
		exclusive_trigger = { has_planet_flag = shadowgate_placing_shadow_anchor }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.select.inhabited.desc
		trigger = { has_planet_flag = open_shadowgate_to_inhabited }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.select.uninhabited.desc
		trigger = { has_planet_flag = open_shadowgate_to_uninhabited }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_target_country = {
				if = { limit = { root = { has_planet_flag = open_shadowgate_to_inhabited } }
					every_system_within_border = { limit = { any_system_planet = { is_colony = yes } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
						add_to_shadowgate_target_list_switch = yes
					}
				}
				else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_uninhabited } }
					every_system_within_border = { limit = { NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
						add_to_shadowgate_target_list_switch = yes
					}
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_target_country = {
			if = { limit = { root = { has_planet_flag = shadowgate_display_inhabited_capital } capital_scope = { solar_system = { listed_as_shadowgate_target = yes } } }
				capital_scope = { solar_system = { list_as_shadowgate_target_1 = yes } }
			}
			else = {
				root = { remove_planet_flag = shadowgate_display_inhabited_capital }
				random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
					list_as_shadowgate_target_1 = yes
				}
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}

	option = {
		name = shadowgate.open.shadowrift.empires.capital
		custom_tooltip = shadowgate.open.shadowrift.empires.capital.tooltip
		trigger = { has_planet_flag = shadowgate_display_inhabited_capital check_variable = { which = ShadowgateListedCount value >= 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system1
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { NOT = { has_planet_flag = shadowgate_display_inhabited_capital } check_variable = { which = ShadowgateListedCount value >= 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			remove_planet_flag = shadowgate_display_inhabited_capital
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system2
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system3
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system4
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system.next
		custom_tooltip = shadowgate.open.shadowrift.empires.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			planet_event = { id = shadowgate_e.110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.empires.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { has_planet_flag = open_shadowgate_to_inhabited event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital }
			planet_event = { id = shadowgate_e.110 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			remove_planet_flag = shadowgate_display_inhabited_capital
			remove_planet_flag = open_shadowgate_to_inhabited
			remove_planet_flag = open_shadowgate_to_uninhabited
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.109 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Asset Selection Menu
##################################################################
planet_event = {
	id = shadowgate_e.111
	title = shadowgate.main.title
	desc = {
		text = shadowgate.placinganchor.desc
		exclusive_trigger = { has_planet_flag = shadowgate_placing_shadow_anchor }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.assets.foreign.desc
		trigger = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
	}
	desc = {
		text = shadowgate.open.shadowrift.empires.assets.own.desc
		trigger = { event_target:shadowgate_owner = { is_same_value = event_target:shadowgate_target_country } }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { update_shadowgate_origin_system = { SHADOWGATE = e } }
	
	option = {
		name = shadowgate.open.shadowrift.fleets
		custom_tooltip = shadowgate.open.shadowrift.fleets.tooltip
		trigger = { event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { fleet = { shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { fleet = { shadowgate_is_military_fleet = yes } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } } }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.112 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships
		custom_tooltip = shadowgate.open.shadowrift.ships.tooltip
		trigger = { event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } } }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.113 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases
		custom_tooltip = shadowgate.open.shadowrift.starbases.tooltip
		trigger = { event_target:shadowgate_target_country = { any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } event_target:shadowgate_owner = { intel_level = { system = prev level > low } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.114 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = open_shadowgate_to_asset
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.109 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Fleet Warp Menu
##################################################################
planet_event = {
	id = shadowgate_e.112
	title = shadowgate.main.title
	desc = {
		text = shadowgate.open.shadowrift.fleets.desc
		trigger = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } }
	}
	desc = {
		text = shadowgate.placinganchor.desc
		trigger = { has_planet_flag = shadowgate_placing_shadow_anchor }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_target_country = {
				every_owned_fleet = { limit = { shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_target_country = {
			random_owned_fleet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_fleet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_owned_fleet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_owned_fleet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet1
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_fleet
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet2
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_fleet
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet3
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_fleet
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet4
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_fleet
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet.next
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.112 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet.refresh
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.112 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_fleet_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.111 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Ship Warp Menu
##################################################################
planet_event = {
	id = shadowgate_e.113
	title = shadowgate.main.title
	desc = {
		text = shadowgate.open.shadowrift.ships.desc
		trigger = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } }
	}
	desc = {
		text = shadowgate.placinganchor.desc
		trigger = { has_planet_flag = shadowgate_placing_shadow_anchor }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_target_country = {
				every_owned_ship = { limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_target_country = {
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.ships.ship1
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_ship
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship2
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_ship
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship3
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_ship
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship4
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_ship
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship.next
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.113 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship.refresh
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.113 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.111 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Starbase Warp Menu
##################################################################
planet_event = {
	id = shadowgate_e.114
	title = shadowgate.main.title
	desc = {
		text = shadowgate.open.shadowrift.starbases.desc
		trigger = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } }
	}
	desc = {
		text = shadowgate.placinganchor.desc
		trigger = { has_planet_flag = shadowgate_placing_shadow_anchor }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_target_country = {
				every_owned_ship = { limit = { OR = { AND = { is_ship_class = shipclass_starbase NOT = { fleet = { is_mobile = yes } } } has_ship_flag = shadowgate_starbase } NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_target_country = {
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_owned_ship = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase1
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_starbase
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase2
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_starbase
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase3
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_starbase
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase4
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_starbase
			if = { limit = { NOT = { has_planet_flag = shadowgate_placing_shadow_anchor } } planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.121 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase.next
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.114 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase.refresh
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.114 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } planet_event = { id = shadowgate_e.109 } }
				else = { planet_event = { id = shadowgate_e.111 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Shadow Anchor Category Menu
##################################################################
planet_event = {
	id = shadowgate_e.115
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.anchors.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = { update_shadowgate_origin_system = { SHADOWGATE = e } }

	option = {
		name = shadowgate.open.shadowrift.anchors.own
		custom_tooltip = shadowgate.open.shadowrift.anchors.own.tooltip
		trigger = { event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = {
				fail_text = shadowgate.open.shadowrift.anchors.missing
				OR = { 
					AND = { NOT = { is_variable_set = ShadowAnchorListType } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 1 } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 2 } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } } } }
				}
			}
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_owned_anchor
			planet_event = { id = shadowgate_e.116 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.foreign
		custom_tooltip = shadowgate.open.shadowrift.anchors.foreign.tooltip
		trigger = { any_megastructure = { is_megastructure_type = shadow_anchor OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = {
				fail_text = shadowgate.open.shadowrift.anchors.missing
				OR = { 
					AND = { NOT = { is_variable_set = ShadowAnchorListType } any_megastructure = { is_megastructure_type = shadow_anchor OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 1 } any_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 2 } any_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
				}
			}
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_foreign_anchor
			planet_event = { id = shadowgate_e.116 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.show.active
		custom_tooltip = shadowgate.open.shadowrift.anchors.show.active.tooltip
		trigger = { NOT = { is_variable_set = ShadowAnchorListType } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_variable = { which = ShadowAnchorListType value = 1 }
			planet_event = { id = shadowgate_e.115 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.show.inactive
		custom_tooltip = shadowgate.open.shadowrift.anchors.show.inactive.tooltip
		trigger = { check_variable = { which = ShadowAnchorListType value = 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_variable = { which = ShadowAnchorListType value = 2 }
			planet_event = { id = shadowgate_e.115 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.show.both
		custom_tooltip = shadowgate.open.shadowrift.anchors.show.both.tooltip
		trigger = { check_variable = { which = ShadowAnchorListType value = 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			clear_variable = ShadowAnchorListType
			planet_event = { id = shadowgate_e.115 }
		}
	}
	option = {
		name = shadowgate.anchor.management
		custom_tooltip = shadowgate.anchor.management.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_summon_shadow_anchor
			planet_event = { id = shadowgate_e.119 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.101 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Shadow Anchor Selection Menu
##################################################################
planet_event = {
	id = shadowgate_e.116
	title = shadowgate.main.title
	desc = {
		text = shadowgate.reclaiminganchor.desc
		exclusive_trigger = { has_planet_flag = shadowgate_reclaiming_anchor }
	}
	desc = {
		text = shadowgate.open.shadowrift.anchors.owned.desc
		trigger = { has_planet_flag = open_shadowgate_to_owned_anchor }
	}
	desc = {
		text = shadowgate.open.shadowrift.anchors.foreign.desc
		trigger = { has_planet_flag = open_shadowgate_to_foreign_anchor }
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			if = { limit = { has_planet_flag = open_shadowgate_to_owned_anchor NOT = { is_variable_set = ShadowAnchorListType } }
				event_target:shadowgate_owner = {
					every_owned_megastructure = { limit = { is_megastructure_type = shadow_anchor }
						solar_system = { add_to_shadowgate_target_list_switch = yes }
					}
				}
			}
			else_if = { limit = { has_planet_flag = open_shadowgate_to_owned_anchor check_variable = { which = ShadowAnchorListType value = 1 } }
				event_target:shadowgate_owner = {
					every_owned_megastructure = { limit = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } }
						solar_system = { add_to_shadowgate_target_list_switch = yes }
					}
				}
			}
			else_if = { limit = { has_planet_flag = open_shadowgate_to_owned_anchor check_variable = { which = ShadowAnchorListType value = 2 } }
				event_target:shadowgate_owner = {
					every_owned_megastructure = { limit = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } }
						solar_system = { add_to_shadowgate_target_list_switch = yes }
					}
				}
			}
			else_if = { limit = { has_planet_flag = open_shadowgate_to_foreign_anchor NOT = { is_variable_set = ShadowAnchorListType } }
				every_megastructure = { limit = { is_megastructure_type = shadow_anchor OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } }
					solar_system = { add_to_shadowgate_target_list_switch = yes }
				}
			}
			else_if = { limit = { has_planet_flag = open_shadowgate_to_foreign_anchor check_variable = { which = ShadowAnchorListType value = 1 } }
				every_megastructure = { limit = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } }
					solar_system = { add_to_shadowgate_target_list_switch = yes }
				}
			}
			else_if = { limit = { has_planet_flag = open_shadowgate_to_foreign_anchor check_variable = { which = ShadowAnchorListType value = 2 } }
				every_megastructure = { limit = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } }
					solar_system = { add_to_shadowgate_target_list_switch = yes }
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_1 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_2 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_3 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_4 = yes
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor1
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_1 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_reclaiming_anchor } } set_planet_flag = open_shadowgate_to_anchor planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.123 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor2
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_2 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_reclaiming_anchor } } set_planet_flag = open_shadowgate_to_anchor planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.123 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor3
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_3 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_reclaiming_anchor } } set_planet_flag = open_shadowgate_to_anchor planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.123 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor4
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_4 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { NOT = { has_planet_flag = shadowgate_reclaiming_anchor } } set_planet_flag = open_shadowgate_to_anchor planet_event = { id = shadowgate_e.1000 } }
			else = { planet_event = { id = shadowgate_e.123 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor.next
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.116 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor.refresh
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.116 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			remove_planet_flag = open_shadowgate_to_owned_anchor
			remove_planet_flag = open_shadowgate_to_foreign_anchor
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_reclaiming_anchor }
					if = { limit = { is_variable_set = ShadowAnchorListTypeMemory } set_variable = { which = ShadowAnchorListType value = ShadowAnchorListTypeMemory } }
					planet_event = { id = shadowgate_e.119 } }
				else = { planet_event = { id = shadowgate_e.115 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_reclaiming_anchor
		}
	}
}

##################################################################
# Amplify/Dampen Country Seal
##################################################################
planet_event = {
	id = shadowgate_e.117
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.sealcountry.desc
				always = yes
			}
			success_text = {
				text = shadowgate.sealcountry.active.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } }
			}
			success_text = {
				text = shadowgate.sealcountry.inactive.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value = 0 } }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	option = {
		name = shadowgate.amplifyseal
		custom_tooltip = shadowgate.amplifyseal.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.maximum event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value < 1000 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.dampened event_target:shadowgate_owner = { NOT = { has_relation_flag = { flag = shadowgate_seal_dampened who = event_target:shadowgate_target_country } } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_amplifying_seal
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.dampenseal
		custom_tooltip = shadowgate.dampenseal.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.minimum event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amplified event_target:shadowgate_owner = { NOT = { has_relation_flag = { flag = shadowgate_seal_amplified who = event_target:shadowgate_target_country } } } }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_dampening_seal
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					if = { limit = { event_target:shadowgate_target_country = { is_same_value = event_target:shadowgate_owner } } planet_event = { id = shadowgate_e.107 } }
					else = { planet_event = { id = shadowgate_e.108 } }
				}
				else_if = { limit = { has_planet_flag = shadowgate_empire_adjusting_seal }
					planet_event = { id = shadowgate_e.109 }
				}
				else = { planet_event = { id = shadowgate_e.108 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_empire_adjusting_seal
			remove_planet_flag = shadowgate_sealing_country
		}
	}
}
##################################################################
# Adjust Country Seal
##################################################################
planet_event = {
	id = shadowgate_e.118
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.sealcountry.desc
				always = yes
			}
			success_text = {
				text = shadowgate.sealcountry.active.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } }
			}
			success_text = {
				text = shadowgate.sealcountry.inactive.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value = 0 } }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	show_sound = shadowgate_seal
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.amplifyseal.great
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_gr_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 900 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_gr }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_gr_p } }
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.amplifyseal.large
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_lg_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 950 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_lg }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_lg_p } }
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.amplifyseal.small
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_sm_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 975 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_sm }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_sm_p } }
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.great
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_gr_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 100 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_gr }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_gr } send_shadowgate_seal_revoked_message = yes }
			}
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.large
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_lg_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 50 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_lg }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_lg } send_shadowgate_seal_revoked_message = yes }
			}
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.small
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_sm_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 25 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_sm }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_sm } send_shadowgate_seal_revoked_message = yes }
			}
			planet_event = { id = shadowgate_e.118 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					if = { limit = { event_target:shadowgate_target_country = { is_same_value = event_target:shadowgate_owner } } planet_event = { id = shadowgate_e.107 } }
					else = { planet_event = { id = shadowgate_e.108 } }
				}
				else_if = { limit = { has_planet_flag = shadowgate_empire_adjusting_seal }
					planet_event = { id = shadowgate_e.109 }
				}
				else = { planet_event = { id = shadowgate_e.108 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_empire_adjusting_seal
			remove_planet_flag = shadowgate_sealing_country
			remove_planet_flag = shadowgate_amplifying_seal
			remove_planet_flag = shadowgate_dampening_seal
		}
	}
}

##################################################################
# Shadow Anchor Management
##################################################################

planet_event = {
	id = shadowgate_e.119
	title = shadowgate.main.title
	desc = shadowgate.anchor.management.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.anchor.management.manufacture
		custom_tooltip = shadowgate.anchor.management.manufacture.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.120 } }
	}

	option = {
		name = shadowgate.anchor.management.dispatch
		custom_tooltip = shadowgate.anchor.management.dispatch.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.missing check_variable = { which = ShadowgateBerthedAnchors value >= 1 } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems event_target:shadowgate_owner = { any_system_within_border = { OR = { has_star_flag = allow_shadow_anchor NOR = { has_star_flag = shadow_anchor has_star_flag = prevent_shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.bombardment NOT = { has_orbital_bombardment = yes } }
		}
		hidden_effect = { event_target:shadowgate_owner = { save_event_target_as = shadowgate_target_country } set_planet_flag = shadowgate_placing_shadow_anchor planet_event = { id = shadowgate_e.109 } }
	}

	option = {
		name = shadowgate.anchor.management.reclaim
		custom_tooltip = shadowgate.anchor.management.reclaim.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.reclaim.fail.missing event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor } } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.bombardment NOT = { has_orbital_bombardment = yes } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_owned_anchor
			set_planet_flag = shadowgate_reclaiming_anchor
			if = { limit = { is_variable_set = ShadowAnchorListType }
				set_variable = { which = ShadowAnchorListTypeMemory value = ShadowAnchorListType }
				clear_variable = ShadowAnchorListType
			}
			planet_event = { id = shadowgate_e.116 }
		}
	}

	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_summon_shadow_anchor } planet_event = { id = shadowgate_e.115 } }
				else = { planet_event = { id = shadowgate_e.102 } }
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = shadowgate_summon_shadow_anchor
		}
	}
}

planet_event = {
	id = shadowgate_e.120
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.anchor.management.manufacture.create.desc
				NOT = { has_planet_flag = shadowgate_anchor_created }
			}
			success_text = {
				text = shadowgate.anchor.management.manufacture.created.desc
				has_planet_flag = shadowgate_anchor_created
			}
			success_text = {
				text = shadowgate.anchor.management.values.desc
				always = yes
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	show_sound = shadowgate_anchor_fabricate
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.anchor.management.manufacture.create
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.anchor.management.manufacture.create.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.lmetal event_target:shadowgate_owner = { has_resource = { type = sr_living_metal amount >= @shadowgate_anchor_cost_lm_p } } }
			custom_tooltip = { fail_text = shadowgate.fail.dl event_target:shadowgate_owner = { check_variable = { which = ShadowgateLodestonesOwned value > 0 } } }
			custom_tooltip = { fail_text = shadowgate.fail.darkmatter event_target:shadowgate_owner = { has_resource = { type = sr_dark_matter amount >= @shadowgate_anchor_cost_dm_p } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { sr_living_metal = @shadowgate_anchor_cost_lm }
				subtract_variable = { which = ShadowgateLodestonesOwned value = 1 }
				add_resource = { sr_dark_matter = @shadowgate_anchor_cost_dm }
			}
			change_variable = { which = ShadowgateBerthedAnchors value = 1 }
			set_planet_flag = shadowgate_anchor_created
			planet_event = { id = shadowgate_e.120 }
		}
	}

	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = shadowgate_anchor_created
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.119 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

planet_event = {
	id = shadowgate_e.121
	title = shadowgate.main.title
	desc = shadowgate.anchor.management.dispatch.planets.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	location = event_target:shadowgate_destination_system
	is_triggered_only = yes

	immediate = {
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_destination_system = {
				every_system_planet = { limit = { OR = { has_planet_flag = allow_shadow_anchor NOR = { has_planet_flag = prevent_shadow_anchor is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes has_planet_flag = has_shadow_anchor has_planet_flag = has_megastructure is_planet_class = pc_habitat has_planet_flag = shadowgate_planet } } }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_destination_system = {
			random_system_planet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_system_planet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_system_planet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_system_planet = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet1
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.122 }
		}
	}
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet2
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.122 }
		}
	}
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet3
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.122 }
		}
	}
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet4
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.122 }
		}
	}
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet.next
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.121 }
		}
	}
	option = {
		name = shadowgate.anchor.management.dispatch.planets.planet.refresh
		custom_tooltip = shadowgate.anchor.management.dispatch.planets.planet.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.121 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_planet_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = open_shadowgate_to_fleet } planet_event = { id = shadowgate_e.112 } }
				else_if = { limit = { has_planet_flag = open_shadowgate_to_ship } planet_event = { id = shadowgate_e.113 } }
				else_if = { limit = { has_planet_flag = open_shadowgate_to_starbase } planet_event = { id = shadowgate_e.114 } }
				else = {
					if = { limit = { has_planet_flag = open_shadowgate_to_inhabited exists = event_target:shadowgate_target_country event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital }
					planet_event = { id = shadowgate_e.110 }
				}
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
			remove_planet_flag = open_shadowgate_to_fleet
			remove_planet_flag = open_shadowgate_to_ship
			remove_planet_flag = open_shadowgate_to_starbase
		}
	}
}

planet_event = {
	id = shadowgate_e.122
	title = shadowgate.main.title
	desc = shadowgate.anchor.management.dispatch.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	show_sound = shadowgate_drone_dispatch
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	location = event_target:shadowgate_destination_system
	is_triggered_only = yes

	option = {
		name = shadowgate.anchor.management.dispatch.confirm
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.anchor.management.dispatch.confirm.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.cost.energy event_target:shadowgate_owner = { has_resource = { type = energy amount >= 2500 } } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.bombardment NOT = { has_orbital_bombardment = yes } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = { add_resource = { energy = -2500 } }
			remove_planet_flag = shadowgate_placing_shadow_anchor
			remove_planet_flag = open_shadowgate_to_inhabited
			remove_planet_flag = open_shadowgate_to_uninhabited
			remove_planet_flag = open_shadowgate_to_asset
			remove_planet_flag = open_shadowgate_to_fleet
			remove_planet_flag = open_shadowgate_to_ship
			remove_planet_flag = open_shadowgate_to_starbase
			event_target:shadowgate_target_planet = { set_planet_flag = shadowgate_anchor_target }
			change_variable = { which = ShadowgateActiveCargoDrones value = 1 }
			subtract_variable = { which = ShadowgateBerthedAnchors value = 1 }
			create_fleet = {
				name = ""
				settings = {
					spawn_debris = no
				}
				effect = {
					set_owner = event_target:shadowgate_global_country
					set_variable = { which = ShadowgateGalaxyNum value = event_target:global_event_country.ShadowgateGalaxyNum }
					set_name = {
						key = "NAME_Shadowgate_Distributor"
						variable_string = "[Root.GetName]"
					}
					create_ship = {
						name = ""
						design = "NAME_Shadowgate_Cargo_Drone"
					}
					set_location = {
						target = root
						distance = 0
						angle = random
					}
					set_fleet_stance = passive
					set_fleet_flag = shadowgate_dispatching_anchor
					set_shadowgate_cargo_drone_owner = { SHADOWGATE = e }
				}
			}
			last_created_fleet = { auto_move_to_planet = { target = event_target:shadowgate_target_planet clear_auto_move_on_arrival = yes } }
			planet_event = { id = shadowgate_e.119 }
		}
	}

	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.121 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

planet_event = {
	id = shadowgate_e.123
	title = shadowgate.main.title
	desc = shadowgate.anchor.management.reclaim.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	show_sound = shadowgate_drone_dispatch
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	location = event_target:shadowgate_destination_system
	is_triggered_only = yes

	option = {
		name = shadowgate.anchor.management.reclaim.confirm
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.anchor.management.reclaim.confirm.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.bombardment NOT = { has_orbital_bombardment = yes } }
		}
		hidden_effect = {
			remove_planet_flag = open_shadowgate_to_owned_anchor
			remove_planet_flag = shadowgate_reclaiming_anchor
			if = { limit = { is_variable_set = ShadowAnchorListTypeMemory } set_variable = { which = ShadowAnchorListType value = ShadowAnchorListTypeMemory } }
			event_target:shadowgate_destination_system = {
				if = { limit = { has_star_flag = active_shadow_anchor } random_system_megastructure = { limit = { is_megastructure_type = shadow_anchor is_upgrading = no } upgrade_megastructure_to = shadow_anchor_toggle } }
				else = { random_system_megastructure = { limit = { is_megastructure_type = shadow_anchor is_upgrading = yes } set_halted = 108000 } }
				random_system_planet = { limit = { has_planet_flag = has_shadow_anchor } set_planet_flag = shadowgate_anchor_target save_event_target_as = shadowgate_reclaim_here }
			}
			change_variable = { which = ShadowgateActiveCargoDrones value = 1 }
			create_fleet = {
				name = ""
				settings = {
					spawn_debris = no
				}
				effect = {
					set_owner = event_target:shadowgate_global_country
					set_variable = { which = ShadowgateGalaxyNum value = event_target:global_event_country.ShadowgateGalaxyNum }
					set_name = {
						key = "NAME_Shadowgate_Reclaimer"
						variable_string = "[Root.GetName]"
					}
					create_ship = {
						name = ""
						design = "NAME_Shadowgate_Cargo_Drone"
					}
					set_location = {
						target = root
						distance = 0
						angle = random
					}
					set_fleet_stance = passive
					set_fleet_flag = shadowgate_reclaiming_anchor
					set_shadowgate_cargo_drone_owner = { SHADOWGATE = e }
				}
			}
			last_created_fleet = { auto_move_to_planet = { target = event_target:shadowgate_reclaim_here clear_auto_move_on_arrival = yes } }
			planet_event = { id = shadowgate_e.119 }
		}
	}

	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.116 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

fleet_event = {
	id = shadowgate_e.124
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		save_event_target_as = shadowanchor_transport_fleet
		if = { limit = { exists = solar_system NOT = { solar_system = { has_star_flag = shadowgate_solar_system } } }
			if = { limit = { NOT = { has_fleet_flag = shadowgate_cargo_order_complete } OR = { has_fleet_flag = shadowgate_dispatching_anchor solar_system = { has_star_flag = inactive_shadow_anchor } } }
				set_fleet_flag = shadowgate_cargo_order_complete
				solar_system = { save_event_target_as = shadowanchor_solar_system random_system_planet = { limit = { has_planet_flag = shadowgate_anchor_target } remove_planet_flag = shadowgate_anchor_target save_event_target_as = shadowgate_anchor_target } }
				switch = {
					trigger = has_fleet_flag
					shadowgate_dispatching_anchor = {
						solar_system = {
							if = { limit = { exists = space_owner } spawn_megastructure = { type = shadow_anchor owner = space_owner planet = event_target:shadowgate_anchor_target } }
							else = { spawn_megastructure = { type = shadow_anchor planet = event_target:shadowgate_anchor_target } }
							random_system_megastructure = { limit = { is_megastructure_type = shadow_anchor } upgrade_megastructure_to = shadow_anchor_toggle }
						}
					}
					shadowgate_reclaiming_anchor = {
						solar_system = {
							random_system_megastructure = { limit = { is_megastructure_type = shadow_anchor } remove_megastructure = this }
							remove_star_flag = shadow_anchor
							remove_star_flag = active_shadow_anchor
							remove_star_flag = inactive_shadow_anchor
							random_system_planet = { limit = { has_planet_flag = has_shadow_anchor } remove_planet_flag = has_shadow_anchor }
						}
					}
				}
				set_timed_fleet_flag = { flag = shadowgate_cargo_drone_waiting days = 3 }
				fleet_event = { id = shadowgate_e.126 days = 3 }
			}
			else = { set_fleet_flag = shadowgate_reclaiming_anchor_delayed }
		}
		else = {
			solar_system = { random_system_planet = { limit = { is_planet_class = pc_shadowgate } save_event_target_as = shadowgate_drone_planet } }
			if = { limit = { exists = event_target:shadowgate_drone_planet }
				if = { limit = { has_fleet_flag = shadowgate_reclaiming_anchor } event_target:shadowgate_drone_planet = { change_variable = { which = ShadowgateBerthedAnchors value = 1 } planet_event = { id = shadowgate_galactic.315 } } }
				delete_fleet = this
				event_target:shadowgate_drone_planet = {
					if = { limit = { check_variable = { which = ShadowgateActiveCargoDrones value = 1 } } clear_variable = ShadowgateActiveCargoDrones }
					else = { subtract_variable = { which = ShadowgateActiveCargoDrones value = 1 } }
				}
			}
		}
	}
}

country_event = {
	id = shadowgate_e.125
	hide_window = yes
	is_triggered_only = yes

	trigger = { from = { is_megastructure_type = shadow_anchor_toggle } fromfrom = { any_ship_in_system = { fleet = { has_fleet_flag = shadowgate_reclaiming_anchor_delayed } } } }

	immediate = {
		fromfrom = {
			random_fleet_in_system = { limit = { has_fleet_flag = shadowgate_reclaiming_anchor_delayed }
				remove_fleet_flag = shadowgate_reclaiming_anchor_delayed
				fleet_event = { id = shadowgate_e.124 }
			}
		}
	}
}

fleet_event = {
	id = shadowgate_e.126
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { exists = event_target:shadowgate_planet_e }
			auto_move_to_planet = { target = event_target:shadowgate_planet_e clear_auto_move_on_arrival = yes }
		}
		else = {
			remove_fleet_flag = shadowgate_e
			closest_system = { limit = { has_star_flag = shadowgate_solar_system NOT = { any_system_planet = { has_modifier = pm_shadowgate_dimensional_shift } } }
				random_system_planet = { limit = { has_planet_flag = shadowgate_planet }
					save_event_target_as = shadowgate_missing_drone_target
					switch = {
						trigger = has_planet_flag
						shadowgate_a = { root = { set_fleet_flag = shadowgate_a } }
						shadowgate_b = { root = { set_fleet_flag = shadowgate_b } }
						shadowgate_c = { root = { set_fleet_flag = shadowgate_c } }
						shadowgate_d = { root = { set_fleet_flag = shadowgate_d } }
						shadowgate_e = { root = { set_fleet_flag = shadowgate_e } }
					}
					change_variable = { which = ShadowgateActiveCargoDrones value = 1 }
				}
			}
			if = { limit = { exists = event_target:shadowgate_missing_drone_target } auto_move_to_planet = { target = event_target:shadowgate_missing_drone_target clear_auto_move_on_arrival = yes } }
			else = { delete_fleet = this }
		}
	}
}

##################################################################
# Empire Communication Events
##################################################################
planet_event = {
	id = shadowgate_e.300
	title = shadowgate.empire.trespass.title
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } } }
		text = shadowgate.empire.trespass.again.fallen.desc
	}
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } is_country_type = default NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind } } }
		text = shadowgate.empire.trespass.again.1.desc
	}
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } is_country_type = default NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind } } }
		text = shadowgate.empire.trespass.again.2.desc
	}
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } is_country_type = default NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind } } }
		text = shadowgate.empire.trespass.again.3.desc
	}
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } has_authority = auth_machine_intelligence } }
		text = shadowgate.empire.trespass.again.machine.desc
	}
	desc = {
		exclusive_trigger = { event_target:shadowgate_trespassed_empire = { has_relation_flag = { flag = shadowrift_trespassed who = root.owner } has_authority = auth_hive_mind } }
		text = shadowgate.empire.trespass.again.hivemind.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } has_ethic = ethic_fanatic_materialist } }
		text = shadowgate.empire.trespass.fallen.materialist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.empire.trespass.fallen.spiritualist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } has_ethic = ethic_fanatic_xenophobe } }
		text = shadowgate.empire.trespass.fallen.xenophobe.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } has_ethic = ethic_fanatic_xenophile } }
		text = shadowgate.empire.trespass.fallen.xenophile.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_materialist } }
		text = shadowgate.empire.trespass.default.materialist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.empire.trespass.default.spiritualist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_xenophobe } }
		text = shadowgate.empire.trespass.default.xenophobe.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_xenophile } }
		text = shadowgate.empire.trespass.default.xenophile.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_pacifist } }
		text = shadowgate.empire.trespass.default.pacifist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_militarist } }
		text = shadowgate.empire.trespass.default.militarist.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_authoritarian } }
		text = shadowgate.empire.trespass.default.authoritarian.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { is_country_type = default has_ethic = ethic_fanatic_egalitarian } }
		text = shadowgate.empire.trespass.default.egalitarian.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { has_authority = auth_machine_intelligence } }
		text = shadowgate.empire.trespass.default.machine.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { has_authority = auth_hive_mind } }
		text = shadowgate.empire.trespass.default.hivemind.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind has_ethic = ethic_fanatic_materialist has_ethic = ethic_fanatic_spiritualist has_ethic = ethic_fanatic_xenophobe has_ethic = ethic_fanatic_xenophile has_ethic = ethic_fanatic_pacifist has_ethic = ethic_fanatic_militarist has_ethic = ethic_fanatic_authoritarian has_ethic = ethic_fanatic_egalitarian } } }
		text = shadowgate.empire.trespass.default.generic.1.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind has_ethic = ethic_fanatic_materialist has_ethic = ethic_fanatic_spiritualist has_ethic = ethic_fanatic_xenophobe has_ethic = ethic_fanatic_xenophile has_ethic = ethic_fanatic_pacifist has_ethic = ethic_fanatic_militarist has_ethic = ethic_fanatic_authoritarian has_ethic = ethic_fanatic_egalitarian } } }
		text = shadowgate.empire.trespass.default.generic.2.desc
	}
	desc = {
		trigger = { event_target:shadowgate_trespassed_empire = { NOR = { has_authority = auth_machine_intelligence has_authority = auth_hive_mind has_ethic = ethic_fanatic_materialist has_ethic = ethic_fanatic_spiritualist has_ethic = ethic_fanatic_xenophobe has_ethic = ethic_fanatic_xenophile has_ethic = ethic_fanatic_pacifist has_ethic = ethic_fanatic_militarist has_ethic = ethic_fanatic_authoritarian has_ethic = ethic_fanatic_egalitarian } } }
		text = shadowgate.empire.trespass.default.generic.3.desc
	}
	picture_event_data = {
		portrait = event_target:shadowgate_trespassed_empire
		planet_background = event_target:shadowgate_trespassed_empire
		graphical_culture = event_target:shadowgate_trespassed_empire
		city_level = event_target:shadowgate_trespassed_empire
		room = event_target:shadowgate_trespassed_empire.ruler
	}
	is_triggered_only = yes
	location = event_target:shadowgate_violated_system
	
	diplomatic = yes

	trigger = { has_planet_flag = shadowrift_active }

	immediate = {
		if = { limit = { event_target:shadowgate_trespassed_empire = { NOT = { is_at_war_with = root.owner } shadowgate_is_fe = yes OR = { has_ethic = ethic_fanatic_materialist has_ethic = ethic_fanatic_spiritualist has_relation_flag = { flag = shadowrift_trespassed who = root.owner } } } }
			owner = { set_country_flag = shadowgate_fe_confronted }
			solar_system = { add_claims = { who = event_target:shadowgate_trespassed_empire num_of_claims = 5 show_notification = yes } }
			event_target:shadowgate_trespassed_empire = {
				declare_war = { target = root.owner attacker_war_goal = wg_conquest }
			}
		}
	}

	option = {
		name = shadowgate.empire.trespass.vicious.answer
		custom_tooltip = shadowgate.empire.trespass.vicious.answer.tooltip
		default_hide_option = yes
		hidden_effect = { event_target:shadowgate_violated_system = { run_shadowrift_hostile_ai_fleet_effect = yes } }
	}
	option = {
		name = shadowgate.empire.trespass.apologize.answer
		custom_gui = "shadowgate_option_banish"
		custom_tooltip = shadowgate.empire.trespass.apologize.answer.tooltip
		allow = { hidden_trigger = { has_planet_flag = shadowrift_active NOT = { has_modifier = pm_shadowgate_banishing } } }
		hidden_effect = { 
			if = { limit = { NOT = { has_planet_flag = shadowgate_dup_open } } banish_active_shadowrift = { SHADOWGATE = e } }
			else = {
				event_target:shadowgate_violated_system = { save_event_target_as = shadowrift_vd_rift_system }
				planet_event = { id = shadowgate_galactic.230 }
			}
		}
	}
	after = {
		hidden_effect = {
			event_target:shadowgate_trespassed_empire = { add_opinion_modifier = { modifier = shadowrift_trespass who = root.owner } set_relation_flag = { flag = shadowrift_trespassed who = root.owner } }
			owner = { save_event_target_as = shadowgate_trespasser }
			planet_event = { id = shadowgate_e.301 days = 30 }
		}
	}
}

planet_event = {
	id = shadowgate_e.301
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { 
		event_target:shadowgate_violated_system = {
			has_any_shadowrift_respect_owner = yes
			event_target:shadowgate_trespassed_empire = { has_closed_borders = root.owner NOT = { is_at_war_with = root.owner } }
		}
		NOT = { has_modifier = pm_shadowgate_banishing }
		owner = { is_same_value = event_target:shadowgate_trespasser }
	}
	
	immediate = {
		event_target:shadowgate_trespassed_empire = { add_opinion_modifier = { modifier = shadowrift_trespass who = root.owner } }
		planet_event = { id = shadowgate_e.301 days = 30 }
	}
}

planet_event = {
	id = shadowgate_e.310
	title = shadowgate.threaten.title
	desc = {
		trigger = { event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_materialist } }
		text = shadowgate.threaten.materialist.desc
	}
	desc = {
		trigger = { owner = { NOT = { has_authority = auth_machine_intelligence } } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.threaten.spiritualist.regular.desc
	}
	desc = {
		trigger = { owner = { has_authority = auth_machine_intelligence } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.threaten.spiritualist.machine.desc
	}
	picture_event_data = {
		portrait = event_target:shadowgate_fe_threat
		planet_background = event_target:shadowgate_fe_threat
		graphical_culture = event_target:shadowgate_fe_threat
		city_level = event_target:shadowgate_fe_threat
		room = event_target:shadowgate_fe_threat.ruler
	}
	is_triggered_only = yes
	
	diplomatic = yes

	immediate = { owner = { set_country_flag = shadowgate_fe_confronted } }

	option = {
		name = {
			text = shadowgate.threaten.materialist.1
			trigger = { event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_materialist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.1
			trigger = { owner = { NOT = { has_authority = auth_machine_intelligence } } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.machine.1
			trigger = { owner = { has_authority = auth_machine_intelligence } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		hidden_effect = { owner = { set_country_flag = shadowgate_fe_insulted } }
	}
	option = {
		name = {
			text = shadowgate.threaten.materialist.2
			trigger = { event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_materialist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.2
			trigger = { owner = { NOT = { has_authority = auth_machine_intelligence } } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.machine.2
			trigger = { owner = { has_authority = auth_machine_intelligence } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		hidden_effect = { owner = { set_country_flag = shadowgate_fe_dodged } }
	}
	option = {
		name = {
			text = shadowgate.threaten.materialist.3
			trigger = { event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_materialist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.3
			trigger = { owner = { NOT = { has_authority = auth_machine_intelligence } } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		name = {
			text = shadowgate.threaten.spiritualist.machine.3
			trigger = { owner = { has_authority = auth_machine_intelligence } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		}
		custom_tooltip = shadowgate.threaten.3.tooltip
		hidden_effect = {
			solar_system = { add_claims = { who = event_target:shadowgate_fe_threat num_of_claims = 5 show_notification = yes } }
			event_target:shadowgate_fe_threat = {
				declare_war = { target = root.owner attacker_war_goal = wg_conquest }
			}
		}
	}
	after = {
		hidden_effect = {
			if = { limit = { NOT = { event_target:shadowgate_fe_threat = { is_at_war_with = root.owner } } } owner = { country_event = { id = shadowgate_e.311 } } }
		}
	}
}

country_event = {
	id = shadowgate_e.311
	title = shadowgate.threaten.title
	desc = {
		trigger = { event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_materialist } }
		text = shadowgate.threaten.monitor.materialist.desc
	}
	desc = {
		trigger = { NOT = { has_authority = auth_machine_intelligence } event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.threaten.monitor.spiritualist.regular.desc
	}
	desc = {
		trigger = { has_authority = auth_machine_intelligence event_target:shadowgate_fe_threat = { has_ethic = ethic_fanatic_spiritualist } }
		text = shadowgate.threaten.monitor.spiritualist.machine.desc
	}
	picture_event_data = {
		portrait = event_target:shadowgate_fe_threat
		planet_background = event_target:shadowgate_fe_threat
		graphical_culture = event_target:shadowgate_fe_threat
		city_level = event_target:shadowgate_fe_threat
		room = event_target:shadowgate_fe_threat.ruler
	}
	is_triggered_only = yes
	
	diplomatic = yes

	immediate = {
		if = { limit = { has_country_flag = shadowgate_fe_dodged } event_target:shadowgate_fe_threat = { add_opinion_modifier = { who = root modifier = shadowgate_fe_insult } } }
		else_if = { limit = { has_country_flag = shadowgate_fe_insulted } while = { count = 2 event_target:shadowgate_fe_threat = { add_opinion_modifier = { who = root modifier = shadowgate_fe_insult } } } }
	}

	option = {
		name = shadowgate.threaten.monitor.answer
		trigger = { has_country_flag = shadowgate_fe_dodged }
		add_modifier = { modifier = shadowgate_fe_monitor days = 3600 }
		hidden_effect = { event_target:shadowgate_fe_threat = { set_timed_relation_flag = { flag = shadowgate_fe_monitor who = root days = 3600 } } }
	}
	option = {
		name = shadowgate.threaten.monitor.answer
		trigger = { has_country_flag = shadowgate_fe_insulted }
		add_modifier = { modifier = shadowgate_fe_monitor days = 7200 }
		hidden_effect = { event_target:shadowgate_fe_threat = { set_timed_relation_flag = { flag = shadowgate_fe_monitor who = root days = 7200 } } }
	}
	after = {
		hidden_effect = {
			remove_country_flag = shadowgate_fe_dodged
			remove_country_flag = shadowgate_fe_insulted
			remove_global_flag = shadowgate_fe_confrontation
		}
	}
}

planet_event = {
	id = shadowgate_e.312
	title = shadowgate.threaten.title
	desc = shadowgate.threaten.war.desc
	picture_event_data = {
		portrait = event_target:shadowgate_fe_threat
		planet_background = event_target:shadowgate_fe_threat
		graphical_culture = event_target:shadowgate_fe_threat
		city_level = event_target:shadowgate_fe_threat
		room = event_target:shadowgate_fe_threat.ruler
	}
	is_triggered_only = yes
	
	diplomatic = yes

	immediate = {
		solar_system = { add_claims = { who = event_target:shadowgate_fe_threat num_of_claims = 5 show_notification = yes } }
		event_target:shadowgate_fe_threat = {
			remove_relation_flag = { flag = shadowgate_fe_monitor who = root.owner }
			declare_war = { target = root.owner attacker_war_goal = wg_conquest }
		}
	}

	option = {
		name = shadowgate.threaten.war.answer
		hidden_effect = { remove_modifier = shadowgate_fe_monitor }
	}

	after = {
		hidden_effect = { remove_global_flag = shadowgate_fe_confrontation }
	}
}

##################################################################
# Question Events
##################################################################
planet_event = {
	id = shadowgate_e.400
	title = shadowgate.main.title
	desc = shadowgate.questions.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		if = { limit = { NOT = { exists = event_target:shadowgate_owner } exists = owner }
			owner = { save_event_target_as = shadowgate_owner }
		}
		event_target:shadowgate_owner = {
			leader = {
				species = {
					save_event_target_as = shadowgate_leader_species
				}
			}
		}
	}
	
	option = {
		name = shadowgate.questions.ask.shadowanchors
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_seen_shadow_anchors NOT = { has_country_flag = has_shadow_anchors } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.401 }
		}
	}

	option = {
		name = {
			trigger = { event_target:shadowgate_owner = { NOT = { has_country_flag = shadowgate_asked_about_unique } } }
			text = shadowgate.questions.ask.unique.1
		}
		name = {
			trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_asked_about_unique } }
			text = shadowgate.questions.ask.unique.2
		}
		trigger = { NOT = { has_global_flag = shadowgate_unique_opened } event_target:shadowgate_owner = { has_country_flag = shadowgate_seen_unique } has_global_flag = shadowgate_unique_spawned }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.402 }
			owner = {
				if = { limit = { NOT = { has_country_flag = shadowgate_asked_about_unique } } set_country_flag = shadowgate_ask_unique_1 }
				else = { set_country_flag = shadowgate_ask_unique_2 }
				set_country_flag = shadowgate_asked_about_unique
			}
		}
	}

	option = {
		name = shadowgate.questions.ask.dimensionalshift
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_dimensional_shift_unlocked NOT = { has_country_flag = has_dimensional_shift } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.403 }
			event_target:shadowgate_owner = { set_country_flag = shadowgate_ask_dimensional_shift }
		}
	}
	
	option = {
		name = shadowgate.questions.ask.whobuilt
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.whobuilt
	}
	
	option = {
		name = shadowgate.questions.ask.shadowgate
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.shadowgate
	}

	option = {
		name = shadowgate.questions.ask.details
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.details
	}

	option = {
		name = shadowgate.questions.ask.contact
		trigger = { event_target:shadowgate_owner = { NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.contact
	}

	option = {
		name = shadowgate.questions.ask.materialist
		trigger = { event_target:shadowgate_owner = { has_ethic = ethic_fanatic_materialist NOR = { has_ascension_perk = ap_transcendence has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.materialist
	}

	option = {
		name = shadowgate.questions.ask.spiritualist
		trigger = { event_target:shadowgate_owner = { has_ethic = ethic_fanatic_spiritualist NOR = { has_ascension_perk = ap_transcendence has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.spiritualist
	}

	option = {
		name = shadowgate.questions.ask.militarist
		trigger = { event_target:shadowgate_owner = { has_ethic = ethic_fanatic_militarist NOR = { has_ascension_perk = ap_transcendence has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.militarist
	}

	option = {
		name = shadowgate.questions.ask.pacifist
		trigger = { event_target:shadowgate_owner = { has_ethic = ethic_fanatic_pacifist NOR = { has_ascension_perk = ap_transcendence has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.pacifist
	}

	option = {
		name = shadowgate.questions.ask.machine
		trigger = { event_target:shadowgate_owner = { is_machine_empire = yes NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.machine
	}

	option = {
		name = shadowgate.questions.ask.hivemind
		trigger = { event_target:shadowgate_owner = { OR = { is_hive_empire = yes has_ascension_perk = ap_transcendence } NOR = { has_country_flag = shadowgate_seen_shadow_anchors has_country_flag = shadowgate_dimensional_shift_unlocked has_country_flag = shadowgate_seen_unique } } }
		is_dialog_only = yes
		response_text = shadowgate.questions.response.hivemind
	}
	
	option = {
		name = shadowgate.thatsall
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.100 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

planet_event = {
	id = shadowgate_e.401
	title = shadowgate.main.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.questions.shadowanchors.desc
				event_target:shadowgate_owner = { NOT = { has_country_flag = has_shadow_anchors } }
			}
			success_text = {
				event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors }
				text = shadowgate.questions.shadowanchors.build.desc
			}
			success_text = {
				event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors }
				any_megastructure = { is_megastructure_type = shadow_anchor }
				text = shadowgate.questions.shadowanchors.build.detected.desc
			}
			success_text = {
				event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors }
				text = shadowgate.questions.shadowanchors.build.end.desc
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	option = {
		name = shadowgate.questions.ask.shadowanchors.build
		trigger = { event_target:shadowgate_owner = { NOT = { has_country_flag = has_shadow_anchors } } }
		hidden_effect = {
			event_target:shadowgate_owner = { set_country_flag = has_shadow_anchors }
			planet_event = { id = shadowgate_e.401 }
		}
	}
	
	option = {
		name = shadowgate.questions.shadowanchors.excellent
		custom_tooltip = shadowgate.questions.shadowanchors.excellent.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = has_shadow_anchors } }
		hidden_effect = {
			event_target:shadowgate_owner = { set_country_flag = shadowgate_dl_knowledge remove_country_flag = shadowgate_seen_shadow_anchors }
			planet_event = { id = shadowgate_e.400 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		trigger = { event_target:shadowgate_owner = { NOT = { has_country_flag = has_shadow_anchors } } }
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.400 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}
planet_event = {
	id = shadowgate_e.402
	title = shadowgate.main.title
	desc = {
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_ask_unique_1 } }
		text = shadowgate.questions.unique.1.desc
	}
	desc = {
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_ask_unique_2 } }
		text = shadowgate.questions.unique.2.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_seen_unique } }
	
	option = {
		name = shadowgate.questions.unique.breakseal
		custom_tooltip = shadowgate.questions.unique.breakseal.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= 250 } } }
		}
		hidden_effect = {
			set_global_flag = shadowgate_unique_opened
			event_target:shadowgate_owner = {
				remove_country_flag = shadowgate_asked_about_unique
				remove_country_flag = shadowgate_seen_unique
				add_resource = { influence = -250 }
			}
			random_system = { limit = { has_star_flag = shadowgate_unique_system }
				remove_star_flag = shadowgate_unique_system_sealed
			}
			planet_event = { id = shadowgate_e.400 }
		}
	}
	
	option = {
		name = shadowgate.questions.unique.leaveseal
		custom_tooltip = shadowgate.questions.unique.leaveseal.tooltip
		default_hide_option = yes
		hidden_effect = {
			planet_event = { id = shadowgate_e.400 }
		}
	}
	
	after = {
		hidden_effect = {
			event_target:shadowgate_owner = {
				remove_country_flag = shadowgate_ask_unique_1
				remove_country_flag = shadowgate_ask_unique_2
			}
		}
	}
}
planet_event = {
	id = shadowgate_e.403
	title = shadowgate.main.title
	desc = shadowgate.questions.dimensionalshift.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	option = {
		name = shadowgate.questions.dimensionalshift.thanks
		custom_tooltip = shadowgate.questions.dimensionalshift.thanks.tooltip
		trigger = { event_target:shadowgate_owner = { has_country_flag = shadowgate_ask_dimensional_shift } }
		hidden_effect = {
			planet_event = { id = shadowgate_e.400 }
			event_target:shadowgate_owner = {
				set_country_flag = has_dimensional_shift
				remove_country_flag = shadowgate_dimensional_shift_unlocked
				remove_country_flag = shadowgate_ask_dimensional_shift
			}
		}
	}
}

##################################################################
# Shadowgate Disabled
##################################################################

planet_event = {
	id = shadowgate_e.500
	title = shadowgate.main.title
	desc = shadowgate.main.disabled
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai_disabled
		room = "shadowgate_disabled_room"
	}
	is_triggered_only = yes

	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		owner = { save_event_target_as = shadowgate_owner }
		set_shadowgate_accessed = yes
	}

	option = {
		name = shadowgate.shadowrift.disabled
		custom_tooltip = shadowgate.error.all
		allow = { hidden_trigger = { always = no } }
	}

	option = {
		name = shadowgate.questions.disabled
		custom_tooltip = shadowgate.error.all
		allow = { hidden_trigger = { always = no } }
	}

	option = {
		name = shadowgate.functions.disabled
		custom_tooltip = shadowgate.error.all
		allow = { hidden_trigger = { always = no } }
	}

	option = {
		name = shadowgate.exit
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_shadowgate_accessed = { SHADOWGATE = e }
		}
	}
}

##################################################################
# AI Summoning
##################################################################

# Summon a shadowrift from an AI owned shadowgate.
planet_event = {
	id = shadowgate_e.600
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = owner owner = { is_ai = yes } }

	immediate = {
		if = { limit = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } } owner = { save_event_target_as = shadowgate_owner } }
		else = { event_target:shadowgate_ap_owner = { save_event_target_as = shadowgate_owner } }
		if = { limit = { NOT = { has_planet_flag = shadowgate_sp_origin_set } } solar_system = { save_event_target_as = shadowgate_destination_system } }
		if = { limit = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } event_target:shadowgate_owner = { has_country_flag = has_dimensional_shift NOT = { any_system_within_border = { NOT = { is_same_value = root.solar_system } any_system_planet = { is_colony = yes } distance = { source = root.solar_system type = hyperlane max_jumps <= 4 } } } any_system_within_border = { has_star_flag = shadowgate_shadow_remnant NOT = { has_star_flag = shadowgate_target_remnant } prev = { any_system_within_border = { NOT = { is_same_value = root.solar_system } any_system_planet = { is_colony = yes } distance = { source = prevprev type = hyperlane max_jumps <= 4 } } } } } }
			save_event_target_as = shadowgate_target_remnant
			event_target:shadowgate_owner = {
				random_system_within_border = { limit = { has_star_flag = shadowgate_shadow_remnant NOT = { has_star_flag = shadowgate_target_remnant } prev = { any_system_within_border = { NOT = { is_same_value = root.solar_system } any_system_planet = { is_colony = yes } distance = { source = prevprev type = hyperlane max_jumps <= 4 } } } }
					set_timed_star_flag = { flag = shadowgate_target_remnant days = @shadowgate_ds_time }
					random_system_planet = { limit = { has_planet_flag = shadowgate_shadow_remnant } save_event_target_as = shadowgate_target_remnant }
				}
			}
			if = { limit = { event_target:shadowgate_target_remnant = { NOT = { is_same_value = root } } }
				solar_system = {
					create_ambient_object = { type = umbral_remnant location = star scale = @shadowgate_ds_scale entity_offset_height = @shadowgate_ds_offset use_3d_location = yes }
					last_created_ambient_object = { set_ambient_object_flag = dimensional_shift_priming }
					create_ambient_object = { type = blue_sun_grow_particle_object location = star use_3d_location = yes scale = @shadowgate_ds_explosion_scale entity_offset_height = @shadowgate_ds_explosion_offset duration = 10 }
				}
				remove_active_shadowrift = { SHADOWGATE = e }
				planet_event = { id = shadowgate_e.2001 days = @shadowgate_ds_time }
				add_modifier = { modifier = pm_shadowgate_dimensional_shift days = @shadowgate_ds_time }
			}
		}
		else = {
			if = { limit = { event_target:shadowgate_owner = { NOT = { shadowgate_is_fe = yes } } }
				update_shadowgate_origin_system = { SHADOWGATE = e }
				random_list = {
					2 = { modifier = { factor = 0 OR = { has_planet_flag = shadowgate_sp_origin_set has_planet_flag = shadowgate_ashen_pilgrimage AND = { NOT = { has_planet_flag = shadowgate_rch_effect } check_variable_arithmetic = { which = ShadowgateRP subtract = ShadowgateRPMin value < 300 } } } } }
					1 = { modifier = { factor = 0 OR = { has_planet_flag = shadowgate_sp_origin_set has_planet_flag = shadowgate_ashen_pilgrimage AND = { NOT = { has_planet_flag = shadowgate_rch_effect } check_variable_arithmetic = { which = ShadowgateRP subtract = ShadowgateRPMin value < 200 } } } } }
					1 = { modifier = { factor = 0 OR = { has_planet_flag = shadowgate_sp_origin_set has_planet_flag = shadowgate_ashen_pilgrimage AND = { NOT = { has_planet_flag = shadowgate_rch_effect } check_variable_arithmetic = { which = ShadowgateRP subtract = ShadowgateRPMin value < 100 } } } } }
					1 = {
						if = { limit = { exists = event_target:shadowgate_origin_system }
							event_target:shadowgate_owner = {
								if = { limit = { is_at_war = no }
									if = { limit = { any_system_within_border = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes } }
										random_list = {
											2 = { random_system_within_border = { limit = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes any_system_planet = { is_colony = yes } } save_event_target_as = shadowgate_destination_system } }
											4 = { random_system_within_border = { limit = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes starbase = { has_starbase_size >= starbase_starport } } save_event_target_as = shadowgate_destination_system } }
											3 = { random_system_within_border = { limit = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes has_star_flag = active_shadow_anchor } save_event_target_as = shadowgate_destination_system } }
											2 = { random_system_within_border = { limit = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes any_neighbor_system = { exists = space_owner space_owner = { is_rival = event_target:shadowgate_owner } } } evaluate_shadowgate_ai_destination = yes } }
											3 = { modifier = { factor = 0 OR = { NOT = { root = { has_planet_flag = shadowgate_vc_effect } } root = { has_planet_flag = shadowgate_sp_origin_set } NOT = { any_system_within_border = { has_star_flag = shadowgate_shadow_remnant } } } }
												random_system_within_border = { limit = { has_star_flag = shadowgate_shadow_remnant NOR = { has_star_flag = shadowgate_target_remnant has_any_shadowrift = yes } } save_event_target_as = shadowgate_destination_system }
											}
										}
									}
								}
								else = {
									random_country = { limit = { check_variable = { which = ShadowgateSeal value = 0 } is_at_war_with = event_target:shadowgate_owner } save_event_target_as = shadowgate_ai_enemy }
									if = { limit = { exists = event_target:shadowgate_ai_enemy event_target:shadowgate_ai_enemy = { NOT = { has_relic = r_shadowgate_crwt_active } relative_power = { who = event_target:shadowgate_owner category = fleet value <= equivalent } } }
										if = { limit = { event_target:shadowgate_ai_enemy = { any_system_within_border = { system_is_valid_random_shadowrift_target = yes any_ship_in_system = { owner = { is_same_value = event_target:shadowgate_owner } } } } }
											event_target:shadowgate_ai_enemy = { random_system_within_border = { limit = { system_is_valid_random_shadowrift_target = yes OR = { any_ship_in_system = { owner = { is_same_value = event_target:shadowgate_owner } } any_neighbor_system = { any_ship_in_system = { owner = { is_same_value = event_target:shadowgate_owner } } } } } evaluate_shadowgate_ai_destination = yes } }
										}
										else_if = { limit = { any_system_within_border = { any_neighbor_system = { system_is_valid_random_shadowrift_target = yes NOT = { any_ship_in_system = { owner = { is_at_war_with = event_target:shadowgate_owner } } } } any_ship_in_system = { owner = { is_at_war_with = event_target:shadowgate_owner } } } }
											random_system_within_border = { limit = { any_neighbor_system = { system_is_valid_random_shadowrift_target = yes NOT = { any_ship_in_system = { owner = { is_at_war_with = event_target:shadowgate_owner } } } } any_ship_in_system = { owner = { is_at_war_with = event_target:shadowgate_owner } } }
												random_neighbor_system = { limit = { system_is_valid_random_shadowrift_target = yes NOT = { any_ship_in_system = { owner = { is_at_war_with = event_target:shadowgate_owner } } } } evaluate_shadowgate_ai_destination = yes }
											}
										}
										else_if = { limit = { any_owned_fleet = { shadowgate_is_military_fleet = yes fleet_power > 1000 distance = { source = event_target:shadowgate_origin_system type = hyperlane max_jumps = 3 } } }
											random_list = {
												1 = { event_target:shadowgate_ai_enemy = { random_system_within_border = { limit = { system_is_valid_random_shadowrift_target = yes OR = { is_bottleneck_system = yes is_bridge = yes } } evaluate_shadowgate_ai_destination = yes } } }
												1 = { event_target:shadowgate_ai_enemy = { random_system_within_border = { limit = { has_star_flag = active_shadow_anchor system_is_valid_random_shadowrift_target = yes } evaluate_shadowgate_ai_destination = yes } } }
												1 = { event_target:shadowgate_ai_enemy = { random_system_within_border = { limit = { system_is_valid_random_shadowrift_target = yes starbase = { OR = { has_starbase_size = starbase_outpost has_starbase_size = starbase_fe_outpost } } } evaluate_shadowgate_ai_destination = yes } } }
												2 = { modifier = { factor = 0 OR = { NOT = { root = { has_planet_flag = shadowgate_vc_effect } } root = { has_planet_flag = shadowgate_sp_origin_set } NOT = { event_target:shadowgate_ai_enemy = { any_system_within_border = { has_star_flag = shadowgate_shadow_remnant } } } } }
													event_target:shadowgate_ai_enemy = { random_system_within_border = { limit = { has_star_flag = shadowgate_shadow_remnant NOR = { has_star_flag = shadowgate_target_remnant has_any_shadowrift = yes } } save_event_target_as = shadowgate_destination_system } }
												}
											}
										}
										else = {
											random_list = {
												1 = { random_owned_fleet = { limit = { shadowgate_is_military_fleet = yes fleet_power > 1000 exists = solar_system solar_system = { system_is_valid_random_shadowrift_target = yes distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps >= 5 } } } solar_system = { evaluate_shadowgate_ai_destination = yes } } }
												1 = { random_system_within_border = { limit = { starbase = { has_starbase_size >= starbase_starport } system_is_valid_random_shadowrift_target = yes } evaluate_shadowgate_ai_destination = yes } }
											}
										}
									}
									else = {
										random_list = {
											1 = { random_owned_fleet = { limit = { shadowgate_is_military_fleet = yes fleet_power > 1000 exists = solar_system solar_system = { system_is_valid_random_shadowrift_target = yes } distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps >= 5 } } solar_system = { evaluate_shadowgate_ai_destination = yes } } }
											1 = { random_system_within_border = { limit = { starbase = { has_starbase_size >= starbase_starport } system_is_valid_random_shadowrift_target = yes } evaluate_shadowgate_ai_destination = yes } }
										}
									}
								}
							}
						}
					}
				}
				if = { limit = { OR = { NOT = { exists = event_target:shadowgate_destination_system } exists = event_target:shadowgate_destination_system event_target:shadowgate_destination_system = { has_star_flag = shadowgate_solar_system } } }
					event_target:shadowgate_owner = { random_system_within_border = { limit = { distance = { source = event_target:shadowgate_origin_system type = hyperlane min_jumps > 3 } system_is_valid_random_shadowrift_target = yes } evaluate_shadowgate_ai_destination = yes } }
				}
				if = { limit = { all_shadowgate_event_targets_exist = yes check_variable = { which = ShadowgateRP value < 1000 } }
					if = { limit = { has_planet_flag = shadowgate_sp_effect NOT = { has_planet_flag = shadowgate_sp_origin_set } event_target:shadowgate_destination_system = { OR = { is_same_value = event_target:shadowgate_origin_system NOT = { has_star_flag = shadowgate_shadow_remnant } } } }
						set_timed_planet_flag = { flag = shadowgate_sp_origin_set days = 1 }
						event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
						event_target:shadowgate_destination_system = {
							set_star_flag = shadowrift_e_sp_origin
							save_event_target_as = shadowgate_origin_system
						}
						planet_event = { id = shadowgate_e.600 }
					}
					else_if = { limit = { event_target:shadowgate_origin_system = { NOT = { is_same_value = event_target:shadowgate_destination_system } } }
						calculate_shadowgate_rift_costs = yes
						if = { limit = { OR = { NOT = { has_planet_flag = shadowgate_rch_effect } AND = { has_planet_flag = shadowgate_rch_effect check_variable = { which = ShadowgateRPProjected value >= ShadowgateRPMin } } } }
							if = { limit = { OR = { event_target:shadowgate_destination_system = { has_star_flag = shadowgate_shadow_remnant } system_has_active_shadow_anchor = yes } } set_planet_flag = valid_shadow_anchor_target }
							summon_shadowrift = { SHADOWGATE = e }
						}
					}
				}
			}
			else_if = { limit = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } }
				if = { limit = { has_planet_flag = shadowrift_active NOT = { has_modifier = pm_shadowgate_banishing } }
					banish_active_shadowrift = { SHADOWGATE = e }
				}
			}
		}
	}
}

##################################################################
# Shadowrift Summoning Final Confirmation
##################################################################
planet_event = {
	id = shadowgate_e.1000
	title = shadowgate.main.title
	desc = {
		trigger = {
			if = { limit = { NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only } }
				success_text = { text = shadowgate.open.shadowrift.cost.desc }
				# -Origin-
				if = { limit = { has_planet_flag = shadowgate_sp_effect }
					success_text = { event_target:shadowgate_origin_system = { has_star_flag = shadowgate_solar_system } text = shadowgate.open.shadowrift.origin.sp.default.desc }
					success_text = { event_target:shadowgate_origin_system = { NOT = { has_star_flag = shadowgate_solar_system } } text = shadowgate.open.shadowrift.origin.sp.chosen.desc }
				}
				# -Destination-
				if = { limit = { NOR = { event_target:shadowgate_destination_system = { has_star_flag = shadowgate_solar_system } system_has_active_shadow_anchor = yes system_has_shadow_remnant = yes has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_adjacent } }
					success_text = { OR = { has_planet_flag = open_shadowgate_to_caravaneer has_planet_flag = open_shadowgate_to_lcluster has_planet_flag = open_shadowgate_to_specific has_planet_flag = open_shadowgate_to_anchor } text = shadowgate.open.shadowrift.cost.default.desc }
					success_text = { has_planet_flag = open_shadowgate_to_fleet text = shadowgate.open.shadowrift.cost.fleet.desc }
					success_text = { has_planet_flag = open_shadowgate_to_ship text = shadowgate.open.shadowrift.cost.ship.desc }
					success_text = { has_planet_flag = open_shadowgate_to_starbase text = shadowgate.open.shadowrift.cost.starbase.desc }
					success_text = { OR = { has_planet_flag = open_shadowgate_to_inhabited has_planet_flag = open_shadowgate_to_uninhabited } text = shadowgate.open.shadowrift.cost.empire.desc }
				}
				else_if = { limit = { OR = { system_has_active_shadow_anchor = yes system_has_shadow_remnant = yes } }
					success_text = { NOT = { system_has_shadow_remnant = yes } system_has_active_shadow_anchor = yes text = shadowgate.open.shadowrift.cost.anchor.desc }
					success_text = { system_has_shadow_remnant = yes text = shadowgate.open.shadowrift.cost.remnant.desc }
				}
				else_if = { limit = { NOR = { event_target:shadowgate_destination_system = { has_star_flag = shadowgate_solar_system } has_planet_flag = open_shadowgate_to_adjacent } }
					success_text = { has_planet_flag = open_shadowgate_to_random_galactic text = shadowgate.open.shadowrift.cost.random.galactic.desc }
					success_text = { has_planet_flag = open_shadowgate_to_lcluster_random text = shadowgate.open.shadowrift.cost.random.lcluster.desc }
					success_text = { has_planet_flag = open_shadowgate_to_empire_random text = shadowgate.open.shadowrift.cost.random.empire.desc }
				}
				else = {
					success_text = { text = shadowgate.open.shadowrift.cost.default.desc }
				}
				# -System Access Level-
				if = { limit = { event_target:shadowgate_destination_system = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } } }
					if = { limit = { OR = { has_planet_flag = open_shadowgate_to_random_galactic event_target:shadowgate_owner = { intel_level = { level <= medium system = event_target:shadowgate_destination_system } } } }
						success_text = { text = shadowgate.open.shadowrift.cost.borders.unknown.desc }
					}
					else = { success_text = { text = shadowgate.open.shadowrift.cost.borders.unclaimed.desc } }
				}
				else = {
					if = { limit = { event_target:shadowgate_destination_system = { space_owner = { is_same_value = event_target:shadowgate_owner } } } success_text = { text = shadowgate.open.shadowrift.cost.borders.owned.desc } }
					else = {
						if = { limit = { event_target:shadowgate_destination_system = { space_owner = { OR = { is_hostile = event_target:shadowgate_owner is_country_type = dormant_marauders } } } } success_text = { text = shadowgate.open.shadowrift.cost.borders.hostile.desc } }
						else = {
							success_text = { event_target:shadowgate_destination_system = { space_owner = { has_closed_borders = event_target:shadowgate_owner NOT = { is_country_type = caravaneer_home } } } text = shadowgate.open.shadowrift.cost.borders.closed.desc }
							success_text = { event_target:shadowgate_destination_system = { space_owner = { OR = { NOT = { has_closed_borders = event_target:shadowgate_owner } is_country_type = caravaneer_home } } } text = shadowgate.open.shadowrift.cost.borders.open.desc }
						}
					}
				}
				# -Stabilization-
				if = { limit = { NOT = { system_has_shadow_remnant = yes } OR = { system_has_active_shadow_anchor = yes AND = { has_planet_flag = shadowgate_dup_effect NOT = { has_planet_flag = shadowgate_dup_off } } } }
					success_text = { system_has_active_shadow_anchor = yes text = shadowgate.open.shadowrift.cost.time.anchor.desc }
					success_text = { NOT = { system_has_active_shadow_anchor = yes } text = shadowgate.open.shadowrift.cost.time.dup.desc }
				}
				else = {
					success_text = { num_districts = { type = district_spectral_projection_array value = 0 } text = shadowgate.open.shadowrift.cost.time.0.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 1 } text = shadowgate.open.shadowrift.cost.time.1.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 2 } text = shadowgate.open.shadowrift.cost.time.2.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 3 } text = shadowgate.open.shadowrift.cost.time.3.desc }
				}
				# -Ruinous Potency-
				success_text = { text = shadowgate.open.shadowrift.cost.rp.desc }
				# -Cooldown-
				if = { limit = { NOR = { system_has_shadow_remnant = yes system_has_active_shadow_anchor = yes } has_planet_flag = shadowgate_dup_effect NOT = { has_planet_flag = shadowgate_dup_off } }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 0 } text = shadowgate.open.shadowrift.cost.cooldown.0.dup.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } text = shadowgate.open.shadowrift.cost.cooldown.1.dup.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } text = shadowgate.open.shadowrift.cost.cooldown.2.dup.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } text = shadowgate.open.shadowrift.cost.cooldown.3.dup.desc }
				}
				else = {
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 0 } text = shadowgate.open.shadowrift.cost.cooldown.0.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } text = shadowgate.open.shadowrift.cost.cooldown.1.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } text = shadowgate.open.shadowrift.cost.cooldown.2.desc }
					success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } text = shadowgate.open.shadowrift.cost.cooldown.3.desc }
				}
				# -Warnings-
				if = { limit = { event_target:shadowgate_destination_system = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } has_communications = event_target:shadowgate_owner } } }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { shadowgate_is_fe = yes } } text = shadowgate.open.shadowrift.cost.fe.warning.desc }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { shadowgate_is_ae = yes } } text = shadowgate.open.shadowrift.cost.ae.warning.desc }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } } } text = shadowgate.open.shadowrift.cost.marauder.warning.desc }
				}
				success_text = { event_target:shadowgate_destination_system = { OR = { any_system_planet = { is_planet_class = pc_pulsar } has_modifier = space_storm has_modifier = turbulent_nebula } } text = shadowgate.open.shadowrift.cost.shield.warning.desc }
			}
			# -Special-
			else = {
				success_text = { text = shadowgate.dimensionalshift.final has_planet_flag = shadowgate_dimensional_shift }
				success_text = { text = shadowgate.open.shadowrift.cost.error has_planet_flag = shadowgate_summon_dialog_only }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	show_sound = shadowgate_windup
	picture_event_data = {
		portrait = shadowgate_ai_charged
		room = "shadowgate_charged_room"
	}
	is_triggered_only = yes

	immediate = {
		if = { limit = { NOT = { exists = event_target:shadowgate_target_country } event_target:shadowgate_destination_system = { exists = space_owner } }
			event_target:shadowgate_destination_system = { space_owner = { save_event_target_as = shadowgate_target_country } }
		}
		if = { limit = { NOT = { has_planet_flag = shadowgate_dimensional_shift } }
			if = { limit = { OR = { event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes } event_target:shadowgate_destination_system = { OR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } } } }
				set_planet_flag = shadowgate_summon_dialog_only
				event_target:shadowgate_origin_system = {
					if = { limit = { shadowgate_antiresonant_void_check = yes }
						random_system = { limit = { distance = { source = prev max_jumps <= 5 } exists = space_owner space_owner = { is_country_type = ai_empire } OR = { has_star_flag = AI_hub has_star_flag = AI_lair } any_system_planet = { is_planet_class = pc_ai } }
							save_event_target_as = shadowgate_void_zone_origin
						}
						if = { limit = { NOT = { exists = event_target:shadowgate_void_zone_origin } } event_target:shadowgate_origin_system = { save_event_target_as = shadowgate_void_zone_origin } }
						save_event_target_as = shadowgate_void_zone_system
					}
				}
				event_target:shadowgate_destination_system = {
					if = { limit = { shadowgate_antiresonant_void_check = yes }
						random_system = { limit = { distance = { source = prev max_jumps <= 5 } exists = space_owner space_owner = { is_country_type = ai_empire } OR = { has_star_flag = AI_hub has_star_flag = AI_lair } any_system_planet = { is_planet_class = pc_ai } }
							save_event_target_as = shadowgate_void_zone_origin
						}
						if = { limit = { NOT = { exists = event_target:shadowgate_void_zone_origin } } event_target:shadowgate_destination_system = { save_event_target_as = shadowgate_void_zone_origin } }
						save_event_target_as = shadowgate_void_zone_system
					}
				}
			}
			else = { remove_planet_flag = shadowgate_summon_dialog_only }
		}
		update_shadowgate_origin_system = { SHADOWGATE = e }
		calculate_shadowgate_rift_costs = yes
		if = { limit = { has_planet_flag = shadowgate_dup_effect NOR = { has_planet_flag = shadowgate_dup_off system_has_shadow_remnant = yes system_has_active_shadow_anchor = yes } }
			remove_planet_flag = shadowgate_rp_notified
			send_shadowgate_ruinous_potency_message = yes
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.cost
		custom_gui = "shadowgate_option_summon"
		custom_tooltip = shadowgate.open.shadowrift.cost.tooltip
		trigger = {
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowrift_active }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			OR = { system_has_shadow_remnant = yes NOT = { system_has_active_shadow_anchor = yes } }
		}
		allow = {
			if = { limit = { NOT = { system_has_shadow_remnant = yes } } shadowgate_summon_normal_allow_check = yes }
			else = { shadowgate_summon_remnant_allow_check = yes }
		}
		hidden_effect = {
			remove_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			summon_shadowrift = { SHADOWGATE = e }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.cost.queue
		custom_gui = "shadowgate_option_banish"
		custom_tooltip = shadowgate.open.shadowrift.cost.queue.tooltip
		trigger = {
			has_planet_flag = shadowrift_active
			NOT = { has_planet_flag = shadowgate_dimensional_shift }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			OR = { system_has_shadow_remnant = yes NOT = { system_has_active_shadow_anchor = yes } }
		}
		allow = {
			if = { limit = { NOT = { system_has_shadow_remnant = yes } } shadowgate_summon_normal_allow_check = yes }
			else = { shadowgate_summon_remnant_allow_check = yes }
		}
		hidden_effect = {
			remove_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			summon_shadowrift = { SHADOWGATE = e }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.cost.anchor
		custom_gui = "shadowgate_option_summon"
		custom_tooltip = shadowgate.open.shadowrift.cost.anchor.tooltip
		trigger = {
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowrift_active }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			system_has_active_shadow_anchor = yes
		}
		allow = { shadowgate_summon_anchor_allow_check = yes }
		hidden_effect = {
			set_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			summon_shadowrift = { SHADOWGATE = e }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.cost.anchor.queue
		custom_gui = "shadowgate_option_banish"
		custom_tooltip = shadowgate.open.shadowrift.cost.anchor.queue.tooltip
		trigger = {
			has_planet_flag = shadowrift_active
			NOT = { has_planet_flag = shadowgate_dimensional_shift }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			system_has_active_shadow_anchor = yes
		}
		allow = { shadowgate_summon_anchor_allow_check = yes }
		hidden_effect = {
			set_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			summon_shadowrift = { SHADOWGATE = e }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.cost.dimensionalseal
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.open.shadowrift.cost.dimensionalseal.tooltip
		trigger = {
			NOR = {
				event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes }
				event_target:shadowgate_destination_system = { shadowgate_antiresonant_void_check = yes }
			}
			event_target:shadowgate_destination_system = { has_star_flag = shadowgate_unique_system_sealed }
		}
		is_dialog_only = yes
		response_text = shadowgate.open.shadowrift.cost.dimensionalseal.response
	}
	option = {
		name = shadowgate.ai.crisis
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ai.crisis.tooltip
		trigger = {
			OR = {
				event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes }
				event_target:shadowgate_destination_system = { shadowgate_antiresonant_void_check = yes }
			}
		}
		is_dialog_only = yes
		response_text = shadowgate.ai.crisis.response
	}
	option = {
		name = shadowgate.ds.cost 
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ds.cost.tooltip
		trigger = { has_planet_flag = shadowgate_dimensional_shift NOT = { has_planet_flag = shadowgate_summon_dialog_only } }
		allow = {
			custom_tooltip = {
				fail_text = shadowgate.fail.zro
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } has_resource = { type = sr_zro amount >= @shadowgate_ds_cost_zr_p } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.dl
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } check_variable = { which = ShadowgateLodestonesOwned value > 0 } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.darkmatter
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } has_resource = { type = sr_dark_matter amount >= @shadowgate_ds_cost_dm_p } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.error.all
				NOT = { shadowgate_is_disabled = yes }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.ownership
				is_current_shadowgate_owner = yes
			}
			custom_tooltip = {
				fail_text = shadowgate.ds.fail.rift.active
				NOT = { has_planet_flag = shadowrift_active }
			}
			custom_tooltip = {
				fail_text = shadowgate.anchor.management.fail.activedrone.ds
				NOT = { is_variable_set = ShadowgateActiveCargoDrones }
			}
			custom_tooltip = {
				fail_text = shadowgate.shadowrift.under.assault.fail
				NOT = { shadowgate_shadowrift_is_under_assault = yes }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.blocked
				all_shadowgate_event_targets_exist = yes
				event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowgate_blocked_system } }
			}
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.2000 }
		}
	}
	option = {
		name = shadowgate.adjacent.systems
		custom_tooltip = shadowgate.adjacent.systems.tooltip
		trigger = { NOR = { has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = shadowgate_dimensional_shift } event_target:shadowgate_destination_system = { any_neighbor_system = { exists = this has_hyperlane_to = prev system_is_valid_shadowrift_target = yes } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_adjacent
			planet_event = { id = shadowgate_e.1050 }
		}
	}
	option = {
		name = shadowgate.sp.set.origin
		custom_tooltip = shadowgate.sp.set.origin.tooltip
		trigger = {
			has_planet_flag = shadowgate_sp_effect
			event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_e_sp_origin } }
			NOR = { has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only }
		}
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
			event_target:shadowgate_destination_system = { set_star_flag = shadowrift_e_sp_origin }
			set_planet_flag = shadowgate_sp_origin_set
			planet_event = { id = shadowgate_e.101 }
			remove_planet_flag = open_shadowgate_to_neutral
			remove_planet_flag = open_shadowgate_to_hostile
			remove_planet_flag = open_shadowgate_to_allied
			remove_planet_flag = open_shadowgate_to_fallenawakened
			remove_planet_flag = open_shadowgate_to_marauder
			remove_planet_flag = open_shadowgate_to_inhabited
			remove_planet_flag = open_shadowgate_to_uninhabited
			remove_planet_flag = open_shadowgate_to_owned_anchor
			remove_planet_flag = open_shadowgate_to_foreign_anchor
			remove_planet_flag = open_shadowgate_to_specific
			remove_planet_flag = open_shadowgate_to_adjacent
			remove_planet_flag = open_shadowgate_to_random_galactic
			remove_planet_flag = open_shadowgate_to_remnant
			remove_planet_flag = open_shadowgate_to_caravaneer
			remove_planet_flag = open_shadowgate_to_lcluster
			remove_planet_flag = open_shadowgate_to_lcluster_random
			remove_planet_flag = open_shadowgate_to_empire_random
			remove_planet_flag = open_shadowgate_to_asset
			remove_planet_flag = open_shadowgate_to_fleet
			remove_planet_flag = open_shadowgate_to_ship
			remove_planet_flag = open_shadowgate_to_starbase
			remove_planet_flag = open_shadowgate_to_anchor
		}
	}
	option = {
		name = shadowgate.sp.reset.origin
		custom_tooltip = shadowgate.sp.reset.origin.tooltip
		trigger = {
			has_planet_flag = shadowgate_sp_effect
			solar_system = { NOR = { is_same_value = event_target:shadowgate_origin_system is_same_value = event_target:shadowgate_destination_system } }
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only }
		}
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_special_function
			event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin }
			solar_system = { set_star_flag = shadowrift_e_sp_origin }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.dup.toggle
		custom_tooltip = shadowgate.dup.toggle.tooltip
		trigger = { has_planet_flag = shadowgate_dup_effect NOR = { system_has_active_shadow_anchor = yes system_has_shadow_remnant = yes has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_dup_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_special_function
			if = { limit = { has_planet_flag = shadowgate_dup_off } remove_planet_flag = shadowgate_dup_off }
			else = { set_planet_flag = shadowgate_dup_off }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = shadowgate_summon_dialog_only
			remove_planet_flag = shadowgate_special_function
			if = { limit = { is_current_shadowgate_owner = yes }
				switch = {
					trigger = has_planet_flag
					default = { planet_event = { id = shadowgate_e.100 } }
					open_shadowgate_to_random_galactic = { planet_event = { id = shadowgate_e.103 } }
					open_shadowgate_to_remnant = { planet_event = { id = shadowgate_e.1040 } }
					open_shadowgate_to_caravaneer = { planet_event = { id = shadowgate_e.104 } }
					open_shadowgate_to_lcluster = { planet_event = { id = shadowgate_e.105 } }
					open_shadowgate_to_lcluster_random = { planet_event = { id = shadowgate_e.105 } }
					open_shadowgate_to_specific = { planet_event = { id = shadowgate_e.106 } }
					open_shadowgate_to_empire = { planet_event = { id = shadowgate_e.109 } }
					open_shadowgate_to_empire_random = { planet_event = { id = shadowgate_e.109 } }
					open_shadowgate_to_inhabited = { if = { limit = { event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital } planet_event = { id = shadowgate_e.110 } }
					open_shadowgate_to_uninhabited = { planet_event = { id = shadowgate_e.110 } }
					open_shadowgate_to_fleet = { planet_event = { id = shadowgate_e.112 } }
					open_shadowgate_to_ship = { planet_event = { id = shadowgate_e.113 } }
					open_shadowgate_to_starbase = { planet_event = { id = shadowgate_e.114 } }
					open_shadowgate_to_anchor = { planet_event = { id = shadowgate_e.116 } }
					shadowgate_dimensional_shift = { planet_event = { id = shadowgate_e.2005 } }
				}
				remove_planet_flag = open_shadowgate_to_specific
				remove_planet_flag = open_shadowgate_to_adjacent
				remove_planet_flag = open_shadowgate_to_random_galactic
				remove_planet_flag = open_shadowgate_to_remnant
				remove_planet_flag = open_shadowgate_to_caravaneer
				remove_planet_flag = open_shadowgate_to_lcluster
				remove_planet_flag = open_shadowgate_to_lcluster_random
				remove_planet_flag = open_shadowgate_to_empire_random
				remove_planet_flag = open_shadowgate_to_asset
				remove_planet_flag = open_shadowgate_to_fleet
				remove_planet_flag = open_shadowgate_to_ship
				remove_planet_flag = open_shadowgate_to_starbase
				remove_planet_flag = open_shadowgate_to_anchor
			}
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
	option = {
		name = shadowgate.exit
		custom_gui = "shadowgate_option_back"
		hidden_effect = {
			remove_shadowgate_accessed = { SHADOWGATE = e }
		}
	}
	after = {
		hidden_effect = {
			if = { limit = { NOT = { has_global_flag = shadowgate_unique_opened } event_target:shadowgate_destination_system = { has_star_flag = shadowgate_unique_system_sealed } } event_target:shadowgate_owner = { set_country_flag = shadowgate_seen_unique } }
			if = { limit = { NOR = { has_planet_flag = shadowgate_special_function has_planet_flag = shadowgate_summon_dialog_only has_planet_flag = open_shadowgate_to_adjacent } }
				remove_planet_flag = open_shadowgate_to_specific
				remove_planet_flag = open_shadowgate_to_random_galactic
				remove_planet_flag = open_shadowgate_to_remnant
				remove_planet_flag = open_shadowgate_to_caravaneer
				remove_planet_flag = open_shadowgate_to_lcluster
				remove_planet_flag = open_shadowgate_to_lcluster_random
				remove_planet_flag = open_shadowgate_to_empire_random
				remove_planet_flag = open_shadowgate_to_asset
				remove_planet_flag = open_shadowgate_to_fleet
				remove_planet_flag = open_shadowgate_to_ship
				remove_planet_flag = open_shadowgate_to_starbase
				remove_planet_flag = open_shadowgate_to_anchor
				if = { limit = { is_variable_set = ShadowgateSMRPChange } clear_variable = ShadowgateSMRPChange }
				if = { limit = { is_variable_set = ShadowgateEtherCost } clear_variable = ShadowgateEtherCost }
				if = { limit = { is_variable_set = ShadowgateSMEtherCost } clear_variable = ShadowgateSMEtherCost }
				if = { limit = { is_variable_set = ShadowgateRPProjected } clear_variable = ShadowgateRPProjected }
				if = { limit = { is_variable_set = ShadowgateEtherProjected } clear_variable =  ShadowgateEtherProjected }
			}
		}
	}
}

##################################################################
# Shadowrift Main Creation
##################################################################

planet_event = {
	id = shadowgate_e.1001
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		save_event_target_as = shadowgate_planet
		if = { limit = { exists = owner } owner = { remove_country_flag = shadowgate_force_destabilization } }
		if = { limit = { has_global_flag = shadowgate_opening } planet_event = { id = shadowgate_e.1001 days = 1 } }
		else = {
			event_target:shadowrift_queued_origin_e = { save_event_target_as = shadowgate_origin_system }
			if = { limit = { has_planet_flag = shadowgate_sp_effect }
				event_target:shadowgate_origin_system = {
					if = { limit = { prev = { has_planet_flag = shadowrift_active } has_any_shadowrift_respect_owner = yes } random_system_planet = { limit = { has_planet_flag = has_shadowrift } set_timed_planet_flag = { flag = shadowgate_sp_origin days = 1 } } }
					else = { random_system_planet = { limit = { OR = { has_planet_flag = shadowgate_planet is_available_target_for_shadowrift = yes } } set_timed_planet_flag = { flag = shadowgate_sp_origin days = 1 } } }
				}
			}
			if = { limit = { has_planet_flag = shadowgate_sm_effect has_planet_flag = shadowrift_active exists = owner }
				owner = { every_system_within_border = { limit = { has_star_flag = active_shadow_anchor has_star_flag = has_shadowrift_e has_star_flag = has_shadow_mooring_rift } set_timed_star_flag = { flag = shadowrift_recently_moored days = 1 } } }
			}
			event_target:shadowrift_queued_terminus_e = { save_event_target_as = shadowgate_destination_system }
			if = {
				limit = {
					event_target:shadowgate_origin_system = {
						if = { limit = { prev = { has_planet_flag = shadowrift_queued } } has_star_flag = shadowrift_queued }
						shadowgate_system_is_not_sealed = yes
						OR = { NOT = { has_any_shadowrift = yes } has_any_shadowrift_respect_owner = yes }
					}
					event_target:shadowgate_destination_system = {
						if = { limit = { prev = { has_planet_flag = shadowrift_queued } } has_star_flag = shadowrift_queued }
						shadowgate_system_is_not_sealed = yes
						OR = { NOT = { has_any_shadowrift = yes } has_any_shadowrift_respect_owner = yes }
					}
				}
				event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_queued }
				event_target:shadowgate_destination_system = { remove_star_flag = shadowrift_queued }
				if = { limit = { all_shadowgate_event_targets_exist = yes }
					remove_active_shadowrift = { SHADOWGATE = e }
					shadowgate_sous_passive_effect = yes
					if = { limit = { has_planet_flag = shadowrift_queued }
						if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage exists = event_target:shadowgate_ap_queued_summoner } clear_global_event_target = shadowgate_ap_queued_summoner }
						remove_planet_flag = shadowrift_queued
						event_target:shadowgate_owner = {
							create_message = {
								type = MESSAGE_TYPE_SHADOWRIFT_QUEUED_CAST
								localization = MESSAGE_SHADOWRIFT_QUEUED_CAST
								days = 90
								target = event_target:shadowgate_destination_system
								variable = {
									type = name
									localization = ORIGIN
									scope = event_target:shadowgate_origin_system
								}
								variable = {
									type = name
									localization = DESTINATION
									scope = event_target:shadowgate_destination_system
								}
								variable = {
									type = name
									localization = SHADOWGATE
									scope = root
								}
							}
						}
					}
					if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage } event_target:shadowgate_owner = { save_global_event_target_as = shadowgate_ap_last_summoner } }
					set_timed_global_flag = { flag = shadowgate_opening days = 1 }
					set_timed_planet_flag = { flag = shadowgate_opening days = 1 }
					if = { limit = { has_planet_flag = shadowgate_dup_effect NOR = { has_planet_flag = shadowgate_dup_off system_has_shadow_remnant = yes system_has_active_shadow_anchor = yes } }
						set_planet_flag = shadowgate_dup_on
						change_variable = { which = ShadowgateRPMinPotential value = ShadowgateRPDUPChange }
						change_variable = { which = ShadowgateRPMinEvent value = ShadowgateRPDUPChange }
						if = { limit = { check_variable = { which = ShadowgateRPMinPotential value < 0 } } set_variable = { which = ShadowgateRPMin value = 0 } }
						else = {
							set_variable = { which = ShadowgateRPMin value = ShadowgateRPMinPotential }
							calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = e }
						}
						if = { limit = { is_variable_set = ShadowgateRPDUPChange } clear_variable = ShadowgateRPDUPChange }
						if = { limit = { is_variable_set = ShadowgateRPDUPFortifications } clear_variable = ShadowgateRPDUPFortifications }
					}
					change_variable = { which = ShadowgateRP value = ShadowgateRPChange }
					if = { limit = { check_variable = { which = ShadowgateRP value < ShadowgateRPMin } }
						set_variable = { which = ShadowgateRP value = ShadowgateRPMin }
						set_variable = { which = ShadowgateRCHAmount value = 0 }
					}
					if = { limit = { check_variable = { which = ShadowgateRP value > @shadowgate_rp_max_amount } } set_variable = { which = ShadowgateRP value = @shadowgate_rp_max_amount } }
					calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = e }
					clear_variable = ShadowgateRPChange
					shadowgate_ae_effect = yes
					solar_system = {
						create_ambient_object = {
							type = shadowgate_active
							location = star
							scale = @shadowgate_well_effect_scale
							entity_offset_height = @shadowgate_well_effect_offset
							use_3d_location = yes
							duration = -1
						}
					}
					last_created_ambient_object = { set_ambient_object_flag = shadowgate_active }
					event_target:shadowgate_origin_system = { set_star_flag = shadowrift_origin }
					set_shadowrift_global_event_targets = { SHADOWGATE = e }
					if = { limit = { OR = { has_planet_flag = valid_shadow_anchor_target has_planet_flag = shadowgate_dup_on } }
						planet_event = { id = shadowgate_e.1003 }
					}
					else = {
						solar_system = {
							create_ambient_object = {
								type = shadowgate_priming
								location = star
								scale = @shadowgate_well_effect_scale
								entity_offset_height = @shadowgate_well_effect_offset
								use_3d_location = yes
								duration = -1
							}
						}
						last_created_ambient_object = { set_ambient_object_flag = shadowgate_priming }
						set_planet_flag = shadowrift_nascent
						event_target:shadowgate_origin_system = { spawn_shadowrift = { SHADOWGATE = e } }
						event_target:shadowgate_destination_system = { spawn_shadowrift = { SHADOWGATE = e } }
						if = { limit = { has_planet_flag = shadowgate_sm_effect exists = owner }
							owner = {
								every_system_within_border = { limit = { has_star_flag = active_shadow_anchor NOR = { has_any_shadowrift = yes is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system shadowgate_antiresonant_void_check = yes } }
									spawn_shadow_mooring_rift_with_cost = { SHADOWGATE = e }
									run_shadowrift_hostile_ai_fleet_effect = yes
								}
							}
						}
					}
					event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } }
					if = { limit = { num_districts = { type = district_spectral_projection_array value = 0 } } stabilize_shadowgate_shadowrift = { SHADOWGATE = e LEVEL = 0 } }
					else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 1 } } stabilize_shadowgate_shadowrift = { SHADOWGATE = e LEVEL = 1 } }
					else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 2 } } stabilize_shadowgate_shadowrift = { SHADOWGATE = e LEVEL = 2 } }
					else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 3 } } stabilize_shadowgate_shadowrift = { SHADOWGATE = e LEVEL = 3 } }
					set_planet_flag = shadowrift_active
					if = { limit = { NOT = { has_planet_flag = shadowgate_dup_on } }
						remove_planet_flag = shadowgate_rp_notified
						send_shadowgate_ruinous_potency_message = yes
					}
					if = { limit = { has_planet_flag = shadowgate_dup_on } set_planet_flag = shadowgate_dup_open planet_event = { id = shadowgate_e.1010 days = @shadowgate_dup_warn_time } }
					solar_system = {
						if = { limit = { prev = { has_planet_flag = shadowgate_sp_effect } }
							if = { limit = { NOR = { has_star_flag = has_shadowrift prev = { has_planet_flag = shadowgate_sm_effect } } }
								create_ambient_object = { type = shadowrift_cloud location = prev use_3d_location = yes scale = @shadowgate_cloud_scale entity_offset_height = @shadowgate_cloud_offset duration = -1 }
								last_created_ambient_object = { set_ambient_object_flag = shadowrift_cloud }
								create_ambient_object = { type = blue_sun_grow_particle_object location = prev use_3d_location = yes scale = @shadowgate_stabilized_explosion_scale entity_offset_height = @shadowgate_stabilized_explosion_offset duration = 10 }
							}
							else_if = { limit = { NOT = { has_star_flag = has_shadowrift } prev = { has_planet_flag = shadowgate_sm_effect } }
								spawn_shadow_mooring_rift = { SHADOWGATE = e }
								run_shadowrift_hostile_ai_fleet_effect = yes
							}
						}
					}
					notify_space_owner_of_shadowrift_terminus = { TERMINUS = destination }
					notify_space_owner_of_shadowrift_terminus = { TERMINUS = origin }
					remove_planet_flag = valid_shadow_anchor_target
					if = { limit = { exists = owner }
						owner = {
							if = { limit = { NOT = { is_same_value = event_target:global_event_country } } change_variable = { which = shadowgate_rifts_summoned value = 1 } }
							if = { limit = { has_modifier = shadowgate_fe_monitor any_country = { has_relation_flag = { flag = shadowgate_fe_monitor who = prev } NOT = { is_at_war_with = prev } } }
								random_list = {
									1 = { }
									1 = {
										random_country = { limit = { has_relation_flag = { flag = shadowgate_fe_monitor who = prev } NOT = { is_at_war_with = prev } } save_event_target_as = shadowgate_fe_threat }
										root = { planet_event = { id = shadowgate_e.312 days = 10 random = 5 } }
									}
								}
							}
							if = { limit = { root = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } } } remove_country_flag = shadowgate_ae_active }
						}
					}
				}
				else = { print_shadowgate_event_targets_in_log = yes }
			}
			else = {
				if = { limit = { has_planet_flag = shadowrift_queued }
					remove_planet_flag = shadowrift_queued
					create_message = {
						type = MESSAGE_TYPE_SHADOWRIFT_QUEUED_FAIL
						localization = MESSAGE_SHADOWRIFT_QUEUED_FAIL
						days = 90
						target = this
						variable = {
							type = name
							localization = ORIGIN
							scope = event_target:shadowgate_origin_system
						}
						variable = {
							type = name
							localization = DESTINATION
							scope = event_target:shadowgate_destination_system
						}
						variable = {
							type = name
							localization = SHADOWGATE
							scope = this
						}
					}
				}
				remove_active_shadowrift = { SHADOWGATE = e }
				event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_queued }
				event_target:shadowgate_destination_system = { remove_star_flag = shadowrift_queued }
				if = { limit = { exists = event_target:shadowgate_owner }
					if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage }
						event_target:shadowgate_owner = {
							if = { limit = { has_origin = origin_shadow_remnant }
								add_resource = { energy = @shadowgate_ap_summon_cost_origin_en_p }
							}
							else = { add_resource = { energy = @shadowgate_ap_summon_cost_en_p } }
						}
					}
					else = { change_variable = { which = ShadowgateEther value = ShadowgateEtherCostLocked } }
				}
			}
			if = { limit = { is_variable_set = ShadowgateEtherCostLocked } clear_variable = ShadowgateEtherCostLocked }
		}
	}
}

##################################################################
# Regular Shadowrift Destination - No shadow anchor present (or it's disabled).
##################################################################

planet_event = {
	id = shadowgate_e.1002
	hide_window = yes
	is_triggered_only = yes

	trigger = { NOR = { has_modifier = pm_shadowgate_banishing event_target:shadowgate_destination_system = { system_has_stabilized_shadowrift = yes } } event_target:shadowgate_destination_system = { has_star_flag = has_shadowrift } }
	
	immediate = {
		save_event_target_as = shadowgate_planet
		if = { limit = { all_shadowgate_event_targets_exist = yes }
			if = { limit = { NOT = { has_planet_flag = shadowrift_duplicate_safeguard } }
				set_timed_planet_flag = { flag = shadowgate_ai_use_cooldown days = 1800 }
				if = { limit = { NOT = { has_modifier = pm_shadowgate_stabilized_rift } } add_modifier = { modifier = pm_shadowgate_stabilized_rift days = -1 } }
				solar_system = { every_system_ambient_object = { limit = { has_ambient_object_flag = shadowgate_priming } destroy_ambient_object = this } }
				remove_planet_flag = shadowrift_nascent
				event_target:shadowrift_current_origin_e = {
					spawn_shadowrift = { SHADOWGATE = e }
					if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } if = { limit = { exists = space_owner event_target:shadowgate_destination_system = { exists = space_owner } } space_owner = { event_target:shadowgate_destination_system = { space_owner = { NOT = { is_same_value = prevprev } } } } } }
						check_for_shadowrift_terminus_events = { SHADOWGATE = e }
					}
					run_shadowrift_hostile_ai_fleet_effect = yes
					if = { limit = { exists = space_owner space_owner = { is_ai = yes } } space_owner = { country_event = { id = shadowgate_galactic.123 } } }
				}
				event_target:shadowrift_current_terminus_e = {
					spawn_shadowrift = { SHADOWGATE = e }
					if = { limit = { prev = { has_planet_flag = shadowgate_sm_effect } }
						prev.owner = {
							every_system_within_border = { limit = { has_star_flag = incoming_shadow_mooring_rift has_any_shadowrift_respect_owner = yes NOR = { is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system shadowgate_antiresonant_void_check = yes } }
								spawn_shadow_mooring_rift = { SHADOWGATE = e }
								run_shadowrift_hostile_ai_fleet_effect = yes
							}
						}
					}
					run_shadowrift_hostile_ai_fleet_effect = yes
					if = { limit = { exists = space_owner space_owner = { is_ai = yes } } space_owner = { country_event = { id = shadowgate_galactic.123 } } }
					check_for_shadowrift_terminus_events = { SHADOWGATE = e }
				}
				if = { limit = { NOT = { has_modifier = pm_shadowgate_cooldown } }
					activate_shadowgate_cooldown = { SHADOWGATE = e }
				}
				if = { limit = { event_target:shadowgate_origin_system = { has_star_flag = shadowgate_shadow_remnant } event_target:shadowgate_destination_system = { has_star_flag = shadowgate_shadow_remnant } }
					if = { limit = { has_planet_flag = shadowgate_sm_effect shadowgate_is_currently_mooring = yes }
						restore_shadowgate_as_origin = { SHADOWGATE = e }
						owner = { random_system_within_border = { limit = { has_star_flag = has_shadow_mooring_rift } remove_star_flag = has_shadow_mooring_rift save_global_event_target_as = shadowrift_current_terminus_e } }
					}
					else = { remove_active_shadowrift = { SHADOWGATE = e } }
				}
			}
		}
		else = { print_shadowgate_event_targets_in_log = yes }
	}
}

##################################################################
# Shadow Anchor Destination - Fully functioning shadow anchor is present.
##################################################################

planet_event = {
	id = shadowgate_e.1003
	hide_window = yes
	is_triggered_only = yes

	trigger = { event_target:shadowgate_destination_system = { NOT = { system_has_stabilized_shadowrift = yes } } }
	
	immediate = {
		save_event_target_as = shadowgate_planet
		if = { limit = { all_shadowgate_event_targets_exist = yes }
			set_timed_planet_flag = { flag = shadowgate_ai_use_cooldown days = 1800 }
			if = { limit = { has_planet_flag = shadowgate_dup_on } remove_modifier = pm_shadowgate_stabilized_rift add_modifier = { modifier = pm_shadowgate_stabilized_rift days = 90 } }
			else_if = { limit = { NOT = { has_modifier = pm_shadowgate_stabilized_rift } } add_modifier = { modifier = pm_shadowgate_stabilized_rift days = -1 } }
			event_target:shadowrift_current_origin_e = {
				spawn_shadowrift = { SHADOWGATE = e }
				if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } if = { limit = { exists = space_owner event_target:shadowgate_destination_system = { exists = space_owner } } space_owner = { event_target:shadowgate_destination_system = { space_owner = { NOT = { is_same_value = prevprev } } } } } }
					check_for_shadowrift_terminus_events = { SHADOWGATE = e }
				}
				if = { limit = { exists = space_owner space_owner = { is_ai = yes } } space_owner = { country_event = { id = shadowgate_galactic.123 } } }
			}
			event_target:shadowrift_current_terminus_e = {
				spawn_shadowrift = { SHADOWGATE = e }
				if = { limit = { prev = { has_planet_flag = shadowgate_sm_effect } }
					root.owner = {
						every_system_within_border = { limit = { OR = { has_star_flag = active_shadow_anchor is_same_value = root.solar_system } OR = { has_any_shadowrift_respect_owner = yes NOT = { has_any_shadowrift = yes } } NOR = { is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system shadowgate_antiresonant_void_check = yes } }
							spawn_shadow_mooring_rift_with_cost = { SHADOWGATE = e }
						}
					}
				}
				if = { limit = { exists = space_owner space_owner = { is_ai = yes } } space_owner = { country_event = { id = shadowgate_galactic.123 } } }
				check_for_shadowrift_terminus_events = { SHADOWGATE = e }
			}
			if = { limit = { NOR = { has_modifier = pm_shadowgate_cooldown has_planet_flag = shadowgate_dup_on event_target:shadowrift_current_origin_e = { has_star_flag = shadowgate_shadow_remnant } event_target:shadowgate_destination_system = { has_star_flag = shadowgate_shadow_remnant } } }
				activate_shadowgate_cooldown = { SHADOWGATE = e SOUND = ALT }
			}
			else_if = { limit = { has_planet_flag = shadowgate_dup_on }
				activate_shadowgate_cooldown = { SHADOWGATE = e SOUND = ALT STABLE = UNSTABLE }
			}
		}
		else = { print_shadowgate_event_targets_in_log = yes }
	}
}

##################################################################
# Banish Shadowrift
##################################################################

planet_event = {
	id = shadowgate_e.1004
	hide_window = yes
	is_triggered_only = yes

	trigger = { has_planet_flag = shadowrift_active }

	immediate = {
		shadowgate_es_effect = yes
		if = { limit = { has_planet_flag = shadowrift_queued } planet_event = { id = shadowgate_e.1001 } }
		else = { remove_active_shadowrift = { SHADOWGATE = e } }
	}
}

planet_event = {
	id = shadowgate_e.1010
	hide_window = yes
	is_triggered_only = yes

	trigger = { has_planet_flag = shadowrift_active has_planet_flag = shadowgate_dup_open }

	immediate = {
		if = { limit = { NOT = { has_planet_flag = shadowgate_dup_warned } }
			set_planet_flag = shadowgate_dup_warned
			create_message = {
				type = MESSAGE_TYPE_SHADOWRIFT_DECRESCENT_WARN
				localization = MESSAGE_SHADOWRIFT_DECRESCENT_WARN
				days = 15
				target = event_target:shadowgate_destination_system
				variable = {
					type = name
					localization = ORIGIN
					scope = event_target:shadowgate_origin_system
				}
				variable = {
					type = name
					localization = DESTINATION
					scope = event_target:shadowgate_destination_system
				}
			}
			planet_event = { id = shadowgate_e.1010 days = @shadowgate_dup_close_time }
		}
		else = {
			remove_planet_flag = shadowgate_dup_open
			event_target:shadowgate_destination_system = { save_event_target_as = shadowrift_vd_rift_system }
			planet_event = { id = shadowgate_galactic.230 }
		}
	}
}

##################################################################
# Vestigial Conjuration Remnant Destinations - Lists all Shadow Remnants in the galaxy.
##################################################################
planet_event = {
	id = shadowgate_e.1040
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.systems.special.remnant.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		update_shadowgate_origin_system = { SHADOWGATE = e }
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			every_system = { limit = { has_star_flag = shadowgate_shadow_remnant system_is_valid_shadowrift_target = yes }
				add_to_shadowgate_target_list_switch = yes
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_1 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_2 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_3 = yes
		}
		random_system = { limit = { listed_as_shadowgate_target = yes }
			list_as_shadowgate_target_4 = yes
		}
	}

	option = {
		name = shadowgate.open.shadowrift.remnant.system1
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_remnant
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.remnant.system2
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_remnant
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.remnant.system3
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_remnant
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.remnant.system4
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_remnant
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.remnant.system.next
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { planet_event = { id = shadowgate_e.1040 } }
	}
	option = {
		name = shadowgate.open.shadowrift.remnant.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.remnant.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_vc_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1040 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			remove_planet_flag = open_shadowgate_to_remnant
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.104 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Adjacent Systems to Destination - Allows selection of adjacent systems when a destination is locked in.
##################################################################

planet_event = {
	id = shadowgate_e.1050
	title = shadowgate.main.title
	desc = shadowgate.open.shadowrift.adjacent.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_destination_system = {
				every_neighbor_system = { limit = { system_is_valid_shadowrift_target = yes }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_destination_system = {
			random_neighbor_system = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_neighbor_system = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_neighbor_system = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_neighbor_system = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}

	option = {
		name = shadowgate.open.shadowrift.specific.system1
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_adjacent
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system2
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_adjacent
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system3
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_adjacent
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system4
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			set_planet_flag = open_shadowgate_to_adjacent
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.next
		custom_tooltip = shadowgate.open.shadowrift.specific.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.1050 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.specific.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1050 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.1000 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

planet_event = {
	id = shadowgate_e.1060
	title = shadowgate.main.title
	desc = shadowgate.district.restored.desc.1
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.district.restored.answer.1
		hidden_effect = { planet_event = { id = shadowgate_e.1061 } }
	}
}

planet_event = {
	id = shadowgate_e.1061
	title = shadowgate.main.title
	desc = shadowgate.district.restored.desc.2
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.district.restored.answer.2
		hidden_effect = { planet_event = { id = shadowgate_e.1062 } }
	}
}

planet_event = {
	id = shadowgate_e.1062
	title = shadowgate.main.title
	desc = shadowgate.district.restored.desc.3
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = shadowgate.district.restored.answer.3
		hidden_effect = { planet_event = { id = shadowgate_e.1063 } }
	}
}

planet_event = {
	id = shadowgate_e.1063
	title = shadowgate.main.title
	desc = {
		trigger = { owner = { check_variable = { which = ShadowgateLodestonesOwned value = 0 } } }
		text = shadowgate.district.restored.desc.4
	}
	desc = {
		trigger = { owner = { check_variable = { which = ShadowgateLodestonesOwned value > 0 } } }
		text = shadowgate.district.restored.desc.4.dl
	}
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	immediate = {
		owner = {
			random_planet_within_border = { limit = { uninhabitable_regular_planet = yes shadowgate_dl_excluded = yes }
				save_event_target_as = shadowgate_dl_planet
				solar_system = { save_event_target_as = shadowgate_dl_system }
			}
		}
		if = { limit = { NOT = { exists = event_target:shadowgate_dl_planet } }
			random_galaxy_planet = { limit = { uninhabitable_regular_planet = yes shadowgate_dl_excluded = yes solar_system = { has_access_fleet = root.owner root.owner = { intel_level = { level > low system = prev } } } }
				save_event_target_as = shadowgate_dl_planet
				solar_system = { save_event_target_as = shadowgate_dl_system }
			}
		}
	}

	option = {
		name = shadowgate.district.restored.answer.4
		hidden_effect = {
			owner = {
				set_country_flag = shadowgate_dl_knowledge
				enable_special_project = {
					name = "SHADOWGATE_DARK_LODESTONE_PROJECT"
					location = event_target:shadowgate_dl_planet
					owner = this
				}
				set_timed_country_flag = { flag = shadowgate_dl_cooldown days = 5400 }
			}
			set_timed_planet_flag = { flag = shadowgate_dl_cooldown days = 9000 }
			planet_event = { id = shadowgate_e.1064 }
		}
	}
}

planet_event = {
	id = shadowgate_e.1064
	title = shadowgate.main.title
	desc = shadowgate.district.restored.desc.5
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	location = event_target:shadowgate_dl_planet

	option = {
		name = shadowgate.district.restored.answer.final
		custom_tooltip = shadowgate.district.restored.final.tooltip
	}
}

planet_event = {
	id = shadowgate_e.1065
	title = shadowgate.main.title
	desc = shadowgate.district.restored.bypass.desc
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	location = event_target:shadowgate_dl_planet

	immediate = {
		owner = {
			random_planet_within_border = { limit = { uninhabitable_regular_planet = yes shadowgate_dl_excluded = yes }
				save_event_target_as = shadowgate_dl_planet
				solar_system = { save_event_target_as = shadowgate_dl_system }
			}
		}
		if = { limit = { NOT = { exists = event_target:shadowgate_dl_planet } }
			random_galaxy_planet = { limit = { uninhabitable_regular_planet = yes shadowgate_dl_excluded = yes solar_system = { has_access_fleet = root.owner root.owner = { intel_level = { level > low system = prev } } } }
				save_event_target_as = shadowgate_dl_planet
				solar_system = { save_event_target_as = shadowgate_dl_system }
			}
		}
	}

	option = {
		name = shadowgate.district.restored.bypass.answer
		custom_tooltip = shadowgate.district.restored.final.tooltip
		hidden_effect = {
			owner = {
				set_country_flag = shadowgate_dl_knowledge
				enable_special_project = {
					name = "SHADOWGATE_DARK_LODESTONE_PROJECT"
					location = event_target:shadowgate_dl_planet
					owner = root.owner
				}
				set_timed_country_flag = { flag = shadowgate_dl_cooldown days = 5400 }
			}
			set_timed_planet_flag = { flag = shadowgate_dl_cooldown days = 9000 }
		}
	}
}

##################################################################
# Dimensional Shift
##################################################################

planet_event = {
	id = shadowgate_e.2000
	title = shadowgate.dimensionalshift.warning.title
	desc = shadowgate.dimensionalshift.warning.desc
	picture = GFX_evt_shadow_remnant
	location = this
	show_sound = event_red_alert
	is_triggered_only = yes

	option = {
		name = shadowgate.dimensionalshift.understand
		custom_gui = "shadowgate_option_summon"
		custom_tooltip = shadowgate.dimensionalshift.understand.tooltip
		ai_chance = { factor = 100 }
		allow = {
			custom_tooltip = {
				fail_text = shadowgate.fail.zro
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } has_resource = { type = sr_zro amount >= @shadowgate_ds_cost_zr_p } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.dl
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } check_variable = { which = ShadowgateLodestonesOwned value > 0 } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.darkmatter
				event_target:shadowgate_owner = { if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } } has_resource = { type = sr_dark_matter amount >= @shadowgate_ds_cost_dm_p } } }
			}
			custom_tooltip = {
				fail_text = shadowgate.resonant.void.detected
				event_target:shadowgate_destination_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			}
			custom_tooltip = {
				fail_text = shadowgate.error.all
				NOT = { shadowgate_is_disabled = yes }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.ownership
				is_current_shadowgate_owner = yes
			}
			custom_tooltip = {
				fail_text = shadowgate.ds.fail.rift.active
				NOT = { has_planet_flag = shadowrift_active }
			}
			custom_tooltip = {
				fail_text = shadowgate.anchor.management.fail.activedrone.ds
				NOT = { is_variable_set = ShadowgateActiveCargoDrones }
			}
			custom_tooltip = {
				fail_text = shadowgate.shadowrift.under.assault.fail
				NOT = { shadowgate_shadowrift_is_under_assault = yes }
			}
			custom_tooltip = {
				fail_text = shadowgate.fail.blocked
				all_shadowgate_event_targets_exist = yes
				event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowgate_blocked_system } }
			}
		}
		hidden_effect = {
			event_target:shadowgate_origin_system = {
				create_ambient_object = { type = umbral_remnant location = star scale = @shadowgate_ds_scale entity_offset_height = @shadowgate_ds_offset use_3d_location = yes }
				last_created_ambient_object = { set_ambient_object_flag = dimensional_shift_priming }
				create_ambient_object = { type = blue_sun_grow_particle_object location = star use_3d_location = yes scale = @shadowgate_ds_explosion_scale entity_offset_height = @shadowgate_ds_explosion_offset duration = 10 }
			}
			remove_active_shadowrift = { SHADOWGATE = e }
			remove_shadowgate_accessed = { SHADOWGATE = e }
			event_target:shadowgate_owner = {
				if = { limit = { NOT = { has_country_flag = shadowgate_ae_active } }
					add_resource = { sr_zro = @shadowgate_ds_cost_zr }
					add_resource = { sr_dark_matter = @shadowgate_ds_cost_dm }
					subtract_variable = { which = ShadowgateLodestonesOwned value = 1 }
				}
				else = { remove_country_flag = shadowgate_ae_active }
			}
			remove_planet_flag = shadowgate_dimensional_shift
			event_target:shadowgate_destination_system = {
				set_timed_star_flag = { flag = shadowgate_target_remnant days = @shadowgate_ds_time }
				random_system_planet = { limit = { has_planet_flag = shadowgate_shadow_remnant } save_event_target_as = shadowgate_target_remnant }
			}
			planet_event = { id = shadowgate_e.2001 days = @shadowgate_ds_time }
			add_modifier = { modifier = pm_shadowgate_dimensional_shift days = @shadowgate_ds_time }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		ai_chance = { factor = 0 }
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.1000 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

planet_event = {
	id = shadowgate_e.2001
	hide_window = yes
	is_triggered_only = yes

	trigger = { NOR = { shadowgate_is_disabled = yes event_target:shadowgate_target_remnant = { solar_system = { shadowgate_antiresonant_void_check = yes } } } }

	immediate = {
		event_target:shadowgate_target_remnant = {
			solar_system = {
				random_fleet_in_system = { limit = { any_owned_ship = { OR = { is_ship_class = shipclass_mining_station is_ship_class = shipclass_research_station } } } delete_fleet = this }
				set_star_flag = shadowgate_solar_system
				remove_star_flag = shadowgate_target_remnant
				remove_star_flag = shadowgate_shadow_remnant
				if = { limit = { has_star_flag = has_shadowrift }
					switch = {
						trigger = has_star_flag
						has_shadowrift_vc = { remove_system_shadowrift = yes }
						has_shadowrift_a = { remove_active_shadowrift = { SHADOWGATE = a } }
						has_shadowrift_b = { remove_active_shadowrift = { SHADOWGATE = b } }
						has_shadowrift_c = { remove_active_shadowrift = { SHADOWGATE = c } }
						has_shadowrift_d = { remove_active_shadowrift = { SHADOWGATE = d } }
						has_shadowrift_e = { remove_active_shadowrift = { SHADOWGATE = e } }
					}
				}
			}
			change_pc = pc_shadowgate
			set_planet_entity = { entity = shadowgate }
			set_planet_size = 9
			clear_blockers = yes
			clear_deposits = yes
			if = { limit = { prev = { has_modifier = pm_shadowgate_ap } } add_modifier = { modifier = pm_shadowgate_ap days = -1 } prev = { remove_modifier = pm_shadowgate_ap } }
			add_modifier = { modifier = pm_shadowgate_hazardous_environment days = -1 }
			add_deposit = d_innate_shadow_pulse
			add_deposit = d_harmonic_subspace_resonators
			add_deposit = d_shadow_pulse_condensers
			add_deposit = d_spectral_projection_arrays
			set_planet_flag = shadowgate_planet
			set_planet_flag = shadowgate_e
			set_planet_flag = colony_event
			set_planet_flag = asteroid_sighted
			set_planet_flag = planet_prospected
			set_planet_flag = has_been_scanned
		}
		planet_event = { id = shadowgate_e.2002 }
	}
}

planet_event = {
	id = shadowgate_e.2002
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_modifier = pm_shadowgate_dimensional_shift
		set_planet_flag = shadowgate_shadow_remnant
		solar_system = {
			random_system_ambient_object = { limit = { has_ambient_object_flag = dimensional_shift_priming } destroy_ambient_object = this }
			random_fleet_in_system = { limit = { any_owned_ship = { is_ship_class = shipclass_starbase } }
				random_owned_ship = { limit = { is_ship_class = shipclass_starbase }
					create_country = { type = shadowgate_dummy }
					last_created_country = { save_event_target_as = shadowgate_pending_remnant_sb_name set_name = prev }
				}
			}
			set_star_flag = shadowgate_shadow_remnant
			remove_star_flag = shadowgate_solar_system
			save_event_target_as = shadowgate_pending_remnant_system
		}
		save_event_target_as = shadowgate_pending_remnant
		if = { limit = { exists = archaeological_site archaeological_site = { is_site_type = shadowgate_cpc_digsite } }
			archaeological_site = { save_event_target_as = shadowgate_site }
			if = { limit = { archaeological_site = { is_site_completed = yes } } destroy_archaeological_site = event_target:shadowgate_site }
			else = { destroy_archaeological_site = event_target:shadowgate_site event_target:shadowgate_target_remnant = { set_timed_planet_flag = { flag = shadowgate_cpc_digsite days = 1 } } }
		}
		event_target:shadowgate_target_remnant = {
			if = { limit = { exists = archaeological_site archaeological_site = { is_site_type = shadowgate_ae_digsite } }
				archaeological_site = { save_event_target_as = shadowgate_site }
				if = { limit = { archaeological_site = { is_site_completed = yes } } destroy_archaeological_site = event_target:shadowgate_site }
				else = { destroy_archaeological_site = event_target:shadowgate_site root = { set_timed_planet_flag = { flag = shadowgate_ae_digsite days = 1 } } }
			}
			clear_global_event_target = shadowgate_planet_e
			save_global_event_target_as = shadowgate_planet_e
			remove_planet_flag = shadowgate_shadow_remnant
			create_country = { type = shadowgate_dummy }
			last_created_country = { save_event_target_as = shadowgate_target_remnant_name set_name = prev }
			set_timed_planet_flag = { flag = shadowgate_dimensional_shifted days = 1 }
			set_variable = { which = ShadowgateGalaxyNum value = prev.ShadowgateGalaxyNum }
			set_variable = { which = ShadowgateLevel value = prev.ShadowgateLevel }
			set_variable = { which = ShadowgateEther value = prev.ShadowgateEther }
			set_variable = { which = ShadowgateEtherIncrease value = prev.ShadowgateEtherIncrease }
			set_variable = { which = ShadowgateEtherMax value = prev.ShadowgateEtherMax }
			set_variable = { which = ShadowgateName value = prev.ShadowgateName }
			set_variable = { which = TerminusBarrierFortifyCount value = prev.TerminusBarrierFortifyCount }
			set_variable = { which = TerminusCoreFortifyCount value = prev.TerminusCoreFortifyCount }
			set_variable = { which = TerminusTotalFortifyCount value = prev.TerminusTotalFortifyCount }
			set_variable = { which = ShadowgateBerthedAnchors value = prev.ShadowgateBerthedAnchors }
			set_variable = { which = ShadowgateRP value = prev.ShadowgateRP }
			set_variable = { which = ShadowgateRPDecay value = prev.ShadowgateRPDecay }
			set_variable = { which = ShadowgateRCHAmount value = prev.ShadowgateRCHAmount }
			set_variable = { which = ShadowgateRPMinEvent value = prev.ShadowgateRPMinEvent }
			if = { limit = { prev = { is_variable_set = ShadowgateLodestonesActive } } set_variable = { which = ShadowgateLodestonesActive value = prev.ShadowgateLodestonesActive } }
			if = { limit = { prev = { is_variable_set = ShadowgateSOUSBlessings } } change_variable = { which = ShadowgatePVBonus value = prev.ShadowgateSOUSBlessings } prev = { clear_variable = ShadowgateSOUSBlessings } }
			if = { limit = { prev = { is_variable_set = ShadowgatePVBonus } } change_variable = { which = ShadowgatePVBonus value = prev.ShadowgatePVBonus } }
			if = { limit = { prev = { is_variable_set = ShadowAnchorListType } } set_variable = { which = ShadowAnchorListType value = prev.ShadowAnchorListType } }
			if = { limit = { prev = { is_colony = yes num_pops > 0 } }
				create_colony = { owner = root.owner }
				every_owned_pop = { set_pop_flag = shadowgate_deleted_pop }
			}
			set_name = prev
			solar_system = {
				set_name = prevprev
				every_system_ambient_object = { limit = { has_ambient_object_flag = shadowgate_shadow_remnant } destroy_ambient_object = this }
				random_fleet_in_system = { limit = { any_owned_ship = { is_ship_class = shipclass_starbase } }
					random_owned_ship = { limit = { is_ship_class = shipclass_starbase }
						create_country = { type = shadowgate_dummy }
						last_created_country = { save_event_target_as = shadowgate_target_remnant_sb_name set_name = prev }
					}
				}
				if = { limit = { exists = space_owner }
					if = { limit = { space_owner = { NOT = { is_same_value = root.owner } } } starbase = { set_owner = root.owner } }
				}
				else = {
					create_starbase = { size = starbase_outpost }
				}
			}
		}
		if = { limit = { is_colony = yes num_pops > 0 }
			every_owned_pop = {
				resettle_pop = {
					pop = THIS
					planet = event_target:shadowgate_target_remnant
				}
			}
		}
		if = { limit = { solar_system = { has_star_flag = shadowrift_e_sp_origin } } solar_system = { remove_star_flag = shadowrift_e_sp_origin } event_target:shadowgate_target_remnant = { solar_system = { set_star_flag = shadowrift_e_sp_origin } } }
		if = { limit = { has_planet_flag = shadowgate_d_compass_unlocked } remove_planet_flag = shadowgate_d_compass_unlocked event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_d_compass_unlocked } }
		if = { limit = { has_planet_flag = shadowgate_fully_restored } remove_planet_flag = shadowgate_fully_restored event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_fully_restored } }
		if = { limit = { has_planet_flag = shadowgate_dc_effect } remove_planet_flag = shadowgate_dc_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_dc_effect } }
		if = { limit = { has_planet_flag = shadowgate_rch_effect } remove_planet_flag = shadowgate_rch_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_rch_effect } }
		if = { limit = { has_planet_flag = shadowgate_dup_effect } remove_planet_flag = shadowgate_dup_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_dup_effect } }
		if = { limit = { has_planet_flag = shadowgate_sp_effect } remove_planet_flag = shadowgate_sp_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_sp_effect } }
		if = { limit = { has_planet_flag = shadowgate_vc_effect } remove_planet_flag = shadowgate_vc_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_vc_effect } }
		if = { limit = { has_planet_flag = shadowgate_asp_effect } remove_planet_flag = shadowgate_asp_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_asp_effect } }
		if = { limit = { has_planet_flag = shadowgate_sm_effect } remove_planet_flag = shadowgate_sm_effect event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_sm_effect } }
		if = { limit = { has_planet_flag = shadowgate_rp_notifications } remove_planet_flag = shadowgate_rp_notifications event_target:shadowgate_target_remnant = { set_planet_flag = shadowgate_rp_notifications } }
		event_target:shadowgate_target_remnant = { every_owned_pop = { limit = { has_pop_flag = shadowgate_deleted_pop } kill_pop = yes } }
		if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } }
			event_target:shadowgate_target_remnant = { add_district = district_harmonic_subspace_resonator }
		}
		else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } }
			while = { count = 2 event_target:shadowgate_target_remnant = { add_district = district_harmonic_subspace_resonator } }
		}
		else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } }
			while = { count = 3 event_target:shadowgate_target_remnant = { add_district = district_harmonic_subspace_resonator } }
		}
		if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 1 } }
			event_target:shadowgate_target_remnant = { add_district = district_shadow_pulse_condenser }
		}
		else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 2 } }
			while = { count = 2 event_target:shadowgate_target_remnant = { add_district = district_shadow_pulse_condenser } }
		}
		else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 3 } }
			while = { count = 3 event_target:shadowgate_target_remnant = { add_district = district_shadow_pulse_condenser } }
		}
		if = { limit = { num_districts = { type = district_spectral_projection_array value = 1 } }
			event_target:shadowgate_target_remnant = { add_district = district_spectral_projection_array }
		}
		else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 2 } }
			while = { count = 2 event_target:shadowgate_target_remnant = { add_district = district_spectral_projection_array } }
		}
		else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 3 } }
			while = { count = 3 event_target:shadowgate_target_remnant = { add_district = district_spectral_projection_array } }
		}
		if = { limit = { has_deposit = d_untuned_subspace_resonators } event_target:shadowgate_target_remnant = { add_deposit = d_untuned_subspace_resonators } }
		if = { limit = { has_deposit = d_depressurized_windchests } event_target:shadowgate_target_remnant = { add_deposit = d_depressurized_windchests } }
		if = { limit = { has_deposit = d_defunct_containment_field_nodes } event_target:shadowgate_target_remnant = { add_deposit = d_defunct_containment_field_nodes } }
		if = { limit = { has_deposit = d_faulty_ignition_chambers } event_target:shadowgate_target_remnant = { add_deposit = d_faulty_ignition_chambers } }
		if = { limit = { has_deposit = d_warped_polarizing_lenses } event_target:shadowgate_target_remnant = { add_deposit = d_warped_polarizing_lenses } }
		if = { limit = { has_deposit = d_fractured_projector_prisms } event_target:shadowgate_target_remnant = { add_deposit = d_fractured_projector_prisms } }
		event_target:global_event_country = { country_event = { id = shadowgate_e.2003 } }
	}
}

country_event = {
	id = shadowgate_e.2003
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:shadowgate_pending_remnant_system = {
			create_ambient_object = { type = blue_sun_grow_particle_object location = event_target:shadowgate_pending_remnant use_3d_location = yes scale = @shadowgate_ds_target_scale entity_offset_height = @shadowgate_ds_target_offset duration = 10 }
			create_ambient_object = { type = umbral_remnant location = event_target:shadowgate_pending_remnant use_3d_location = yes scale = @shadowgate_umbral_remnant_system_scale entity_offset_height = @shadowgate_umbral_remnant_system_offset }
			last_created_ambient_object = { set_ambient_object_flag = shadowgate_shadow_remnant }
		}
		event_target:shadowgate_pending_remnant = {
			if = { limit = { has_planet_flag = shadowgate_ae_digsite } create_archaeological_site = shadowgate_ae_digsite }
			remove_planet_flag = shadowgate_e
			set_planet_size = 4
			set_name = event_target:shadowgate_target_remnant_name
			solar_system = {
				set_name = prev
				random_fleet_in_system = { limit = { any_owned_ship = { is_ship_class = shipclass_starbase } }
					random_owned_ship = { limit = { is_ship_class = shipclass_starbase }
						set_name = event_target:shadowgate_target_remnant_sb_name
					}
				}
				event_target:shadowgate_target_remnant_sb_name = { destroy_country = yes }
			}
			event_target:shadowgate_target_remnant_name = { destroy_country = yes }
			clear_planet_modifiers = yes
			remove_modifier = pm_shadowgate_hazardous_environment
			remove_modifier = pm_shadowgate_warped_spacetime
			remove_modifier = pm_shadowgate_cooldown
			add_planet_devastation = -100
			destroy_colony = yes
			clear_variable = ShadowgateGalaxyNum
			clear_variable = ShadowgateLevel
			clear_variable = ShadowgateEther
			clear_variable = ShadowgateEtherIncrease
			clear_variable = ShadowgateEtherMax
			clear_variable = ShadowgateName
			clear_variable = TerminusCoreFortifyCount
			clear_variable = TerminusCoreStrength
			clear_variable = TerminusCoreStrengthBoost
			clear_variable = TerminusCoreBoostCost
			clear_variable = TerminusBarrierFortifyCount
			clear_variable = TerminusBarrierStrength
			clear_variable = TerminusBarrierStrengthBoost
			clear_variable = TerminusBarrierBoostCost
			clear_variable = TerminusTotalFortifyCount
			clear_variable = ShadowgateBerthedAnchors
			clear_variable = ShadowgateRP
			clear_variable = ShadowgateRPMin
			clear_variable = ShadowgateRPMinPotential
			clear_variable = ShadowgateRPDecay
			clear_variable = ShadowgateRCHAmount
			clear_variable = ShadowgateRPMinEvent
			if = { limit = { is_variable_set = ShadowgateListedCount } clear_variable = ShadowgateListedCount }
			if = { limit = { is_variable_set = ShadowgateRPChange } clear_variable = ShadowgateRPChange }
			if = { limit = { is_variable_set = ShadowgateLodestonesActive } clear_variable = ShadowgateLodestonesActive }
			if = { limit = { is_variable_set = ShadowgateSOUSBlessings } clear_variable = ShadowgateSOUSBlessings }
			if = { limit = { is_variable_set = ShadowgatePVBonus } clear_variable = ShadowgatePVBonus }
			if = { limit = { is_variable_set = ShadowAnchorListType } clear_variable = ShadowAnchorListType }
			remove_planet_flag = shadowgate_planet
			remove_planet_flag = shadowgate_dl_cooldown
			change_pc = pc_black_hole
			set_planet_entity = { entity = black_hole_entity }
			clear_deposits = yes
			add_deposit = d_physics_5
			add_deposit = d_engineering_5
		}
		event_target:shadowgate_target_remnant = {
			if = { limit = { has_planet_flag = shadowgate_cpc_digsite } create_archaeological_site = shadowgate_cpc_digsite }
			solar_system = {
				set_name = prev
				random_fleet_in_system = { limit = { any_owned_ship = { is_ship_class = shipclass_starbase } }
					random_owned_ship = { limit = { is_ship_class = shipclass_starbase }
						set_name = event_target:shadowgate_pending_remnant_sb_name
					}
				}
				event_target:shadowgate_pending_remnant_sb_name = { destroy_country = yes }
			}
			regenerate_shadowgate_variables = yes
			planet_event = { id = shadowgate_e.2004 days = 3 }
		}
	}
}

planet_event = {
	id = shadowgate_e.2004
	title = shadowgate.dimensionalshift.finished.title
	desc = shadowgate.dimensionalshift.finished.desc
	location = this
	show_sound = pc_shadowgate
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes

	option = {
		name = EXCELLENT
		add_modifier = { modifier = pm_shadowgate_warped_spacetime days = 1080 }
	}
}

planet_event = {
	id = shadowgate_e.2005
	title = shadowgate.main.title
	desc = shadowgate.dimensionalshift.desc
	diplomatic = yes
	custom_gui = "shadowgate_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	
	immediate = {
		if = { limit = { NOT = { is_variable_set = ShadowgateListedCount } }
			set_variable = { which = ShadowgateListedCount value = 0 }
			event_target:shadowgate_target_country = {
				every_system_within_border = { limit = { has_star_flag = shadowgate_shadow_remnant NOT = { has_star_flag = shadowgate_target_remnant } }
					add_to_shadowgate_target_list_switch = yes
				}
			}
		}
		set_variable = { which = ShadowgateDisplayCount value = 0 }
		event_target:shadowgate_target_country = {
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_system_within_border = { limit = { listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}

	option = {
		name = shadowgate.ds.system.system1
		custom_tooltip = shadowgate.ds.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.ds.system.system2
		custom_tooltip = shadowgate.ds.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.ds.system.system3
		custom_tooltip = shadowgate.ds.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value >= 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.ds.system.system4
		custom_tooltip = shadowgate.ds.system.tooltip
		trigger = { check_variable = { which = ShadowgateDisplayCount value = 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.1000 }
		}
	}
	option = {
		name = shadowgate.ds.system.next
		custom_tooltip = shadowgate.ds.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			planet_event = { id = shadowgate_e.2005 }
		}
	}
	option = {
		name = shadowgate.ds.system.refresh
		custom_tooltip = shadowgate.ds.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value = 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			planet_event = { id = shadowgate_e.2005 }
		}
	}
	option = {
		name = shadowgate.back
		custom_gui = "shadowgate_option_back"
		default_hide_option = yes
		hidden_effect = {
			reset_shadowgate_system_targets = { SHADOWGATE = e }
			remove_planet_flag = shadowgate_dimensional_shift
			if = { limit = { is_current_shadowgate_owner = yes } planet_event = { id = shadowgate_e.102 } }
			else = { remove_shadowgate_accessed = { SHADOWGATE = e } }
		}
	}
}

##################################################################
# Misc Events
##################################################################
planet_event = {
	id = shadowgate_e.3000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { NOT = { has_global_flag = shadowgate_opening } }
			if = { limit = { owner = { NOT = { has_country_flag = shadow_mooring_on_demand } } has_planet_flag = shadowrift_active }
				save_event_target_as = shadowgate_planet
				set_timed_global_flag = { flag = shadowgate_opening days = 1 }
				owner = {
					set_timed_country_flag = { flag = shadow_mooring_on_demand days = 1 }
					every_system_within_border = { limit = { OR = { AND = { is_same_value = root.solar_system NOT = { is_same_value = event_target:shadowrift_current_origin_e } } has_star_flag = active_shadow_anchor } NOR = { has_any_shadowrift = yes shadowgate_antiresonant_void_check = yes } }
						remove_star_flag = shadowrift_recently_moored
						spawn_shadow_mooring_rift_with_cost = { SHADOWGATE = e }
					}
				}
			}
		}
		else = { planet_event = { id = shadowgate_e.3000 days = 1 } }
	}
}

planet_event = {
	id = shadowgate_e.3001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { NOT = { has_global_flag = shadowgate_opening } }
			if = { limit = { owner = { NOT = { has_country_flag = shadow_mooring_on_demand } } has_planet_flag = shadowrift_active }
				save_event_target_as = shadowgate_planet
				set_timed_global_flag = { flag = shadowgate_opening days = 1 }
				owner = {
					set_timed_country_flag = { flag = shadow_mooring_on_demand days = 1 }
					event_target:mooring_shadowrift_system = {
						remove_star_flag = shadowrift_recently_moored
						spawn_shadow_mooring_rift_with_cost = { SHADOWGATE = e }
					}
				}
			}
		}
		else = { planet_event = { id = shadowgate_e.3001 days = 1 } }
	}
}

planet_event = {
	id = shadowgate_e.3010
	title = shadowgate.compass.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.compass.stones.desc
				owner = { check_variable = { which = ShadowgateLodestonesOwned value > 0 } }
			}
			success_text = {
				text = shadowgate.compass.none.desc
				owner = { check_variable = { which = ShadowgateLodestonesOwned value = 0 } }
			}
			success_text = {
				text = shadowgate.compass.finalized.desc
				owner = { has_country_flag = shadowgate_d_compass_finalized }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_dimensional_compass_window"
	is_triggered_only = yes
	picture_event_data = {
		portrait = shadowgate_compass
	}

	immediate = {
		owner = {
			set_variable = { which = ShadowgateGalaxyNum value = event_target:global_event_country.ShadowgateGalaxyNum }
			set_variable = { which = ShadowgateLodestoneCost value = 0 }
			set_country_flag = shadowgate_d_compass_open_e
			save_event_target_as = shadowgate_d_compass_owner
		}
		set_variable = { which = ShadowgatePendingChanges value = 0 }
		set_variable = { which = ShadowgateLodestonesActive value = 0 }
		if = { limit = { has_planet_flag = shadowgate_dc_effect } set_planet_flag = shadowgate_dc change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_rch_effect } set_planet_flag = shadowgate_rch change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_dup_effect } set_planet_flag = shadowgate_dup change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_sp_effect } set_planet_flag = shadowgate_sp change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_vc_effect } set_planet_flag = shadowgate_vc change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_asp_effect } set_planet_flag = shadowgate_asp change_variable = { which = ShadowgateLodestonesActive value = 1 } }
		if = { limit = { has_planet_flag = shadowgate_sm_effect } set_planet_flag = shadowgate_sm change_variable = { which = ShadowgateLodestonesActive value = 1 } }
	}

	option = {
		name = pc_shadowgate
		custom_gui = shadowgate_d_compass_option
		allow = { hidden_trigger = { event_target:shadowgate_d_compass_owner = { OR = { is_ai = yes AND = { if = { limit = { has_country_flag = shadowgate_accessed } prev = { check_variable = { which = ShadowgatePendingChanges value = 0 } } OR = { NOT = { has_country_flag = shadowgate_d_compass_saved } AND = { has_country_flag = shadowgate_d_compass_saved check_variable = { which = ShadowgateLodestonesOwned value >= ShadowgateLodestoneCost } } } } } } } } }
		if = { limit = { event_target:shadowgate_d_compass_owner = { NOT = { has_country_flag = shadowgate_d_compass_finalized } } }
			if = { limit = { check_variable = { which = ShadowgatePendingChanges value = 0 } NOT = { shadowgate_shadowrift_is_under_assault = yes } }
				if = { limit = { event_target:shadowgate_d_compass_owner = { OR = { NOT = { has_country_flag = shadowgate_d_compass_saved } AND = { has_country_flag = shadowgate_d_compass_saved check_variable = { which = ShadowgateLodestonesOwned value >= ShadowgateLodestoneCost } } } } }
					if = {
						limit = {
							OR = {
								NOT = { exists = owner }
								owner = { NOT = { is_same_value = event_target:shadowgate_d_compass_owner } }
								controller = { NOT = { is_same_value = event_target:shadowgate_d_compass_owner } }
								shadowgate_is_disabled = yes
								has_modifier = pm_shadowgate_dimensional_shift
								event_target:shadowgate_d_compass_owner = { NOT = { has_country_flag = shadowgate_d_compass_saved } }
								event_target:shadowgate_d_compass_owner = { has_country_flag = shadowgate_d_compass_saved check_variable = { which = ShadowgateLodestonesOwned value < ShadowgateLodestoneCost } }
							}
						}
						custom_tooltip = shadowgate.compass.unsaved
					}
					else = { custom_tooltip = shadowgate.compass.saved }
				}
				else = { custom_tooltip = shadowgate.compass.insufficient.lodestones.tooltip }
			}
			else_if = { limit = { has_planet_flag = shadowgate_accessed NOT = { shadowgate_shadowrift_is_under_assault = yes } } custom_tooltip = shadowgate.compass.pending.changes.tooltip }
			else = { custom_tooltip = shadowgate.compass.unsaved }
		}
		else = { custom_tooltip = shadowgate.compass.finalized.tooltip }
		hidden_effect = { planet_event = { id = shadowgate_e.3011 } }
		ai_chance = {
			factor = 100
		}
	}
	option = {
		name = pc_shadowgate
		custom_gui = shadowgate_hidden_dummy
		default_hide_option = yes
		ai_chance = { factor = 0 }
	}
}

planet_event = {
	id = shadowgate_e.3011
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		save_event_target_as = shadowgate_planet
		if = { limit = { OR = { event_target:shadowgate_d_compass_owner = { OR = { is_same_value = event_target:global_event_country is_country_type = shadowgate_ap } } AND = { exists = owner owner = { is_same_value = event_target:shadowgate_d_compass_owner has_country_flag = shadowgate_d_compass_saved check_variable = { which = ShadowgateLodestonesOwned value >= ShadowgateLodestoneCost } } controller = { is_same_value = event_target:shadowgate_d_compass_owner } NOR = { shadowgate_is_disabled = yes has_modifier = pm_shadowgate_dimensional_shift shadowgate_shadowrift_is_under_assault = yes } } } }
			event_target:shadowgate_d_compass_owner = { if = { limit = { NOR = { is_same_value = event_target:global_event_country is_country_type = shadowgate_ap } } subtract_variable = { which = ShadowgateLodestonesOwned value = ShadowgateLodestoneCost } set_country_flag = shadowgate_d_compass_finalized } }
			planet_event = { id = shadowgate_e.3012 }
			if = { limit = { has_planet_flag = shadowgate_dc NOT = { has_planet_flag = shadowgate_dc_effect } }
				set_planet_flag = shadowgate_dc_effect
				remove_planet_flag = shadowgate_dc
				change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
				change_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
			}
			if = { limit = { has_planet_flag = shadowgate_rch NOT = { has_planet_flag = shadowgate_rch_effect } }
				set_planet_flag = shadowgate_rch_effect
				remove_planet_flag = shadowgate_rch
				if = { limit = { has_planet_flag = shadowrift_active }
					toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = e ACTIVE = yes }
				}
			}
			if = { limit = { has_planet_flag = shadowgate_dup NOT = { has_planet_flag = shadowgate_dup_effect } }
				set_planet_flag = shadowgate_dup_effect
				if = { limit = { has_planet_flag = shadowrift_queued } set_planet_flag = shadowgate_dup_off }
				remove_planet_flag = shadowgate_dup
			}
			if = { limit = { has_planet_flag = shadowgate_sp NOT = { has_planet_flag = shadowgate_sp_effect } }
				set_planet_flag = shadowgate_sp_effect
				solar_system = { set_star_flag = shadowrift_e_sp_origin }
				remove_planet_flag = shadowgate_sp
			}
			if = { limit = { has_planet_flag = shadowgate_vc NOT = { has_planet_flag = shadowgate_vc_effect } }
				set_planet_flag = shadowgate_vc_effect
				remove_planet_flag = shadowgate_vc
				if = { limit = { exists = owner owner = { NOT = { has_technology = tech_labyrinthine_cartography } } }
					owner = { give_technology = { tech = tech_labyrinthine_cartography } }
				}
				if = { limit = { has_planet_flag = shadowrift_active }
					toggle_vestigial_conjuration = { SHADOWGATE = e ACTIVE = yes }
				}
			}
			if = { limit = { has_planet_flag = shadowgate_asp NOT = { has_planet_flag = shadowgate_asp_effect } }
				set_planet_flag = shadowgate_asp_effect
				remove_planet_flag = shadowgate_asp
			}
			if = { limit = { has_planet_flag = shadowgate_sm NOT = { has_planet_flag = shadowgate_sm_effect } }
				set_planet_flag = shadowgate_sm_effect
				remove_planet_flag = shadowgate_sm
				if = { limit = { has_planet_flag = shadowrift_active }
					if = { limit = { has_planet_flag = shadowgate_sp_effect } solar_system = { every_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_cloud } create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = prev use_3d_location = yes duration = 10 } destroy_ambient_object = this } } }
					if = { limit = { exists = owner owner = { NOT = { any_system_within_border = { has_star_flag = has_shadow_mooring_rift } } } }
						planet_event = { id = shadowgate_e.3000 }
					}
				}
			}
			set_timed_planet_flag = { flag = shadowgate_d_compass_cooldown days = 1 }
		}
		if = { limit = { is_variable_set = ShadowgatePendingChanges } clear_variable = ShadowgatePendingChanges }
		if = { limit = { exists = event_target:shadowgate_d_compass_owner event_target:shadowgate_d_compass_owner = { has_country_flag = shadowgate_d_compass_saved if = { limit = { NOR = { is_same_value = event_target:global_event_country is_country_type = shadowgate_ap } } prev = { NOT = { shadowgate_shadowrift_is_under_assault = yes } } } } }
			event_target:shadowgate_d_compass_owner = { remove_country_flag = shadowgate_d_compass_saved }
			planet_event = { id = shadowgate_e.3010 }
		}
		else = {
			remove_planet_flag = shadowgate_dc
			remove_planet_flag = shadowgate_rch
			remove_planet_flag = shadowgate_dup
			remove_planet_flag = shadowgate_sp
			remove_planet_flag = shadowgate_vc
			remove_planet_flag = shadowgate_asp
			remove_planet_flag = shadowgate_sm
			remove_planet_flag = shadowgate_d_compass_open
			if = { limit = { exists = event_target:shadowgate_d_compass_owner }
				event_target:shadowgate_d_compass_owner = {
					remove_country_flag = shadowgate_d_compass_finalized
					clear_variable = ShadowgateGalaxyNum
					if = { limit = { is_variable_set = ShadowgateLodestoneCost } clear_variable = ShadowgateLodestoneCost }
					remove_country_flag = shadowgate_d_compass_open
					remove_country_flag = shadowgate_d_compass_open_e
					remove_country_flag = shadowgate_d_compass_saved
				}
			}
		}
	}
}

planet_event = {
	id = shadowgate_e.3012
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } }
		if = { limit = { has_planet_flag = shadowgate_sp_effect NOT = { has_planet_flag = shadowgate_sp } }
			remove_planet_flag = shadowgate_sp_effect
			every_system = { limit = { has_star_flag = shadowrift_e_sp_origin } remove_star_flag = shadowrift_e_sp_origin }
			if = { limit = { has_planet_flag = shadowrift_active } restore_shadowgate_as_origin = { SHADOWGATE = e } }
		}
		if = { limit = { has_planet_flag = shadowgate_dc_effect NOT = { has_planet_flag = shadowgate_dc } }
			remove_planet_flag = shadowgate_dc_effect
			subtract_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
			subtract_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
		}
		if = { limit = { has_planet_flag = shadowgate_rch_effect NOT = { has_planet_flag = shadowgate_rch } }
			remove_planet_flag = shadowgate_rch_effect
			if = { limit = { has_planet_flag = shadowrift_active }
				toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = e ACTIVE = no }
			}
		}
		if = { limit = { has_planet_flag = shadowgate_dup_effect NOT = { has_planet_flag = shadowgate_dup } }
			remove_planet_flag = shadowgate_dup_effect
			remove_planet_flag = shadowgate_dup_off
			if = { limit = { is_variable_set = ShadowgateRPDUPChange } clear_variable = ShadowgateRPDUPChange }
			if = { limit = { is_variable_set = ShadowgateRPDUPFortifications } clear_variable = ShadowgateRPDUPFortifications }
		}
		if = { limit = { has_planet_flag = shadowgate_asp_effect NOT = { has_planet_flag = shadowgate_asp } }
			remove_planet_flag = shadowgate_asp_effect
			set_variable = { which = ShadowgateRPDecay value = 1 }
		}
		if = { limit = { has_planet_flag = shadowgate_vc_effect NOT = { has_planet_flag = shadowgate_vc } }
			remove_planet_flag = shadowgate_vc_effect
			if = { limit = { has_planet_flag = shadowrift_active }
				if = { limit = { has_planet_flag = shadowrift_nascent OR = { event_target:shadowrift_current_origin_e = { has_star_flag = shadowgate_shadow_remnant } event_target:shadowrift_current_terminus_e = { has_star_flag = shadowgate_shadow_remnant } } }
					remove_active_shadowrift = { SHADOWGATE = e }
				}
				toggle_vestigial_conjuration = { SHADOWGATE = e ACTIVE = no }
			}
			if = { limit = { has_planet_flag = shadowgate_sp_effect event_target:shadowrift_queued_origin_e = { has_star_flag = shadowgate_shadow_remnant } }
				event_target:shadowrift_queued_origin_e = { remove_star_flag = shadowrift_e_sp_origin }
				solar_system = { set_star_flag = shadowrift_e_sp_origin }
				update_shadowgate_origin_system = { SHADOWGATE = e }
			}
		}
		if = { limit = { has_planet_flag = shadowgate_sm_effect NOT = { has_planet_flag = shadowgate_sm } }
			remove_planet_flag = shadowgate_sm_effect
			if = { limit = { is_variable_set = ShadowgateSMRPChange } clear_variable = ShadowgateSMRPChange }
			if = { limit = { is_variable_set = ShadowgateSMEtherCost } clear_variable = ShadowgateSMEtherCost }
			if = { limit = { has_planet_flag = shadowrift_active OR = { solar_system = { has_star_flag = has_shadow_mooring_rift } AND = { exists = owner owner = { any_system_within_border = { has_star_flag = has_shadow_mooring_rift } } } } }
				solar_system = {
					if = { limit = { prev = { has_planet_flag = shadowgate_sp_effect } has_star_flag = has_shadow_mooring_rift }
						create_ambient_object = { type = shadowrift_cloud location = prev use_3d_location = yes scale = @shadowgate_cloud_scale entity_offset_height = @shadowgate_cloud_offset duration = -1 }
						last_created_ambient_object = { set_ambient_object_flag = shadowrift_cloud }
						create_ambient_object = { type = blue_sun_grow_particle_object location = prev use_3d_location = yes scale = @shadowgate_stabilized_explosion_scale entity_offset_height = @shadowgate_stabilized_explosion_offset duration = 10 }
					}
				}
				if = { limit = { shadowgate_is_currently_mooring = yes }
					set_planet_flag = remove_shadow_mooring_rifts
					remove_active_shadowrift = { SHADOWGATE = e }
				}
			}
		}
	}
}

planet_event = {
	id = shadowgate_e.3015
	title = shadowgate.lodestone.found.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.lodestone.found.desc.first
				owner = { NOT = { has_country_flag = shadowgate_dl_event_seen } }
			}
			success_text = {
				text = shadowgate.lodestone.found.desc.begin
				owner = { has_country_flag = shadowgate_dl_event_seen }
			}
			success_text = {
				text = shadowgate.lodestone.found.desc.planet
				exists = event_target:shadowgate_dl_planet_global
			}
			success_text = {
				text = shadowgate.lodestone.found.desc.owned
				event_target:shadowgate_dl_system_global = { is_within_borders_of = root.owner }
			}
			success_text = {
				text = shadowgate.lodestone.found.desc.ask
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_event_window"
	custom_gui_option = "shadowgate_option"
	picture_event_data = {
		portrait = shadowgate_ai
		room = "shadowgate_room"
	}
	is_triggered_only = yes
	location = event_target:shadowgate_dl_planet_global

	immediate = {
		event_target:shadowgate_dl_planet_global = { save_event_target_as = shadowgate_dl_planet }
		event_target:shadowgate_dl_system_global = { save_event_target_as = shadowgate_dl_system }
	}

	option = {
		name = shadowgate.lodestone.answer.yes
		event_target:shadowgate_dl_planet = {
			enable_special_project = {
				name = SHADOWGATE_DARK_LODESTONE_PROJECT
				location = this
				owner = root.owner
			}
		}
		hidden_effect = {
			remove_global_flag = shadowgate_lodestone_discovered
			owner = { set_timed_country_flag = { flag = shadowgate_dl_cooldown days = 5400 } }
			set_timed_planet_flag = { flag = shadowgate_dl_cooldown days = 9000 }
			clear_global_event_target = shadowgate_dl_planet_global
			clear_global_event_target = shadowgate_dl_system_global
		}
		ai_chance = { factor = 100 }
	}

	option = {
		name = shadowgate.lodestone.answer.no
		hidden_effect = { owner = { set_timed_country_flag = { flag = shadowgate_refused_dl days = 720 } } event_target:global_event_country = { country_event = { id = shadowgate_galactic.401 days = 10 random = 5 } } }
		ai_chance = { factor = 0 }
	}
	after = { hidden_effect = { owner = { set_country_flag = shadowgate_dl_event_seen } } }
}