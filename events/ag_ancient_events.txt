namespace = ag_ancient

# Set a global flag for this mod
event = {
	id = ag_ancient.1
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	
	immediate = {
		set_global_flag = has_ancient_empire_mod
		# Initial Settings
		set_global_flag = ag_system_spawn_in_home
		set_global_flag = ag_ancient_empire_mod_shipyard_building
		# Variables' initialization
		event_target:global_event_country = {
			set_variable = { which = ag_scaled_difficulty value = 0 }
			set_variable = { which = ag_scaled_difficulty_2x value = 0 }
			set_variable = { which = ag_scaled_difficulty_tooltip value = 1 }
			set_variable = { which = ag_zero_variable value = 0 }
			set_variable = { which = ag_one_variable value = 1 }
			country_event = { id = ag_ancient.8 days = 360 random = 360 }
		}
	}
}

# on_yearly_pulse, Count Construction Sections
event = {
	id = ag_ancient.2
	hide_window = yes
	is_triggered_only = yes
	trigger = { ag_spawnsystem_gatekeeper_trigger = yes }
	immediate = { every_system = { star = {
		clear_variable = ag_construction_section_counter
		prev = {
			every_system_planet = {
				limit = { has_planet_flag = ag_ancient_construction_section }
				prevprev = { change_variable = { which = ag_construction_section_counter value = 1 } }
			}
			every_system_megastructure = {
				limit = {
					has_megastructure_flag = ag_ancient_construction_section_megashipyard 
					is_variable_set = ag_construction_section_counter
				}
				prevprev = { change_variable = { which = ag_construction_section_counter value = prev.ag_construction_section_counter } }
			}
		}
	} } }
}

# on_ship_built, Move construction sections
ship_event = {
	id = ag_ancient.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			is_ship_size = ag_attach_construction_section
			is_ship_size = ag_remove_construction_section
		}
		from = { is_scope_type = megastructure }
	}
	immediate = {
		if = {
			limit = { is_ship_size = ag_attach_construction_section }
			if = {
				limit = { owner = { is_variable_set = ag_num_controlled_construction_sections check_variable = { which = ag_num_controlled_construction_sections value > 0 } } }
				owner = { subtract_variable = { which = ag_num_controlled_construction_sections value = 1 } }
				from = {
					if = { limit = { NOT = { has_megastructure_flag = ag_ancient_construction_section_megashipyard } } set_megastructure_flag = ag_ancient_construction_section_megashipyard }
					if = { limit = { NOT = { has_modifier = "ag_ancient_construction_section_modifier_unique" } } add_modifier = { modifier = "ag_ancient_construction_section_modifier_unique" days = -1 } }
					if = { limit = { NOT = { is_variable_set = ag_construction_section_counter } } set_variable = { which = ag_construction_section_counter value = 0 } }
					change_variable = { which = ag_construction_section_counter value = 1 }
					if = { limit = { has_modifier = "ag_ancient_construction_section_modifier" } remove_modifier = "ag_ancient_construction_section_modifier" }
					add_modifier = { modifier = "ag_ancient_construction_section_modifier" days = -1 multiplier = ag_construction_section_counter }
					solar_system.star = {
						if = { limit = { is_variable_set = ag_construction_section_counter } change_variable = { which = ag_construction_section_counter value = 1 } }
						else = { set_variable = { which = ag_construction_section_counter value = 1 } }
					}
				}
			}
		}
		else = { if = {
			limit = { from = { OR = {
				is_megastructure_type = ag_ancient_construction_section
				AND = {
					has_megastructure_flag = ag_ancient_construction_section_megashipyard
					is_variable_set = ag_construction_section_counter
					check_variable = { which = ag_construction_section_counter value > 0 }
				}
			} } }
			owner = {
				if = { limit = { NOT = { is_variable_set = ag_num_controlled_construction_sections } } set_variable = { which = ag_num_controlled_construction_sections value = 0 } }
				change_variable = { which = ag_num_controlled_construction_sections value = 1 }
			}
			from = {
				solar_system.star = {
					subtract_variable = { which = ag_construction_section_counter value = 1 }
					if = {
						limit = { check_variable = { which = ag_construction_section_counter value < 6 } }
						random_system_megastructure = {
							limit = { OR = {
								is_megastructure_type = ag_gamma_station_megastructure_0
								is_megastructure_type = ag_gamma_station_megastructure_1
								is_megastructure_type = ag_gamma_station_megastructure_2
								is_megastructure_type = ag_gamma_station_megastructure_3
								is_megastructure_type = ag_gamma_station_megastructure_4
								is_megastructure_type = ag_gamma_station_megastructure_5
								is_megastructure_type = ag_gamma_station_megastructure_6
								is_megastructure_type = ag_gamma_station_megastructure_7
								is_megastructure_type = ag_gamma_station_megastructure_8
							} }
							remove_megastructure = this
						}
					}
					if = {
						limit = { check_variable = { which = ag_construction_section_counter value <= 0 } }
						clear_variable = ag_construction_section_counter
						if = { limit = { has_planet_flag = ag_ancient_construction_section_actived_star } remove_planet_flag = ag_ancient_construction_section_actived_star }
						root.from = { if = { limit = { has_modifier = "ag_ancient_construction_section_modifier_unique" } remove_modifier = "ag_ancient_construction_section_modifier_unique" } }
					}
				}
				if = {
					limit = { is_megastructure_type = ag_ancient_construction_section }
					if = {
						limit = { exists = planet }
						planet = {
							remove_planet_flag = ag_ancient_construction_section
							set_name = "NAME_ring_struct"
							if = { limit = { has_planet_flag = ag_ancient_construction_section_actived } remove_planet_flag = ag_ancient_construction_section_actived }
						}
					}
					remove_megastructure = this
				}
				else = {
					if = { limit = { has_modifier = "ag_ancient_construction_section_modifier" } remove_modifier = "ag_ancient_construction_section_modifier" }
					subtract_variable = { which = ag_construction_section_counter value = 1 }
					if = {
						limit = { check_variable = { which = ag_construction_section_counter value <= 0 } }
						clear_variable = ag_construction_section_counter
						remove_megastructure_flag = ag_ancient_construction_section_megashipyard
					}
					else = { add_modifier = { modifier = "ag_ancient_construction_section_modifier" days = -1 multiplier = ag_construction_section_counter } }
				}
			}
		} }
		delete_fleet = { target = this.fleet kill_leader = yes destroy_template = yes }
	}
}

# ag_on_yearly_pluse_country_random, Delayed ships unlock
country_event = {
    id = ag_ancient.4
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		NOT = { has_country_flag = ag_ancient_4_locked }
		OR = {
			has_country_flag = ag_alpha_142_fired
			has_country_flag = ag_beta_127_fired
			has_country_flag = ag_gamma_102_fired
			has_country_flag = ag_delta_62_fired
			has_country_flag = ag_epsilon_103_fired
			has_country_flag = ag_eta_163_fired
			has_country_flag = ag_wanderer_103_fired
		}
		any_controlled_ship = { ag_is_ancient_ship_locked = yes }
	}
	
	immediate = {
		random_list = {
			75 = { set_timed_country_flag = { flag = ag_ancient_4_locked days = 1080 } }
			25 = {
				### Alpha Area ###
				if = {
					limit = {
						has_country_flag = ag_alpha_142_fired
						any_controlled_ship = { is_ship_size = ag_alpha_titan_0 }
					}
					while = {
						limit = { any_controlled_ship = { is_ship_size = ag_alpha_titan_0 } }
						random_controlled_ship = {
							limit = { is_ship_size = ag_alpha_titan_0 }
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								ag_create_alpha_titan_player = { ag_unlock_ship = yes ag_owner = prev.owner ag_clone_disable_info = yes }
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = { assign_leader = event_target:ag_target_leader_on_fleet }
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				
				### Beta Area ###
				if = {
					limit = {
						has_country_flag = ag_beta_127_fired
						any_controlled_ship = {
							is_ship_size = ag_beta_station_type1_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_beta_station_type1_0
							}
						}
						random_controlled_ship = {
							limit = { is_ship_size = ag_beta_station_type1_0 }
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								create_ship = {
									name = "NAME_ag_beta_station_type1_ship"
									design = "NAME_ag_beta_station_type1_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
							}
							delete_ship = this
						}
					}
				}
				
				### Gamma Area ###
				if = {
					limit = {
						has_country_flag = ag_gamma_102_fired
						any_controlled_ship = {
							is_ship_size = ag_gamma_station_0
						}
					}
					if = {
						limit = { ag_has_ship_design = { ag_design = ag_gamma_battlecruiser_0 } }
						ag_add_ship_design = { ag_design = ag_gamma_battlecruiser_1 }
					}
					if = {
						limit = { ag_has_ship_design = { ag_design = ag_gamma_escort_0 } }
						ag_add_ship_design = { ag_design = ag_gamma_escort_1 }
					}
					ag_remove_ship_design = { ag_design = ag_gamma_battlecruiser_0 }
					ag_remove_ship_design = { ag_design = ag_gamma_escort_0 }
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_gamma_station_0
							}
						}
						random_controlled_ship = {
							limit = { is_ship_size = ag_gamma_station_0 }
							ag_spawn_buff_effect = { ag_color = red ag_scale = xl }
							ag_gamma_station_player_spawn = {
								ag_unlock_ship = yes
								ag_owner = prev.owner
								ag_location_target = prev
								ag_clone_disable_info = yes
							}
							delete_ship = this
						}
					}
					every_owned_starbase = {
						limit = {
							has_starbase_size = ag_gamma_station_1
							NAND = {
								has_starbase_building = titan_yards
								has_starbase_building = colossus_yards
							}
						}
						if = {
							limit = { NOT = { has_starbase_building = titan_yards } }
							set_starbase_building = {
								slot = 1
								building = titan_yards
							}
						}
						if = {
							limit = { NOT = { has_starbase_building = colossus_yards } }
							set_starbase_building = {
								slot = 2
								building = colossus_yards
							}
						}
					}
				}
				if = {
					limit = {
						has_country_flag = ag_gamma_102_fired
						any_controlled_ship = {
							is_ship_size = ag_gamma_titan_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_gamma_titan_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_gamma_titan_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								create_ship = {
									name = "NAME_ag_gamma_titan_ship"
									design = "NAME_ag_gamma_titan_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				if = {
					limit = {
						has_country_flag = ag_gamma_102_fired
						any_controlled_ship = {
							is_ship_size = ag_gamma_battlecruiser_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_gamma_battlecruiser_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_gamma_battlecruiser_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								create_ship = {
									name = "NAME_ag_gamma_battlecruiser_ship"
									design = "NAME_ag_gamma_battlecruiser_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				if = {
					limit = {
						has_country_flag = ag_gamma_102_fired
						any_controlled_ship = {
							is_ship_size = ag_gamma_escort_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_gamma_escort_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_gamma_escort_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								create_ship = {
									name = "NAME_ag_gamma_escort_ship"
									design = "NAME_ag_gamma_escort_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				
				### Delta Area ###
				if = {
					limit = {
						has_country_flag = ag_delta_62_fired
						any_controlled_ship = {
							is_ship_size = ag_delta_titan_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_delta_titan_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_delta_titan_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								ag_create_delta_titan_player = { ag_unlock_ship = yes ag_owner = prev.owner ag_clone_disable_info = yes }
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				if = {
					limit = {
						has_country_flag = ag_delta_62_fired
						any_controlled_ship = {
							is_ship_size = ag_delta_platform_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_delta_platform_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_delta_platform_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								create_ship = {
									name = "NAME_ag_delta_platform_ship"
									design = "NAME_ag_delta_platform_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
							}
							delete_ship = this
						}
					}
				}
				if = {
					limit = {
						has_country_flag = ag_delta_62_fired
						any_controlled_ship = {
							is_ship_size = ag_delta_platform_00
						}
					}
					if = {
						limit = { ag_has_ship_design = { ag_design = ag_delta_platform_00 } }
						ag_add_ship_design = { ag_design = ag_delta_platform_10 }
					}
					ag_remove_ship_design = { ag_design = ag_delta_platform_00 }
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_delta_platform_00
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_delta_platform_00
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							create_fleet = {
								name = "NAME_ag_delta_platform_fleet"
								settings = {
									can_upgrade = no 
									can_change_composition = no 
									can_change_leader = no 
									spawn_debris = no 
								}
								effect = {
									set_fleet_flag = ag_delta_platform_player
									set_owner = root
									create_ship = {
										name = "NAME_ag_delta_platform_ship"
										design = "NAME_ag_delta_platform_10"
										prefix = no
										effect = {
											copy_flags_and_variables_from = prevprev
											ag_difficulty_bonus = yes
										}
									}
									set_location = {
										target = prev
										distance = -1
										angle = 0
									}
								}
							}
							delete_ship = this
						}
					}
				}
				
				### Epsilon Area ###
				if = {
					limit = {
						has_country_flag = ag_epsilon_103_fired
						any_controlled_ship = { is_ship_size = ag_epsilon_titan_0 }
					}
					while = {
						limit = { any_controlled_ship = { is_ship_size = ag_epsilon_titan_0 } }
						random_controlled_ship = {
							limit = { is_ship_size = ag_epsilon_titan_0 }
							ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								ag_create_epsilon_titan_player = { ag_unlock_ship = yes ag_owner = prev.owner ag_clone_disable_info = yes }
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				
				### Eta Area ###
				if = {
					limit = { has_country_flag = ag_eta_163_fired any_controlled_ship = { is_ship_size = ag_eta_titan_0 } }
					if = {
						limit = { ag_has_ship_design = { ag_design = ag_eta_gateway_0 } }
						ag_add_ship_design = { ag_design = ag_eta_gateway_1 }
					}
					ag_remove_ship_design = { ag_design = ag_eta_gateway_0 }
					while = {
						limit = { any_controlled_ship = { is_ship_size = ag_eta_titan_0 } }
						random_controlled_ship = {
							limit = { is_ship_size = ag_eta_titan_0 }
							ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								ag_create_eta_titan_player = { ag_unlock_ship = yes ag_owner = prev.owner ag_clone_disable_info = yes }
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}
				if = {
					limit = { has_country_flag = ag_eta_163_fired any_controlled_ship = { is_ship_size = ag_eta_gateway_0 } }
					every_owned_ship = {
						limit = { is_ship_size = ag_eta_gateway_0 }
						ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
						create_fleet = {
							name = "NAME_ag_eta_gateway_fleet"
							settings = {
								can_upgrade = no 
								can_change_composition = no 
								can_change_leader = no 
								spawn_debris = no 
							}
							effect = {
								set_owner = root
								create_ship = {
									name = "NAME_ag_eta_gateway_ship"
									design = "NAME_ag_eta_gateway_1"
									prefix = no
									effect = {
										copy_flags_and_variables_from = prevprev
										ag_difficulty_bonus = yes
									}
								}
								set_location = { target = prev.fleet distance = -1 angle = 0 }
							}
						}
						delete_ship = this
					}
				}
				
				### Wanderer ###
				if = {
					limit = {
						has_country_flag = ag_wanderer_103_fired
						any_controlled_ship = {
							is_ship_size = ag_ancient_wandering_ship_0
						}
					}
					while = {
						limit = {
							any_controlled_ship = {
								is_ship_size = ag_ancient_wandering_ship_0
							}
						}
						random_controlled_ship = {
							limit = {
								is_ship_size = ag_ancient_wandering_ship_0
							}
							ag_spawn_buff_effect = { ag_color = red ag_scale = l }
							fleet = {
								if = {
									limit = { exists = leader }
									leader = {
										save_global_event_target_as = ag_target_leader_on_fleet
										prev = { save_global_event_target_as = ag_target_fleet_swap }
										unassign_leader = this
									}
								}
								ag_create_ancient_wandering_ship_player = { ag_unlock_ship = yes ag_owner = prev.owner ag_clone_disable_info = yes }
							}
							delete_ship = this
							if = {
								limit = { exists = event_target:ag_target_fleet_swap }
								event_target:ag_target_fleet_swap = {
									assign_leader = event_target:ag_target_leader_on_fleet
								}
								clear_global_event_target = ag_target_fleet_swap
								clear_global_event_target = ag_target_leader_on_fleet
							}
						}
					}
				}

			}
		}
		reroll_random = yes
	}
}

# on_monthly_pulse, Set flags for fleet with ancient ship make them could special orbital bombardment stance
event = {
	id = ag_ancient.5
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = { every_playable_country = {
		limit = { is_ai = no }
		every_controlled_fleet = {
			if = {
				limit = {
					has_fleet_flag = ag_has_ancient_ship_in_fleet
					NOT = { any_owned_ship = { OR = {
						ag_is_ancient_ship = yes
						ag_is_ancient_ship_locked = yes
						ag_is_ancient_ship_unlocked = yes
					} } }
				}
				remove_fleet_flag = ag_has_ancient_ship_in_fleet
			}
			else = { if = {
				limit = {
					NOT = { has_fleet_flag = ag_has_ancient_ship_in_fleet }
					any_owned_ship = { OR = {
						ag_is_ancient_ship = yes
						ag_is_ancient_ship_locked = yes
						ag_is_ancient_ship_unlocked = yes
					} }
				}
				set_fleet_flag = ag_has_ancient_ship_in_fleet
			} }
			if = {
				limit = { any_owned_ship = { ag_is_ancient_titan = yes } }
				prev = { set_country_flag = ag_ancient_titan_trigger_temp }
			}
		}
		if = {
			limit = { has_country_flag = ag_ancient_titan_trigger_temp }
			remove_country_flag = ag_ancient_titan_trigger_temp
			set_country_flag = ag_ancient_titan_cb_flag
		}
		else = { if = {
			limit = { has_country_flag = ag_ancient_titan_cb_flag }
			remove_country_flag = ag_ancient_titan_cb_flag
		} }
	} }
}

# on_planet_bombarded, Orbital bombardment's side effects caused by ancient ships
planet_event = {
	id = ag_ancient.6
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		exists = owner
		owner = {
			NOR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				
				is_country_type = ag_ancient_primitive_crisis
				is_country_type = ag_zeta_crisis_country
				is_country_type = ag_ancient_psi_guardian
			}
		}
		num_pops > 0
		has_orbital_bombardment_stance = ag_ancient_bombardment
	}
	
	immediate = {
		from = {
			random_list = {
				20 = { change_variable = { which = ag_ancient_bombardment_charge value = 1 } }
				80 = { }
			}
			if = {
				limit = { check_variable = { which = ag_ancient_bombardment_charge value > 10 } }
				# set_update_modifiers_batch = begin
				random_list = {
					80 = { set_variable = { which = ag_ancient_bombardment_charge value = 10 } }
					20 = {
						set_variable = { which = ag_ancient_bombardment_charge value = 0 }
						prev = {
							random_list = {
								10 = { add_planet_devastation = 15 }
								10 = { add_planet_devastation = 14 }
								10 = { add_planet_devastation = 13 }
								10 = { add_planet_devastation = 12 }
								10 = { add_planet_devastation = 11 }
								10 = { add_planet_devastation = 10 }
								10 = { add_planet_devastation = 9 }
								10 = { add_planet_devastation = 8 }
								10 = { add_planet_devastation = 7 }
								10 = { add_planet_devastation = 6 }
								10 = { add_planet_devastation = 5 }
								10 = { }
							}
							reroll_random = yes
							random_list = {
								75 = {
									remove_modifier = "ag_ancient_bombardment_effect_1"
									add_modifier = { modifier = "ag_ancient_bombardment_effect_1" days = 5 }
								}
								20 = {
									remove_modifier = "ag_ancient_bombardment_effect_1"
									add_modifier = { modifier = "ag_ancient_bombardment_effect_1" days = 10 }
								}
								5 = {
									remove_modifier = "ag_ancient_bombardment_effect_1"
									add_modifier = { modifier = "ag_ancient_bombardment_effect_1" days = 30 }
								}
								
							}
							reroll_random = yes
							if = {
								limit = { num_pops > 10 }
								random_list = {
									25 = { }
									25 = {
										add_planet_devastation = 3
										while = { count = 3 random_owned_pop = { kill_pop = yes } }
									}
									25 = {
										add_planet_devastation = 5
										while = { count = 5 random_owned_pop = { kill_pop = yes } }
									}
									25 = {
										add_planet_devastation = 7
										while = { count = 7 random_owned_pop = { kill_pop = yes } }
									}
								}
								reroll_random = yes
							}
							if = {
								limit = {
									OR = {
										habitable_planet = yes
										AND = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
										ag_is_habitat = yes
									}
								}
								set_variable = { which = ag_ancient_bomb_crater_counter value = 0 }
								if = {
									limit = { ag_is_habitat = yes }
									every_deposit = {
										limit = { is_deposit_type = ag_ancient_bomb_crater_habitat }
										prev = { change_variable = { which = ag_ancient_bomb_crater_counter value = 1 } }
									}
									if = {
										limit = { check_variable = { which = ag_ancient_bomb_crater_counter value < trigger:planet_size } }
										random_list = { 50 = { } 50 = { add_deposit = ag_ancient_bomb_crater_habitat } }
										reroll_random = yes
									}
								}
								else_if = {
									limit = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
									every_deposit = {
										limit = { is_deposit_type = ag_ancient_bomb_crater_ringworld }
										prev = { change_variable = { which = ag_ancient_bomb_crater_counter value = 1 } }
									}
									if = {
										limit = { check_variable = { which = ag_ancient_bomb_crater_counter value < trigger:planet_size } }
										random_list = { 50 = { } 50 = { add_deposit = ag_ancient_bomb_crater_ringworld } }
										reroll_random = yes
									}
								}
								else_if = {
									limit = { always = yes }
									every_deposit = {
										limit = { is_deposit_type = ag_ancient_bomb_crater_default }
										prev = { change_variable = { which = ag_ancient_bomb_crater_counter value = 1 } }
									}
									if = {
										limit = { check_variable = { which = ag_ancient_bomb_crater_counter value < trigger:planet_size } }
										random_list = { 50 = { } 50 = { add_deposit = ag_ancient_bomb_crater_default } }
										reroll_random = yes
									}
								}
							}
							if = {
								limit = {
									OR = {
										habitable_planet = yes
										AND = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
										ag_is_habitat = yes
									}
									has_army = yes
									num_pops > 1
								}
								random_list = { 75 = { } 25 = { random_planet_army = { remove_army = yes } } }
								reroll_random = yes
							}
						}
					}
				}
				# set_update_modifiers_batch = end
			}
		}
		if = {
			limit = {
				planet_devastation >= 100
				ag_has_planetary_shield = no
				from = { ag_is_ancient_country = no }
				solar_system = { any_ship_in_system = {
					ag_is_ancient_ship_unlocked = yes
					fleet = {
						NOT = { has_fleet_flag = ag_planet_killer_cooldown }
						exists = orbit
						orbit = { is_same_value = root }
					}
				} }
			}
			from = { country_event = { id = ag_ancient.7 } }
		}
	}
}

# Notification for the victim country
country_event = {
	id = ag_ancient.7
	title = "ag_ancient.7.name"
	desc = "ag_ancient.7.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_burning_settlement_room }
	show_sound = event_yellow_alert
	location = from
	is_triggered_only = yes
	immediate = { save_event_target_as = ag_source_country }
	option = {
		name = "ag_ancient.7.a"
		custom_tooltip = "ag_ancient.7.a.tooltip"
		hidden_effect = {
			add_threat = { who = root amount = 3 }
			from = {
				owner = {
					add_opinion_modifier = { modifier = ag_opinion_ancient_ship_destroyed_my_planet who = root }
					add_static_war_exhaustion = { attacker = root location = root.from value_for_planet_destruction = 1.0 }
					create_message = {
						type = "PLANET_DESTROYED"
						localization = "ag_planet_destroyed_ancient_ships_desc"
						days = 30
						target = root.from
						variable = { type = name localization = "ag_attacker" scope = event_target:ag_source_country }
						variable = { type = name localization = "ag_victim_planet" scope = root.from }
					}
				}
				every_country = {
					limit = {
						NOR = {
							is_same_value = root.from.owner
							is_same_value = root
							is_country_type = fallen_empire
							AND = { has_federation = yes is_in_federation_with = root }
						}
						OR = { has_communications = root.from.owner has_communications = root }
					}
					add_opinion_modifier = { modifier = ag_opinion_ancient_ship_destroyed_planet who = root }
				}
				add_planet_devastation = -100
				if = { limit = { has_modifier = "holy_planet" } set_planet_flag = ag_holy_planet }
				clear_planet_modifiers = yes
				remove_all_buildings = yes
				remove_all_districts = yes
				clear_deposits = yes
				if = { limit = { has_branch_office = yes } close_branch_office = yes }
				destroy_colony = yes
				ag_remove_all_modifier_common = yes
				ag_destroy_orbital_ring = { ag_spawn_debris = yes }
				if = {
					limit = { NOR = {
						AND = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
						ag_is_habitat = yes
						has_planet_flag = ag_holy_planet
					} }
					ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
					ag_change_pc = { ag_planet_class = pc_broken }
				}
				else_if = {
					limit = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
					ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
					ag_destroy_habitable_ringworld = yes
				}
				else_if = {
					limit = { ag_is_habitat = yes }
					ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
					ag_remove_planet = yes
				}
				else_if = {
					limit = { has_planet_flag = ag_holy_planet }
					ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
					ag_change_pc = { ag_planet_class = pc_shattered }
					remove_planet_flag = ag_holy_planet
					remove_modifier = "holy_planet"
					add_modifier = { modifier = "ag_shattered_holy_planet" days = -1 }
					if = {
						limit = {
							NOT = { has_global_flag = ag_holy_guardian_to_awaken }
							any_country = {
								has_ai_personality_behaviour = holy_planets
								NOT = { is_at_war_with = event_target:ag_source_country }
							}
						}
						save_event_target_as = ag_destroyed_holy_planet
						set_global_flag = ag_holy_guardian_to_awaken
						random_country = {
							limit = {
								has_ai_personality_behaviour = holy_planets
								NOT = { is_at_war_with = event_target:ag_source_country }
							}
							save_event_target_as = ag_holy_guardian_empire
						}
						event_target:ag_source_country = { country_event = { id = ag_ancient.1000 days = 2 random = 5 } }
					}
				}
			}
			if = { limit = { has_ascension_perk = ap_become_the_crisis } complete_crisis_objective = crisobj_destroy_worlds }
		}
	}
	option = {
		name = "ag_ancient.7.b"
		hidden_effect = { from = { solar_system = { random_fleet_in_system = {
			limit = {
				NOT = { has_fleet_flag = ag_planet_killer_cooldown }
				any_controlled_ship = { has_ship_flag = ag_lost_ancient_ship }
				exists = orbit
				orbit = { is_same_value = root.from }
			}
			set_timed_fleet_flag = { flag = ag_planet_killer_cooldown days = 180 }
		} } } }
	}
}

# Randomly pulse in 1 ~ 2 years
country_event = {
	id = ag_ancient.8
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = { fire_on_action = { on_action = ag_on_yearly_pluse_country_random } }
		country_event = { id = ag_ancient.8 days = 360 random = 360 }
	}
}

# on_tech_increased, Gravity/Psionic Weapon's Technologies' Gateway
country_event = {
    id = ag_ancient.11
	hide_window = yes
	is_triggered_only = yes
	trigger = { OR = {
		last_increased_tech = tech_ag_revision_gravity_theory
		last_increased_tech = tech_ag_revision_psionic_theory
	} }
	immediate = {
		if = {
			limit = { last_increased_tech = tech_ag_revision_gravity_theory }
			if = { limit = { NOT = { is_variable_set = ag_gravity_weapon_damage_factor } } set_variable = { which = ag_gravity_weapon_damage_factor value = 0 } }
			if = { limit = { NOT = { is_variable_set = ag_gravity_weapon_fire_rate_factor } } set_variable = { which = ag_gravity_weapon_fire_rate_factor value = 0 } }
			if = { limit = { has_modifier = "ag_gravity_weapon_damage_repeatable_modifier" } remove_modifier = "ag_gravity_weapon_damage_repeatable_modifier" }
			if = { limit = { has_modifier = "ag_gravity_weapon_fire_rate_repeatable_modifier" } remove_modifier = "ag_gravity_weapon_fire_rate_repeatable_modifier" }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_gravity_weapon_damage_factor }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_gravity_weapon_fire_rate_factor }
			add_modifier = { modifier = "ag_gravity_weapon_damage_repeatable_modifier" days = -1 multiplier = ag_gravity_weapon_damage_factor }
			add_modifier = { modifier = "ag_gravity_weapon_fire_rate_repeatable_modifier" days = -1 multiplier = ag_gravity_weapon_fire_rate_factor }
		}
		else = {
			if = { limit = { NOT = { is_variable_set = ag_psionic_weapon_damage_factor } } set_variable = { which = ag_psionic_weapon_damage_factor value = 0 } }
			if = { limit = { NOT = { is_variable_set = ag_psionic_weapon_fire_rate_factor } } set_variable = { which = ag_psionic_weapon_fire_rate_factor value = 0 } }
			if = { limit = { NOT = { is_variable_set = ag_anti_psionic_weapon_damage_factor } } set_variable = { which = ag_anti_psionic_weapon_damage_factor value = 0 } }
			if = { limit = { NOT = { is_variable_set = ag_anti_psionic_weapon_fire_rate_factor } } set_variable = { which = ag_anti_psionic_weapon_fire_rate_factor value = 0 } }
			if = { limit = { has_modifier = "ag_psionic_weapon_damage_repeatable_modifier" } remove_modifier = "ag_psionic_weapon_damage_repeatable_modifier" }
			if = { limit = { has_modifier = "ag_psionic_weapon_fire_rate_repeatable_modifier" } remove_modifier = "ag_psionic_weapon_fire_rate_repeatable_modifier" }
			if = { limit = { has_modifier = "ag_anti_psionic_weapon_damage_repeatable_modifier" } remove_modifier = "ag_anti_psionic_weapon_damage_repeatable_modifier" }
			if = { limit = { has_modifier = "ag_anti_psionic_weapon_fire_rate_repeatable_modifier" } remove_modifier = "ag_anti_psionic_weapon_fire_rate_repeatable_modifier" }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_psionic_weapon_damage_factor }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_psionic_weapon_fire_rate_factor }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_anti_psionic_weapon_damage_factor }
			ag_add_randomize_repeatable_factor = { ag_variable = ag_anti_psionic_weapon_fire_rate_factor }
			add_modifier = { modifier = "ag_psionic_weapon_damage_repeatable_modifier" days = -1 multiplier = ag_psionic_weapon_damage_factor }
			add_modifier = { modifier = "ag_psionic_weapon_fire_rate_repeatable_modifier" days = -1 multiplier = ag_psionic_weapon_fire_rate_factor }
			add_modifier = { modifier = "ag_anti_psionic_weapon_damage_repeatable_modifier" days = -1 multiplier = ag_anti_psionic_weapon_damage_factor }
			add_modifier = { modifier = "ag_anti_psionic_weapon_fire_rate_repeatable_modifier" days = -1 multiplier = ag_anti_psionic_weapon_fire_rate_factor }
		}
	}
}
country_event = {
	id = ag_ancient.12
	hide_window = yes
	is_triggered_only = yes
	trigger = { last_increased_tech = tech_ag_ancient_construction_section_megashipyard }
	immediate = {
		create_ship_design = { design = "NAME_ag_attach_construction_section" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_ag_remove_construction_section" }
		add_ship_design = last_created_design
	}
}
country_event = {
    id = ag_ancient.13
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_list = {
			50 = { }
			50 = { 
				if = { limit = { ag_has_gravity_weapon = yes } set_country_flag = ag_has_gravity_weapon }
				else = { if = { limit = { has_country_flag = ag_has_gravity_weapon } remove_country_flag = ag_has_gravity_weapon } }
				if = { limit = { ag_has_psionic_weapon = yes } set_country_flag = ag_has_psionic_weapon }
				else = { if = { limit = { has_country_flag = ag_has_psionic_weapon } remove_country_flag = ag_has_psionic_weapon } }
			}
		}
		reroll_random = yes
	}
}

# Ancient ship revives in calamity difficulty.
ship_event = {
	id = ag_ancient.29
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOR = {
			is_ship_size = ag_zeta_crisis_small_ship
			is_ship_size = ag_zeta_crisis_medium_ship
			is_ship_size = ag_zeta_crisis_large_ship
			is_ship_size = ag_zeta_crisis_support_ship
			is_ship_size = ag_zeta_crisis_special_ship
			is_ship_size = ag_zeta_crisis_construction_ship
			is_ship_size = ag_zeta_crisis_defensive_platform
		}
		OR = { ag_is_ancient_ship = yes ag_is_ancient_ship_unlocked = yes }
	}
	immediate = {
		repair_ship = yes
		set_disabled = no
		ag_spawn_extra_lives_effect = yes
		ag_subtract_disable_at_health = { ag_disable_type = difficulty }
		ship_event = { id = ag_ancient.30 days = 270 random = 90 }
	}
	after = { if = {
		limit = { has_ship_flag = ag_set_disable_at_health NOT = { is_variable_set = ag_disable_difficulty } }
		if = {
			limit = { has_ship_flag = ag_gamma_station_protection_enabled }
			switch = {
				trigger = has_ship_flag
				ag_gamma_station_protection_1 = { set_disable_at_health = 0.25 set_variable = { which = ag_disable_health_var value = 0.25 } }
				ag_gamma_station_protection_2 = { set_disable_at_health = 0.50 set_variable = { which = ag_disable_health_var value = 0.50 } }
				ag_gamma_station_protection_3 = { set_disable_at_health = 0.75 set_variable = { which = ag_disable_health_var value = 0.75 } }
			}
		}
		else = { set_disable_at_health = 0.10 set_variable = { which = ag_disable_health_var value = 0.10 } }
	} }
}
ship_event = {
	id = ag_ancient.30
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value > 2 } } }
			ag_set_disable_at_health = { ag_value = 0.5 ag_disable_type = difficulty }
		}
	}
}

# Could use Construction Sections when controlled them
country_event = {
	id = ag_ancient.31
	title = "ag_ancient.31.name"
	desc = "ag_ancient.31.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_m_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_fallen_empire_room }
	show_sound = event_mystic_reveal

	mean_time_to_happen = { years = 5 }

	trigger = {
		NOT = { has_country_flag = ag_known_construction_section }
		any_planet_within_border = {
			OR = {
				has_planet_flag = ag_ancient_construction_section
				has_planet_flag = ag_ancient_resource_section
			}
		}
	}

	option = {
		name = "ag_ancient.31.a"
		hidden_effect = {
			set_country_flag = ag_known_construction_section
		}
	}
}

# on_ship_built, Difficulty Modifier for buildable ancient ships
ship_event = {
	id = ag_ancient.35
	hide_window = yes
	
	is_triggered_only = yes
	trigger = { ag_is_buildable_ancient_ship = yes }
	
	immediate = {
		ag_difficulty_bonus = yes
		fleet = { set_fleet_flag = ag_has_ancient_ship_in_fleet }
	}
}

# on_ship_destroyed_perp, Small chance for special technologies when destroy ancient ships
country_event = {
	id = ag_ancient.41
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_special_project = ag_ancient_debris_project }
		OR = {
			has_technology = tech_corvette_hull_2
			has_technology = tech_destroyer_hull_2
			has_technology = tech_cruiser_hull_2
			has_technology = tech_battleship_hull_2
			has_technology = tech_titan_hull_2
			has_technology = tech_ag_aura_battleship_hull_2
		}
		from = { NOT = { has_ascension_perk = ap_enigmatic_engineering } }
		fromfromfrom = {
			OR = {
				ag_is_ancient_ship = yes
				ag_is_ancient_ship_locked = yes
				ag_is_ancient_ship_unlocked = yes
			}
		}
	}

	immediate = {
		random_list = {
			1 = {
				if = {
					limit = { fromfromfrom.solar_system = { NOT = { any_system_ambient_object = { has_ambient_object_flag = ag_ancient_debris_object } } } }
					fromfromfrom.solar_system = {
						save_event_target_as = ag_debris_system
						create_ambient_object = {
							type = "ag_ancient_debris_object"
							location = root.fromfromfrom
						}
						last_created_ambient_object = {
							save_event_target_as = ag_ancient_debris_object
							set_ambient_object_flag = ag_ancient_debris_object
						}
					}
					enable_special_project = {
						name = ag_ancient_debris_project
						location = event_target:ag_ancient_debris_object
						owner = root
					}
				}
			}
			499 = { }
		}
	}
}

# Lock ship's hp no more than a certain point/percentage.
ship_event = {
	id = ag_ancient.42
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		if = {
			limit = { is_in_combat = yes has_ship_flag = ag_ship_hull_locked }
			if = {
				limit = { OR = {
					NOT = { is_variable_set = ag_ship_locked_value }
					check_variable = { which = ag_ship_locked_value value <= 0 }
				} }
				set_variable = { which = ag_ship_locked_value value = 1 }
			}
			if = {
				limit = { has_hp > ag_ship_locked_value }
				set_variable = { which = ag_ship_hull_var value = 0 }
				export_trigger_value_to_variable = { trigger = has_hp variable = ag_ship_hull_var }
				subtract_variable = { which = ag_ship_hull_var value = ag_ship_locked_value }
				reduce_hp = ag_ship_hull_var
				clear_variable = ag_ship_hull_var
			}
			ship_event = { id = ag_ancient.42 days = 1 }
		}
		else = { ag_clear_ship_hull_locked = yes }
	}
}
ship_event = {
	id = ag_ancient.43
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		if = {
			limit = { is_in_combat = yes has_ship_flag = ag_ship_hull_locked_percent }
			if = {
				limit = { OR = {
					NOT = { is_variable_set = ag_ship_hull_locked_percent_value }
					check_variable = { which = ag_ship_hull_locked_percent_value value <= 0 }
					check_variable = { which = ag_ship_hull_locked_percent_value value > 1 }
				} }
				set_variable = { which = ag_ship_hull_locked_percent_value value = 0.05 }
			}
			if = {
				limit = { has_hp_percentage > ag_ship_hull_locked_percent_value }
				export_trigger_value_to_variable = { trigger = has_hp_percentage variable = ag_ship_hull_percent_temp }
				export_trigger_value_to_variable = { trigger = has_hp variable = ag_ship_hull_percent_var }
				divide_variable = { which = ag_ship_hull_percent_var value = ag_ship_hull_percent_temp }
				subtract_variable = { which = ag_ship_hull_percent_temp value = ag_ship_hull_locked_percent_value }
				multiply_variable = { which = ag_ship_hull_percent_var value = ag_ship_hull_percent_temp }
				reduce_hp = ag_ship_hull_percent_var
				clear_variable = ag_ship_hull_percent_var
				clear_variable = ag_ship_hull_percent_temp
			}
			ship_event = { id = ag_ancient.43 days = 1 }
		}
		else = { ag_clear_ship_hull_locked_percent = yes }
	}
}

# on_ascension_perk_picked, Effects for Ascension Perks
country_event = {
	id = ag_ancient.51
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { has_ascension_perk = ap_defender_of_the_galaxy }
			if = {
				limit = { NOT = { has_modifier = ag_defender_of_the_galaxy_gamma_crisis } }
				add_modifier = { modifier = ag_defender_of_the_galaxy_gamma_crisis days = -1 }
			}
			if = {
				limit = { NOT = { has_modifier = ag_defender_of_the_galaxy_zeta_crisis } }
				add_modifier = { modifier = ag_defender_of_the_galaxy_zeta_crisis days = -1 }
			}
		}
		if = {
			limit = { has_ascension_perk = ap_galactic_contender NOT = { has_modifier = ag_galactic_contender_ancients } }
			add_modifier = { modifier = ag_galactic_contender_ancients days = -1 }
		}
	}
}

# Archaeological Exploration to Ancient Ruins
planet_event = {
	id = ag_ancient.61
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		owner = {
			reroll_random = yes
			random_list = {
				30 = { country_event = { id = ag_ancient.62 } }																								# Random research points
				25 = { country_event = { id = ag_ancient.63 } }																								# Research Speed Bonus
				25 = { country_event = { id = ag_ancient.64 } }																								# Random Resources
				15 = { modifier = { factor = 2 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient_knowledge.25 } }	# Ancient Knowledge
				10 = { modifier = { factor = 0.75 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient.65 } }			# Random Technology
				5 = { modifier = { factor = 2 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient.66 } }				# Class 5 Singularity
				5 = { modifier = { factor = 2 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient.67 } }				# Matter Generator
				5 = { modifier = { factor = 2 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient.68 } }				# Fabrication Facility
				5 = { modifier = { factor = 2 root = { has_planet_flag = ag_ring_habitable_section } } country_event = { id = ag_ancient.69 } }				# Unknown Building
			}
		}
	}
}
country_event = {
	id = ag_ancient.62
	title = "ag_ancient.62.name"
	desc = "ag_ancient.62.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.62.a"
		locked_random_list = {
			10 = { ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 } }
			10 = { ag_add_monthly_research = { ag_area = society_research ag_tier = 4 } }
			10 = { ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 } }
			10 = {
				ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 }
				ag_add_monthly_research = { ag_area = society_research ag_tier = 4 }
			}
			10 = {
				ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 }
				ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 }
			}
			10 = {
				ag_add_monthly_research = { ag_area = society_research ag_tier = 4 }
				ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 }
			}
			10 = {
				ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 }
				ag_add_monthly_research = { ag_area = society_research ag_tier = 4 }
				ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 }
			}
		}
	}
}
country_event = {
	id = ag_ancient.63
	title = "ag_ancient.63.name"
	desc = "ag_ancient.63.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	after = {
		remove_country_flag = ag_ancient_ruins_research_buff_2
		remove_country_flag = ag_ancient_ruins_research_buff_3
		remove_country_flag = ag_ancient_ruins_research_buff_4
		remove_country_flag = ag_ancient_ruins_research_buff_5
	}

	option = {
		name = "ag_ancient.63.a"
		hidden_effect = {
			if = { limit = { has_modifier = ag_ancient_ruins_research_buff_1 }
				remove_modifier = ag_ancient_ruins_research_buff_1
			}
			if = { limit = { has_modifier = ag_ancient_ruins_research_buff_2 }
				set_country_flag = ag_ancient_ruins_research_buff_2
				remove_modifier = ag_ancient_ruins_research_buff_2
			}
			if = { limit = { has_modifier = ag_ancient_ruins_research_buff_3 }
				set_country_flag = ag_ancient_ruins_research_buff_3
				remove_modifier = ag_ancient_ruins_research_buff_3
			}
			if = { limit = { has_modifier = ag_ancient_ruins_research_buff_4 }
				set_country_flag = ag_ancient_ruins_research_buff_4
				remove_modifier = ag_ancient_ruins_research_buff_4
			}
			if = { limit = { has_modifier = ag_ancient_ruins_research_buff_5 }
				set_country_flag = ag_ancient_ruins_research_buff_5
				remove_modifier = ag_ancient_ruins_research_buff_5
			}
		}
		locked_random_list = {
			15 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_2
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_1 days = 360 }
			}
			10 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_2
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_1 days = 540 }
			}
			5 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_2
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_1 days = 720 }
			}
			15 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_2 days = 360 }
			}
			10 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_2 days = 540 }
			}
			5 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_3
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_2 days = 720 }
			}
			15 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_3 days = 360 }
			}
			10 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_3 days = 540 }
			}
			5 = {
				modifier = {
					factor = 0
					OR = {
						has_country_flag = ag_ancient_ruins_research_buff_4
						has_country_flag = ag_ancient_ruins_research_buff_5
					}
				}
				add_modifier = { modifier = ag_ancient_ruins_research_buff_3 days = 720 }
			}
			15 = {
				modifier = { factor = 0 has_country_flag = ag_ancient_ruins_research_buff_5 }
				add_modifier = { modifier = ag_ancient_ruins_research_buff_4 days = 360 }
			}
			10 = {
				modifier = { factor = 0 has_country_flag = ag_ancient_ruins_research_buff_5 }
				add_modifier = { modifier = ag_ancient_ruins_research_buff_4 days = 540 }
			}
			5 = {
				modifier = { factor = 0 has_country_flag = ag_ancient_ruins_research_buff_5 }
				add_modifier = { modifier = ag_ancient_ruins_research_buff_4 days = 720 }
			}
			15 = { add_modifier = { modifier = ag_ancient_ruins_research_buff_5 days = 360 } }
			10 = { add_modifier = { modifier = ag_ancient_ruins_research_buff_5 days = 540 } }
			5 = { add_modifier = { modifier = ag_ancient_ruins_research_buff_5 days = 720 } }
		}
	}
}
country_event = {
	id = ag_ancient.64
	title = "ag_ancient.64.name"
	desc = "ag_ancient.64.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	is_triggered_only = yes
	immediate = {
		# set_variable_to_random_value = { which = ag_ancient_64_var min = 0.75 max = 1.25 rounded = no }
		set_variable = { which = ag_ancient_64_var value = 1.0 }
		reroll_random = yes
		random_list = {
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.025 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.050 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.075 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.100 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.125 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.150 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.175 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.200 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.225 } }
			10 = { subtract_variable = { which = ag_ancient_64_var value = 0.250 } }
			10 = { }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.025 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.050 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.075 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.100 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.125 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.150 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.175 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.200 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.225 } }
			10 = { change_variable = { which = ag_ancient_64_var value = 0.250 } }
		}
	}
	after = { hidden_effect = { clear_variable = ag_ancient_64_var } }
	option = {
		name = "ag_ancient.64.a"
		locked_random_list = {
			10 = {
				locked_random_list = {
					10 = { add_resource = { energy = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
					10 = { add_resource = { minerals = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
					10 = { add_resource = { alloys mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|4000| } }
					10 = { add_resource = { consumer_goods mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|6000| } }
					10 = { add_resource = { volatile_motes mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
					10 = { add_resource = { rare_crystals mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
					10 = { add_resource = { sr_living_metal mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
					10 = { add_resource = { nanites mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
					10 = { add_resource = { sr_dark_matter mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
					10 = { add_resource = { sr_zro mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
					10 = { add_resource = { minor_artifacts mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|500| } }
				}
			}
			10 = {
				hidden_effect = { divide_variable = { which = ag_ancient_64_var value = 2 } }
				while = {
					count = 2
					locked_random_list = {
						10 = { add_resource = { energy = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { minerals = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { alloys mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|4000| } }
						10 = { add_resource = { consumer_goods mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|6000| } }
						10 = { add_resource = { volatile_motes mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { rare_crystals mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { sr_living_metal mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { nanites mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { sr_dark_matter mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { sr_zro mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { minor_artifacts mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|500| } }
					}
				}
			}
			10 = {
				hidden_effect = { divide_variable = { which = ag_ancient_64_var value = 3 } }
				while = {
					count = 3
					locked_random_list = {
						10 = { add_resource = { energy = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { minerals = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { alloys mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|4000| } }
						10 = { add_resource = { consumer_goods mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|6000| } }
						10 = { add_resource = { volatile_motes mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { rare_crystals mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { sr_living_metal mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { nanites mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { sr_dark_matter mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { sr_zro mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { minor_artifacts mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|500| } }
					}
				}
			}
			10 = {
				hidden_effect = { divide_variable = { which = ag_ancient_64_var value = 4 } }
				while = {
					count = 4
					locked_random_list = {
						10 = { add_resource = { energy = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { minerals = 8000 mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|8000| } }
						10 = { add_resource = { alloys mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|4000| } }
						10 = { add_resource = { consumer_goods mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|6000| } }
						10 = { add_resource = { volatile_motes mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { rare_crystals mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1250| } }
						10 = { add_resource = { sr_living_metal mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { nanites mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|2500| } }
						10 = { add_resource = { sr_dark_matter mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { sr_zro mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|1000| } }
						10 = { add_resource = { minor_artifacts mult = value:ag_modify_variable|ag_which|ag_ancient_64_var|ag_op|mult|ag_value|500| } }
					}
				}
			}
		}
	}
}
country_event = {
	id = ag_ancient.65
	title = "ag_ancient.65.name"
	desc = "ag_ancient.65.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.65.a"
		locked_random_list = {
			10 = {
                add_random_research_option = {
                    add_progress = 0.50
                    area = physics
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.40
                    area = physics
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.30
                    area = physics
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = physics_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.50
                    area = society
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = society_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.40
                    area = society
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = society_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.30
                    area = society
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = society_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.50
                    area = engineering
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.40
                    area = engineering
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 } }
                }
			}
			10 = {
                add_random_research_option = {
                    add_progress = 0.30
                    area = engineering
                    ignore_prereqs = no
                    fail_effects = { ag_add_monthly_research = { ag_area = engineering_research ag_tier = 4 } }
                }
			}
		}
	}
}
country_event = {
	id = ag_ancient.66
	title = "ag_ancient.66.name"
	desc = "ag_ancient.66.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.66.a"
		custom_tooltip = "ag_ancient.66.a.tooltip"
		hidden_effect = { change_variable = { which = ag_class_5_singularity_counter value = 1 } }
	}
}
country_event = {
	id = ag_ancient.67
	title = "ag_ancient.67.name"
	desc = "ag_ancient.67.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.67.a"
		custom_tooltip = "ag_ancient.67.a.tooltip"
		hidden_effect = { change_variable = { which = ag_matter_generator_counter value = 1 } }
	}
}
country_event = {
	id = ag_ancient.68
	title = "ag_ancient.68.name"
	desc = "ag_ancient.68.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.68.a"
		custom_tooltip = "ag_ancient.68.a.tooltip"
		hidden_effect = { change_variable = { which = ag_fabrication_facility_counter value = 1 } }
	}
}
country_event = {
	id = ag_ancient.69
	title = "ag_ancient.69.name"
	desc = "ag_ancient.69.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_archaeological_dig_room }
	show_sound = event_default
	location = from
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.69.a"
		custom_tooltip = "ag_ancient.69.a.tooltip"
		hidden_effect = { change_variable = { which = ag_ancient_unknown_building_counter value = 1 } }
	}
}

# on_colonization_started, Advanced colonizer setup event.
planet_event = {
	id = ag_ancient.81
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = from from = { is_ship_size = ag_advanced_colonizer } }
	immediate = {
		set_planet_flag = ag_adv_col_@from.owner
		from = {
			set_variable = { which = ag_planet_additional_pop value = 0 }
			set_variable = { which = ag_planet_building_buff value = 0 }
			set_variable = { which = ag_planet_col_reduce_time value = 0 }
			set_variable = { which = ag_planet_col_speed_buff value = 0 }

			if = { limit = { has_component = ag_advanced_colonizer_additional_building } prev = { set_planet_flag = ag_planet_additional_building_@from.owner } }

			# export_modifier_to_variable = { modifier = ag_advanced_colonizer_additional_pop_add variable = ag_planet_additional_pop }
			set_variable = { which = ag_planet_additional_pop value = modifier:ag_advanced_colonizer_additional_pop_add }
			multiply_variable = { which = ag_planet_additional_pop value = value:ag_modifier_mult_multiplier|ag_modifier|ag_advanced_colonizer_additional_pop_mult| }
			if = {
				limit = { check_variable = { which = ag_planet_additional_pop value != 0 } }
				root = { set_variable = { which = ag_planet_additional_pop value = root.from.ag_planet_additional_pop } }
			}

			# export_modifier_to_variable = { modifier = ag_advanced_colonizer_building_buff_mult variable = ag_planet_building_buff }
			set_variable = { which = ag_planet_building_buff value = modifier:ag_advanced_colonizer_building_buff_mult }
			if = {
				limit = { check_variable = { which = ag_planet_building_buff value != 0 } }
				root = { set_variable = { which = ag_planet_building_buff value = root.from.ag_planet_building_buff } }
			}

			# export_modifier_to_variable = { modifier = ag_advanced_colonizer_col_time_reduction variable = ag_planet_col_reduce_time }
			set_variable = { which = ag_planet_col_reduce_time value = modifier:ag_advanced_colonizer_col_time_reduction }
			if = {
				limit = { check_variable = { which = ag_planet_col_reduce_time value != 0 } }
				root = {
					set_variable = { which = ag_planet_col_reduce_time value = root.from.ag_planet_col_reduce_time }
					while = {
						limit = { check_variable = { which = ag_planet_col_reduce_time value >= 0.01 } }
						add_colony_progress = 0.01
						subtract_variable = { which = ag_planet_col_reduce_time value = 0.01 }
					}
					clear_variable = ag_planet_col_reduce_time
				}
			}

			# export_modifier_to_variable = { modifier = ag_advanced_colonizer_col_speed_mult variable = ag_planet_col_speed_buff }
			set_variable = { which = ag_planet_col_speed_buff value = modifier:ag_advanced_colonizer_col_speed_mult }
			if = {
				limit = { check_variable = { which = ag_planet_col_speed_buff value != 0 } }
				root = {
					set_variable = { which = ag_planet_col_speed_buff value = root.from.ag_planet_col_speed_buff }
					if = {
						limit = { check_variable = { which = ag_planet_col_speed_buff value > 0 } }
						add_modifier = { modifier = "ag_adv_col_speed_buff" days = -1 multiplier = ag_planet_col_speed_buff }
					}
					else = { add_modifier = { modifier = "ag_adv_col_speed_buff_alt" days = -1 multiplier = ag_planet_col_speed_buff } }
					clear_variable = ag_planet_col_speed_buff
				}
			}
		}
	}
}
# on_colonized, Advanced colonizer setup event.
planet_event = {
	id = ag_ancient.82
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_planet_flag = ag_adv_col_@root.owner }
	immediate = {
		remove_planet_flag = ag_adv_col_@root.owner
		if = {
			limit = { has_planet_flag = ag_planet_additional_building_@root.owner }
			remove_planet_flag = ag_planet_additional_building_@root.owner
			remove_building = building_colony_shelter
			remove_building = building_hive_capital
			remove_building = building_deployment_post
			remove_building = building_hab_capital
			if = {
				limit = { is_planet_class = pc_habitat }
				add_building = building_hab_major_capital
			}
			else_if = {
				limit = { owner = { is_hive_empire = yes } }
				add_building = building_hive_major_capital
			}
			else_if = {
				limit = { owner = { OR = { is_machine_empire = yes is_country_type = ai_empire } is_fallen_empire = no } }
				add_building = building_machine_capital
			}
			else_if = {
				limit = { always = yes }
				add_building = building_capital
			}
		}
		if = {
			limit = { is_variable_set = ag_planet_additional_pop }
			random_owned_pop = { species = { save_event_target_as = ag_target_species } }
			while = {
				limit = { check_variable = { which = ag_planet_additional_pop value >= 1 } }
				create_pop = { species = event_target:ag_target_species }
				subtract_variable = { which = ag_planet_additional_pop value = 1 }
			}
			clear_variable = ag_planet_additional_pop
		}
		if = {
			limit = { is_variable_set = ag_planet_building_buff }
			add_modifier = { modifier = "ag_adv_col_building_buff" days = 1800 multiplier = ag_planet_building_buff }
			clear_variable = ag_planet_building_buff
		}
		if = { limit = { has_modifier = "ag_adv_col_speed_buff" } remove_modifier = "ag_adv_col_speed_buff" }
	}
}

# on_planet_bombarded, Ancient Foretress's planetary shield effect.
@ag_advanced_planetary_shield_normal_scale = 0.12
@ag_advanced_planetary_shield_habitat_scale = 0.13
planet_event = {
	id = ag_ancient.83
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_building = ag_ancient_fortress
			has_building = ag_ancient_fortress_corp
			AND = { exists = owner owner = { is_subject = yes exists = overlord } has_holding = { holding = ag_ancient_fortress_overlord owner = root.owner.overlord } }
		}
		NOR = {
			has_planet_flag = ag_ancient_fortress_actived
			has_planet_flag = ag_ancient_fortress_planetary_shield_cooldown
		}
		check_variable = { which = ag_ancient_fortress_planetary_shield_effect value > 0 }
	}

	immediate = {
		set_planet_flag = ag_ancient_fortress_actived
		export_trigger_value_to_variable = { trigger = planet_devastation variable = ag_planet_devastation_temp }
		add_planet_devastation = -100
		if = {
			limit = { check_variable = { which = ag_planet_devastation_temp value != 0 } }
			while = { count = ag_planet_devastation_temp add_planet_devastation = 1 }
		}
		if = {
			limit = { NOR = { ag_is_ringworld = yes ag_is_habitat = yes } }
		    create_ambient_object = {
				type = "ag_advanced_planetary_shield_object"
				scale = @ag_advanced_planetary_shield_normal_scale
				duration = -1
				location = this
				use_3d_location = yes
				entity_scale_to_size = yes
			}
			last_created_ambient_object = {
				set_ambient_object_flag = ag_advanced_planetary_shield
				set_ambient_object_flag = ag_advanced_planetary_shield_@root
			}
		}
		else_if = {
			limit = { ag_is_habitat = yes }
		    create_ambient_object = {
				type = "ag_advanced_planetary_shield_object"
				scale = @ag_advanced_planetary_shield_habitat_scale
				duration = -1
				location = this
				use_3d_location = yes
				entity_scale_to_size = yes
			}
			last_created_ambient_object = {
				set_ambient_object_flag = ag_advanced_planetary_shield
				set_ambient_object_flag = ag_advanced_planetary_shield_@root
			}
		}
		planet_event = { id = ag_ancient.84 days = 1 }
	}
}
planet_event = {
	id = ag_ancient.84
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				exists = owner
				OR = {
					has_building = ag_ancient_fortress
					has_building = ag_ancient_fortress_corp
					AND = { exists = owner owner = { is_subject = yes exists = overlord } has_holding = { holding = ag_ancient_fortress_overlord owner = root.owner.overlord } }
				}
			}
			if = {
				limit = { has_orbital_bombardment = yes NOT = { has_planet_flag = ag_ancient_fortress_planetary_shield_cooldown } }
				if = {
					limit = { check_variable = { which = ag_ancient_fortress_planetary_shield_effect value > 0 } }
					subtract_variable = { which = ag_ancient_fortress_planetary_shield_effect value = 1 }
					add_planet_devastation = -100
					if = {
						limit = { check_variable = { which = ag_planet_devastation_temp value != 0 } }
						while = { count = ag_planet_devastation_temp add_planet_devastation = 1 }
					}
				}
				else_if = {
					limit = { NOT = { has_planet_flag = ag_ancient_fortress_planetary_shield_cooldown } }
					ag_spawn_explosion_effect = { ag_color = orange ag_scale = xl }
					remove_planet_flag = ag_ancient_fortress_actived
					set_timed_planet_flag = { flag = ag_ancient_fortress_planetary_shield_cooldown days = 180 }
					clear_variable = ag_planet_devastation_temp
					solar_system = { every_system_ambient_object = {
						limit = { has_ambient_object_flag = ag_advanced_planetary_shield has_ambient_object_flag = ag_advanced_planetary_shield_@root }
						destroy_ambient_object = this
					} }
				}
				planet_event = { id = ag_ancient.84 days = 1 }
			}
			else_if = { limit = { has_planet_flag = ag_ancient_fortress_planetary_shield_cooldown } planet_event = { id = ag_ancient.84 days = 1 } }
			else_if = {
				limit = { has_orbital_bombardment = no }
				if = { limit = { has_planet_flag = ag_ancient_fortress_actived } remove_planet_flag = ag_ancient_fortress_actived }
				if = {
					limit = { check_variable = { which = ag_ancient_fortress_planetary_shield_effect value < 30 } }
					change_variable = { which = ag_ancient_fortress_planetary_shield_effect value = 1 }
					planet_event = { id = ag_ancient.84 days = 1 }
				}
			}
		}
		else = { ag_clear_ancient_fortress_effect = yes }
	}
}
# Build ancient fortress, set variable.
planet_event = {
	id = ag_ancient.85
	hide_window = yes
	trigger = {
		OR = {
			has_building = ag_ancient_fortress
			has_building = ag_ancient_fortress_corp
			AND = { exists = owner owner = { is_subject = yes exists = overlord } has_holding = { holding = ag_ancient_fortress_overlord owner = root.owner.overlord } }
		}
		NOT = { is_variable_set = ag_ancient_fortress_planetary_shield_effect }
	}
	is_triggered_only = yes
	immediate = { set_variable = { which = ag_ancient_fortress_planetary_shield_effect value = 30 } }
}
# Destroy ancient fortress, clear variable.
planet_event = {
	id = ag_ancient.86
	hide_window = yes
	trigger = {
		NOR = {
			has_building = ag_ancient_fortress
			has_building = ag_ancient_fortress_corp
			AND = { exists = owner owner = { is_subject = yes exists = overlord } has_holding = { holding = ag_ancient_fortress_overlord owner = root.owner.overlord } }
		}
		is_variable_set = ag_ancient_fortress_planetary_shield_effect
	}
	is_triggered_only = yes
	immediate = { ag_clear_ancient_fortress_effect = yes }
}
# on_planet_class_changed, Planet is no longer a colony, remove shield effect.
planet_event = {
	id = ag_ancient.87
	hide_window = yes
	trigger = {
		is_colony = no
		is_variable_set = ag_ancient_fortress_planetary_shield_effect
	}
	is_triggered_only = yes
	immediate = { ag_clear_ancient_fortress_effect = yes }
}

# Ship extra lives system.
ship_event = {
	id = ag_ancient.91
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		repair_ship = yes
		set_disabled = no
		ag_spawn_extra_lives_effect = yes
		ag_subtract_disable_at_health = { ag_disable_type = extra_life }
		change_variable = { which = ag_extra_life_cooldown value = 1 }
		ship_event = { id = ag_ancient.93 days = @ag_ship_extra_life_cooldown_days }
	}
}
# Check disable effect.
ship_event = {
	id = ag_ancient.92
	hide_window = yes

	is_triggered_only = yes
	trigger = { OR = {
		check_modifier_value = { modifier = ag_extra_life_add value != 0 }
		AND = {
			check_modifier_value = { modifier = ag_extra_life_add value = 0 }
			OR = {
				is_variable_set = ag_disable_extra_life
				is_variable_set = ag_extra_life_cooldown
			}
			check_variable_arithmetic = { which = ag_disable_extra_life add = ag_extra_life_cooldown value != 0 }
		}
	} }

	immediate = {
		if = {
			limit = { check_modifier_value = { modifier = ag_extra_life_add value != 0 } }
			if = {
				limit = { check_variable_arithmetic = {
					which = ag_disable_extra_life
					add = ag_extra_life_cooldown
					value != modifier:ag_extra_life_add
				} }
				if = {
					limit = { check_variable_arithmetic = {
						which = ag_disable_extra_life
						add = ag_extra_life_cooldown
						value < modifier:ag_extra_life_add
					} }
					while = {
						limit = { check_variable_arithmetic = {
							which = ag_disable_extra_life
							add = ag_extra_life_cooldown
							value < modifier:ag_extra_life_add
						} }
						ag_set_disable_at_health = { ag_value = 0.1 ag_disable_type = extra_life }
					}
				}
				else = {
					if = {
						limit = { check_modifier_value = { modifier = ag_extra_life_add value < 0 } }
						ag_clear_disable_at_health = { ag_disable_type = extra_life }
						clear_variable = ag_extra_life_cooldown
					}
					else = { while = {
						limit = {
							check_variable_arithmetic = {
								which = ag_disable_extra_life
								add = ag_extra_life_cooldown
								value > modifier:ag_extra_life_add
							}
						}
						if = {
							limit = { is_variable_set = ag_disable_extra_life }
							ag_subtract_disable_at_health = { ag_disable_type = extra_life }
						}
						else = {
							subtract_variable = { which = ag_extra_life_cooldown value = 1 }
							if = {
								limit = { check_variable = { which = ag_extra_life_cooldown value = 0 } }
								clear_variable = ag_extra_life_cooldown
							}
						}
					} }
				}
			}
		}
		else = {
			ag_clear_disable_at_health = { ag_disable_type = extra_life }
			clear_variable = ag_extra_life_cooldown
		}
	}
}
# Cooldown
ship_event = {
	id = ag_ancient.93
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_variable_set = ag_extra_life_cooldown }
	immediate = {
		if = {
			limit = { check_variable_arithmetic = {
				which = ag_disable_extra_life
				add = ag_extra_life_cooldown
				value < modifier:ag_extra_life_add
			} }
			ag_set_disable_at_health = { ag_value = 0.1 ag_disable_type = extra_life }
			subtract_variable = { which = ag_extra_life_cooldown value = 1 }
			if = {
				limit = { check_variable = { which = ag_extra_life_cooldown value = 0 } }
				clear_variable = ag_extra_life_cooldown
			}
		}
		else = {
			subtract_variable = { which = ag_extra_life_cooldown value = 1 }
			if = {
				limit = { check_variable = { which = ag_extra_life_cooldown value = 0 } }
				clear_variable = ag_extra_life_cooldown
			}
		}
	}
}

# on_ship_destroyed_perp, Remove primary weapon power
country_event = {
	id = ag_ancient.102
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		fromfrom = {
			check_modifier_value = { modifier = ag_instant_kill_shot_add value > 0 }
			NAND = { is_variable_set = ag_num_ship_killed_targets check_variable = { which = ag_num_ship_killed_targets value >= modifier:ag_instant_kill_shot_add } }
		}
		fromfromfrom = { NOT = { has_ship_flag = ag_ancient_102_mutex } }
	}
	immediate = {
		fromfromfrom = { set_ship_flag = ag_ancient_102_mutex }
		fromfrom = {
			if = { limit = { NOT = { is_variable_set = ag_num_ship_killed_targets } } set_variable = { which = ag_num_ship_killed_targets value = 1 } }
			else = { change_variable = { which = ag_num_ship_killed_targets value = 1 } }
			if = {
				limit = { check_variable = { which = ag_num_ship_killed_targets value >= modifier:ag_instant_kill_shot_add } }
				while = { limit = { has_modifier = "ag_weapon_instant_kill_buff" } remove_modifier = "ag_weapon_instant_kill_buff" }
				while = { limit = { has_modifier = "ag_weapon_instant_kill_buff_alt" } remove_modifier = "ag_weapon_instant_kill_buff_alt" }
			}
		}
	}
}

# Auto construction template.
country_event = {
	id = ag_ancient.150
	title = "ag_auto_starbase_settings.title"
	desc = "ag_auto_starbase_settings.desc"
	diplomatic = yes
	custom_gui = "ag_auto_starbase_settings_window"
	custom_gui_option = "ag_auto_starbase_settings_option"
	picture_event_data = { room = ag_ancient_empire_mod_settings_room }
	show_sound = event_alien_signal
	
	is_triggered_only = yes
	trigger = { is_ai = no NOT = { has_country_flag = ag_auto_starbase_seetings_opened } }
	
	immediate = {
		set_country_flag = ag_auto_starbase_seetings_opened
		if = { limit = { NOR = { has_country_flag = ag_auto_starbase_settings_starbase has_country_flag = ag_auto_starbase_settings_orbital_ring } } set_country_flag = ag_auto_starbase_settings_starbase }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_default_lvl_starbase } } set_variable = { which = ag_auto_starbase_default_lvl_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_1_starbase } } set_variable = { which = ag_auto_starbase_module_slot_1_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_2_starbase } } set_variable = { which = ag_auto_starbase_module_slot_2_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_3_starbase } } set_variable = { which = ag_auto_starbase_module_slot_3_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_4_starbase } } set_variable = { which = ag_auto_starbase_module_slot_4_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_5_starbase } } set_variable = { which = ag_auto_starbase_module_slot_5_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_6_starbase } } set_variable = { which = ag_auto_starbase_module_slot_6_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_1_starbase } } set_variable = { which = ag_auto_starbase_building_slot_1_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_2_starbase } } set_variable = { which = ag_auto_starbase_building_slot_2_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_3_starbase } } set_variable = { which = ag_auto_starbase_building_slot_3_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_4_starbase } } set_variable = { which = ag_auto_starbase_building_slot_4_starbase value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_default_lvl_orbital_ring } } set_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_1_orbital_ring } } set_variable = { which = ag_auto_starbase_module_slot_1_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_2_orbital_ring } } set_variable = { which = ag_auto_starbase_module_slot_2_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_3_orbital_ring } } set_variable = { which = ag_auto_starbase_module_slot_3_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_module_slot_4_orbital_ring } } set_variable = { which = ag_auto_starbase_module_slot_4_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_1_orbital_ring } } set_variable = { which = ag_auto_starbase_building_slot_1_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_building_slot_2_orbital_ring } } set_variable = { which = ag_auto_starbase_building_slot_2_orbital_ring value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_starbase_cap } } set_variable = { which = ag_auto_starbase_dp_starbase_cap value = value:ag_auto_starbase_dp_cap|ag_is_starbase|yes| } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_orbital_ring_cap } } set_variable = { which = ag_auto_starbase_dp_orbital_ring_cap value = value:ag_auto_starbase_dp_cap|ag_is_starbase|no| } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_starbase_use } } set_variable = { which = ag_auto_starbase_dp_starbase_use value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_orbital_ring_use } } set_variable = { which = ag_auto_starbase_dp_orbital_ring_use value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_starbase_num_ion_cannon } } set_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_orbital_ring_num_ion_cannon } } set_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_starbase_num_military_station_small } } set_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small value = 0 } }
		if = { limit = { NOT = { is_variable_set = ag_auto_starbase_dp_orbital_ring_num_military_station_small } } set_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small value = 0 } }
	}
	after = { hidden_effect = {
		remove_country_flag = ag_auto_starbase_seetings_opened
	} }
	
	option = { name = "ag_settings.exit" default_hide_option = yes }
}
country_event = {
	id = ag_ancient.151
	title = "ag_auto_starbase_slot_selector.title"
	desc = ""
	
	diplomatic = yes
	custom_gui = "ag_option_auto_starbase_slot_selector_window"
	picture_event_data = { room = ag_ancient_empire_mod_settings_room }
	
	is_triggered_only = yes
	trigger = { is_ai = no NOT = { has_country_flag = ag_auto_starbase_slot_selector_opened } }
	immediate = { set_country_flag = ag_auto_starbase_slot_selector_opened }
	after = { hidden_effect = {
		remove_country_flag = ag_auto_starbase_slot_selector_opened
		remove_country_flag = ag_auto_starbase_slot_selector_module
		remove_country_flag = ag_auto_starbase_slot_selector_module_1
		remove_country_flag = ag_auto_starbase_slot_selector_module_2
		remove_country_flag = ag_auto_starbase_slot_selector_module_3
		remove_country_flag = ag_auto_starbase_slot_selector_module_4
		remove_country_flag = ag_auto_starbase_slot_selector_module_5
		remove_country_flag = ag_auto_starbase_slot_selector_module_6
		remove_country_flag = ag_auto_starbase_slot_selector_building
		remove_country_flag = ag_auto_starbase_slot_selector_building_1
		remove_country_flag = ag_auto_starbase_slot_selector_building_2
		remove_country_flag = ag_auto_starbase_slot_selector_building_3
		remove_country_flag = ag_auto_starbase_slot_selector_building_4
	} }
	
	option = { name = "" default_hide_option = yes custom_gui = "ag_option_auto_starbase_slot_current" }
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_empty"
		trigger = { hidden_trigger = { ag_auto_starbase_slot_empty = yes } }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = empty } }
	}
	####################################################################################
	# New auto starbase support module/building: (4.m) Set module's buildable trigger/effect.
	####################################################################################
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_shipyard"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = shipyard }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = shipyard } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_anchorage"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = anchorage }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = anchorage } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_gun_battery"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = gun_battery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = gun_battery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_missile_battery"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = missile_battery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = missile_battery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_hangar_bay"
		trigger = { hidden_trigger = {
			has_technology = "tech_strike_craft_1"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = hangar_bay }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = hangar_bay } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_solar_panel_network"
		trigger = { hidden_trigger = {
			is_gestalt = yes
			has_technology = "tech_solar_panel_network"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = solar_panel_network }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = solar_panel_network } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_trading_hub"
		trigger = { hidden_trigger = {
			is_gestalt = no
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = trading_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = trading_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_habitation"
		trigger = { hidden_trigger = {
			has_technology = "tech_housing_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_habitation }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_habitation } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_shipyard"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_shipyard }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_shipyard } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_anchorage"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_anchorage }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_anchorage } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_gun_battery"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_gun_battery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_gun_battery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_missile_battery"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_missile_battery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_missile_battery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_orbital_ring_hangar_bay"
		trigger = { hidden_trigger = {
			has_technology = "tech_strike_craft_1"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_orbital_ring_module = { ag_component = orbital_ring_hangar_bay }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = orbital_ring_hangar_bay } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_detection_array"
		trigger = { hidden_trigger = {
			has_technology = "tech_detection_array"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = detection_array }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = detection_array } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_archaeo_rampart"
		trigger = { hidden_trigger = {
			has_technology = "tech_archaeo_rampart"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_module
			ag_auto_starbase_requires_no_starbase_module = { ag_component = archaeo_rampart }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = archaeo_rampart } }
	}
	####################################################################################
	# New auto starbase support module/building: (4.b) Set building's buildable trigger/effect.
	####################################################################################
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_minerals_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_mineral_purification_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_minerals_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_minerals_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_energy_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_power_hub_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_energy_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_energy_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_food_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_food_processing_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_food_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_food_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_trade_hub"
		trigger = { hidden_trigger = {
			is_gestalt = no
			has_technology = "tech_interstellar_economics"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_trade_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_trade_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_bureaucracy_hub"
		trigger = { hidden_trigger = {
			is_gestalt = no
			has_technology = "tech_effective_bureaucracy"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_bureaucracy_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_bureaucracy_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_synapse_hub"
		trigger = { hidden_trigger = {
			is_hive_empire = yes
			has_technology = "tech_hive_cluster"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_synapse_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_synapse_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_maintenance_hub"
		trigger = { hidden_trigger = {
			is_machine_empire = yes
			has_technology = "tech_resource_processing_algorithms"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_maintenance_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_maintenance_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_consumer_goods_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_luxuries_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_consumer_goods_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_consumer_goods_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_alloys_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_alloys_2"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_alloys_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_alloys_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_psi_corps"
		trigger = { hidden_trigger = {
			has_tradition = tr_psionics_psi_corps
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_psi_corps }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_psi_corps } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_orbital_shield_generator"
		trigger = { hidden_trigger = {
			has_technology = "tech_planetary_shield_generator"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_orbital_shield_generator }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_orbital_shield_generator } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_galactic_stock_exchange"
		trigger = { hidden_trigger = {
			has_technology = "tech_galactic_markets"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_galactic_stock_exchange }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_galactic_stock_exchange } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_embassy_complex"
		trigger = { hidden_trigger = {
			has_technology = "tech_xeno_relations"
			is_regular_empire = yes
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_embassy_complex }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_embassy_complex } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_noble_estates"
		trigger = { hidden_trigger = {
			has_valid_civic = civic_aristocratic_elite
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_noble_estates }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_noble_estates } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ring_slave_processing_facility"
		trigger = { hidden_trigger = {
			has_technology = "tech_neural_implants"
			is_regular_empire = yes
			has_policy_flag = slavery_allowed
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ring_slave_processing_facility }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ring_slave_processing_facility } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ag_orbital_ring_building_living_metal"
		trigger = { hidden_trigger = {
			has_technology = "tech_ag_living_metal_forge"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ag_orbital_ring_building_living_metal }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ag_orbital_ring_building_living_metal } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ag_orbital_ring_building_nanites"
		trigger = { hidden_trigger = {
			has_technology = "tech_ag_nanites_assembly_plant"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ag_orbital_ring_building_nanites }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ag_orbital_ring_building_nanites } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ag_orbital_ring_building_dark_matter"
		trigger = { hidden_trigger = {
			has_technology = "tech_ag_dark_matter_plant"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ag_orbital_ring_building_dark_matter }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ag_orbital_ring_building_dark_matter } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ag_orbital_ring_building_zro"
		trigger = { hidden_trigger = {
			has_technology = "tech_ag_zro_refinery"
			has_country_flag = ag_auto_starbase_settings_orbital_ring
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_orbital_ring_building = { ag_component = ag_orbital_ring_building_zro }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ag_orbital_ring_building_zro } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_crew_quarters"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = crew_quarters }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = crew_quarters } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_hydroponics_bay"
		trigger = { hidden_trigger = {
			has_technology = "tech_hydroponics"
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = hydroponics_bay }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = hydroponics_bay } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_resource_silo"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = resource_silo }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = resource_silo } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_nebula_refinery"
		trigger = { hidden_trigger = {
			has_technology = "tech_space_mining_1"
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = nebula_refinery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = nebula_refinery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_listening_post"
		trigger = { hidden_trigger = {
			has_technology = "tech_sensors_2"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = listening_post }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = listening_post } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_offworld_trading_company"
		trigger = { hidden_trigger = {
			is_gestalt = no
			has_technology = "tech_space_trading"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = offworld_trading_company }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = offworld_trading_company } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_fleet_academy"
		trigger = { hidden_trigger = {
			has_technology = "tech_interstellar_fleet_traditions"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = fleet_academy }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = fleet_academy } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_naval_logistics_office"
		trigger = { hidden_trigger = {
			has_technology = "tech_interstellar_fleet_traditions"
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = naval_logistics_office }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = naval_logistics_office } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_titan_yards"
		trigger = { hidden_trigger = {
			has_technology = "tech_titans"
			check_variable = { which = ag_auto_starbase_default_lvl_starbase value >= 4 }
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = titan_yards }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = titan_yards } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_colossus_yards"
		trigger = { hidden_trigger = {
			OR = { has_technology = "tech_colossus" has_technology = "tech_juggernaut" has_technology = "tech_btc_1" }
			check_variable = { which = ag_auto_starbase_default_lvl_starbase value >= 4 }
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = colossus_yards }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = colossus_yards } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_black_hole_observatory"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = black_hole_observatory }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = black_hole_observatory } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_target_uplink_computer"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = target_uplink_computer }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = target_uplink_computer } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_defense_grid"
		trigger = { hidden_trigger = {
			has_technology = "tech_synchronized_defences"
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = defense_grid }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = defense_grid } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_deep_space_black_site"
		trigger = { hidden_trigger = {
			has_technology = "tech_living_state"
			NOT = { has_ethic = ethic_gestalt_consciousness }
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = deep_space_black_site }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = deep_space_black_site } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_curator_think_tank"
		trigger = { hidden_trigger = {
			is_homicidal = no
			has_country_flag = curator_intro
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = curator_think_tank }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = curator_think_tank } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_art_college"
		trigger = { hidden_trigger = {
			is_homicidal = no
			has_country_flag = enclave_artist_encountered
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = art_college }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = art_college } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_salvager_workshop"
		trigger = { hidden_trigger = {
			is_homicidal = no
			has_country_flag = salvager_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = salvager_workshop }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = salvager_workshop } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_shroud_beacon"
		trigger = { hidden_trigger = {
			is_homicidal = no
			has_country_flag = shroudwalker_enclave_diplomacy_engaged
			has_country_flag = shroudwalker_enclave_bought_shroud_beacon
			OR = {
				AND = {
					exists = event_target:shroudwalker_enclave_country
					event_target:shroudwalker_enclave_country = { has_country_flag = shroud_beacon@root }
				}
				owner = { has_country_flag = shroud_beacon }
			}
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = shroud_beacon }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = shroud_beacon } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_cybrex_mining_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_secrets_cybrex"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = cybrex_mining_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = cybrex_mining_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_irassian_naval_yards"
		trigger = { hidden_trigger = {
			has_technology = "tech_secrets_irassian"
			has_country_flag = salvager_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = irassian_naval_yards }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = irassian_naval_yards } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_yuht_detection_array"
		trigger = { hidden_trigger = {
			has_technology = "tech_secrets_yuht"
			has_country_flag = salvager_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = yuht_detection_array }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = yuht_detection_array } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_zroni_storm_caster"
		trigger = { hidden_trigger = {
			has_technology = "tech_secrets_zroni"
			has_country_flag = salvager_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = zroni_storm_caster }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = zroni_storm_caster } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_archaeo_overcharger"
		trigger = { hidden_trigger = {
			has_technology = "tech_archaeo_overcharger"
			has_country_flag = salvager_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = archaeo_overcharger }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = archaeo_overcharger } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_communications_jammer"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = communications_jammer }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = communications_jammer } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_disruption_field"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = disruption_field }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = disruption_field } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_warp_fluctuator"
		trigger = { hidden_trigger = {
			is_gestalt = no
			has_technology = "tech_interstellar_economics"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = warp_fluctuator }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = warp_fluctuator } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_transit_hub"
		trigger = { hidden_trigger = {
			has_technology = "tech_hyper_drive_2"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = transit_hub }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = transit_hub } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_command_center"
		trigger = { hidden_trigger = {
			has_technology = "tech_command_matrix"
			OR = {
				AND = { has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_default_lvl_starbase value >= 3 } }
				AND = { has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value >= 2 } }
			}
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = command_center }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = command_center } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_trader_proxy_office"
		trigger = { hidden_trigger = {
			is_homicidal = no
			is_gestalt = no
			has_country_flag = has_market_access
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = trader_proxy_office }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = trader_proxy_office } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_dragon_hatchery"
		trigger = { hidden_trigger = {
			is_dragon_breeder_country = yes
			check_variable = { which = ag_auto_starbase_default_lvl_starbase value >= 4 }
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = dragon_hatchery }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = dragon_hatchery } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ice_mining_station"
		trigger = { hidden_trigger = {
			has_ascension_perk = ap_hydrocentric
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = ice_mining_station }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ice_mining_station } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_offspring_outlook"
		trigger = { hidden_trigger = {
			has_origin = origin_progenitor_hive
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = offspring_outlook }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = offspring_outlook } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_mercenary_garrison"
		trigger = { hidden_trigger = {
			is_homicidal = no
			has_country_flag = mercenary_enclave_diplomacy_engaged
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = mercenary_garrison }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = mercenary_garrison } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_cordyceptic_reanimation_facility"
		trigger = { hidden_trigger = {
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_building = { ag_component = cordyceptic_reanimation_facility }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = cordyceptic_reanimation_facility } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_ag_iota_enclave_building"
		trigger = { hidden_trigger = {
			has_country_flag = ag_ancient_iota_enclave_building_flag
			exists = event_target:ag_ancient_iota_enclave
			NOR = {
				is_hostile = event_target:ag_ancient_iota_enclave
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
				has_valid_civic = civic_machine_terminator
			}
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = ag_iota_enclave_building }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = ag_iota_enclave_building } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_dark_matter_detector"
		trigger = { hidden_trigger = {
			has_technology = "tech_dark_matter_detection"
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = dark_matter_detector }
			ag_auto_starbase_requires_no_starbase_building = { ag_component = dark_matter_listening_post }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = dark_matter_detector } }
	}
	option = { name = "" custom_gui = "ag_option_auto_starbase_slot_dark_matter_listening_post"
		trigger = { hidden_trigger = {
			is_fallen_empire = yes
			has_country_flag = ag_auto_starbase_settings_starbase
			has_country_flag = ag_auto_starbase_slot_selector_building
			ag_auto_starbase_requires_no_starbase_building = { ag_component = dark_matter_listening_post }
			ag_auto_starbase_requires_no_starbase_building = { ag_component = dark_matter_detector }
			ag_auto_starbase_requires_no_starbase_building = { ag_component = listening_post }
		} }
		hidden_effect = { ag_auto_starbase_set_slot = { ag_component = dark_matter_listening_post } }
	}
	# Add supported modules/buildings here if needed.
}
starbase_event = {
	id = ag_ancient.152
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this exists = owner owner = { is_ai = no } }
	immediate = { ag_auto_starbase_build_starbase = yes }
}
planet_event = {
	id = ag_ancient.153
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_colony = yes exists = owner owner = { is_ai = no } }
	immediate = { ag_auto_starbase_build_orbital_ring = yes }
}

# Research of move construction sections
country_event = {
	id = ag_ancient.204
	title = "ag_ancient.204.name"
	desc = "ag_ancient.204.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_fallen_empire_room }
	show_sound = event_mystic_reveal
	
	is_triggered_only = yes

	option = {
		name = "ag_ancient.204.a"
		ag_add_research_option = { ag_tech = tech_ag_ancient_construction_section_megashipyard }
	}
}

# Auto megastructure event
system_event = {
    id = ag_ancient.251
	hide_window = yes
	is_triggered_only = yes
	trigger = { from = { is_scope_type = megastructure has_megastructure_flag = ag_auto_upgrade_megastructure } }
	immediate = { from = {
		if = { limit = { NOT = { exists = owner } } remove_megastructure_flag = ag_auto_upgrade_megastructure }
		else = { switch = {
			trigger = is_megastructure_type
			ag_alpha_titan_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_alpha_titan_megastructure_0
				ag_target_type = ag_alpha_titan_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
				ag_resource_4 = sr_zro
			} }
			ag_alpha_titan_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_alpha_titan_megastructure_1
				ag_target_type = ag_alpha_titan_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_alpha_titan_megastructure_2 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_alpha_titan_megastructure_2
				ag_target_type = ag_alpha_titan_megastructure_3
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
				ag_resource_4 = sr_zro
			} }
			ag_alpha_titan_megastructure_3 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_alpha_titan_megastructure_3
				ag_target_type = ag_alpha_titan_megastructure_4
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
				ag_resource_4 = sr_zro
			} }
			ag_gamma_station_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_0
				ag_target_type = ag_gamma_station_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_1
				ag_target_type = ag_gamma_station_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_2 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_2
				ag_target_type = ag_gamma_station_megastructure_3
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_3 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_3
				ag_target_type = ag_gamma_station_megastructure_4
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_4 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_4
				ag_target_type = ag_gamma_station_megastructure_5
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_5 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_5
				ag_target_type = ag_gamma_station_megastructure_6
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_6 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_6
				ag_target_type = ag_gamma_station_megastructure_7
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_7 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_7
				ag_target_type = ag_gamma_station_megastructure_8
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_gamma_station_megastructure_8 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_station_megastructure_8
				ag_target_type = ag_gamma_station_megastructure_9
				ag_resource_1 = energy
			} }
			ag_gamma_titan_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_gamma_titan_megastructure_0
				ag_target_type = ag_gamma_titan_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_delta_titan_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_delta_titan_megastructure_0
				ag_target_type = ag_delta_titan_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_delta_titan_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_delta_titan_megastructure_1
				ag_target_type = ag_delta_titan_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_epsilon_titan_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_epsilon_titan_megastructure_0
				ag_target_type = ag_epsilon_titan_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_epsilon_titan_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_epsilon_titan_megastructure_1
				ag_target_type = ag_epsilon_titan_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_epsilon_titan_megastructure_2 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_epsilon_titan_megastructure_2
				ag_target_type = ag_epsilon_titan_megastructure_3
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_eta_titan_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_eta_titan_megastructure_0
				ag_target_type = ag_eta_titan_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_eta_titan_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_eta_titan_megastructure_1
				ag_target_type = ag_eta_titan_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_eta_titan_megastructure_2 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_eta_titan_megastructure_2
				ag_target_type = ag_eta_titan_megastructure_3
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_eta_titan_megastructure_3 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_eta_titan_megastructure_3
				ag_target_type = ag_eta_titan_megastructure_4
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_zeta_titan_megastructure_0 = {
				if = {
					limit = { owner = { has_country_flag = ag_ship_subsystem_enabled_701_30 } }
					ag_auto_upgrade_megastructure = {
						ag_source_type = ag_zeta_titan_megastructure_0
						ag_target_type = ag_zeta_titan_megastructure_1
						ag_resource_1 = sr_living_metal
						ag_resource_2 = nanites
						ag_resource_3 = sr_zro
						ag_resource_extra_1 = sr_living_metal
						ag_resource_extra_2 = nanites
						ag_resource_extra_3 = sr_dark_matter
					}
				}
				else = {
					ag_auto_upgrade_megastructure = {
						ag_source_type = ag_zeta_titan_megastructure_0
						ag_target_type = ag_zeta_titan_megastructure_1
						ag_resource_1 = sr_living_metal
						ag_resource_2 = nanites
						ag_resource_3 = sr_zro
					}
				}
			}
			ag_ancient_wandering_ship_megastructure_0 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_ancient_wandering_ship_megastructure_0
				ag_target_type = ag_ancient_wandering_ship_megastructure_1
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_ancient_wandering_ship_megastructure_1 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_ancient_wandering_ship_megastructure_1
				ag_target_type = ag_ancient_wandering_ship_megastructure_2
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_ancient_wandering_ship_megastructure_2 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_ancient_wandering_ship_megastructure_2
				ag_target_type = ag_ancient_wandering_ship_megastructure_3
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_ancient_wandering_ship_megastructure_3 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_ancient_wandering_ship_megastructure_3
				ag_target_type = ag_ancient_wandering_ship_megastructure_4
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			ag_ancient_wandering_ship_megastructure_4 = { ag_auto_upgrade_megastructure = {
				ag_source_type = ag_ancient_wandering_ship_megastructure_4
				ag_target_type = ag_ancient_wandering_ship_megastructure_5
				ag_resource_1 = sr_living_metal
				ag_resource_2 = nanites
				ag_resource_3 = sr_dark_matter
			} }
			default = { ag_auto_upgrade_megastructure_failed_effect = yes }
		} }
	} }
}

# Holy Guardian's communication after holy planet destroyed
country_event = {
	id = ag_ancient.1000
	title = "ag_ancient.1000.name"
	desc = "ag_ancient.1000.desc"
	show_sound = event_ship_bridge
	location = event_target:ag_holy_guardian_empire.capital_scope

	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:ag_holy_guardian_empire
		planet_background = event_target:ag_holy_guardian_empire
		graphical_culture = event_target:ag_holy_guardian_empire
		city_level = event_target:ag_holy_guardian_empire
		room = event_target:ag_holy_guardian_empire.ruler
	}

	after = { hidden_effect = { event_target:ag_holy_guardian_empire = { country_event = { id = ag_ancient.1001 } } } }

	option = { name = "ag_ancient.1000.a" }
	option = { name = "ag_ancient.1000.b" }
	option = {
		name = "planet_destruction.610.spiri"
		trigger = { OR = { has_ethic = ethic_spiritualist has_ethic = ethic_fanatic_spiritualist } }
	}
	option = {
		name = "planet_destruction.610.mater"
		trigger = { OR = { has_ethic = ethic_materialist has_ethic = ethic_fanatic_materialist } }
	}
	option = {
		name = "planet_destruction.610.milit"
		trigger = { OR = { has_ethic = ethic_militarist has_ethic = ethic_fanatic_militarist } }
	}
	option = {
		name = "planet_destruction.610.pacif"
		trigger = { OR = { has_ethic = ethic_pacifist has_ethic = ethic_fanatic_pacifist } }
	}
	option = {
		name = "planet_destruction.610.autho"
		trigger = { OR = { has_ethic = ethic_authoritarian has_ethic = ethic_fanatic_authoritarian } }
	}
	option = {
		name = "planet_destruction.610.egali"
		trigger = { OR = { has_ethic = ethic_egalitarian has_ethic = ethic_fanatic_egalitarian } }
	}
	option = {
		name = "planet_destruction.610.phile"
		trigger = { OR = { has_ethic = ethic_xenophile has_ethic = ethic_fanatic_xenophile } }
	}
	option = {
		name = "planet_destruction.610.phobe"
		trigger = { OR = { has_ethic = ethic_xenophobe has_ethic = ethic_fanatic_xenophobe } }
	}
	option = {
		name = "planet_destruction.610.gesta"
		trigger = { has_ethic = ethic_gestalt_consciousness }
	}
	option = {
		name = "planet_destruction.610.devou"
		trigger = { has_valid_civic = civic_hive_devouring_swarm }
	}
	option = {
		name = "planet_destruction.610.termi"
		trigger = { has_valid_civic = civic_machine_terminator }
	}
	option = {
		name = "planet_destruction.610.purif"
		trigger = { has_valid_civic = civic_fanatic_purifiers }
	}
}

# Holy Guardian awakes
country_event = {
	id = ag_ancient.1001
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_global_flag = sleepers_awake_happened
		set_country_flag = sleepers_awake_first_sleeper
		set_country_type = awakened_fallen_empire
		change_government = {
			civics = {
				civic = civic_revanchist_fervor
				civic = civic_ancient_caches_of_technology
			}
		}
		add_resource = {
			energy = 500000
			minerals = 500000
			food = 500000
			influence = 1000
			unity = 500000
			alloys = 500000
			consumer_goods = 500000
			volatile_motes = 500000
			exotic_gases = 500000
			rare_crystals = 500000
			sr_living_metal = 500000
			sr_zro = 500000
			sr_dark_matter = 500000
			nanites = 500000
			minor_artifacts = 1000
		}
		add_modifier = { modifier = "ag_holy_guardian_power" days = 3600 }
		capital_scope = {
			prev = {
				create_leader = {
					class = admiral
					species = owner_main_species
					name = random
					skill = 10
					traits = {
						trait = leader_trait_cautious_2
						trait = leader_trait_unyielding_2
						trait = leader_trait_chosen
					}
				}
			}
			create_fleet = {
				name = "NAME_holy_guardian_revenge_fleet_chosen"
				settings = { uses_naval_capacity = no }
				effect = {
					set_owner = prev.owner
					assign_leader = last_created_leader
					while = {
						count = 2
						create_ship = {
							name = random
							design = "NAME_Eternal"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					while = {
						count = 20
						create_ship = {
							name = random
							design = "NAME_Avatar"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					while = {
						count = 40
						create_ship = {
							name = random
							design = "NAME_Zealot"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					random_list = {
						25 = { set_location = { target = prev distance = 30 angle = random } }
						25 = { set_location = { target = prev distance = 45 angle = random } }
						25 = { set_location = { target = prev distance = 60 angle = random } }
						25 = { set_location = { target = prev distance = 75 angle = random } }				
					}
				}
			}
		}
		while = { count = 7 country_event = { id = ag_ancient.1002 } }
		every_country = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				NOT = { has_communications = root }
			}
			establish_communications_no_message = root
			root = { save_event_target_as = contact_empire }
			country_event = { id = action.1 }
		}
		# For War in Heavens
		random_list = {
			40 = {
				random_country = {
					limit = {
						NOT = {
							is_same_value = root
						}
						is_country_type = fallen_empire
						has_ethic = ethic_fanatic_materialist
					}
					set_country_flag = sleepers_awake_ancient_rival
					set_timed_country_flag = { flag = timed_ancient_rival days = 3650 }
					set_timed_country_flag = { flag = ai_no_wars days = 3650 }
					root = { set_timed_country_flag = { flag = ai_no_wars days = 3650 } }
					every_country = {
						limit = { is_country_type = default }
						set_timed_country_flag = { flag = ai_no_wars days = 3650 }
					}	
				}
			}
			20 = {
				random_country = {
					limit = {
						NOT = {
							is_same_value = root
						}
						is_country_type = fallen_empire
						NOR = {
							has_ethic = ethic_gestalt_consciousness
							has_ethic = ethic_fanatic_materialist
						}
					}
					set_country_flag = sleepers_awake_ancient_rival
					set_timed_country_flag = { flag = timed_ancient_rival days = 3650 }
					set_timed_country_flag = { flag = ai_no_wars days = 3650 }
					root = { set_timed_country_flag = { flag = ai_no_wars days = 3650 } }
					every_country = {
						limit = {
							is_country_type = default
						}
						set_timed_country_flag = { flag = ai_no_wars days = 3650 }
					}
				}
			}
			40 = { }
		}
		every_country = {
			limit = { is_ai = no }
			country_event = { id = fallen_empires_awakening.2 }
		}
		observer_event = { id = observer.73 }
		country_event = { id = ag_ancient.1003 days = 5 random = 5 }
	}
}

# Extra fleets for Holy Guardian
country_event = {
	id = ag_ancient.1002
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		capital_scope = {
			prev = {
				random_list = {
					33 = {
						create_leader = {
							class = admiral
							species = owner_main_species
							name = random
							skill = 5
							traits = {
								trait = leader_trait_cautious_2
								trait = leader_trait_psionic
							}
						}
					}
					33 = {
						create_leader = {
							class = admiral
							species = owner_main_species
							name = random
							skill = 5
							traits = {
								trait = leader_trait_unyielding_2
								trait = leader_trait_psionic
							}
						}
					}
					33 = {
						create_leader = {
							class = admiral
							species = owner_main_species
							name = random
							skill = 5
							traits = {
								trait = leader_trait_aggressive_2
								trait = leader_trait_psionic
							}
						}
					}
				}
			}
			create_fleet = {
				name = "NAME_holy_guardian_revenge_fleet"
				settings = { uses_naval_capacity = no }
				effect = {
					set_owner = prev.owner
					assign_leader = last_created_leader
					while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_Eternal"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					while = {
						count = 10
						create_ship = {
							name = random
							design = "NAME_Avatar"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					while = {
						count = 20
						create_ship = {
							name = random
							design = "NAME_Zealot"
							graphical_culture = owner
							effect = { add_modifier = { modifier = "ag_ship_no_upkeep" days = -1 } }
						}
					}
					random_list = {
						25 = { set_location = { target = prev distance = 30 angle = random } }
						25 = { set_location = { target = prev distance = 45 angle = random } }
						25 = { set_location = { target = prev distance = 60 angle = random } }
						25 = { set_location = { target = prev distance = 75 angle = random } }
					}
				}
			}
		}
	}
}

# Holy Guardian declears war to player
country_event = {
	id = ag_ancient.1003
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		declare_war = {
			target = event_target:ag_source_country
			name = "NAME_Holy_World_War"
			attacker_war_goal = wg_subjugation
		}
		add_opinion_modifier = {
			modifier = ag_opinion_destroyed_holy_planet
			who = event_target:ag_source_country
		}
	}
}

# Notification: City planet swap.
planet_event = {
	id = ag_ancient.1010
	title = "ag_ancient.1010.name"
	desc = "ag_ancient.1010.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_city_planet_room }
	show_sound = event_cityscape
	location = root
	is_triggered_only = yes
	option = { name = "ag_ancient.1010.a" }
}
planet_event = {
	id = ag_ancient.1011
	title = "ag_ancient.1011.name"
	desc = "ag_ancient.1011.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_city_planet_room }
	show_sound = event_cityscape
	location = root
	is_triggered_only = yes
	option = { name = "ag_ancient.1011.a" }
}

# Stop cloaking event.
fleet_event = {
	id = ag_ancient.1050
	hide_window = yes
	is_triggered_only = yes
	trigger = { OR = {
		ag_gamma_crisis_event_active = yes
		ag_zeta_crisis_event_active = yes
		ag_eta_titan_event_active = yes
	} }
	immediate = {
		set_cloaking_active = no
		if = {
			limit = { ag_zeta_crisis_event_active = yes }
			every_owned_ship = {
				limit = { NOT = { has_ship_flag = ag_ancient_empire_mod_ship } }
				ag_reduce_hp_percent = { ag_value = 25 } ag_spawn_explosion_effect = { ag_color = violet ag_scale = m }
			}
			controller = { if = { limit = { NOT = { has_country_flag = ag_ancient_1051_mutex } } set_timed_country_flag = { flag = ag_ancient_1051_mutex days = 2 } country_event = { id = ag_ancient.1051 } } }
		}
		else = {
			every_owned_ship = {
				limit = { NOT = { has_ship_flag = ag_ancient_empire_mod_ship } }
				ag_reduce_hp_percent = { ag_value = 10 } ag_spawn_explosion_effect = { ag_color = red ag_scale = m }
			}
			controller = { if = { limit = { NOT = { has_country_flag = ag_ancient_1052_mutex } } set_timed_country_flag = { flag = ag_ancient_1052_mutex days = 2 } country_event = { id = ag_ancient.1052 } } }
		}
	}
}
country_event = {
	id = ag_ancient.1051
	title = "ag_ancient.1051.name"
	desc = "ag_ancient.1051.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_unspeakable_horror_room }
	show_sound = event_yellow_alert
	location = from
	is_triggered_only = yes
	option = { name = "ag_ancient.1051.a" }
}
country_event = {
	id = ag_ancient.1052
	title = "ag_ancient.1052.name"
	desc = "ag_ancient.1052.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_ship_in_orbit_room }
	show_sound = event_yellow_alert
	location = from
	is_triggered_only = yes
	option = { name = "ag_ancient.1052.a" }
}
fleet_event = {
	id = ag_ancient.1053
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = controller
		controller = { NOT = { has_country_flag = ag_ancient_1052_mutex } }
		OR = {
			AND = {
				ag_beta_psionic_effect_event_active = yes
				from = { OR = {
					has_star_flag = ag_ancient_beta_system
					has_star_flag = ag_beta_psionic_system_1
					has_star_flag = ag_beta_psionic_system_2
					has_star_flag = ag_beta_psionic_system_3
				} }
			}
			AND = {
				has_global_flag = ag_ancient_delta_guardian_awakened
				NOT = { has_global_flag = ag_delta_titan_destroyed }
				from = { has_star_flag = ag_ancient_delta_system }
			}
			AND = {
				has_global_flag = ag_epsilon_guardian_awaken
				NOT = { has_global_flag = ag_epsilon_titan_destroyed }
				exists = event_target:ag_ancient_epsilon_titan_fleet
				event_target:ag_ancient_epsilon_titan_fleet = { exists = solar_system }
				from = { is_same_value = event_target:ag_ancient_epsilon_titan_fleet.solar_system }
			}
			AND = {
				NOT = { has_global_flag = ag_ancient_zeta_guardian_destroyed }
				from = { has_star_flag = ag_ancient_zeta_system }
			}
			AND = {
				exists = event_target:ag_ancient_psi_guardian
				from = { has_star_flag = ag_ancient_psi_system }
			}
		}
		any_owned_ship = { is_cloaked = yes }
	}
	immediate = {
		set_cloaking_active = no
		every_owned_ship = {
			limit = { NOT = { has_ship_flag = ag_ancient_empire_mod_ship } }
			ag_reduce_hp_percent = { ag_value = 10 } ag_spawn_explosion_effect = { ag_color = red ag_scale = m }
		}
		controller = { if = { limit = { NOT = { has_country_flag = ag_ancient_1052_mutex } } set_timed_country_flag = { flag = ag_ancient_1052_mutex days = 2 } country_event = { id = ag_ancient.1052 } } }
	}
}
system_event = {
	id = ag_ancient.1054
	hide_window = yes
	is_triggered_only = yes
	immediate = { every_fleet_in_system = { limit = { any_owned_ship = { is_cloaked = yes } } set_cloaking_active = no } }
}
country_event = {
	id = ag_ancient.1055
	title = "ag_ancient.1055.name"
	desc = "ag_ancient.1055.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_unspeakable_horror_room }
	show_sound = event_yellow_alert
	location = from
	is_triggered_only = yes
	option = { name = "ag_ancient.1055.a" }
}
country_event = {
	id = ag_ancient.1056
	title = "ag_ancient.1056.name"
	desc = "ag_ancient.1056.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_ship_in_orbit_room }
	show_sound = event_yellow_alert
	location = from
	is_triggered_only = yes
	option = { name = "ag_ancient.1056.a" }
}
fleet_event = {
	id = ag_ancient.1057
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_cloaked = yes }
	immediate = { set_cloaking_active = no }
}

# on_ship_destroyed_perp, Space mine field effect
country_event = {
	id = ag_ancient.1100
	hide_window = yes
	is_triggered_only = yes
	trigger = { fromfrom.fleet = { has_fleet_flag = ag_space_mine_field_fleet } }
	immediate = { fromfrom.fleet = {
		if = {
			limit = { NOT = { has_fleet_flag = ag_ancient_1101_mutex } }
			set_fleet_flag = ag_ancient_1101_mutex
			fleet_event = { id = ag_ancient.1101 }
		}
		else = {
			random_list = {
				10 = { change_variable = { which = ag_space_mine_field_num_mines value = 1 } }
				20 = { }
			}
			reroll_random = yes
		}
	} }
}
fleet_event = {
	id = ag_ancient.1101
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { solar_system = { any_fleet_in_system = {
				exists = owner
				owner = { is_hostile = root.owner }
			} } }
			random_list = {
				10 = { change_variable = { which = ag_space_mine_field_num_mines value = 1 } }
				40 = { }
			}
			if = {
				limit = { check_variable = { which = ag_space_mine_field_num_mines value > 25 } }
				ag_spawn_explosion_effect = { ag_color = teal ag_scale = xl }
				solar_system = { every_fleet_in_system = {
					limit = {
						exists = owner
						owner = { ag_is_mod_country = no }
					}
					if = {
						limit = { owner = {
							is_hostile = root.owner
						} }
						every_owned_ship = {
							random_list = {
								10 = { ag_reduce_hp_percent = { ag_value = 75 } }
								10 = { ag_reduce_hp_percent = { ag_value = 70 } }
								10 = { ag_reduce_hp_percent = { ag_value = 65 } }
								10 = { ag_reduce_hp_percent = { ag_value = 60 } }
								10 = { ag_reduce_hp_percent = { ag_value = 55 } }
								10 = { ag_reduce_hp_percent = { ag_value = 50 } }
							}
							reroll_random = yes
						}
					}
					else = { every_owned_ship = {
						random_list = {
							10 = { ag_reduce_hp_percent = { ag_value = 25 } }
							10 = { ag_reduce_hp_percent = { ag_value = 20 } }
							10 = { ag_reduce_hp_percent = { ag_value = 15 } }
							10 = { ag_reduce_hp_percent = { ag_value = 10 } }
							10 = { ag_reduce_hp_percent = { ag_value = 5 } }
							10 = { }
						}
						reroll_random = yes
					} }
				} }
				delete_fleet = { target = this kill_leader = yes destroy_template = yes }
			}
			fleet_event = { id = ag_ancient.1101 days = 1 }
		}
		else_if = {
			limit = { is_variable_set = ag_space_mine_field_num_mines }
			subtract_variable = { which = ag_space_mine_field_num_mines value = 1 }
			if = {
				limit = { check_variable = { which = ag_space_mine_field_num_mines value <= 0 } }
				clear_variable = ag_space_mine_field_num_mines
			}
			fleet_event = { id = ag_ancient.1101 days = 1 }
		}
		else_if = { limit = { always = yes } remove_fleet_flag = ag_ancient_1101_mutex }
	}
}

# Science constructor abilities
# Survey local system.
fleet_event = {
	id = ag_ancient.1201
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_controlled_ship = { save_event_target_as = ag_target_ship }
		if = {
			limit = { solar_system = { any_system_planet = { is_surveyed = { who = root.owner status = no } } } }
			solar_system = {
				every_system_planet = {
					limit = { is_surveyed = { who = root.owner status = no } }
					set_surveyed = { surveyor = root.owner surveyed = yes }
					fire_on_action = {
						on_action = on_planet_surveyed
						scopes = { from = root.owner fromfrom = root }
					}
					event_target:ag_target_ship = { fire_on_action = {
						on_action = on_survey
						scopes = { from = prev }
					} }
				}
			}
			owner = { fire_on_action = {
				on_action = on_system_survey
				scopes = { from = root.solar_system fromfrom = event_target:ag_target_ship }
			} }
			event_target:ag_target_ship = { fire_on_action = {
				on_action = on_system_survey_ship
				scopes = { from = root.solar_system }
			} }
		}
	}
}

# ag_on_system_selector_confirm, Spawn intel ship in remote system.
country_event = {
	id = ag_ancient.1202
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_country_flag = ag_enabled_sci_constructor_intel_selector }
	immediate = {
		remove_country_flag = ag_enabled_sci_constructor_intel_selector
		every_system = {
			limit = { has_star_flag = ag_system_selector_selected_system }
			remove_star_flag = ag_system_selector_selected_system
			random_system_planet = {
				limit = { is_primary_star = yes }
				create_fleet = {
					name = "NAME_ag_distance_intel_probe_fleet"
					settings = {
						spawn_debris = no
						is_boss = yes
					}
					effect = {
						set_owner = root
						create_ship = {
							name = "NAME_ag_distance_intel_probe_ship"
							design = "NAME_ag_distance_intel_probe"
							prefix = no
							effect = { ag_delayed_delete_ship = { ag_days = @ag_science_constructor_distance_intel_days } }
						}
						set_location = { target = prev distance = 0 angle = 0 }
					}
				}
			}
		}
	}
	after = {
		ag_system_selector_after_effect = yes
		ag_clear_system_selection = yes
	}
}

# on_ship_built, on_ship_upgraded, Spawn leader, set disable
ship_event = {
	id = ag_ancient.1203
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_ship_size = ag_science_constructor }
	immediate = {
		fleet = { set_fleet_flag = ag_science_constructor_fleet }
		if = {
			limit = {
				has_component = ag_science_constructor_auto_leader_module
				NOT = { has_ship_flag = ag_science_constructor_auto_leader_module }
			}
			if = {
				limit = { owner = { resource_stockpile_compare = { resource = unity value < 1 mult = value:ag_leader_cost } } }
				ship_event = { id = ag_ancient.1203 days = 30 }
			}
			else = {
				set_ship_flag = ag_science_constructor_auto_leader_module
				if = { limit = { exists = leader } fleet = { unassign_leader = this.leader } }
				owner = {
					add_resource = { unity = -1 mult = value:ag_leader_cost }
					create_leader = {
						name = random
						class = scientist
						portrait = random
						traits = random
						skill = 1
					}
					root.fleet = { assign_leader = last_created_leader }
					last_created_leader = { fire_on_action = { on_action = on_leader_assigned } }
				}
			}
		}
		if = {
			limit = {
				has_component = ag_science_constructor_evasion_module
				NOT = { has_ship_flag = ag_science_constructor_evasion_module }
			}
			set_ship_flag = ag_science_constructor_evasion_module
			ag_set_disable_at_health = { ag_value = 0.05 ag_disable_type = event }
		}
		if = {
			limit = {
				NOT = { has_component = ag_science_constructor_evasion_module }
				has_ship_flag = ag_science_constructor_evasion_module
			}
			remove_ship_flag = ag_science_constructor_evasion_module
			ag_clear_disable_at_health = { ag_disable_type = event }
		}
	}
	after = {
		owner = {
			set_variable = { which = ag_auto_leader_extra_skills value = modifier:scientist_skill_levels }
			change_variable = { which = ag_auto_leader_extra_skills value = root.modifier:ag_science_constructor_auto_leader_level_add }
			set_variable = { which = ag_auto_leader_max_skills value = modifier:leader_skill_levels }
			change_variable = { which = ag_auto_leader_max_skills value = 5 }
			if = {
				limit = { check_variable = { which = ag_auto_leader_extra_skills value > ag_auto_leader_max_skills } }
				set_variable = { which = ag_auto_leader_extra_skills value = ag_auto_leader_max_skills }
			}
		}
		fleet = {
			set_variable = { which = ag_science_constructor_archaeology_buff value = root.modifier:ag_science_constructor_archaeology_buff }
			if = { limit = { exists = leader } leader = {
				log = "SKILL_INFO: [root.owner.ag_auto_leader_extra_skills]"
				add_skill = root.owner.ag_auto_leader_extra_skills
				if = {
					limit = {
						root = { has_component = ag_science_constructor_archaeology_module }
						NOR = {
							has_trait = ag_science_constructor_archaeology_module_01
							has_trait = ag_science_constructor_archaeology_module_02
							has_trait = ag_science_constructor_archaeology_module_03
							has_trait = ag_science_constructor_archaeology_module_04
							has_trait = ag_science_constructor_archaeology_module_05
							has_trait = ag_science_constructor_archaeology_module_06
						}
					}
					leader_event = { id = ag_ancient.1208 }
				}
			} }
		}
		owner = { clear_variable = ag_auto_leader_max_skills clear_variable = ag_auto_leader_extra_skills }
	}
}

# ag_on_disabled_event, Science constructor has chance to survive from attacks
ship_event = {
	id = ag_ancient.1204
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_ship_size = ag_science_constructor }
	immediate = {
		remove_ship_flag = ag_science_constructor_evasion_module
		ag_clear_disable_at_health = { ag_disable_type = event }
		ship_event = { id = ag_ancient.1205 days = @ag_science_constructor_revasion_cooldown }
		random_list = {
			80 = {
				repair_ship = yes
				set_disabled = no
				owner = { random_owned_planet = {
					limit = {
						owner = { is_same_value = prev.controller }
						has_ground_combat = no
						is_occupied_flag = no
						solar_system = { NOT = { any_fleet_in_system = {
							exists = owner
							owner = { is_hostile = root.owner }
						} } }
					}
					root.fleet = { set_location = { target = prev distance = 10 angle = random } }
				} }
			}
			20 = { set_disabled = no }
		}
	}
}
ship_event = {
	id = ag_ancient.1205
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = this is_ship_size = ag_science_constructor }

	immediate = {
		if = {
			limit = {
				has_component = ag_science_constructor_evasion_module
				NOT = { has_ship_flag = ag_science_constructor_evasion_module }
			}
			set_ship_flag = ag_science_constructor_evasion_module
			ag_set_disable_at_health = { ag_value = 0.05 ag_disable_type = event }
		}
	}
}

# on_system_survey, Build Starbase
country_event = {
	id = ag_ancient.1206
	hide_window = yes
	is_triggered_only = yes

	trigger = { fromfrom = { ag_can_auto_build_outpost = yes } }

	immediate = {
		from = { ag_export_hyperlane_distance_25 = { ag_variable = ag_distance_to_empire } }
		set_variable = { which = ag_distance_to_empire value = from.ag_distance_to_empire }

		if = {
			limit = {
				from = { NOT = { exists = starbase } }
				resource_stockpile_compare = { resource = alloys value >= 1 mult = value:ag_auto_starbase_alloys_cost }
				resource_stockpile_compare = { resource = influence value >= 1 mult = value:ag_auto_starbase_influence_cost }
			}
			add_resource = { alloys = -1 mult = value:ag_auto_starbase_alloys_cost }
			add_resource = { influence = -1 mult = value:ag_auto_starbase_influence_cost }
			from = { create_starbase = { size = starbase_outpost owner = root } }
			
			# BUild Stations.
			if = {
				limit = { fromfrom = { ag_can_auto_build_station = yes } }
				# fromfrom = { random_controlled_ship = { save_event_target_as = ag_target_ship } }
				fromfrom = { save_event_target_as = ag_target_ship }
				from = {
					every_system_planet = {
						limit = { OR = {
							AND = {
								has_mining_station = no
								has_deposit_for = shipclass_mining_station
								NOT = { has_planet_flag = ag_cannot_has_mining_station }
							}
							AND = {
								has_research_station = no
								has_deposit_for = shipclass_research_station
								NOT = { has_planet_flag = ag_cannot_has_research_station }
							}
						} }
						# Mining Stations.
						if = {
							limit = {
								has_mining_station = no
								has_deposit_for = shipclass_mining_station
								NOT = { has_planet_flag = ag_cannot_has_mining_station }
							}
							root = {
								set_variable = { which = ag_sci_constructor_mining_station_cost value = 1.0 }
								change_variable = { which = ag_sci_constructor_mining_station_cost value = modifier:shipclass_mining_station_build_cost_mult }
								if = {
									limit = { check_variable = { which = ag_sci_constructor_mining_station_cost value < 0 } }
									set_variable = { which = ag_sci_constructor_mining_station_cost value = 0.0 }
								}
								multiply_variable = { which = ag_sci_constructor_mining_station_cost value = 100.0 }
								if = {
									limit = { resource_stockpile_compare = { resource = minerals value >= 1 mult = ag_sci_constructor_mining_station_cost } }
									add_resource = { minerals = -1 mult = ag_sci_constructor_mining_station_cost }
									prev = {
										event_target:ag_target_ship = { fire_on_action = {
											on_action = on_building_mining_station
											scopes = { from = prev }
										} }
										create_mining_station = { owner = root }
										set_timed_planet_flag = { flag = ag_recent_build_mining_station days = 3 }
										planet_event = { id = ag_ancient.1207 days = 1 }
									}
								}
								else = { root = {
									create_message = {
										type = FLEET_BUILD_ORDER_CANCELED_MESSAGE_TYPE
										localization = message_ag_auto_station_failed_no_resource_desc
										days = 30
										target = root.fromfrom
										variable = {
											type = name
											localization = "ag_target_fleet"
											scope = root.fromfrom
										}
									}
								} }
							}
						}
						# Research Stations.
						else = {
							root = {
								set_variable = { which = ag_sci_constructor_research_station_cost value = 1.0 }
								change_variable = { which = ag_sci_constructor_research_station_cost value = modifier:shipclass_research_station_build_cost_mult }
								if = {
									limit = { check_variable = { which = ag_sci_constructor_research_station_cost value < 0 } }
									set_variable = { which = ag_sci_constructor_research_station_cost value = 0.0 }
								}
								multiply_variable = { which = ag_sci_constructor_research_station_cost value = 100.0 }
								if = {
									limit = { resource_stockpile_compare = { resource = minerals value >= 1 mult = ag_sci_constructor_research_station_cost } }
									add_resource = { minerals = -1 mult = ag_sci_constructor_research_station_cost }
									prev = {
										event_target:ag_target_ship = { fire_on_action = {
											on_action = on_building_research_station
											scopes = { from = prev }
										} }
										create_research_station = { owner = root }
										set_timed_planet_flag = { flag = ag_recent_build_research_station days = 3 }
										planet_event = { id = ag_ancient.1207 days = 1 }
									}
								}
								else = { root = {
									create_message = {
										type = FLEET_BUILD_ORDER_CANCELED_MESSAGE_TYPE
										localization = message_ag_auto_station_failed_no_resource_desc
										days = 30
										target = root.fromfrom
										variable = {
											type = name
											localization = "ag_target_fleet"
											scope = root.fromfrom
										}
									}
								} }
							}
						}
					}
					# Hyper Relay.
					if = {
						limit = { root.fromfrom = { ag_can_auto_build_hyper_relay = yes } }
						root = {
							set_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value = 1.0 }
							set_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value = 1.0 }
							set_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value = 1.0 }
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value = modifier:megastructures_cost_mult }
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value = modifier:megastructures_alloys_cost_mult }
							if = {
								limit = { check_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value < 0 } }
								set_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value = 0 }
							}
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value = modifier:megastructures_cost_mult }
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value = modifier:megastructures_rare_crystals_cost_mult }
							if = {
								limit = { check_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value < 0 } }
								set_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value = 0 }
							}
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value = modifier:megastructures_cost_mult }
							change_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value = modifier:megastructures_influence_cost_mult }
							if = {
								limit = { check_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value < 0 } }
								set_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value = 0 }
							}
							multiply_variable = { which = ag_sci_constructor_hyper_relay_cost_alloys value = 500.0 }
							multiply_variable = { which = ag_sci_constructor_hyper_relay_cost_rare_crystals value = 100.0 }
							multiply_variable = { which = ag_sci_constructor_hyper_relay_cost_influence value = 25.0 }
						}
						if = {
							limit = { root = {
								resource_stockpile_compare = { resource = alloys value >= 1 mult = ag_sci_constructor_hyper_relay_cost_alloys }
								resource_stockpile_compare = { resource = rare_crystals value >= 1 mult = ag_sci_constructor_hyper_relay_cost_rare_crystals }
								resource_stockpile_compare = { resource = influence value >= 1 mult = ag_sci_constructor_hyper_relay_cost_influence }
							} }
							root = {
								add_resource = { alloys = -1 mult = ag_sci_constructor_hyper_relay_cost_alloys }
								add_resource = { rare_crystals = -1 mult = ag_sci_constructor_hyper_relay_cost_rare_crystals }
								add_resource = { influence = -1 mult = ag_sci_constructor_hyper_relay_cost_influence }
							}
							spawn_megastructure = {
								type = "hyper_relay"
								graphical_culture = root
								owner = root
								random_pos = yes
								orbit_angle = 360
							}
						}
						else = { root = {
							create_message = {
								type = FLEET_BUILD_ORDER_CANCELED_MESSAGE_TYPE
								localization = message_ag_auto_hyper_relays_failed_no_resource_desc
								days = 30
								target = root.fromfrom
								variable = {
									type = name
									localization = "ag_target_fleet"
									scope = root.fromfrom
								}
							}
						} }
					}
				}
			}
		}
		else = { root = {
			create_message = {
				type = FLEET_BUILD_ORDER_CANCELED_MESSAGE_TYPE
				localization = message_ag_auto_outpost_failed_desc
				days = 30
				target = from
				variable = {
					type = name
					localization = "ag_target_system"
					scope = from
				}
			}
		} }
	}

	after = {
		clear_variable = ag_distance_to_empire
		clear_variable = ag_sci_constructor_starbase_cost_influence_base
		clear_variable = ag_sci_constructor_starbase_cost_influence
		clear_variable = ag_sci_constructor_mining_station_cost
		clear_variable = ag_sci_constructor_research_station_cost
		clear_variable = ag_sci_constructor_hyper_relay_cost_alloys
		clear_variable = ag_sci_constructor_hyper_relay_cost_rare_crystals
		clear_variable = ag_sci_constructor_hyper_relay_cost_influence
		from = { clear_variable = ag_distance_to_empire }
	}
}
planet_event = {
	id = ag_ancient.1207
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				has_planet_flag = ag_recent_build_mining_station
				has_mining_station = no
			}
			set_planet_flag = ag_cannot_has_mining_station
		}
		else_if = {
			limit = {
				has_planet_flag = ag_recent_build_research_station
				has_research_station = no
			}
			set_planet_flag = ag_cannot_has_research_station
		}
	}
}
leader_event = {
	id = ag_ancient.1208
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		leader_class = scientist
		exists = fleet
	}
	immediate = {
		if = {
			limit = {
				NOR = {
					has_trait = ag_science_constructor_archaeology_module_01
					has_trait = ag_science_constructor_archaeology_module_02
					has_trait = ag_science_constructor_archaeology_module_03
					has_trait = ag_science_constructor_archaeology_module_04
					has_trait = ag_science_constructor_archaeology_module_05
					has_trait = ag_science_constructor_archaeology_module_06
				}
				fleet = {
					has_fleet_flag = ag_science_constructor_fleet
					any_controlled_ship = { has_component = ag_science_constructor_archaeology_module }
				}
			}
			if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 1 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_01
			}
			else_if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 2 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_02
			}
			else_if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 3 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_03
			}
			else_if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 4 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_04
			}
			else_if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 5 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_05
			}
			else_if = {
				limit = { fleet = { check_variable = { which = ag_science_constructor_archaeology_buff value = 6 } } }
				add_trait_no_notify = ag_science_constructor_archaeology_module_06
			}
		}
		else = { if = {
			limit = {
				OR = {
					has_trait = ag_science_constructor_archaeology_module_01
					has_trait = ag_science_constructor_archaeology_module_02
					has_trait = ag_science_constructor_archaeology_module_03
					has_trait = ag_science_constructor_archaeology_module_04
					has_trait = ag_science_constructor_archaeology_module_05
					has_trait = ag_science_constructor_archaeology_module_06
				}
				fleet = { NAND = {
					has_fleet_flag = ag_science_constructor_fleet
					any_controlled_ship = { has_component = ag_science_constructor_archaeology_module }
				} }
			}
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_01 } remove_trait = ag_science_constructor_archaeology_module_01 }
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_02 } remove_trait = ag_science_constructor_archaeology_module_02 }
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_03 } remove_trait = ag_science_constructor_archaeology_module_03 }
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_04 } remove_trait = ag_science_constructor_archaeology_module_04 }
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_05 } remove_trait = ag_science_constructor_archaeology_module_05 }
			if = { limit = { has_trait = ag_science_constructor_archaeology_module_06 } remove_trait = ag_science_constructor_archaeology_module_06 }
		} }
	}
}
leader_event = {
	id = ag_ancient.1209
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		leader_class = scientist
		OR = {
			has_trait = ag_science_constructor_archaeology_module_01
			has_trait = ag_science_constructor_archaeology_module_02
			has_trait = ag_science_constructor_archaeology_module_03
			has_trait = ag_science_constructor_archaeology_module_04
			has_trait = ag_science_constructor_archaeology_module_05
			has_trait = ag_science_constructor_archaeology_module_06
		}
		exists = fleet
		fleet = {
			has_fleet_flag = ag_science_constructor_fleet
			any_controlled_ship = { has_component = ag_science_constructor_archaeology_module }
		}
	}
	immediate = {
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_01 } remove_trait = ag_science_constructor_archaeology_module_01 }
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_02 } remove_trait = ag_science_constructor_archaeology_module_02 }
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_03 } remove_trait = ag_science_constructor_archaeology_module_03 }
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_04 } remove_trait = ag_science_constructor_archaeology_module_04 }
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_05 } remove_trait = ag_science_constructor_archaeology_module_05 }
		if = { limit = { has_trait = ag_science_constructor_archaeology_module_06 } remove_trait = ag_science_constructor_archaeology_module_06 }
	}
}

# on_tech_increased, Researched ancient tech
country_event = {
	id = ag_ancient.1250
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		ag_researched_ancient_tech_category = yes
		any_owned_leader = {
			OR = { is_councilor_type = councilor_research is_councilor_type = councilor_gestalt_scientist }
			NOT = { has_trait_tier1or2or3 = { TRAIT = leader_trait_expertise_ag_ancient_tech_category } }
		}
	}
	immediate = {
		random_owned_leader = {
			limit = {
				OR = { is_councilor_type = councilor_research is_councilor_type = councilor_gestalt_scientist }
				NOT = { has_trait_tier1or2or3 = { TRAIT = leader_trait_expertise_ag_ancient_tech_category } }
			}
			change_variable = { which = ag_num_researched_ancient_techs value = 1 }
			# save_event_target_as = ag_target_leader
		}
		# event_target:ag_target_leader = { if = {
		# 	limit = { hidden_trigger = { check_variable = { which = ag_num_researched_ancient_techs value >= 5 } } }
		# 	add_trait = leader_trait_expertise_ag_ancient_tech_category
		# } }
	}
}
leader_event = {
	id = ag_ancient.1251
	title = "leader.21.name"
	desc = "ag_ancient.1250.desc"
	diplomatic = yes
	custom_gui = "ag_ancient_event_s_window"
	custom_gui_option = "ag_ancient_event_option"
	picture_event_data = { room = ag_event_arguing_senate_room }
	show_sound = event_default
	is_triggered_only = yes
	option = {
		name = "ag_ancient.1250.a"
		add_trait = leader_trait_expertise_ag_ancient_tech_category
	}
}

# on_tech_increased, Leader Trait effect.
country_event = {
	id = ag_ancient.1260
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = ag_ancient_1260_locked }
		any_owned_leader = { leader_class = scientist is_councilor = yes has_trait = leader_trait_ag_ancient_ai_StarlightII_councilor }
		OR = {
			last_increased_tech = tech_repeatable_improved_tile_energy_output
			last_increased_tech = tech_repeatable_improved_shield_output
			last_increased_tech = tech_repeatable_weapon_type_energy_damage
			last_increased_tech = tech_repeatable_weapon_type_energy_fire_rate
			last_increased_tech = tech_repeatable_reduced_building_cost
			
			last_increased_tech = tech_repeatable_improved_tile_food_output
			last_increased_tech = tech_repeatable_improved_core_system_cap
			last_increased_tech = tech_repeatable_improved_army_damage
			last_increased_tech = tech_repeatable_improved_army_health
			last_increased_tech = tech_repeatable_improved_leader_life_span
			last_increased_tech = tech_repeatable_naval_cap
			last_increased_tech = tech_repeatable_command_limit
			last_increased_tech = tech_repeatable_improved_starbase_capacity
			last_increased_tech = tech_repeatable_weapon_type_strike_craft_fire_damage
			last_increased_tech = tech_repeatable_weapon_type_strike_craft_fire_rate
			last_increased_tech = tech_ag_revision_psionic_theory
			
			last_increased_tech = tech_repeatable_improved_tile_mineral_output
			last_increased_tech = tech_repeatable_improved_military_station_damage
			last_increased_tech = tech_repeatable_improved_military_station_health
			last_increased_tech = tech_repeatable_improved_armor_output
			last_increased_tech = tech_repeatable_weapon_type_explosive_damage
			last_increased_tech = tech_repeatable_weapon_type_explosive_fire_rate
			last_increased_tech = tech_repeatable_weapon_type_kinetic_damage
			last_increased_tech = tech_repeatable_weapon_type_kinetic_fire_rate
			last_increased_tech = tech_repeatable_reduced_building_time
			last_increased_tech = tech_ag_revision_gravity_theory
		}
	}
	immediate = { country_event = { id = ag_ancient.1261 days = 1 } }
}
country_event = {
	id = ag_ancient.1261
	hide_window = yes
	is_triggered_only = yes
	trigger = { NOT = { has_country_flag = ag_ancient_1260_locked } }
	immediate = {
		set_country_flag = ag_ancient_1260_locked
		reroll_random = yes
		random_list = {
			90 = { }
			10 = {
				if = { limit = { last_increased_tech = tech_repeatable_improved_tile_energy_output } give_technology = { tech = tech_repeatable_improved_tile_energy_output message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_shield_output } give_technology = { tech = tech_repeatable_improved_shield_output message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_energy_damage } give_technology = { tech = tech_repeatable_weapon_type_energy_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_energy_fire_rate } give_technology = { tech = tech_repeatable_weapon_type_energy_fire_rate message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_reduced_building_cost } give_technology = { tech = tech_repeatable_reduced_building_cost message = yes } }
				
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_tile_food_output } give_technology = { tech = tech_repeatable_improved_tile_food_output message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_core_system_cap } give_technology = { tech = tech_repeatable_improved_core_system_cap message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_army_damage } give_technology = { tech = tech_repeatable_improved_army_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_army_health } give_technology = { tech = tech_repeatable_improved_army_health message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_leader_life_span } give_technology = { tech = tech_repeatable_improved_leader_life_span message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_naval_cap } give_technology = { tech = tech_repeatable_naval_cap message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_command_limit } give_technology = { tech = tech_repeatable_command_limit message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_starbase_capacity } give_technology = { tech = tech_repeatable_improved_starbase_capacity message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_strike_craft_fire_damage } give_technology = { tech = tech_repeatable_weapon_type_strike_craft_fire_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_strike_craft_fire_rate } give_technology = { tech = tech_repeatable_weapon_type_strike_craft_fire_rate message = yes } }
				else_if = { limit = { last_increased_tech = tech_ag_revision_psionic_theory } give_technology = { tech = tech_ag_revision_psionic_theory message = yes } }
				
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_tile_mineral_output } give_technology = { tech = tech_repeatable_improved_tile_mineral_output message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_military_station_damage } give_technology = { tech = tech_repeatable_improved_military_station_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_military_station_health } give_technology = { tech = tech_repeatable_improved_military_station_health message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_improved_armor_output } give_technology = { tech = tech_repeatable_improved_armor_output message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_explosive_damage } give_technology = { tech = tech_repeatable_weapon_type_explosive_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_explosive_fire_rate } give_technology = { tech = tech_repeatable_weapon_type_explosive_fire_rate message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_kinetic_damage } give_technology = { tech = tech_repeatable_weapon_type_kinetic_damage message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_weapon_type_kinetic_fire_rate } give_technology = { tech = tech_repeatable_weapon_type_kinetic_fire_rate message = yes } }
				else_if = { limit = { last_increased_tech = tech_repeatable_reduced_building_time } give_technology = { tech = tech_repeatable_reduced_building_time message = yes } }
				else_if = { limit = { last_increased_tech = tech_ag_revision_gravity_theory } give_technology = { tech = tech_ag_revision_gravity_theory message = yes } }
			}
		}
	}
	after = { remove_country_flag = ag_ancient_1260_locked }
}

# on_ship_disabled, Ship disable entry
# Prefix: ag_disable_

# Current disable types:
# common							# 0
# invincible						# 10
# extra_life						# 20
# difficulty						# 30
# gamma_station						# 40
# zeta_station						# 50
# subsystem_emergency_repair		# 60
# zeta_ship							# 70
# event								# 80

ship_event = {
	id = ag_ancient.2001
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_ship_flag = ag_set_disable_at_health }
	immediate = {
		if = {
			limit = { check_variable = { which = ag_set_disable_at_health_lvl value != value:ag_total_disable_lvl } }
			set_variable = { which = ag_set_disable_at_health_lvl value = value:ag_total_disable_lvl }
			if = {
				limit = { check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } }
				set_disable_at_health = -1
				if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
				remove_ship_flag = ag_set_disable_at_health
				clear_variable = ag_set_disable_at_health_lvl
			}
		}
		if = {
			limit = { is_variable_set = ag_disable_common }
			fire_on_action = { on_action = ag_on_disabled_common scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_invincible }
			fire_on_action = { on_action = ag_on_disabled_invincible scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_extra_life }
			fire_on_action = { on_action = ag_on_disabled_extra_life scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_difficulty }
			fire_on_action = { on_action = ag_on_disabled_difficulty scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_gamma_station }
			fire_on_action = { on_action = ag_on_disabled_gamma_station scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_zeta_station }
			fire_on_action = { on_action = ag_on_disabled_zeta_station scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_subsystem_emergency_repair }
			fire_on_action = { on_action = ag_on_disabled_subsystem_emergency_repair scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_zeta_ship }
			fire_on_action = { on_action = ag_on_disabled_zeta_ship scopes = { from = from } }
		} else = { if = {
			limit = { is_variable_set = ag_disable_event }
			fire_on_action = { on_action = ag_on_disabled_event scopes = { from = from } }
		} } } } } } } } }
		# Fix for event functions.
		if = { limit = { is_variable_set = disable_time_checkpoint } subtract_variable = { which = disable_time_checkpoint value = 1 } }
	}
	after = {
		if = {
			limit = { is_variable_set = ag_set_disable_at_health_lvl check_variable = { which = ag_set_disable_at_health_lvl value != value:ag_total_disable_lvl } }
			set_variable = { which = ag_set_disable_at_health_lvl value = value:ag_total_disable_lvl }
			if = {
				limit = { check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } }
				set_disable_at_health = -1
				if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
				remove_ship_flag = ag_set_disable_at_health
				clear_variable = ag_set_disable_at_health_lvl
			}
		}
	}
}
ship_event = {
	id = ag_ancient.2002
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		repair_ship = yes
		set_disabled = no
		change_variable = { which = ag_disabled_times value = 1 }
		if = {
			limit = { OR = {
				from.owner = { OR = {
					is_country_type = ag_ancient_gamma_guardian
					is_country_type = ag_ancient_zeta_guardian
					is_country_type = ag_ancient_psi_guardian
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = ag_ancient_eta_guardian_passive
					is_country_type = ag_ancient_eta_guardian
				} }
				AND = {
					is_ship_size = ag_zeta_crisis_special_ship
					check_variable = { which = ag_disabled_times value > 31 }
				}
				AND = {
					is_ship_size = ag_eta_titan_phantom_hostile
					solar_system = { NOT = { any_fleet_in_system = {
						has_fleet_flag = ag_eta_titan_hostile_fleet
					} } }
				}
			} }
			ag_clear_disable_at_health = { ag_disable_type = invincible }
			ag_spawn_extra_lives_effect = yes
		}
		else = { ag_spawn_invincible_effect = yes }
	}
}
# on_ship_destroyed_victim, Undestructable ship destroyed for unknown reason.
country_event = {
	id = ag_ancient.2004
	hide_window = yes
	is_triggered_only = yes
	trigger = { from = { ag_is_mod_country = no } fromfrom = { has_ship_flag = ag_set_disable_at_health NOR = { is_ship_size = ag_zeta_crisis_psionic_storm is_ship_size = ag_zeta_crisis_psionic_singularity } } }
	immediate = {
		fromfrom = {
			if = {
				limit = { is_ship_class = shipclass_military }
				fleet = { create_ship = {
					name = root.fromfrom
					design = root.fromfrom
					effect = {
						copy_flags_and_variables_from = root.fromfrom
						root.fromfrom = { ag_ship_invincible_debug_effect = yes }
						fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
						if = {
							limit = { NOT = { is_variable_set = ag_disable_invincible } }
							random_list = { 20 = { } 9 = { ag_set_ship_invincible = { ag_days = 1 } } 1 = { ag_set_ship_invincible = { ag_days = 2 } } }
							reroll_random = yes
						}
					}
				} }
			}
			else_if = {
				limit = { NAND = { is_ship_class = shipclass_starbase fleet = { is_mobile = no } } }
				root = { create_fleet = {
					name = root.fromfrom.fleet
					settings = { spawn_debris = no }
					effect = {
						set_owner = root
						copy_flags_and_variables_from = root.fromfrom.fleet
						create_ship = {
							name = root.fromfrom
							design = root.fromfrom
							effect = {
								copy_flags_and_variables_from = root.fromfrom
								root.fromfrom = { ag_ship_invincible_debug_effect = yes }
								fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
								if = {
									limit = { NOT = { is_variable_set = ag_disable_invincible } }
									random_list = { 20 = { } 9 = { ag_set_ship_invincible = { ag_days = 1 } } 1 = { ag_set_ship_invincible = { ag_days = 2 } } }
									reroll_random = yes
								}
							}
						}
						set_location = { target = root.fromfrom distance = 0 angle = random }
					}
				} }
			}
		}
	}
}
ship_event = {
	id = ag_ancient.2005
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		ag_clear_disable_at_health = { ag_disable_type = invincible }
		if = { limit = { is_variable_set = ag_ship_invincible_debug_var } clear_variable = ag_ship_invincible_debug_var }
	}
}

# on_entering_battle, Common combat events entry.
country_event = {
	id = ag_ancient.2100
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		fromfrom = { NOT = { has_fleet_flag = ag_ancient_2100_mutex_@root.fromfromfrom } }
		OR = {
			ag_is_ancient_country = yes
			is_country_type = ag_zeta_crisis_country
			any_owned_ship = { OR = { has_ship_flag = ag_ancient_empire_mod_ship ag_has_special_aura = yes } }
		}
	}
	immediate = {
		fromfrom = { set_fleet_flag = ag_ancient_2100_mutex_@root.fromfromfrom }
		fromfromfrom = { if = {
			limit = { NOT = { has_fleet_flag = ag_ancient_2100_mutex_@root.fromfrom } }
			root.from = { country_event = { id = ag_ancient.2100 scopes = { from = root fromfrom = root.fromfromfrom fromfromfrom = root.fromfrom } } }
		} }
		
		# Aura Effects
		set_update_modifiers_batch = begin
		fromfrom = { every_owned_ship = {
			limit = { ag_has_special_aura = yes }
			root.fromfromfrom = { every_owned_ship = { ag_ship_aura_init_effect = yes } }
		} }
		set_update_modifiers_batch = end

		# Gravity Weapon System's Effect.
		if = {
			limit = {
				OR = { ag_is_ancient_country = yes ag_country_has_subsystem = { ag_subsystem_id = 3 } }
				NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian }
				fromfrom = { NOR = { has_fleet_flag = ag_eta_titan_phantom_hostile_fleet has_fleet_flag = ag_eta_titan_phantom_player_fleet } }
			}
			if = {
				limit = { ag_country_has_subsystem = { ag_subsystem_id = 3 } }
				fromfromfrom = {
					set_variable = { which = ag_max_ship_locked_ships value = trigger:num_ships }
					divide_variable = { which = ag_max_ship_locked_ships value = 10 }
					floor_variable = ag_max_ship_locked_ships
				}
				fromfrom = { every_owned_ship = {
					limit = { ag_ship_has_subsystem = { ag_owner = root ag_subsystem_id = 3 } }
					root.fromfromfrom = {
						every_owned_ship = {
							limit = { OR = {
								is_ship_class = shipclass_military
								is_ship_class = shipclass_military_special
								is_ship_class = shipclass_military_station
								is_ship_class = shipclass_starbase
							} }
							ag_ancient_gravity_weapon_ship_effect = yes
						}
						clear_variable = ag_max_ship_locked_ships
					}
				} }
			}
			else = {
				fromfromfrom = {
					set_variable = { which = ag_max_ship_locked_ships value = trigger:num_ships }
					divide_variable = { which = ag_max_ship_locked_ships value = 10 }
					floor_variable = ag_max_ship_locked_ships
				}
				fromfrom = { every_owned_ship = { root.fromfromfrom = {
					every_owned_ship = {
						limit = { OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_military_special
							is_ship_class = shipclass_military_station
							is_ship_class = shipclass_starbase
						} }
						ag_ancient_gravity_weapon_ship_effect = yes
					}
					clear_variable = ag_max_ship_locked_ships
				} } }
			}
		}

		# Anti Psionic Weapon System's Effect.
		if = {
			limit = { OR = {
				is_country_type = ag_ancient_zeta_guardian
				is_country_type = ag_ancient_psi_guardian
				has_country_flag = ag_ship_subsystem_enabled_701_23
				has_country_flag = ag_ship_subsystem_enabled_702_23
				has_country_flag = ag_ship_subsystem_enabled_703_23
			} }
			if = {
				limit = {
					from = { OR = {
						is_country_type = ag_zeta_crisis_country
						is_country_type = ag_zeta_crisis_portal_holder
						is_country_type = ag_zeta_crisis_relic_country
					} }
					OR = {
						is_country_type = ag_ancient_zeta_guardian
						is_country_type = ag_ancient_psi_guardian
						fromfrom = { any_owned_ship = { OR = {
							AND = { is_ship_size = ag_zeta_titan NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_701_23 } }
							AND = { is_ship_size = ag_zeta_battleship NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_702_23 } }
							AND = { is_ship_size = ag_zeta_destroyer NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_703_23 } }
						} } }
					}
				}
				fromfromfrom = {
					remove_fleet_flag = ag_anti_psi_weapon_target_avatar
					set_timed_fleet_flag = { flag = ag_anti_psi_weapon_target_avatar days = 20 }
					solar_system = { every_fleet_in_system = {
						limit = { has_fleet_flag = ag_zeta_crisis_avatar_fleet }
						random_list = {
							50 = { }
							30 = {
								ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
								set_timed_fleet_flag = { flag = ag_ship_weapon_range_mult_locked days = 10 }
								add_modifier = { modifier = ag_ship_weapon_range_mult_buff multiplier = -5 days = 10 }
							}
							20 = {
								ag_spawn_explosion_effect = { ag_scale = m ag_color = violet }
								delete_fleet = this
							}
						}
					} }
				}
			}
			if = {
				limit = { OR = {
					is_country_type = ag_ancient_zeta_guardian
					is_country_type = ag_ancient_psi_guardian
				} }
				fromfrom = { every_owned_ship = {
					limit = { ag_is_ancient_ship_with_anti_psi_weapon = yes }
					root.fromfromfrom = { every_owned_ship = {
						limit = {
							NOT = { has_ship_flag = ag_anti_psi_weapon_target }
							OR = {
								is_ship_class = shipclass_military
								is_ship_class = shipclass_military_special
								is_ship_class = shipclass_military_station
								is_ship_class = shipclass_starbase
							}
						}
						ag_ancient_anti_psi_weapon_ship_effect = yes
					} }
				} }
			}
			else = {
				fromfrom = { every_owned_ship = {
					limit = { OR = {
						AND = { is_ship_size = ag_zeta_titan NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_701_23 } }
						AND = { is_ship_size = ag_zeta_battleship NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_702_23 } }
						AND = { is_ship_size = ag_zeta_destroyer NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } owner = { has_country_flag = ag_ship_subsystem_enabled_703_23 } }
					} }
					root.fromfromfrom = { every_owned_ship = {
						limit = {
							NOT = { has_ship_flag = ag_anti_psi_weapon_target }
							OR = {
								is_ship_class = shipclass_military
								is_ship_class = shipclass_military_special
								is_ship_class = shipclass_military_station
								is_ship_class = shipclass_starbase
							}
						}
						ag_ancient_anti_psi_weapon_ship_effect = yes
					} }
				} }
			}
		}

		# Kill Fleet Leader Effect.
		if = {
			limit = {
				from = { NOR = {
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
					is_country_type = swarm
					is_country_type = feral_prethoryn
					is_country_type = feral_prethoryn_infighting
					is_country_type = ai_empire
					is_country_type = cybrex_empire
				} }
				fromfromfrom = { exists = leader }
			}
			if = {
				limit = { is_country_type = ag_zeta_crisis_country }
				random_list = {
					95 = { modifier = { add = -50 from = { ag_is_common_country = no ag_is_mod_country = no } } }
					5 = {
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 1 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 2 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 3 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 4 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 5 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 6 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 7 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 8 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { OR = { has_skill > 9 has_skill = 10 } } } }
						modifier = {
							factor = 2
							fromfromfrom = { leader = { OR = {
								has_trait = leader_trait_cyborg
								has_trait = leader_trait_synthetic
							} } }
						}
						modifier = {
							factor = 0.5
							fromfromfrom = { leader = { OR = {
								has_trait = leader_trait_psionic
								has_trait = leader_trait_foredoomed_to_a_rendezvous
								has_trait = leader_trait_dragonslayer
								has_trait = leader_trait_shroud_age
							} } }
						}
						modifier = {
							factor = 0
							fromfromfrom = { leader = { ag_cannot_be_killed_by_subspace_weapon = yes } }
						}
						modifier = { factor = 0 fromfromfrom = { any_owned_ship = { ag_ship_has_subsystem = { ag_owner = root.from ag_subsystem_id = 22 } } } }
						if = {
							limit = { NOT = { fromfromfrom = { any_owned_ship = { ag_ship_has_subsystem = { ag_owner = root.from ag_subsystem_id = 22 } } } } }
							fromfromfrom = {
								ag_spawn_explosion_effect = { ag_scale = xl ag_color = violet }
								leader = { save_event_target_as = ag_target_leader }
								root.from = {
									create_message = {
										type = "LEADER_DEATH"
										localization = "ag_leader_kill_by_zeta_crisis_message_desc"
										days = 30
										target = root.fromfromfrom
										variable = { type = name localization = "ag_target_fleet" scope = root.fromfromfrom }
										variable = { type = name localization = "ag_target_leader" scope = event_target:ag_target_leader }
									}
									change_variable = { which = ag_admirals_killed_counter_zeta_crisis value = 1 }
								}
							}
							event_target:ag_target_leader = { ag_kill_leader = yes }
						}
					}
				}
				reroll_random = yes
			}
			else_if = {
				limit = { OR = {
					AND = { NOT = { event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value < 1 } } } ag_is_ancient_country = yes }
					fromfrom = { any_owned_ship = { ag_ship_has_subsystem = { ag_owner = root ag_subsystem_id = 4 } } }
				} }
				random_list = {
					95 = { modifier = { add = -50 from = { ag_is_common_country = no ag_is_mod_country = no } } }
					5 = {
						modifier = { factor = 0.1 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value <= 1 } } }
						modifier = { factor = 0.5 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value < 2 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 1 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 2 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 3 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 4 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 5 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 6 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 7 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { has_skill > 8 } } }
						modifier = { factor = 0.84 fromfromfrom = { leader = { OR = { has_skill > 9 has_skill >= 10 has_skill = 10 } } } }
						modifier = { factor = 10 root = { is_ai = no } from = { is_ai = yes } }
						modifier = {
							factor = 0.5
							fromfromfrom.leader = { OR = {
								has_trait_tier1or2 = { TRAIT = leader_trait_cautious }
								has_trait = leader_trait_foredoomed_to_a_rendezvous
								has_trait = leader_trait_dragonslayer
							} }
						}
						modifier = {
							factor = 0
							fromfromfrom = { leader = { ag_cannot_be_killed_by_subspace_weapon = yes } }
						}
						modifier = { factor = 0 fromfromfrom = { any_owned_ship = { ag_ship_has_subsystem = { ag_owner = root.from ag_subsystem_id = 5 } } } }
						if = {
							limit = { NOT = { fromfromfrom = { any_owned_ship = { ag_ship_has_subsystem = { ag_owner = root.from ag_subsystem_id = 22 } } } } }
							fromfromfrom = {
								ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
								leader = { save_event_target_as = ag_target_leader }
								root.from = { create_message = {
									type = "LEADER_DEATH"
									localization = "ag_leader_kill_by_ancients_message_desc"
									days = 30
									target = root.fromfromfrom
									variable = { type = name localization = "ag_target_fleet" scope = root.fromfromfrom }
									variable = { type = name localization = "ag_target_leader" scope = event_target:ag_target_leader }
								} }
								if = {
									limit = { OR = {
										has_fleet_flag = ag_zeta_crisis_guardian_fleet
										has_fleet_flag = ag_zeta_crisis_assault_fleet
										has_fleet_flag = ag_zeta_crisis_patrol_fleet
										has_fleet_flag = ag_zeta_crisis_protector_fleet
									} }
									random_list = {
										20 = { }
										80 = {
											remove_fleet_flag = ag_zeta_crisis_leader
											remove_fleet_flag = ag_zeta_crisis_leader_1
											remove_fleet_flag = ag_zeta_crisis_leader_2
											remove_fleet_flag = ag_zeta_crisis_leader_3
											remove_fleet_flag = ag_zeta_crisis_leader_4
											remove_fleet_flag = ag_zeta_crisis_leader_5
											remove_fleet_flag = ag_zeta_crisis_leader_6
											remove_fleet_flag = ag_zeta_crisis_leader_7
											remove_fleet_flag = ag_zeta_crisis_leader_8
											remove_fleet_flag = ag_zeta_crisis_leader_9
											remove_fleet_flag = ag_zeta_crisis_leader_10
											remove_fleet_flag = ag_zeta_crisis_leader_11
											remove_fleet_flag = ag_zeta_crisis_leader_12
										}
									}
									reroll_random = yes
								}
							}
							event_target:ag_target_leader = { ag_kill_leader = yes }
						}
					}
				}
				reroll_random = yes
			}
		}

		# Starfish ship's Effect (subsystem).
		if = {
			limit = { OR = { has_country_flag = ag_ship_subsystem_enabled_801_39 has_country_flag = ag_ship_subsystem_enabled_801_40 } }
			if = {
				limit = { has_country_flag = ag_ship_subsystem_enabled_801_39 }
				fromfrom = { every_owned_ship = {
					limit = { OR = { is_ship_size = ag_experiment_ship is_ship_size = ag_experiment_ship_hostile } }
					if = { limit = { has_modifier = "ag_sub_801_39_weapon_damage_mult_buff" } remove_modifier = "ag_sub_801_39_weapon_damage_mult_buff" }
					if = { limit = { has_modifier = "ag_sub_801_39_weapon_fire_rate_mult_buff" } remove_modifier = "ag_sub_801_39_weapon_fire_rate_mult_buff" }
					add_modifier = { modifier = "ag_sub_801_39_weapon_damage_mult_buff" days = @ag_sub_kinetic_weapon_effect_days multiplier = modifier:weapon_type_kinetic_weapon_damage_mult }
					add_modifier = { modifier = "ag_sub_801_39_weapon_fire_rate_mult_buff" days = @ag_sub_kinetic_weapon_effect_days multiplier = modifier:weapon_type_kinetic_weapon_fire_rate_mult }
				} }
			}
			else = { if = {
				limit = { from = { ag_is_ancient_country = yes } }
				fromfrom = { every_owned_ship = {
					limit = { OR = { is_ship_size = ag_experiment_ship is_ship_size = ag_experiment_ship_hostile } }
					if = { limit = { has_modifier = "ag_sub_801_40_weapon_damage_mult_buff" } remove_modifier = "ag_sub_801_40_weapon_damage_mult_buff" }
					if = { limit = { has_modifier = "ag_sub_801_40_weapon_fire_rate_mult_buff" } remove_modifier = "ag_sub_801_40_weapon_fire_rate_mult_buff" }
					add_modifier = { modifier = "ag_sub_801_40_weapon_damage_mult_buff" days = @ag_sub_ancient_damage_effect_days multiplier = modifier:weapon_type_kinetic_weapon_damage_mult }
					add_modifier = { modifier = "ag_sub_801_40_weapon_fire_rate_mult_buff" days = @ag_sub_ancient_damage_effect_days multiplier = modifier:weapon_type_kinetic_weapon_fire_rate_mult }
				} }
			} }
		}

		# Mod ship's special effects.
		if = {
			limit = { fromfrom = { NOT = { has_fleet_flag = ag_zeta_crisis_avatar_fleet } } }
			if = {
				limit = { event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value >= 0 } } }
				fromfrom = {
					set_variable = { which = ag_mod_ship_modifier_effect_fired value = 0 }
					if = {
						limit = { NOT = { has_fleet_flag = ag_ancient_28_mutex } }
						set_fleet_flag = ag_ancient_28_mutex
						if = { limit = { NOT = { has_fleet_flag = ag_ancient_ship_modifier_clear_activated } } set_fleet_flag = ag_ancient_ship_modifier_clear_activated }
						every_owned_ship = {
							if = {
								limit = { OR = { owner = { has_country_flag = ag_ancient_empire_mod_country } ag_is_ancient_ship_unlocked = yes } ag_mod_ship_modifier_check = yes }
								ag_mod_ship_modifier_fix_up_effect = yes
							}
							remove_modifier = "ag_ancient_weapons_power"
							set_variable = { which = ag_primary_weapon_temp_1 value = event_target:global_event_country.ag_scaled_difficulty }
							change_variable = { which = ag_primary_weapon_temp_1 value = 0.5 }
							add_modifier = { modifier = "ag_ancient_weapons_power" days = 5 multiplier = ag_primary_weapon_temp_1 }
							clear_variable = ag_primary_weapon_temp_1
							if = {
								limit = {
									check_modifier_value = { modifier = ag_instant_kill_shot_add value > 0 }
									NAND = { is_variable_set = ag_num_ship_killed_targets check_variable = { which = ag_num_ship_killed_targets value >= modifier:ag_instant_kill_shot_add } }
								}
								add_modifier = { modifier = "ag_weapon_instant_kill_buff" days = -1 multiplier = value:ag_instant_kill_weapon_damage_factor }
							}
						}
						if = { limit = { NOT = { is_variable_set = ag_fleet_combat_days } } set_variable = { which = ag_fleet_combat_days value = 0 } }
					}
				}
			}
		}

		# set_update_modifiers_batch = end
	}
	after = {
		fromfrom = {
			if = { limit = { exists = leader leader = { ag_is_incorrect_leader = yes } } ag_kill_leader = yes }
			if = { limit = { NOR = { has_fleet_flag = ag_ancient_2102_fired has_fleet_flag = ag_zeta_crisis_avatar_fleet } } set_fleet_flag = ag_ancient_2102_fired fleet_event = { id = ag_ancient.2102 days = 1 } }
			fleet_event = { id = ag_ancient.2104 days = 1 scopes = { from = root.fromfromfrom } }
		}
		fromfromfrom = {
			if = { limit = { exists = leader leader = { ag_is_incorrect_leader = yes } } ag_kill_leader = yes }
			if = { limit = { NOR = { has_fleet_flag = ag_ancient_2102_fired has_fleet_flag = ag_zeta_crisis_avatar_fleet } } set_fleet_flag = ag_ancient_2102_fired fleet_event = { id = ag_ancient.2102 days = 1 } }
		}
	}
}

# Remove flags for debuff
ship_event = {
	id = ag_ancient.2101
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		subtract_variable = { which = ag_num_ancient_ship_enter_battle_debuff value = 1 }
		if = { limit = { check_variable = { which = ag_num_ancient_ship_enter_battle_debuff value <= 0 } } clear_variable = ag_num_ancient_ship_enter_battle_debuff }
	}
}

# Daily effect.
fleet_event = {
	id = ag_ancient.2102
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = { limit = { exists = leader leader = { ag_is_incorrect_leader = yes } } ag_kill_leader = yes }
		if = {
			limit = { is_in_combat = yes }
			change_variable = { which = ag_fleet_combat_days value = 1 }
			every_owned_ship = {
				if = {
					limit = { OR = { is_ship_size = ag_alpha_titan_0 is_ship_size = ag_alpha_titan_1 } prev = { is_variable_set = ag_alpha_psi_shield_auto_delay check_variable = { which = ag_fleet_combat_days value >= ag_alpha_psi_shield_auto_delay } } }
					prev = { clear_variable = ag_alpha_psi_shield_auto_delay }
					ag_alpha_titan_player_psi_shield_effect = { ag_days = value:ag_alpha_titan_psi_shield_active_days }
				}
				
				# Fix unknown modifier bug, probably caused by a lot of modifiers/script_values calculation in one day/first combat day.
				if = {
					limit = { is_variable_set = ag_ancient_weapon_debuff_aura_3 }
					if = {
						limit = { check_modifier_value = { modifier = ship_shield_damage_mult value <= -1 } }
						ag_dummy_aura_shield_damage_effect_fixup = yes
					}
					clear_variable = ag_ancient_weapon_debuff_aura_3
				}
				if = {
					limit = { is_variable_set = ag_ancient_weapon_debuff_aura_4 }
					if = {
						limit = { check_modifier_value = { modifier = ship_armor_damage_mult value <= -1 } }
						ag_dummy_aura_armor_damage_effect_fixup = yes
					}
					clear_variable = ag_ancient_weapon_debuff_aura_4
				}
				if = {
					limit = { is_variable_set = ag_ancient_weapon_debuff_aura_5 }
					if = {
						limit = { check_modifier_value = { modifier = ship_hull_damage_mult value <= -1 } }
						ag_dummy_aura_hull_damage_effect_fixup = yes
					}
					clear_variable = ag_ancient_weapon_debuff_aura_5
				}
				if = {
					limit = { is_variable_set = ag_ancient_weapon_debuff_aura_21 }
					if = {
						limit = { check_modifier_value = { modifier = ship_weapon_damage value <= -1 } }
						ag_dummy_aura_weapon_damage_effect_fixup = yes
					}
					clear_variable = ag_ancient_weapon_debuff_aura_21
				}
				
				if = {
					limit = {
						prev = { OR = { check_variable = { which = ag_fleet_combat_days value <= 5 } check_variable = { which = ag_mod_ship_modifier_effect_fired value <= 5 } } }
						OR = { owner = { has_country_flag = ag_ancient_empire_mod_country } ag_is_ancient_ship_unlocked = yes }
					}
					ag_mod_ship_modifier_fix_up_effect = yes
				}
				if = {
					limit = { has_ship_flag = ag_ship_penetration_mult_locked }
					if = { limit = { has_ship_flag = ag_ship_pentartion_mult_cooldown } remove_ship_flag = ag_ship_pentartion_mult_cooldown }
					else = {
						if = {
							limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
							if = { limit = { NOT = { has_modifier = "ag_ancient_anti_penetration_aura_1" } } add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| } }
							else = { add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1_alt" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| } }
							set_ship_flag = ag_ship_pentartion_mult_cooldown
						}
						if = {
							limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
							if = { limit = { NOT = { has_modifier = "ag_ancient_anti_penetration_aura_2" } } add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| } }
							else = { add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2_alt" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| } }
							set_ship_flag = ag_ship_pentartion_mult_cooldown
						}
					}
				}
				if = {
					limit = { has_ship_flag = ag_ship_shield_hardening_add_locked }
					add_modifier = { modifier = "ag_ship_shield_hardening_add_buff" days = -1 multiplier = value:ag_anti_hardening_factor|ag_target|shield| }
				}
				if = {
					limit = { has_ship_flag = ag_ship_armor_hardening_add_locked }
					add_modifier = { modifier = "ag_ship_armor_hardening_add_buff" days = -1 multiplier = value:ag_anti_hardening_factor|ag_target|shield| }
				}
				if = {
					limit = { is_variable_set = ag_ancient_damage_aura_priority }
					if = {
						limit = { check_variable = { which = ag_ancient_damage_aura_priority value = 4 } }
						ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|64| }
					}
					else_if = {
						limit = { check_variable = { which = ag_ancient_damage_aura_priority value < 4 } }
						if = {
							limit = { check_variable = { which = ag_ancient_damage_aura_priority value = 2 } }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|16| }
						}
						else_if = {
							limit = { check_variable = { which = ag_ancient_damage_aura_priority value < 2 } }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|8| }
						}
						else_if = {
							limit = { always = yes }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|32| }
						}
					}
					else_if = {
						limit = { always = yes }
						if = {
							limit = { check_variable = { which = ag_ancient_damage_aura_priority value = 6 } }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|256| }
						}
						else_if = {
							limit = { check_variable = { which = ag_ancient_damage_aura_priority value < 6 } }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|128| }
						}
						else_if = {
							limit = { always = yes }
							ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|512| }
						}
					}
				}
				if = {
					limit = {
						check_modifier_value = { modifier = ag_instant_kill_shot_add value > 0 }
						NAND = { is_variable_set = ag_num_ship_killed_targets check_variable = { which = ag_num_ship_killed_targets value >= modifier:ag_instant_kill_shot_add } }
					}
					add_modifier = { modifier = "ag_weapon_instant_kill_buff" days = -1 multiplier = value:ag_instant_kill_weapon_damage_factor }
				}
			}
			if = { limit = { has_fleet_flag = ag_mod_ship_modifier_effect_fired } remove_fleet_flag = ag_mod_ship_modifier_effect_fired set_variable = { which = ag_mod_ship_modifier_effect_fired value = 0 } }
			else = { change_variable = { which = ag_mod_ship_modifier_effect_fired value = 1 } }
			fleet_event = { id = ag_ancient.2102 days = 1 }
		}
		else = {
			remove_fleet_flag = ag_ancient_28_mutex
			remove_fleet_flag = ag_ancient_2102_fired
			remove_fleet_flag = ag_mod_ship_modifier_fix_up_flag
			remove_fleet_flag = ag_mod_ship_modifier_fix_up
			clear_variable = ag_mod_ship_modifier_effect_fired
			if = { limit = { is_variable_set = ag_alpha_psi_shield_auto_delay } clear_variable = ag_alpha_psi_shield_auto_delay }
			# set_update_modifiers_batch = begin
			ag_mod_fleet_modifier_cleans_up_effect = yes
			# set_update_modifiers_batch = end
		}
	}
}

# on_entering_battle, destroy Caravaneers & Enigmatic Fortress.
country_event = {
	id = ag_ancient.2103
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		ag_is_mod_country = yes
		from = { OR = {
			is_country_type = guardian_fortress
			is_country_type = caravaneer_fleet
			is_country_type = caravaneer_home
		} }
	}
	immediate = {
		if = { limit = { is_country_type = ag_zeta_crisis_country } fromfromfrom = { ag_spawn_explosion_effect = { ag_scale = xl ag_color = violet } } }
		else_if = { limit = { is_country_type = ag_ancient_primitive_crisis } fromfromfrom = { ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange } } }
		else_if = { limit = { always = yes } fromfromfrom = { ag_spawn_explosion_effect = { ag_scale = xl ag_color = red } } }
		from = { switch = {
			trigger = is_country_type
			guardian_fortress = { root = {
				set_country_flag = fortress_solved
				save_event_target_as = leviathan_destroyer_country
				fromfromfrom = {
					solar_system = {
						save_event_target_as = leviathan_destroyed_system
						star = {
							create_ambient_object = { type = "dead_enigmatic_fortress_object" location = solar_system }
							last_created_ambient_object = {
								save_global_event_target_as = fortress_ambient
								set_location = { target = prev distance = 110 angle = 110 }
							}
						}
					}
					every_country = {
						limit = { NOR = { is_same_value = root is_same_value = root.from } }
						if = {
							limit = {
								is_country_type = default
								has_event_chain = curator_poi_chain
								event_target:leviathan_destroyed_system = { is_point_of_interest = { id = curator_poi_fortress event_chain = curator_poi_chain owner = prev } }
							}
							remove_point_of_interest = curator_poi_fortress
							end_curator_chain = yes
						}
						country_event = { id = leviathans.5 }
					}
					destroy_fleet = { target = this kill_leader = yes destroy_template = yes }
				}
			} }
			caravaneer_fleet = {
				switch = {
					trigger = has_country_flag
					caravaneer_fleet1_country = { every_country = {
						limit = { ag_is_common_country = yes has_communications = root.from }
						country_event = { id = cara.1003 }
					} }
					caravaneer_fleet2_country = { every_country = {
						limit = { ag_is_common_country = yes has_communications = root.from }
						country_event = { id = cara.2003 }
					} }
					caravaneer_fleet3_country = { every_country = {
						limit = { ag_is_common_country = yes has_communications = root.from }
						country_event = { id = cara.3003 }
					} }
				}
				root.fromfromfrom = { destroy_fleet = { target = this kill_leader = yes destroy_template = yes } }
			}
			caravaneer_home = { root = {
				set_country_flag = destroyed_caravaneer_home
				fromfromfrom = {
					clear_global_event_target = caravaneer_home_system
					clear_global_event_target = caravaneer_home_star
					every_playable_country = {
						limit = { ag_is_common_country = yes has_communications = root.from }
						country_event = { id = cara.920 }
					}
					destroy_fleet = { target = this kill_leader = yes destroy_template = yes }
				}
			} }
		} }
	}
}

# Remove mutex flag.
fleet_event = {
	id = ag_ancient.2104
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_fleet_flag = ag_ancient_2100_mutex_@from }
	immediate = { remove_fleet_flag = ag_ancient_2100_mutex_@from }
}

# on_ship_destroyed_perp, Common combat events entry.
country_event = {
	id = ag_ancient.2200
	hide_window = yes
	is_triggered_only = yes

	trigger = { OR = {
		ag_is_mod_country = yes
		AND = {
			fromfrom.fleet = { has_fleet_flag = ag_has_ancient_ship_in_fleet }
			OR = {
				fromfrom = { ag_ship_has_subsystem = { ag_owner = root ag_subsystem_id = 3 } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_201_21 fromfrom = { OR = { is_ship_size = ag_beta_station_type1_0 is_ship_size = ag_beta_station_type1_1 } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_701_21 fromfrom = { is_ship_size = ag_zeta_titan_psi } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_702_21 fromfrom = { is_ship_size = ag_zeta_battleship_psi } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_703_21 fromfrom = { is_ship_size = ag_zeta_destroyer_psi } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_701_23 fromfrom = { is_ship_size = ag_zeta_titan NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_702_23 fromfrom = { is_ship_size = ag_zeta_battleship NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_703_23 fromfrom = { is_ship_size = ag_zeta_destroyer NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
			}
		}
	} }

	immediate = {
		# set_update_modifiers_batch = begin
		# Gravity Weapon System's Effect.
		if = {
			limit = { OR = {
				fromfrom = { ag_ship_has_subsystem = { ag_owner = root ag_subsystem_id = 3 } }
				AND = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } ag_is_ancient_country = yes }
			} }
			fromfromfrom.fleet = {
				set_variable = { which = ag_max_ship_locked_ships value = trigger:num_ships }
				divide_variable = { which = ag_max_ship_locked_ships value = 10 }
				floor_variable = ag_max_ship_locked_ships
				every_owned_ship = {
					limit = {
						NOR = { is_same_value = root.fromfromfrom ag_is_special_ship = yes }
						is_disabled = no
						has_hp > 0
						OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_military_special
							is_ship_class = shipclass_military_station
							is_ship_class = shipclass_starbase
						}
					}
					ag_ancient_gravity_weapon_kill_effect = yes
				}
				clear_variable = ag_max_ship_locked_ships
			}
			if = {
				limit = { event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value > 2 } } }
				fromfromfrom = { fleet = { every_owned_ship = {
					limit = {
						NOT = { is_same_value = root.fromfromfrom }
						is_disabled = no
						has_hp > 0
						OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_military_special
							is_ship_class = shipclass_military_station
							is_ship_class = shipclass_starbase
						}
					}
					random_list = {
						40 = { }
						10 = { ag_reduce_hp_percent = { ag_value = 4 } ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s } }
						10 = { ag_reduce_hp_percent = { ag_value = 3 } ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s } }
						10 = { ag_reduce_hp_percent = { ag_value = 2 } ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s } }
						10 = { ag_reduce_hp_percent = { ag_value = 1 } ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s } }
					}
					reroll_random = yes
				} } }
			}
		}

		# Anti Psionic Weapon System's Effect.
		if = {
			limit = { OR = {
				is_country_type = ag_ancient_zeta_guardian
				is_country_type = ag_ancient_psi_guardian
				AND = { has_country_flag = ag_ship_subsystem_enabled_701_23 fromfrom = { is_ship_size = ag_zeta_titan NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_702_23 fromfrom = { is_ship_size = ag_zeta_battleship NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_703_23 fromfrom = { is_ship_size = ag_zeta_destroyer NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } } }
			} }
			fromfromfrom.fleet = { every_owned_ship = {
				limit = {
					NOT = { is_same_value = root.fromfromfrom }
					is_disabled = no
					has_hp > 0
					OR = {
						is_ship_class = shipclass_military
						is_ship_class = shipclass_military_special
						is_ship_class = shipclass_military_station
						is_ship_class = shipclass_starbase
					}
				}
				ag_ancient_anti_psi_weapon_kill_effect = yes
			} }
		}

		# Psionic Weapon System's Effect
		if = {
			limit = {
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_ancient_zeta_guardian
					is_country_type = ag_ancient_psi_guardian
					AND = { has_country_flag = ag_ship_subsystem_enabled_201_21 fromfrom = { OR = { is_ship_size = ag_beta_station_type1_0 is_ship_size = ag_beta_station_type1_1 } } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_701_21 fromfrom = { is_ship_size = ag_zeta_titan_psi } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_702_21 fromfrom = { is_ship_size = ag_zeta_battleship_psi } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_703_21 fromfrom = { is_ship_size = ag_zeta_destroyer_psi } }
				}
				from = { NOR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
					is_country_type = portal_holder
					is_country_type = shroud
					is_country_type = shroud_spirits
				} }
			}
			fromfrom = {
				if = { limit = { has_hp_percentage < 1.0 } random_list = { 20 = { repair_ship = yes ag_spawn_extra_lives_effect = yes } 80 = { } } reroll_random = yes }
				else = { solar_system = { every_fleet_in_system = {
					limit = { exists = owner owner = { is_same_value = root } }
					add_modifier = { modifier = "ag_ancient_psionic_weapon_friendly_buff" days = 10 }
				} } }
				random_list = { 80 = { add_modifier = { modifier = "ag_ancient_psionic_weapon_kill_effect" days = 20 } } 20 = { } } reroll_random = yes
			}
			if = {
				limit = { OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_ancient_zeta_guardian
					is_country_type = ag_ancient_psi_guardian
				} }
				fromfrom = { every_owned_ship = {
					limit = { ag_is_ancient_ship_with_psi_weapon = yes }
					root.fromfromfrom = { every_owned_ship = {
						limit = { OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_military_special
							is_ship_class = shipclass_military_station
							is_ship_class = shipclass_starbase
						} }
						ag_ancient_psi_weapon_kill_effect = yes
					} }
				} }
			}
			else = { fromfrom = { every_owned_ship = { root.fromfromfrom = { every_owned_ship = {
				limit = { OR = {
					is_ship_class = shipclass_military
					is_ship_class = shipclass_military_special
					is_ship_class = shipclass_military_station
					is_ship_class = shipclass_starbase
				} }
				ag_ancient_psi_weapon_kill_effect = yes
			} } } } }
		}
		
		# Anti Psi lvl effects
		if = {
			limit = {
				has_global_flag = ag_zeta_crisis_stage_3
				NOT = { has_global_flag = ag_zeta_crisis_ended }
				OR = {
					is_country_type = ag_ancient_zeta_guardian
					is_country_type = ag_ancient_psi_guardian
					fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value > 0 } NOT = { has_ship_flag = ag_zeta_ship_gravity_weapon } }
				}
			}
			fromfrom.solar_system = {
				reroll_random = yes
				random_list = {
					50 = {
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 0.5 } } } }
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 1.0 } } } }
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 1.5 } } } }
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 2.0 } } } }
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 2.5 } } } }
						modifier = { add = 50 root = { NOR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { check_modifier_value = { modifier = "ag_anti_psi_weapon_lvl" value < 3.0 } } } }
					}
					30 = {
						every_fleet_in_system = {
							limit = { has_fleet_flag = ag_zeta_crisis_avatar_fleet }
							ag_spawn_buff_effect = { ag_type = 3 ag_scale = m ag_color = violet }
							remove_modifier = "ag_anti_psionic_to_zeta_crisis_avatar_debuff"
							add_modifier = { modifier = "ag_anti_psionic_to_zeta_crisis_avatar_debuff" days = 10 }
						}
					}
					20 = {
						every_fleet_in_system = {
							limit = { has_fleet_flag = ag_zeta_crisis_avatar_fleet }
							ag_spawn_explosion_effect = { ag_scale = l ag_color = violet }
							delete_fleet = this
						}
					}
				}
			}
		}
		# set_update_modifiers_batch = end
	}
}

# on_ship_destroyed_victim, Remove fleet variable when ship destroyed.
country_event = {
	id = ag_ancient.2201
	hide_window = yes
	is_triggered_only = yes
	trigger = { fromfrom = { OR = { has_ship_flag = ag_ship_hull_locked has_ship_flag = ag_ship_hull_locked_percent } } }
	immediate = { fromfrom = {
		if = {
			limit = { has_ship_flag = ag_ship_hull_locked }
			if = {
				limit = { NOT = { has_ship_flag = ag_ship_hull_locked_uncapped } }
				fleet = {
					subtract_variable = { which = ag_num_ship_hull_locked_ships value = 1 }
					if = {
						limit = { check_variable = { which = ag_num_ship_hull_locked_ships value <= 0 } }
						clear_variable = ag_num_ship_hull_locked_ships
					}
				}
			}
		}
		if = {
			limit = { has_ship_flag = ag_ship_hull_locked_percent }
			if = {
				limit = { NOT = { has_ship_flag = ag_ship_hull_locked_percent_uncapped } }
				fleet = {
					subtract_variable = { which = ag_num_ship_hull_locked_percent_ships value = 1 }
					if = {
						limit = { check_variable = { which = ag_num_ship_hull_locked_percent_ships value <= 0 } }
						clear_variable = ag_num_ship_hull_locked_percent_ships
					}
				}
			}
		}
	} }
}

# on_ship_destroyed_victim, Common combat events entry.
country_event = {
	id = ag_ancient.2300
	hide_window = yes
	is_triggered_only = yes

	trigger = { OR = {
		ag_is_mod_country = yes
		AND = {
			fromfrom.fleet = { has_fleet_flag = ag_has_ancient_ship_in_fleet }
			OR = {
				AND = { has_country_flag = ag_ship_subsystem_enabled_201_21 fromfrom = { OR = { is_ship_size = ag_beta_station_type1_0 is_ship_size = ag_beta_station_type1_1 } } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_701_21 fromfrom = { is_ship_size = ag_zeta_titan_psi } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_702_21 fromfrom = { is_ship_size = ag_zeta_battleship_psi } }
				AND = { has_country_flag = ag_ship_subsystem_enabled_703_21 fromfrom = { is_ship_size = ag_zeta_destroyer_psi } }
			}
		}
	} }

	immediate = {
		# set_update_modifiers_batch = begin
		# Psionic Weapon System's Effect
		if = {
			limit = {
				event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value > 2 } }
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					AND = { OR = { is_country_type = ag_ancient_zeta_guardian is_country_type = ag_ancient_psi_guardian } fromfrom = { ag_is_psionic_ship = yes } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_201_21 fromfrom = { OR = { is_ship_size = ag_beta_station_type1_0 is_ship_size = ag_beta_station_type1_1 } } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_701_21 fromfrom = { is_ship_size = ag_zeta_titan_psi } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_702_21 fromfrom = { is_ship_size = ag_zeta_battleship_psi } }
					AND = { has_country_flag = ag_ship_subsystem_enabled_703_21 fromfrom = { is_ship_size = ag_zeta_destroyer_psi } }
				}
				from = { NOR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
					is_country_type = portal_holder
					is_country_type = shroud_spirits
					is_country_type = shroud
				} }
			}
			fromfromfrom = { fleet = { every_owned_ship = {
				limit = { ag_is_psionic_ship = no }
				ag_ancient_psi_weapon_death_effect = yes
			} } }
		}

		# Modifier Buff effect.
		if = {
			limit = {
				event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value >= 0 } }
				from = { ag_is_mod_country = no }
				fromfrom = {
					exists = fleet
					fleet = { NOT = { has_fleet_flag = ag_zeta_crisis_avatar_fleet } }
					NOR = {
						is_ship_size = ag_zeta_crisis_avatar_t1
						is_ship_size = ag_zeta_crisis_avatar_t2
						is_ship_size = ag_zeta_crisis_avatar_t3
						is_ship_size = ag_zeta_crisis_avatar_t4
						is_ship_size = ag_zeta_crisis_avatar_t5
						is_ship_size = ag_ancient_monitor_drone_hostile
						is_ship_class = shipclass_constructor
						is_ship_class = shipclass_colonizer
						is_ship_class = shipclass_science_ship
						is_ship_class = shipclass_transport
						is_ship_class = shipclass_mining_station
						is_ship_class = shipclass_research_station
						is_ship_class = shipclass_observation_station
					}
				}
			}
			if = {
				limit = { fromfrom = {
					NOR = { is_ship_size = ag_zeta_crisis_psionic_storm is_ship_size = ag_zeta_crisis_psionic_singularity }
					ag_mod_ship_modifier_check = yes
					exists = fleet
					fleet = { is_variable_set = ag_fleet_combat_days check_variable = { which = ag_fleet_combat_days value > 1 } }
				} }
				random_list = {
					10 = { }
					15 = {
						if = {
							limit = { fromfrom = { is_ship_class = shipclass_military } }
							fromfrom.fleet = { create_ship = {
								name = root.fromfrom
								design = root.fromfrom
								effect = {
									copy_flags_and_variables_from = root.fromfrom
									root.fromfrom = { ag_ship_invincible_debug_effect = yes }
									fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
								}
							} }
						}
						else = {
							root = { create_fleet = {
								name = fromfrom.fleet
								settings = { spawn_debris = no }
								effect = {
									set_owner = root
									copy_flags_and_variables_from = root.fromfrom.fleet
									create_ship = {
										name = root.fromfrom
										design = root.fromfrom
										effect = {
											copy_flags_and_variables_from = root.fromfrom
											root.fromfrom = { ag_ship_invincible_debug_effect = yes }
											fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
										}
									}
									set_location = { target = root.fromfrom distance = 0 angle = random }
								}
							} }
						}
					}
					5 = {
						if = {
							limit = { fromfrom = { is_ship_class = shipclass_military } }
							fromfrom.fleet = { create_ship = {
								name = root.fromfrom
								design = root.fromfrom
								effect = {
									copy_flags_and_variables_from = root.fromfrom
									root.fromfrom = { ag_ship_invincible_debug_effect = yes }
									fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
									if = {
										limit = { NOT = { is_variable_set = ag_disable_invincible } }
										random_list = { 20 = { } 9 = { ag_set_ship_invincible = { ag_days = 1 } } 1 = { ag_set_ship_invincible = { ag_days = 2 } } }
										reroll_random = yes
									}
								}
							} }
						}
						else = {
							root = { create_fleet = {
								name = fromfrom.fleet
								settings = { spawn_debris = no }
								effect = {
									set_owner = root
									copy_flags_and_variables_from = root.fromfrom.fleet
									create_ship = {
										name = root.fromfrom
										design = root.fromfrom
										effect = {
											copy_flags_and_variables_from = root.fromfrom
											root.fromfrom = { ag_ship_invincible_debug_effect = yes }
											fire_on_action = { on_action = on_ship_disabled scopes = { from = root.fromfromfrom } }
											if = {
												limit = { NOT = { is_variable_set = ag_disable_invincible } }
												random_list = { 20 = { } 9 = { ag_set_ship_invincible = { ag_days = 1 } } 1 = { ag_set_ship_invincible = { ag_days = 2 } } }
												reroll_random = yes
											}
										}
									}
									set_location = { target = root.fromfrom distance = 0 angle = random }
								}
							} }
						}
					}
				}
				if = {
					limit = { fromfromfrom = { NOT = { has_ship_flag = ag_ancient_empire_mod_ship } } }
					reroll_random = yes
					random_list = {
						40 = { modifier = { add = 50 root.from = { is_ai = no } } modifier = { factor = 0 fromfromfrom = { has_ship_flag = ag_ship_hull_locked } } }
						5 = { fromfrom = { fromfromfrom = {
							destroy_ship = this
							fire_on_action = { on_action = on_ship_disabled scopes = { from = prev } }
							owner = { fire_on_action = { on_action = on_ship_destroyed_victim scopes = { from = prevprev.owner fromfrom = prev fromfromfrom = prevprev } } }
							prev.owner = { fire_on_action = { on_action = on_ship_destroyed_perp scopes = { from = prev.owner fromfrom = prevprev fromfromfrom = prev } } }
							if = {
								limit = { exists = fleet fleet = { num_ships <= 1 } }
								owner = { fire_on_action = { on_action = on_fleet_destroyed_victim scopes = { from = prevprev.owner fromfrom = prev.fleet fromfromfrom = prevprev.fleet } } }
								prev.owner = { fire_on_action = { on_action = on_fleet_destroyed_perp scopes = { from = prev.owner fromfrom = prevprev.fleet fromfromfrom = prev.fleet } } }
							}
						} } }
						5 = {
							modifier = { factor = 0 fromfromfrom = { has_ship_flag = ag_ship_hull_locked } }
							fromfromfrom = {
								ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = l }
								if = { limit = { has_ship_flag = ag_ship_hull_locked } remove_ship_flag = ag_ship_hull_locked }
								ag_set_ship_hull_locked = { ag_days = 15 ag_value = 300 ag_use_cap = no }
							}
						}
					}
					reroll_random = yes
				}
			}
		}
		# set_update_modifiers_batch = end
	}
}

ship_event = {
	id = ag_ancient.3001
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = { destroy_ship = this }
}
ship_event = {
	id = ag_ancient.3002
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = { delete_ship = this }
}
fleet_event = {
	id = ag_ancient.3003
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = { destroy_fleet = { target = this kill_leader = yes destroy_template = yes } }
}
fleet_event = {
	id = ag_ancient.3004
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = { delete_fleet = { target = this kill_leader = yes destroy_template = yes } }
}
planet_event = {
	id = ag_ancient.3005
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = { remove_planet = yes }
}
ship_event = {
	id = ag_ancient.3006
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this is_in_combat = yes exists = from from = { is_in_combat = yes } NOT = { has_ship_flag = ag_ancient_empire_mod_ship } }
	immediate = {
		random_list = { 
			10 = { fire_on_action = { on_action = on_ship_disabled scopes = { from = root.from } } }
			10 = { while = { count = 2 fire_on_action = { on_action = on_ship_disabled scopes = { from = root.from } } } }
			10 = { while = { count = 3 fire_on_action = { on_action = on_ship_disabled scopes = { from = root.from } } } }
			10 = { while = { count = 4 fire_on_action = { on_action = on_ship_disabled scopes = { from = root.from } } } }
			10 = { while = { count = 5 fire_on_action = { on_action = on_ship_disabled scopes = { from = root.from } } } }
		}
		reroll_random = yes
		destroy_ship = this
		owner = { fire_on_action = { on_action = on_ship_destroyed_victim scopes = { from = root.from.owner fromfrom = root fromfromfrom = root.from } } }
		from.owner = { fire_on_action = { on_action = on_ship_destroyed_perp scopes = { from = root.owner fromfrom = root.from fromfromfrom = root } } }
		if = {
			limit = { exists = fleet fleet = { num_ships < 1 } }
			owner = { fire_on_action = { on_action = on_fleet_destroyed_victim scopes = { from = root.from.owner fromfrom = root.fleet fromfromfrom = root.from.fleet } } }
			from.owner = { fire_on_action = { on_action = on_fleet_destroyed_perp scopes = { from = root.owner fromfrom = root.from.fleet fromfromfrom = root.fleet } } }
		}
	}
}

event = {
	id = ag_ancient.9999
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	trigger = { any_playable_country = { OR = {
		is_variable_set = ag_ancient_knowledge_var
	} } }
	immediate = {
		every_playable_country = {
			limit = { OR = {
				is_variable_set = ag_ancient_knowledge_var
				is_variable_set = ag_class_5_singularity_counter
				is_variable_set = ag_matter_generator_counter
				is_variable_set = ag_fabrication_facility_counter
				is_variable_set = ag_ancient_unknown_building_counter
			} }
			if = {
				limit = { is_variable_set = ag_ancient_knowledge_var }
				add_resource = { ag_ancient_knowledge = 1 mult = ag_ancient_knowledge_var }
				clear_variable = ag_ancient_knowledge_var
			}
			if = {
				limit = { is_variable_set = ag_class_5_singularity_counter }
				add_resource = { ag_class_5_singularity = 1 mult = ag_class_5_singularity_counter }
				clear_variable = ag_class_5_singularity_counter
			}
			if = {
				limit = { is_variable_set = ag_matter_generator_counter }
				add_resource = { ag_matter_generator = 1 mult = ag_matter_generator_counter }
				clear_variable = ag_matter_generator_counter
			}
			if = {
				limit = { is_variable_set = ag_fabrication_facility_counter }
				add_resource = { ag_fabrication_facility = 1 mult = ag_fabrication_facility_counter }
				clear_variable = ag_fabrication_facility_counter
			}
			if = {
				limit = { is_variable_set = ag_ancient_unknown_building_counter }
				add_resource = { ag_ancient_unknown_building = 1 mult = ag_ancient_unknown_building_counter }
				clear_variable = ag_ancient_unknown_building_counter
			}
		}
	}
}
