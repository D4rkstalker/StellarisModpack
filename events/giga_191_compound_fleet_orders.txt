namespace = compound_fleet_orders

############################################################################
#### ON ACTIONS ############################################################
############################################################################
# Bi Yearly pulse
country_event = {
	id = compound_fleet_orders.000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = compound_empire
		exists = event_target:compound_invasion_entry
	}

	immediate = {
		every_owned_fleet = {
			limit = { is_ship_size = reshaper }
			remove_fleet_flag = compound_reshaping
			clear_fleet_actions = this
			clear_orders = yes
			remove_auto_move_target = yes
		}
	}
}

# Monthly pulse
country_event = {
	id = compound_fleet_orders.001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = compound_empire
		exists = event_target:compound_invasion_entry
	}

	immediate = {
		# Check for threats/targets
		compound_evaluate_systems = yes

		######### NOTIFY EVERYONE OF A SOLUTION ONCE COMPOUND HAS FULLY EXPANDED
		if = {
			limit = {
				NOT = { has_global_flag = giga_solution_discovered }
				OR = {
					NOT = { any_system = { has_star_flag = compound_expand } }
					NOT = { has_global_flag = compound_10_years }
					has_global_flag = ehof_cheating
				}
			}
			set_global_flag = giga_solution_discovered
			every_country = {
				limit = { ehof_default_country = yes }
				country_event = { id = annihilator_dialog.014 random = 10 }
			}
		}

		every_owned_fleet = {
			if = {
				limit = {
					OR = {
						is_fleet_idle = yes
						has_auto_move_target = no
					}
				}

				# Military fleet orders
				if = {
					limit = {
						is_ship_class = shipclass_military
						NOT = { has_fleet_flag = compound_bombard }
					}
					fleet_event = { id = compound_fleet_orders.002 }
				}

				# Propagator orders
				else_if = {
					limit = { is_ship_class = shipclass_transport }
					fleet_event = { id = compound_fleet_orders.003 }
				}

				# Reshaper orders
				else_if = {
					limit = {
						is_ship_size = reshaper
						NOT = { has_fleet_flag = compound_reshaping }
					}
					fleet_event = { id = compound_fleet_orders.013 }
				}
			}

			# Architect orders
			if = {
				limit = {
					is_ship_size = architect
					root = {
						NOT = { any_system = { has_star_flag = compound_expand } }
						NOT = { has_country_flag = compound_empire_berserk }
						count_system_within_border = {
							limit = { has_star_flag = reshaper_target_system }
							count > 20
						}
					}
				}
				set_event_locked = yes
			}
			else = { set_event_locked = no }
		}
	}
}

# on_building_starbase_ehof_05
ship_event = {
	id = compound_fleet_orders.004
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = solar_system }

	immediate = {
		solar_system = {
			# Build military stations
			if = {
				limit = {
					OR = {
						any_neighbor_system = { is_same_value = event_target:compound_invasion_entry }
						AND = {
							count_system = {
								limit = { any_neighbor_system = { is_same_value = root.solar_system } }
								count > 2
							}
							is_bottleneck_system = yes
						}
					}
					NOR = {
						has_star_flag = ehof_compound_has_stations
						any_fleet_in_system = { is_ship_class = shipclass_military_station }
					}
				}
				set_timed_star_flag = { flag = ehof_compound_has_stations days = 360 }
				create_compound_system_stations = yes
			}

			every_system_planet = {
				limit = {
					OR = {
						has_deposit = d_dark_matter_deposit_1
						has_deposit = d_dark_matter_deposit_2
						has_deposit = d_dark_matter_deposit_3
						has_deposit = d_dark_matter_deposit_4
						has_deposit = d_dark_matter_deposit_5
						has_deposit = d_dark_matter_deposit_10
					}
				}
				create_research_station = { owner = event_target:compound_country }
				if = { limit = { has_deposit = d_dark_matter_deposit_1  } root.owner = { change_variable = { which = compound_dark_matter value = 1 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_2  } root.owner = { change_variable = { which = compound_dark_matter value = 2 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_3  } root.owner = { change_variable = { which = compound_dark_matter value = 3 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_4  } root.owner = { change_variable = { which = compound_dark_matter value = 4 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_5  } root.owner = { change_variable = { which = compound_dark_matter value = 5 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_10 } root.owner = { change_variable = { which = compound_dark_matter value = 10 } } }
			}

			### Set system and planets flags that are eligible for reshaping
			if = { limit = { NOT = { has_star_flag = ehof_compound_system } } set_star_flag = ehof_compound_system }
			if = { limit = { has_star_flag = compound_expand } remove_star_flag = compound_expand }
			ehof_mark_for_reshaping = yes
			event_target:compound_country = { change_variable = { which = compound_systems value = 1 } }
		}
	}
}

# on_entering_battle (Solo transport fleet goes away)
# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = compound_fleet_orders.006
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = compound_empire
		fromfrom = {
			any_owned_ship = { is_ship_size = propagator }
			exists = solar_system
			solar_system = {
				NOT = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = compound_empire }
						is_ship_class = shipclass_military
					}
				}
			}
		}
	}

	immediate = { fromfrom = { delete_fleet = this } }
}

# Remove system flags on system lost
country_event = {
	id = compound_fleet_orders.009
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_country_type = compound_empire }

	immediate = {
		subtract_variable = { which = compound_systems value = 1 }
		from = {
			remove_star_flag = ehof_compound_system
			remove_star_flag = reshaper_target_system

			# Deduct compound darkmatter count
			every_system_planet = {
				limit = {
					OR = {
						has_deposit = d_dark_matter_deposit_1
						has_deposit = d_dark_matter_deposit_2
						has_deposit = d_dark_matter_deposit_3
						has_deposit = d_dark_matter_deposit_4
						has_deposit = d_dark_matter_deposit_5
						has_deposit = d_dark_matter_deposit_10
					}
				}
				if = { limit = { has_deposit = d_dark_matter_deposit_1  } root = { subtract_variable = { which = compound_dark_matter value = 1 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_2  } root = { subtract_variable = { which = compound_dark_matter value = 2 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_3  } root = { subtract_variable = { which = compound_dark_matter value = 3 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_4  } root = { subtract_variable = { which = compound_dark_matter value = 4 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_5  } root = { subtract_variable = { which = compound_dark_matter value = 5 } } }
				if = { limit = { has_deposit = d_dark_matter_deposit_10 } root = { subtract_variable = { which = compound_dark_matter value = 10 } } }
			}
		}
	}
}

# Compound Vulnerable
country_event = {
	id = compound_fleet_orders.010
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_country_type = compound_empire }

	immediate = {

		# Compound becomes vulnerable
		if = {
			limit = { any_country = { has_technology = tech_qnm_utilities } }
			if = {
				limit = {
					from = { is_country_type = creators }
					event_target:discoverer_country = { NOT = { has_country_flag = compound_reacted_01 } }
				}
				event_target:discoverer_country = {
					set_country_flag = compound_reacted_01
					country_event = { id = compound_dialog.11 }
				}
			}
			else_if = {
				limit = { from = { NOT = { has_country_flag = compound_reacted_02 } } }
				from = {
					set_country_flag = compound_reacted_02
					country_event = { id = compound_dialog.16 }
				}
			}

			# Set to berserk
			if = {
				limit = { NOT = { has_global_flag = compound_vulnerable } }
				set_crisis_sound = extradimensional_crisis_ambient_stage_final
				set_crisis_stage_4 = yes
				set_global_flag = compound_vulnerable
				root = {
					set_country_flag = compound_empire_berserk
					every_owned_fleet = {
						limit = { is_ship_size = architect }
						set_event_locked = no
					}
				}
			}
		}

		# Deduct from ship count
		if = { limit = { fromfrom = { is_ship_size = hornet } }		subtract_variable = { which = compound_hornets		value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = stalker } }	subtract_variable = { which = compound_stalkers		value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = humiliator } }	subtract_variable = { which = compound_humiliators	value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = apex } }		subtract_variable = { which = compound_apex			value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = sovereign } }	subtract_variable = { which = compound_sovereigns	value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = reshaper } }	subtract_variable = { which = current_reshapers		value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = architect } }	subtract_variable = { which = current_architects	value = 1 } }
		if = { limit = { fromfrom = { is_ship_size = propagator } }	subtract_variable = { which = current_propagators	value = 1 } }

		# Deduct event chain count
		if = {
			limit = { from = { has_event_chain = "compound_crisis_chain" } }
			from = {
				add_event_chain_counter = {
					event_chain = "compound_crisis_chain"
					counter = "compound_killed_by_us"
					amount = 1
				}
			}
		}
		else_if = {
			limit = { from = { is_country_type = creators } }
			every_country = {
				limit = { has_event_chain = "compound_crisis_chain" }
				if = {
					limit = { NOT = { has_global_flag = sa_recently_rewarded } }
					set_timed_global_flag = { flag = sa_recently_rewarded days = @crisis_sa_reward_time }
					annihilator_rewards = yes
				}
					add_event_chain_counter = {
					event_chain = "compound_crisis_chain"
					counter = "compound_killed_by_sa"
					amount = 1
				}
			}
		}
		else = {
			every_country = {
				limit = { has_event_chain = "compound_crisis_chain" }
				add_event_chain_counter = {
					event_chain = "compound_crisis_chain"
					counter = "compound_killed_by_others"
					amount = 1
				}
			}
		}
	}
}

# Compound Killed
country_event = {
	id = compound_fleet_orders.011
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_country_type = compound_empire }

	immediate = {
		every_country = {
			limit = { has_event_chain = "compound_crisis_chain" }
				add_event_chain_counter = {
				event_chain = "compound_crisis_chain"
				counter = "compound_killed"
				amount = 1
			}
		}
	}
}

# Visited compound capital
fleet_event = {
	id = compound_fleet_orders.007
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = {
			NOR = {
				is_country_type = compound_empire
				is_country_type = creators
			}
		}
		from = { has_star_flag = compound_capital_system }
	}

	immediate = {
		# If the annihlator exists, it will go into shroud ftl to the compound system
		if = {
			limit = { exists = event_target:ehof_annihilator }
			set_global_flag = annihilator_shroud
			destroy_annihilator = yes
			owner = { country_event = { id = annihilator.006 days = @annihilator_shroud_time } } # Takes 1 month before going into shroud ftl
		}
		owner = { country_event = { id = compound_dialog.10 } }
	}
}

# Preservation Sphere is bombarded
planet_event = {
	id = compound_fleet_orders.008
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_planet_class = pc_whc_star
		has_planet_flag = compound_home_sphere
		OR = {
			from = { is_same_value = root }
			planet_devastation >= 80
		}
	}

	immediate = {
		from = { save_event_target_as = preservation_sphere_destroyer }
		set_global_flag = bombardment_destroyed_sphere
		planet_event = { id = compound_end.001 }
	}
}


############################################################################
#### MILITARY ORDERS #######################################################
############################################################################
fleet_event = {
	id = compound_fleet_orders.002
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Defend cluster
		if = {
			limit = {
				owner = {
					any_system_within_border = {
						compound_cluster = yes
						any_fleet_in_system = {
							exists = owner
							owner = { NOT = { is_country_type = compound_empire } }
						}
					}
				}
			}
			owner = {
				every_owned_fleet = {
					limit = {
						exists = solar_system
						is_ship_class = shipclass_military
					}
					clear_orders = yes
					clear_fleet_actions = this
					remove_auto_move_target = yes

					# Save the target
					solar_system = {
						closest_system = {
							limit = {
								compound_cluster = yes
								any_fleet_in_system = {
									exists = owner
									owner = { NOT = { is_country_type = compound_empire } }
								}
							}
							star = { save_event_target_as = compound_defend_cluster }
						}
					}
					# Move to target
					auto_move_to_planet = {
						target = event_target:compound_defend_cluster
						clear_auto_move_on_arrival = no
						arrival_effect = compound_finished_order
					}
				}
			}
		}

		# Bombardment
		else_if = {
			limit = {
				solar_system = {
					any_system_planet = {
						NOR = {
							has_planet_flag = compound_land_army_needed
							is_controlled_by = event_target:compound_country
						}
						is_colony = yes
					}
				}
			}
			solar_system = {
				# Mark the planets and system
				if = { limit = { NOT = { has_star_flag = ehof_compound_need_to_occupy } } set_star_flag = ehof_compound_need_to_occupy }

				# Mark colonies for armies
				every_system_planet = {
					limit = {
						NOR = {
							has_planet_flag = compound_land_army_needed
							is_controlled_by = event_target:compound_country
						}
						is_colony = yes
					}
					prev = { change_variable = { which = compound_armies_required value = 1 } }
					set_timed_planet_flag = { flag = compound_land_army_needed days = 360 }
				}

				# Save the target
				random_system_planet = {
					limit = { has_planet_flag = compound_land_army_needed }
					save_event_target_as = compound_bombard_here
				}
			}

			# Move to target
			set_fleet_flag = compound_bombard
			auto_move_to_planet = {
				target = event_target:compound_bombard_here
				clear_auto_move_on_arrival = no
			}
		}

		# Initial Expansion
		else_if = {
			limit = {
				any_system = {
					has_star_flag = compound_expansion_threat
					NOT = { has_star_flag = compound_fleet_enroute }
				}
			}
			# Save the target
			solar_system = {
				closest_system = {
					limit = {
						has_star_flag = compound_expansion_threat
						NOT = { has_star_flag = compound_fleet_enroute }
					}
					set_timed_star_flag = { flag = compound_fleet_enroute days = 360 }
					star = { save_event_target_as = compound_expand_here }
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_expand_here
				clear_auto_move_on_arrival = no
				arrival_effect = compound_finished_order
			}
		}

		# Defend systems
		else_if = {
			limit = {
				owner = {
					any_system_within_border = {
						has_star_flag = compound_intruder
						check_variable = { which = compound_fleets_required value > 0 }
					}
				}
			}
			# Save the target
			solar_system = {
				closest_system = {
					limit = {
						is_within_borders_of = event_target:compound_country
						has_star_flag = compound_intruder
						check_variable = { which = compound_fleets_required value > 0 }
					}
					subtract_variable = { which = compound_fleets_required value = 1 }
					star = { save_event_target_as = compound_defend_here }
					if = {
						limit = { check_variable = { which = compound_fleets_required value <= 0 } }
						set_variable = { which = compound_fleets_required value = 0 }
						remove_star_flag = compound_intruder
					}
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_defend_here
				clear_auto_move_on_arrival = no
				arrival_effect = compound_finished_order
			}
		}

		# Fleets neighboring compound systems
		else_if = {
			limit = {
				any_system = {
					has_star_flag = compound_potential_intruder
					check_variable = { which = compound_fleets_required value > 0 }
				}
			}
			# Save the target
			solar_system = {
				closest_system = {
					limit = {
						has_star_flag = compound_potential_intruder
						check_variable = { which = compound_fleets_required value > 0 }
					}
					subtract_variable = { which = compound_fleets_required value = 1 }
					star = { save_event_target_as = compound_attack_neighbor }
					if = {
						limit = { check_variable = { which = compound_fleets_required value <= 0 } }
						set_variable = { which = compound_fleets_required value = 0 }
						remove_star_flag = compound_potential_intruder
					}
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_attack_neighbor
				clear_auto_move_on_arrival = no
				arrival_effect = compound_finished_order
			}
		}

		# Attack
		else_if = {
			limit = {
				any_system = {
					has_star_flag = compound_next_target
					NOT = { has_star_flag = compound_fleet_enroute }
				}
			}
			# Save the target
			solar_system = {
				closest_system = {
					limit = {
						has_star_flag = compound_next_target
						NOT = { has_star_flag = compound_fleet_enroute }
					}
					set_timed_star_flag = { flag = compound_fleet_enroute days = 360 }
					star = { save_event_target_as = compound_attack_random }
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_attack_random
				clear_auto_move_on_arrival = no
				arrival_effect = compound_finished_order
			}
		}

		# Patrol
		else = {
			# Save the target
			owner = {
				random_planet_within_border = {
					limit = { solar_system = { compound_cluster = no } }
					save_event_target_as = compound_patrol_here
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_patrol_here
				clear_auto_move_on_arrival = no
				arrival_effect = compound_finished_order
			}
		}
	}
}

# Fleets bombarding planets
planet_event = {
	id = compound_fleet_orders.015
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = { is_country_type = compound_empire }
		OR = {
			AND = {
				planet_devastation >= 80
				solar_system = {
					any_system_planet = {
						has_planet_flag = compound_land_army_needed
						planet_devastation < 80
						NOT = { is_same_value = root }
					}
				}
			}
			num_pops = 1
		}
	}

	immediate = {
		if = {
			limit = { num_pops = 1 }
			destroy_colony = yes
			remove_planet_flag = compound_army_enroute
			remove_planet_flag = compound_land_army_needed
			solar_system = {
				remove_star_flag = ehof_compound_need_to_occupy
				every_fleet_in_system = {
					limit = {
						exists = owner
						owner = { is_country_type = compound_empire }
						has_fleet_flag = compound_bombard
					}
					remove_fleet_flag = compound_bombard
					fleet_event = { id = compound_fleet_orders.002 }
				}
			}
		}
		else_if = {
			limit = {
				planet_devastation >= 80
				solar_system = {
					any_system_planet = {
						has_planet_flag = compound_land_army_needed
						planet_devastation < 80
						NOT = { is_same_value = root }
					}
				}
			}

			solar_system = {

				# Save new target
				random_system_planet = {
					limit = {
						has_planet_flag = compound_land_army_needed
						planet_devastation < 80
						NOT = { is_same_value = root }
					}
					save_event_target_as = compound_bombard_here
				}

				# Bombard new target
				random_fleet_in_system = {
					limit = { has_fleet_flag = compound_bombard }
					auto_move_to_planet = {
						target = event_target:compound_bombard_here
						clear_auto_move_on_arrival = no
					}
				}
			}
		}
	}
}


############################################################################
#### ARMY ORDERS ###########################################################
############################################################################
fleet_event = {
	id = compound_fleet_orders.003
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				any_system = {
					has_star_flag = ehof_compound_need_to_occupy
					check_variable = { which = compound_armies_required value > 0 }
				}
			}
			# Save the target
			solar_system = {
				closest_system = {
					limit = {
						has_star_flag = ehof_compound_need_to_occupy
						check_variable = { which = compound_armies_required value > 0 }
						any_system_planet = {
							has_planet_flag = compound_land_army_needed
							NOT = { has_planet_flag = compound_army_enroute }
						}
					}
					subtract_variable = { which = compound_armies_required value = 1 }
					if = {
						limit = { check_variable = { which = compound_armies_required value <= 0 } }
						set_variable = { which = compound_armies_required value = 0 }
						remove_star_flag = ehof_compound_need_to_occupy
					}
					random_system_planet = {
						limit = {
							has_planet_flag = compound_land_army_needed
							NOT = { has_planet_flag = compound_army_enroute }
						}
						set_timed_planet_flag = { flag = compound_army_enroute days = 360 }
						save_event_target_as = compound_land_here
					}
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_land_here
				clear_auto_move_on_arrival = no
			}
		}
		else = {
			# Save the target
			owner = {
				random_planet_within_border = {
					limit = { solar_system = { compound_cluster = no } }
					save_event_target_as = compound_patrol_here
				}
			}
			# Move to target
			auto_move_to_planet = {
				target = event_target:compound_patrol_here
				clear_auto_move_on_arrival = no
				arrival_effect = compound_army_finished_order
			}
		}
	}
}

# Destroy propagator and land armies on arrival
country_event = {
	id = compound_fleet_orders.019
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = compound_empire
		from = { is_ship_class = shipclass_transport }
	}

	immediate = {
		if = {
			limit = {
				exists = fromfrom
				fromfrom = { has_planet_flag = compound_land_army_needed }
			}
			from = {
				owner = { subtract_variable = { which = current_propagators	value = 1 } }
				delete_fleet = this
			}
			fromfrom = {
				while = {
					count = 20
					create_army = {
						name = random
						owner = event_target:compound_country
						species = event_target:compound_species
						type = "compound_assault"
					}
				}
			}
		}
		else = { from = { fleet_event = { id = compound_fleet_orders.003 } } }
	}
}

# Compound occupied planet
planet_event = {
	id = compound_fleet_orders.016
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			from = { is_country_type = compound_empire }
			fromfrom = { is_country_type = compound_empire }
		}
	}

	immediate = {
		# If you take a compound planet back, give control to the occupier
		if = {
			limit = { from = { is_country_type = compound_empire } }
			set_controller = fromfrom
			set_owner = fromfrom
		}
		else = {
			# Set owner, delete rulers, create defensive army
			set_controller = event_target:compound_country
			set_owner = event_target:compound_country
			remove_planet_flag = compound_land_army_needed
			remove_planet_flag = compound_army_enroute
			every_owned_pop = { limit = { is_pop_category = ruler } kill_pop = yes }
			while = {
				count = 5
				create_army = {
					name = random
					owner = event_target:compound_country
					species = event_target:compound_species
					type = "compound_defense"
				}
			}

			# Destroy armies after occupation complete
			planet_event = { id = compound_fleet_orders.005 days = 2 }

			solar_system = {
				if = { limit = { NOT = { has_star_flag = ehof_compound_system } } set_star_flag = ehof_compound_system }
				event_target:compound_country = { change_variable = { which = compound_systems value = 1 } }
				# Is there another planet in the system to be bombarded?
				if = {
					limit = { any_system_planet = { has_planet_flag = compound_land_army_needed } }

					# Save new target
					random_system_planet = {
						limit = {
							has_planet_flag = compound_land_army_needed
							planet_devastation < 80
						}
						save_event_target_as = compound_bombard_here
					}

					# Bombard new target
					random_fleet_in_system = {
						limit = { has_fleet_flag = compound_bombard }
						auto_move_to_planet = {
							target = event_target:compound_bombard_here
							clear_auto_move_on_arrival = no
						}
					}
				}

				# If there isn't clear military fleet, ready for new orders
				else = {
					remove_star_flag = ehof_compound_need_to_occupy
					every_fleet_in_system = {
						limit = {
							exists = owner
							owner = { is_country_type = compound_empire }
							has_fleet_flag = compound_bombard
						}
						remove_fleet_flag = compound_bombard
						fleet_event = { id = compound_fleet_orders.002 }
					}
				}
			}
		}
	}
}

# Destroy armies after occupation complete
planet_event = {
	id = compound_fleet_orders.005
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		solar_system = {
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_country_type = compound_empire }
					is_ship_class = shipclass_transport
				}
				delete_fleet = this
			}
		}
	}
}

# Compound purge complete
planet_event = {
	id = compound_fleet_orders.017
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			controller = { is_country_type = compound_empire }
			owner = { is_country_type = compound_empire }
		}
		num_pops > 0
		num_pops <= 5
	}

	immediate = {
		if = {
			limit = {
				OR = {
					is_planet_class = pc_cybrex
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_city
					is_planet_class = pc_ringworld_hive
					is_planet_class = pc_ringworld_machine
				}
			}
			destroy_colony = yes
			change_pc = pc_ringworld_habitable_damaged
			reset_planet = yes
		}
		else_if = {
			limit = { is_planet_class = pc_habitat }
			remove_planet = yes
		}
		else_if = {
			limit = { reshaper_eligible = yes }
			destroy_colony = yes
			clear_planet_modifiers = yes
			clear_deposits = yes
			ehof_add_dark_matter_deposit = yes
			change_pc = pc_ehof_planet
			create_research_station = { owner = event_target:compound_country }
		}
	}
}


############################################################################
#### RESHAPER ORDERS #######################################################
############################################################################
fleet_event = {
	id = compound_fleet_orders.013
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:compound_country
		owner = { is_country_type = compound_empire }
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_fleet_flag = compound_reshaping }
				exists = solar_system
				solar_system = {
					any_system_planet = {
						reshaper_eligible = yes
						has_planet_flag = reshaper_target_planet
						NOT = { has_planet_flag = compound_reshaper_here }
					}
				}
			}

			# Save Target
			solar_system = {
				random_system_planet = {
					limit = {
						reshaper_eligible = yes
						has_planet_flag = reshaper_target_planet
						NOT = { has_planet_flag = compound_reshaper_here }
					}
					set_timed_planet_flag = { flag = compound_reshaper_enroute@root days = 360 }
					set_timed_planet_flag = { flag = compound_reshaper_here days = 360 }
					save_event_target_as = reshaper_move_here
				}
			}

			# Move to target
			set_fleet_flag = compound_reshaping
			auto_move_to_planet = {
				target = event_target:reshaper_move_here
				clear_auto_move_on_arrival = no
				arrival_effect = reshaper_arrived
			}
		}
		else_if = {
			limit = {
				NOT = { has_fleet_flag = compound_reshaping }
				exists = solar_system
				owner = {
					any_system_within_border = {
						NOT = { is_same_value = root.solar_system }
						has_star_flag = reshaper_target_system
						any_system_planet = {
							reshaper_eligible = yes
							has_planet_flag = reshaper_target_planet
							NOT = { has_planet_flag = compound_reshaper_here }
						}
					}
				}
			}
			# Save Target
			solar_system = {
				closest_system = {
					limit = {
						is_within_borders_of = event_target:compound_country
						NOT = { is_same_value = root.solar_system }
						any_system_planet = {
							reshaper_eligible = yes
							has_planet_flag = reshaper_target_planet
							NOT = { has_planet_flag = compound_reshaper_here }
						}
					}
					random_system_planet = {
						limit = {
							reshaper_eligible = yes
							has_planet_flag = reshaper_target_planet
							NOT = { has_planet_flag = compound_reshaper_here }
						}
						set_timed_planet_flag = { flag = compound_reshaper_enroute@root days = 360 }
						set_timed_planet_flag = { flag = compound_reshaper_here days = 360 }
						save_event_target_as = reshaper_move_here
					}
				}
			}

			# Move to target
			set_fleet_flag = compound_reshaping
			auto_move_to_planet = {
				target = event_target:reshaper_move_here
				clear_auto_move_on_arrival = no
				arrival_effect = reshaper_arrived
			}
		}
	}
}

# Destroy Planet
fleet_event = {
	id = compound_fleet_orders.018
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		queue_actions = {
			find_closest_planet = {
				trigger = {
					id = compound_reshaping.1
					has_planet_flag = compound_reshaper_enroute@root
				}
				found_planet = {
					destroy_planet = {
						skip_rules = yes
						target = this
					}
				}
			}
		}
	}
}

# on_destroy_planet_with_COMPOUND_HM_RESHAPER
planet_event = {
	id = compound_fleet_orders.014
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = compound_count_darkmatter
		solar_system = { ehof_mark_for_reshaping = yes }
		remove_planet_flag = compound_reshaper_enroute@from

		# Change the planet into either a blackhole or darkmatter planet, add darkmatter and clear modifiers/colony
		clear_planet_modifiers = yes
		destroy_colony = yes
		clear_deposits = yes
		ehof_add_dark_matter_deposit = yes
		if = { limit = { is_star = yes } change_pc = pc_black_hole }
		else = { change_pc = pc_ehof_planet	}
		create_research_station = { owner = event_target:compound_country }

		# Add counter
		every_country = {
			limit = { has_event_chain = "compound_crisis_chain" }
			add_event_chain_counter = {
				event_chain = "compound_crisis_chain"
				counter = "darkmatter_worlds"
				amount = 1
			}
		}

		# Clear reshapers orders, then assign new orders
		from = {
			clear_fleet_actions = this
			clear_orders = yes
			remove_fleet_flag = compound_reshaping
			fleet_event = { id = compound_fleet_orders.013 days = 25 }
		}

		remove_global_flag = compound_count_darkmatter
	}
}