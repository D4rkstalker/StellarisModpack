
###############################
### Civil Wars by MrFunEGUY ###
###############################


namespace = civelect

# Election dispute initialzer initialzer, called on_elected_ended
country_event = {
	id = civelect.1000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_imperial = no
		exists = ruler.pop_faction
		count_pop_faction = {
			count > 1
			limit = { is_regular_faction = yes } # For now, this will be corrected soon.
		}
		NOR = {
			years_passed <= 20
			is_gestalt = yes
		}
	}

	immediate = {
		country_event = { id = civelect.1005 days = 3 }
	}
}

country_event = {
	id = civelect.1005
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_imperial = no
		exists = ruler.pop_faction
		count_pop_faction = {
			count > 1
			limit = { is_regular_faction = yes } # For now, this will be corrected soon.
		}
		NOR = {
			years_passed <= 20
			is_gestalt = yes
		}
	}

	immediate = {

		# Get Ruling Party Approval
		ruler.pop_faction = {
			export_trigger_value_to_variable = {
				trigger = support
				variable = ruler_faction_support
			}
		}

		export_trigger_value_to_variable = {
			trigger = count_pop_faction
			parameters = {
				limit = { is_regular_faction = yes }
			}
			variable = number_of_factions
		}

		set_variable = { which = ruler_faction_support value = ruler.pop_faction.ruler_faction_support }

		while = {
			count = number_of_factions
			random_pop_faction = {
				limit = { is_regular_faction = yes }
				if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_one_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_one_support
					}
					root = { set_variable = { which = faction_one_support value = prev.faction_one_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_two_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_two_support
					}
					root = { set_variable = { which = faction_two_support value = prev.faction_two_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_three_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_three_support
					}
					root = { set_variable = { which = faction_three_support value = prev.faction_three_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_four_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_four_support
					}
					root = { set_variable = { which = faction_four_support value = prev.faction_four_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_five_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_five_support
					}
					root = { set_variable = { which = faction_five_support value = prev.faction_five_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_six_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_six_support
					}
					root = { set_variable = { which = faction_six_support value = prev.faction_six_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_seven_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_seven_support
					}
					root = { set_variable = { which = faction_seven_support value = prev.faction_seven_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_eight_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_eight_support
					}
					root = { set_variable = { which = faction_eight_support value = prev.faction_eight_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_nine_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_nine_support
					}
					root = { set_variable = { which = faction_nine_support value = prev.faction_nine_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_ten_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_ten_support
					}
					root = { set_variable = { which = faction_ten_support value = prev.faction_ten_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_eleven_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_eleven_support
					}
					root = { set_variable = { which = faction_eleven_support value = prev.faction_eleven_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_twelve_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_twelve_support
					}
					root = { set_variable = { which = faction_twelve_support value = prev.faction_twelve_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_thirteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_thirteen_support
					}
					root = { set_variable = { which = faction_thirteen_support value = prev.faction_thirteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_fourteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_fourteen_support
					}
					root = { set_variable = { which = faction_fourteen_support value = prev.faction_fourteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_fifteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_fifteen_support
					}
					root = { set_variable = { which = faction_fifteen_support value = prev.faction_fifteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_sixteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_sixteen_support
					}
					root = { set_variable = { which = faction_sixteen_support value = prev.faction_sixteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_seventeen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_seventeen_support
					}
					root = { set_variable = { which = faction_seventeen_support value = prev.faction_seventeen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_eighteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_eighteen_support
					}
					root = { set_variable = { which = faction_eighteen_support value = prev.faction_eighteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_nineteen_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_nineteen_support
					}
					root = { set_variable = { which = faction_nineteen_support value = prev.faction_nineteen_support } }
				}
				else_if = {
					limit = { root = { NOT = { any_pop_faction = { is_variable_set = faction_twenty_support } } } }
					export_trigger_value_to_variable = {
						trigger = support
						variable = faction_twenty_support
					}
					root = { set_variable = { which = faction_twenty_support value = prev.faction_twenty_support } }
				}
			}
		}

		if = {
			limit = { any_pop_faction = { support > root.ruler_faction_support } }
			if = {
				limit = { has_democratic_elections = yes }
				random = {
					chance = 2
					get_dispute_faction = yes
					country_event = { id = civelect.1010 days = 1 random = 35 }
				}
			}
			else_if = {
				limit = { is_oligarchy = yes }
				random = {
					chance = 5
					get_dispute_faction = yes
					country_event = { id = civelect.1011 days = 1 random = 35 }
				}
			}
			else_if = {
				limit = { is_dictatorial = yes }
				random = {
					chance = 10
					get_dispute_faction = yes
					country_event = { id = civelect.1011 days = 1 random = 35 }
				}
			}
		}
	}
}

# Democratic Election dispute notification
country_event = {
	id = civelect.1010
	title = civelect.1010.name
	desc = civelect.1010.desc
	picture = GFX_evt_three_sided_deal
	hide_window = no
	is_triggered_only = yes

	trigger = {
		has_democratic_elections = yes
		count_pop_faction = { count > 1 }
		any_pop_faction = { has_pop_faction_flag = disputed_election_faction }
	}

	immediate = {

		random_pop_faction = {
			limit = { has_pop_faction_flag = disputed_election_faction }
			save_event_target_as = dispute_party
		}
	}

	option = {
		name = WORRYING
		hidden_effect = {
			start_situation = {
				type = situation_civstrife_election
				target = root
			}
		}
	}
}

# Other Selection dispute notification
country_event = {
	id = civelect.1011
	title = civelect.1011.name
	desc = civelect.1011.desc
	picture = GFX_evt_three_sided_deal
	hide_window = no
	is_triggered_only = yes

	trigger = {
		has_democratic_elections = no
		count_pop_faction = { count > 1 }
		any_pop_faction = { has_pop_faction_flag = disputed_election_faction }
	}

	immediate = {

		random_pop_faction = {
			limit = { has_pop_faction_flag = disputed_election_faction }
			save_event_target_as = dispute_party
		}
	}

	option = {
		name = WORRYING
		hidden_effect = {
			start_situation = {
				type = situation_civstrife_selection
				target = root
			}
		}
	}
}

#########

# Situation Events Initializer
situation_event = {
	id = civelect.1050
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			count_pop_faction = { count > 1 }
			any_pop_faction = { has_pop_faction_flag = disputed_election_faction }
		}
	}

	immediate = {

		if = {
			limit = { owner = { has_democratic_elections = yes } }
			random_list = {
				89 = { }
				# Official offers to cover it up
				10 = { situation_event = { id = civelect.1100 } }
				# Coup Takes Place that installs dispute party, angers all other factions
				1 = { situation_event = { id = civelect.1110 } }
			}
		}
		else_if = {
			limit = { owner = { is_oligarchy = yes } }
			random_list = {
				80 = { }
				# Official offers to cover it up
				10 = { situation_event = { id = civelect.1100 } }
				# Coup Takes Place that installs dispute party, greatly angers all other factions
				5 = { situation_event = { id = civelect.1110 } }
			}
		}
		else_if = {
			limit = { owner = { is_dictatorial = yes } }
			random_list = {
				70 = { }
				# Official offers to cover it up
				20 = { situation_event = { id = civelect.1100 } }
				# Coup Takes Place that installs dispute party, greatly angers all other factions
				10 = { situation_event = { id = civelect.1110 } }
			}
		}
	}
}

# Corrupt Official Offers to Cover it Up
situation_event = {
	id = civelect.1100
	title = civelect.1100.name
	picture = GFX_evt_dark_alley
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civelect.1100.dem.desc
		trigger = { owner = { has_democratic_elections = yes } }
	}

	desc = {
		text = civelect.1100.other.desc
		trigger = { owner = { has_democratic_elections = no } }
	}

	immediate = {

		target = {
			export_trigger_value_to_variable = {
				trigger = resource_stockpile_compare
				parameters = { resource = energy }
				variable = stockpile_energy
			}

			export_trigger_value_to_variable = {
				trigger = resource_revenue_compare
				parameters = { resource = energy }
				variable = monthly_energy
			}

			divide_variable = { which = stockpile_energy value = 10 }
			divide_variable = { which = monthly_energy value = 10 }

			if = {
				limit = {
					OR = {
						check_variable = { which = stockpile_energy value > 0 }
						check_variable = { which = monthly_energy value > 0 }
					}
				}
				change_variable = { which = monthly_energy value = stockpile_energy }
			}
		}
	}

	option = {
		name = MAKE_IT_SO
		trigger = { check_variable = { which = target.monthly_energy value > 0 } }
		allow = {
			owner = {
				has_country_resource = { type = energy amount >= root.target.monthly_energy }
			}
		}
		owner = {
			add_resource = { # Should be 10% of Stockpile + 10% of Monthly Energy
				energy = -1
				mult = root.target.monthly_energy
			}
		}
		hidden_effect = {
			set_situation_flag = corrupt_help
			owner = { set_country_flag = corrupt_election_help } # For the future, if it may get found out
			add_situation_progress = 20
		}
	}	

	option = {
		name = MAKE_IT_SO
		trigger = { check_variable = { which = target.monthly_energy value <= 0 } }
		allow = {
			owner = {
				has_country_resource = { type = energy amount >= 2000 }
			}
		}
		owner = { add_resource = { energy = -500 } }
		hidden_effect = {
			set_situation_flag = corrupt_help
			owner = { set_country_flag = corrupt_election_help } # For the future, if it may get found out
			add_situation_progress = 20
		}
	}

	option = {
		name = NODEAL
	}
}

# Dispute party takes leadership in coup
situation_event = {
	id = civelect.1110
	title = civelect.1110.name
	desc = civelect.1110.desc
	picture = GFX_evt_interior_battle
	hide_window = no
	is_triggered_only = yes

	immediate = {
		owner = {
			random_pop_faction = {
				limit = { has_pop_faction_flag = disputed_election_faction }
				save_event_target_as = dispute_party
			}
		}
	}

	option = {
		name = DISCONCERTING
		hidden_effect = {

			owner = {
				if = {
					limit = { has_democratic_elections = yes }
					ruler.pop_faction = {
						add_modifier = {
							modifier = primary_couped_faction_dem
							years = 10
						}
						every_owned_pop = {
							add_modifier = {
								modifier = primary_couped_faction_pop_dem
								years = 10
							}
						}
					}
					every_pop_faction = {
						limit = {
							NOT = {
								has_pop_faction_flag = disputed_election_faction
								is_same_value = root.owner.ruler.pop_faction
							}
						}
						add_modifier = {
							modifier = couped_faction_dem
							years = 5
						}
						every_owned_pop = {
							add_modifier = {
								modifier = couped_faction_pop_dem
								years = 5
							}
						}
					}
				}
				else = {
					ruler.pop_faction = {
						add_modifier = {
							modifier = primary_couped_faction_other
							years = 10
						}
						every_owned_pop = {
							add_modifier = {
								modifier = primary_couped_faction_pop_other
								years = 10
							}
						}
					}
					every_pop_faction = {
						limit = {
							NOT = {
								has_pop_faction_flag = disputed_election_faction
								is_same_value = root.owner.ruler.pop_faction
							}
						}
						add_modifier = {
							modifier = couped_faction_other
							years = 5
						}
						every_owned_pop = {
							add_modifier = {
								modifier = couped_faction_pop_other
								years = 5
							}
						}
					}
				}

				ruler = { save_event_target_as = couped_leader }

				set_leader = event_target:dispute_party.leader
				event_target:couped_leader = {
					kill_leader = { show_notification = no }
				}
			}

			destroy_situation = this 
		}
	}

	after = {

	}
}

#########

# Investigation Finds What?
situation_event = {
	id = civelect.2000
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		
		if = {
			limit = {
				has_situation_flag = corrupt_help
				current_situation_approach = approach_election_obstruct
			}
			random_list = {
				80 = { set_situation_flag = found_nothing }
				10 = { set_situation_flag = found_truth }
				10 = { set_situation_flag = found_inconclusive }
			}
		}
		else_if = {
			limit = { has_situation_flag = corrupt_help }
			random_list = {
				70 = { set_situation_flag = found_nothing }
				20 = { set_situation_flag = found_truth }
				10 = { set_situation_flag = found_inconclusive }
			}
		}
		else_if = {
			limit = { current_situation_approach = approach_election_obstruct }
			random_list = {
				60 = { set_situation_flag = found_nothing }
				30 = { set_situation_flag = found_truth }
				10 = { set_situation_flag = found_inconclusive }
			}
		}
		else = {
			random_list = {
				50 = { set_situation_flag = found_nothing }
				40 = { set_situation_flag = found_truth }
				10 = { set_situation_flag = found_inconclusive }
			}
		}
	}

	after = {
		situation_event = { id = civelect.2100 }
	}
}

# Investigation Findings
situation_event = {
	id = civelect.2100
	title = civelect.2100.name
	picture = GFX_evt_news_room
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civelect.2100.nothing.good.dem.desc
		trigger = {
			owner = { has_democratic_elections = yes }
			NOT = { has_situation_flag = dispute_party_wont_accept }
			OR = {
				has_situation_flag = found_nothing
				AND = {
					has_situation_flag = found_truth
					has_situation_flag = fraud_did_not_occur
				}
			}
		}
	}

	desc = {
		text = civelect.2100.nothing.good.other.desc
		trigger = {
			owner = { has_democratic_elections = no }
			NOT = { has_situation_flag = dispute_party_wont_accept }
			OR = {
				has_situation_flag = found_nothing
				AND = {
					has_situation_flag = found_truth
					has_situation_flag = fraud_did_not_occur
				}
			}
		}
	}

	desc = {
		text = civelect.2100.nothing.bad.dem.desc
		trigger = {
			owner = { has_democratic_elections = yes }
			has_situation_flag = dispute_party_wont_accept
			OR = {
				has_situation_flag = found_nothing
				AND = {
					has_situation_flag = found_truth
					has_situation_flag = fraud_did_not_occur
				}
			}
		}
	}

	desc = {
		text = civelect.2100.nothing.bad.other.desc
		trigger = {
			owner = { has_democratic_elections = no }
			has_situation_flag = dispute_party_wont_accept
			OR = {
				has_situation_flag = found_nothing
				AND = {
					has_situation_flag = found_truth
					has_situation_flag = fraud_did_not_occur
				}
			}
		}
	}

	desc = {
		text = civelect.2100.inconclusive.good.dem.desc
		trigger = {
			owner = { has_democratic_elections = yes }
			NOT = { has_situation_flag = dispute_party_wont_accept }
			has_situation_flag = found_inconclusive
		}
	}

	desc = {
		text = civelect.2100.inconclusive.good.other.desc
		trigger = {
			owner = { has_democratic_elections = no }
			NOT = { has_situation_flag = dispute_party_wont_accept }
			has_situation_flag = found_inconclusive
		}
	}

	desc = {
		text = civelect.2100.inconclusive.bad.dem.desc
		trigger = {
			owner = { has_democratic_elections = yes }
			has_situation_flag = dispute_party_wont_accept
			has_situation_flag = found_inconclusive
		}
	}
	
	desc = {
		text = civelect.2100.inconclusive.bad.other.desc
		trigger = {
			owner = { has_democratic_elections = no }
			has_situation_flag = dispute_party_wont_accept
			has_situation_flag = found_inconclusive
		}
	}

	desc = {
		text = civelect.2100.fraud.dem.desc
		trigger = {
			owner = { has_democratic_elections = yes }
			has_situation_flag = found_truth
			has_situation_flag = fraud_occurred
		}
	}

	desc = {
		text = civelect.2100.fraud.other.desc
		trigger = {
			owner = { has_democratic_elections = no }
			has_situation_flag = found_truth
			has_situation_flag = fraud_occurred
		}
	}

	immediate = {

		owner = {
			random_pop_faction = {
				limit = { has_pop_faction_flag = disputed_election_faction }
				save_event_target_as = dispute_party
			}
		}
		
		set_variable = { which = one_years_unity value = owner.monthly_unity }
		set_variable = { which = two_years_unity value = owner.monthly_unity }
		
		multiply_variable = { which = one_years_unity value = 12 }
		multiply_variable = { which = two_years_unity value = 24 }

		if = {
			limit = {
				OR = {
					has_situation_flag = found_nothing
					AND = {
						has_situation_flag = found_truth
						has_situation_flag = fraud_did_not_occur
					}
				}
			}
			if = {
				limit = { current_situation_approach = approach_election_obstruct }
				random = { chance = 25 set_situation_flag = dispute_party_wont_accept }
			}
			else = {
				random = { chance = 15 set_situation_flag = dispute_party_wont_accept }
			}
		}
		else_if = {
			limit = { has_situation_flag = found_inconclusive }
			if = {
				limit = { current_situation_approach = approach_election_obstruct }
				random = { chance = 40 set_situation_flag = dispute_party_wont_accept }
			}
			else = {
				set_situation_flag = dispute_party_wont_accept
				# random_list = {
				# 	70 = { }
				# 	30 = { set_situation_flag = dispute_party_wont_accept }
				# }
			}
		}

		if = {
			limit = { has_situation_flag = dispute_party_wont_accept }
			# owner = { country_event = { id = civelect.3000 } }
			owner = { country_event = { id = civelect.3000 days = 10 random = 60 } }
		}
		else = {
			event_target:dispute_party = {
				remove_pop_faction_flag = disputed_election_faction
			}
		}
	}


	option = {
		name = EXCELLENT
		trigger = {
			NOT = { has_situation_flag = dispute_party_wont_accept }
			NAND = {
				has_situation_flag = found_truth
				has_situation_flag = fraud_occurred
			}
		}
		hidden_effect = {
			destroy_situation = this
		}
	}

	option = {
		name = WORRYING
		trigger = {
			has_situation_flag = dispute_party_wont_accept
		}
		hidden_effect = {
			destroy_situation = this
		}
	}

	option = {
		name = civelect.2100.very_well
		custom_tooltip = civelect.2100.outraged.tooltip
		trigger = {
			NOT = { has_situation_flag = dispute_party_wont_accept }
			has_situation_flag = found_truth
			has_situation_flag = fraud_occurred
		}
		hidden_effect = {
			destroy_situation = this
		}
	}

	option = {
		name = civelect.2100.unless
		custom_tooltip = civelect.2100.unless.tooltip
		trigger = {
			NOT = { has_situation_flag = dispute_party_wont_accept }
			has_situation_flag = found_truth
			has_situation_flag = fraud_occurred
		}
		allow = {
			owner = {
				if = {
					limit = { has_democratic_elections = yes }
					has_country_resource = { type = unity amount >= two_years_unity }
				}
				else = {
					has_country_resource = { type = unity amount >= one_years_unity }
				}
			}
		}
		owner = {
			if = {
				limit = { has_democratic_elections = yes }
				add_resource = {
					unity = -1
					mult = two_years_unity
				}
			}
			else = {
				add_resource = {
					unity = -1
					mult = one_years_unity
				}
			}
		}
		hidden_effect = {
			destroy_situation = this
		}
	}
}

# Civil War
country_event = {
	id = civelect.3000
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		random_pop_faction = {
			limit = { has_pop_faction_flag = disputed_election_faction }
			remove_pop_faction_flag = disputed_election_faction
			save_event_target_as = dispute_party
		}

		set_timed_country_flag = { flag = dispute_civwar months = 2 }
		save_event_target_as = civwar_originator
		get_civil_war_number = yes
		if = { # 2 Sectors, other Sector will revolt
			limit = { num_sectors = 2 }
			get_civil_war_leader_dispute = yes

			random_owned_leader = {
				limit = { has_leader_flag = leader_civil_war_faction }
				pop_faction = { save_event_target_as = civwar_party } # I Imagine this should stay past the first loop
				save_event_target_as = rebel_leader
			}

			create_party_name_leader = yes
			last_created_leader = { leader_event = { id = civleader.1000 days = 720 } }

			random_owned_sector = {
				limit = {
					NOT = {
						any_owned_planet = {
							OR = {
								has_ground_combat = yes
								solar_system = { is_capital_system = yes }
							}
						}
					}
				}
				set_sector_flag = leader_sector
			}

			create_country = {
				name = random
				type = default
				species = event_target:civwar_originator
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = event_target:civwar_originator
				ethos = event_target:civwar_originator
				origin = origin_civwar
				civics = event_target:civwar_originator
				flag = random
				effect = {
					set_country_flag = election_dispute_country
					created_civwar_country_effect = yes
				}
			}
		}
		else_if = {
			limit = { num_sectors > 2 }
			
			export_trigger_value_to_variable = {
				trigger = num_sectors
				variable = all_potential_sectors
			}

			set_variable = { which = maybe_rebel_sectors value = 0 }

			every_owned_sector = { # Calculate the rebel percentage of each sector
				limit = {
					NOT = {
						any_owned_planet = {
							OR = {
								has_ground_combat = yes
								solar_system = { is_capital_system = yes }
							}
						}
					}
					any_owned_planet = {
						any_owned_pop = {
							exists = pop_faction
							pop_faction = { is_same_value = event_target:dispute_party }
						}
					}
				}
				set_sector_flag = potential_rebel
				export_trigger_value_to_variable = {
					trigger = num_pops
					variable = total_sector_pops
				}
				set_variable = { which = fac_sep_percentage value = 0 }
				every_owned_planet = {
					every_owned_pop = {
						limit = {
							exists = pop_faction
							pop_faction = { is_same_value = event_target:dispute_party }
						}
						prevprev = { change_variable = { which = fac_sep_percentage value = 1 } }
					}
				}
				divide_variable = {
					which = fac_sep_percentage
					value = total_sector_pops
				}
				multiply_variable = { # Needs to be done to ensure accurate ordering
					which = fac_sep_percentage
					value = 100
				}
				prev = { change_variable = { which = maybe_rebel_sectors value = 1 } }
			}

			random_list = {
				21 = { multiply_variable = { which = all_potential_sectors value = 0.1 } }
				31 = { multiply_variable = { which = all_potential_sectors value = 0.2 } }
				46 = { multiply_variable = { which = all_potential_sectors value = 0.3 } }
				2 = { multiply_variable = { which = all_potential_sectors value = 0.4 } }
			}
			ceiling_variable = all_potential_sectors

			while = { # Pick the most separatist sectors to rebel
				count = all_potential_sectors
				ordered_owned_sector = {
					limit = {
						has_sector_flag = potential_rebel
						NOT = { has_sector_flag = rebel_sector }
					}
					position = 0
					order_by = fac_sep_percentage
					set_sector_flag = rebel_sector
				}
			}

			if = {
				limit = {
					any_owned_sector = {
						has_sector_flag = rebel_sector
						NOT = { has_sector_flag = counted_sector }
					}
				}
				ordered_owned_sector = {
					limit = {
						has_sector_flag = rebel_sector
						NOT = { has_sector_flag = counted_sector }
					}
					position = 0
					order_by = fac_sep_percentage
					save_event_target_as = rebel_sector_leader
					set_sector_flag = rebel_sector_@this
					set_sector_flag = leader_sector
					set_sector_flag = counted_sector
				}
				while = {
					count = all_potential_sectors
					if = { # Any Sector that borders a more rebellious sector will rebel under them
						limit = {
							any_owned_sector = {
								NOT = { has_sector_flag = counted_sector }
								has_sector_flag = rebel_sector
								any_system_within_border = {
									closest_system = {
										limit = {
											exists = sector
											sector = { has_sector_flag = rebel_sector_@event_target:rebel_sector_leader }
										}
										use_bypasses = yes
										max_steps = 1
									}
								}
							}
						}
						random_owned_sector = {
							limit = {
								NOT = { has_sector_flag = counted_sector }
								has_sector_flag = rebel_sector
								any_system_within_border = {
									closest_system = {
										limit = {
											exists = sector
											sector = { has_sector_flag = rebel_sector_@event_target:rebel_sector_leader }
										}
										use_bypasses = yes
										max_steps = 1
									}
								}
							}
							set_sector_flag = counted_sector
							set_sector_flag = rebel_sector_@event_target:rebel_sector_leader
							set_sector_flag = rebel_sector_follower_@event_target:rebel_sector_leader
						}
					}
				}
			}
			get_civil_war_leader_dispute = yes
			
			random_owned_leader = {
				limit = { has_leader_flag = leader_civil_war_faction }
				pop_faction = { save_event_target_as = civwar_party } # I Imagine this should stay past the first loop
				save_event_target_as = rebel_leader
			}

			create_party_name_leader = yes
			last_created_leader = { leader_event = { id = civleader.1000 days = 720 } }

			random_owned_sector = {
				limit = { has_sector_flag = leader_sector }
				set_variable = { which = fac_sep_percentage value = 0 }
				export_trigger_value_to_variable = {
					trigger = num_pops
					variable = total_new_country_pops
				}
				every_owned_planet = {
					every_owned_pop = {
						limit = {
							exists = pop_faction
							pop_faction = { is_same_value = event_target:dispute_party }
						}
						prevprev = { change_variable = { which = fac_sep_percentage value = 1 } }
					}
				}
				owner = {
					every_owned_sector = {
						limit = { has_sector_flag = rebel_sector_follower_@event_target:rebel_sector_leader }
						prevprev = { change_variable = { which = total_new_country_pops value = trigger:num_pops } }
						every_owned_planet = {
							every_owned_pop = {
								limit = {
									exists = pop_faction
									pop_faction = { is_same_value = event_target:dispute_party }
								}
								prevprevprevprev = { change_variable = { which = fac_sep_percentage value = 1 } }
							}
						}
					}
				}
				divide_variable = {
					which = fac_sep_percentage
					value = total_new_country_pops
				}
				multiply_variable = { # Needs to be done to ensure accurate ordering
					which = fac_sep_percentage
					value = 100
				}
			}

			create_country = {
				name = random
				type = default
				species = event_target:civwar_originator
				ignore_initial_colony_error = yes
				day_zero_contact = no
				authority = event_target:civwar_originator
				ethos = event_target:civwar_originator
				origin = origin_civwar
				civics = event_target:civwar_originator
				flag = random
				effect = {
					set_country_flag = election_dispute_country
					created_civwar_country_effect = yes
				}
			}
			
			every_owned_sector = {
				limit = { has_sector_flag = potential_rebel }
				remove_sector_flag = potential_rebel
			}
		}
		else_if = { # >= 2 Planets
			limit = {
				num_owned_planets >= 2
				any_owned_planet = { solar_system = { is_capital_system = no } }
			}
			
			event_target:dispute_party = {
				set_variable = { which = fac_mil_support value = 0 }
				save_event_target_as = civwar_party
			}
			if = { # If only 2 planets, get the other planet
				limit = { num_owned_planets = 2 }
				random_owned_planet = {
					limit = {
						solar_system = { is_capital_system = no }
						has_ground_combat = no
					}
					save_event_target_as = civil_war_planet
					solar_system = { set_timed_star_flag = { flag = civwar_planet months = 3 } }
					every_owned_pop = {
						limit = {
							exists = pop_faction
							pop_faction = { is_same_value = event_target:civwar_party }
						}
						root.target = { change_variable = { which = fac_mil_support value = 1 } }
					}
					set_planet_flag = small_civil_war
					set_planet_flag = disputed_election_war
					create_rebels = {
						name = random
						species = event_target:civwar_originator
						authority = event_target:civwar_originator
						ethos = event_target:civwar_originator
						origin = origin_civwar
						civics = event_target:civwar_originator
						flag = random
						effect = {
							set_country_flag = election_dispute_country
							created_civwar_rebel_country_effect = yes
						}
					}
					get_civil_war_leader_dispute = yes
				}
			}
			else = { # If more than 2, Balkanize
				set_variable = { which = total_faction_pops value = 0 }
				set_variable = { which = maybe_rebel_planets value = 0 }
				every_owned_planet = {
					limit = { solar_system = { is_capital_system = no } }
					set_variable = { which = fac_sep_percentage value = 0 }
					every_owned_pop = {
						limit = {
							exists = pop_faction
							pop_faction = { is_same_value = event_target:dispute_party }
						}
						prev = { change_variable = { which = fac_sep_percentage value = 1 } }
					}
					every_owned_pop = {
						limit = { pop_has_happiness = yes }
						prevprev = { change_variable = { which = total_faction_pops value = 1 } }
					}
					prev = { change_variable = { which = maybe_rebel_planets value = 1 } }
				}

				multiply_variable = { which = maybe_rebel_planets value = 0.4 }

				ceiling_variable = maybe_rebel_planets
				

				divide_variable = {
					which = fac_sep_percentage
					value = total_faction_pops
				}
				while = {
					count = maybe_rebel_planets
					ordered_owned_planet = {
						limit = {
							solar_system = { is_capital_system = no }
							has_ground_combat = no
						}
						position = 0
						order_by = fac_sep_percentage
						save_event_target_as = civil_war_planet
						solar_system = { set_timed_star_flag = { flag = civwar_planet months = 3 } }
						every_owned_pop = {
							limit = {
								exists = pop_faction
								pop_faction = { is_same_value = event_target:dispute_party }
							}
							event_target:dispute_party = { change_variable = { which = fac_mil_support value = 1 } }
						}							
						set_planet_flag = balkan_war
						create_rebels = {
							name = random
							type = default
							species = event_target:civwar_originator
							ignore_initial_colony_error = yes
							day_zero_contact = no
							authority = event_target:civwar_originator
							ethos = event_target:civwar_originator
							origin = origin_civwar
							civics = event_target:civwar_originator
							flag = random
							effect = {
								set_country_flag = election_dispute_country
								created_civwar_rebel_country_effect = yes
							}
						}
						get_civil_war_leader_dispute = yes
					}
				}
			}
			country_event = { id = civethic.9005 }
		}
	}
}

##############

# Separatist/Nationalist wins (s)election
country_event = {
	id = civelect.4000
	title = civelect.4000.name
	picture = GFX_evt_grand_speech
	hide_window = no
	is_triggered_only = yes

	trigger = {
		num_owned_planets > 1
		any_owned_planet = { solar_system = { is_capital_system = no } } # One system, multiple planets
		ruler = {
			leader_of_faction = yes
			pop_faction = {
				OR = {
					is_separatist_faction = yes
					# is_nationalist_faction = yes
				}
			} 
		}
	}

	desc = {
		text = civelect.4000.plan.dem.desc
		trigger = {
			has_democratic_elections = yes
			ruler.pop_faction = { is_planetary_separatist_faction = yes }
		}
	}

	desc = {
		text = civelect.4000.sec.dem.desc
		trigger = {
			has_democratic_elections = yes
			ruler.pop_faction = {
				OR = {
					is_sector_separatist_faction = yes
					is_iso_sector_separatist_faction = yes
				}
			}
		}
	}

	desc = {
		text = civelect.4000.nat.dem.desc
		trigger = {
			has_democratic_elections = yes
			ruler.pop_faction = { is_nationalist_faction = yes }
		}
	}

	desc = {
		text = civelect.4000.plan.other.desc
		trigger = {
			has_democratic_elections = no
			ruler.pop_faction = { is_planetary_separatist_faction = yes }
		}
	}

	desc = {
		text = civelect.4000.sec.other.desc
		trigger = {
			has_democratic_elections = no
			ruler.pop_faction = {
				OR = {
					is_sector_separatist_faction = yes
					is_iso_sector_separatist_faction = yes
				}
			}
		}
	}

	desc = {
		text = civelect.4000.nat.other.desc
		trigger = {
			has_democratic_elections = no
			ruler.pop_faction = { is_nationalist_faction = yes }
		}
	}

	immediate = {
		if = {
			limit = { ruler.pop_faction = { is_planetary_separatist_faction = yes } }
			ruler.pop_faction = {
				random_owned_pop = {
					planet = { save_event_target_as = ruler_sep_planet }
				}
			}
		}
		else_if = {
			limit = {
				ruler.pop_faction = {
					OR = {
						is_sector_separatist_faction = yes
						is_iso_sector_separatist_faction = yes
					}
				}
			}
			ruler.pop_faction = {
				random_owned_pop = {
					sector = { save_event_target_as = ruler_sep_sector }
				}
			}
		}
	}

	option = {
		name = civelect.4000.how
		hidden_effect = {
			country_event = { id = civelect.4010 days = 14 random = 90 }
		}
	}
}

# Separatist/Nationalist presents document for ratification
country_event = {
	id = civelect.4010
	title = civelect.4010.name
	picture = GFX_evt_grand_speech
	hide_window = no
	is_triggered_only = yes

	trigger = {
		num_owned_planets > 1
		any_owned_planet = { solar_system = { is_capital_system = no } } # One system, multiple planets
		ruler = {
			leader_of_faction = yes
			pop_faction = {
				OR = {
					is_separatist_faction = yes
					# is_nationalist_faction = yes
				}
			} 
		}
	}

	desc = {
		text = civelect.4010.plan.desc
		trigger = {
			ruler.pop_faction = { is_planetary_separatist_faction = yes }
		}
	}

	desc = {
		text = civelect.4010.sec.desc
		trigger = {
			ruler.pop_faction = {
				OR = {
					is_sector_separatist_faction = yes
					is_iso_sector_separatist_faction = yes
				}
			}
		}
	}

	desc = {
		text = civelect.4010.nat.desc
		trigger = {
			ruler.pop_faction = { is_nationalist_faction = yes }
		}
	}

	immediate = {
		if = {
			limit = { ruler.pop_faction = { is_planetary_separatist_faction = yes } }
			ruler.pop_faction = {
				random_owned_pop = {
					planet = { save_event_target_as = ruler_sep_planet }
				}
			}
		}
		else_if = {
			limit = {
				ruler.pop_faction = {
					OR = {
						is_sector_separatist_faction = yes
						is_iso_sector_separatist_faction = yes
					}
				}
			}
			ruler.pop_faction = {
				random_owned_pop = {
					sector = { save_event_target_as = ruler_sep_sector }
				}
			}
		}
	}

	option = {
		name = civelect.4010.ratify
		hidden_effect = {
			ruler = { set_leader_flag = civil_war_leader_ratification }
			ruler.species = { save_event_target_as = civwar_species }
			save_event_target_as = civwar_originator
			if = { # Planetary Secession
				limit = { ruler.pop_faction = { is_planetary_separatist_faction = yes } }
				ruler.pop_faction = {
					save_event_target_as = civwar_party
					random_owned_pop = {
						planet = { set_planet_flag = secession_planet }
					}
				}
				set_country_flag = peaceful_secession
				make_ruler_secession_country = yes

			}
			else_if = { # Sector Secession
				limit = {
					ruler.pop_faction = {
						OR = {
							is_sector_separatist_faction = yes
							is_iso_sector_separatist_faction = yes
						}
					}
				}
				ruler.pop_faction = {
					save_event_target_as = civwar_party
					random_owned_pop = {
						sector = {
							set_sector_flag = leader_sector
							save_event_target_as = sector_name_local
							sector_capital = { save_event_target_as = civil_war_planet }
						}
					}
				}
				set_country_flag = peaceful_secession
				create_sector_name_leader = yes
				make_ruler_secession_country = yes
			}
			# else_if = { # Nationalist Secession
			# 	limit = { ruler.pop_faction = { is_nationalist_faction = yes } }
			# 	if = {
			# 		limit = {
			# 			num_sectors > 1
			# 			any_owned_sector = { # Nats arent in core sector
			# 				NOT = { any_system_within_border = { is_capital_system = yes } }
			# 				pop_percentage = {
			# 					percentage >= 0.50
			# 					limit = {
			# 						exists = pop_faction
			# 						pop_faction = { is_same_value = root.ruler.pop_faction }
			# 					}
			# 					exclude = { can_think = no }
			# 				}
			# 			}
			# 		}
			# 		random_owned_sector = {
			# 			limit = {
			# 				NOT = { any_system_within_border = { is_capital_system = yes } }
			# 				pop_percentage = {
			# 					percentage >= 0.50
			# 					limit = {
			# 						exists = pop_faction
			# 						pop_faction = { is_same_value = root.ruler.pop_faction }
			# 					}
			# 					exclude = { can_think = no }
			# 				}
			# 			}
			# 			set_sector_flag = leader_sector
			# 		}
			# 		make_ruler_secession_nat_sec_country = yes
			# 	}
			# 	else = {
			# 		every_owned_planet = {
			# 			limit = {
			# 				any_owned_pop = {
			# 					exists = pop_faction
			# 					pop_faction = { is_same_value = root.ruler.pop_faction }
			# 				}
			# 			}
			# 			set_variable = { which = fac_sep_percentage value = 0 }
			# 			set_variable = { which = total_plan_pops value = 0 }
			# 			every_owned_pop = {
			# 				if = {
			# 					limit = {
			# 						exists = pop_faction
			# 						pop_faction = { is_same_value = root.target }
			# 					}
			# 					prev = { change_variable = { which = fac_sep_percentage value = 1 } }
			# 				}
			# 				prev = { change_variable = { which = total_plan_pops value = 1 } }
			# 			}
			# 			divide_variable = {
			# 				which = fac_sep_percentage
			# 				value = total_plan_pops
			# 			}
			# 			multiply_variable = { # Needs to be done to ensure accurate ordering
			# 				which = fac_sep_percentage
			# 				value = 100
			# 			}
			# 		}
			# 		ordered_owned_planet = {
			# 			limit = {
			# 				any_owned_pop = {
			# 					exists = pop_faction
			# 					pop_faction = { is_same_value = root.ruler.pop_faction }
			# 				}
			# 			}
			# 			position = 0
			# 			order_by = fac_sep_percentage
			# 			set_planet_flag = nat_leader_planet
			# 			root.ruler = { set_leader_flag = leader_for_@prev }
			# 			make_ruler_secession_nat_plan_country = yes
			# 		}
			# 		every_owned_planet = {
			# 			limit = {
			# 				OR = {
			# 					is_variable_set = fac_sep_percentage
			# 					is_variable_set = total_plan_pops
			# 				}
			# 			}
			# 			if = {
			# 				limit = { is_variable_set = fac_sep_percentage }
			# 				clear_variable = fac_sep_percentage
			# 			}
			# 			if = {
			# 				limit = { is_variable_set = total_plan_pops }
			# 				clear_variable = total_plan_pops
			# 			}
			# 		}
			# 	}
			# }
		}
	}

	option = {
		name = civelect.4010.no
		hidden_effect = {
			ruler = { set_leader_flag = civil_war_leader_no_ratification }
			ruler.species = { save_event_target_as = civwar_species }
			get_civil_war_number = yes
			if = { # Planetary Secession
				limit = { ruler.pop_faction = { is_planetary_separatist_faction = yes } }
				ruler.pop_faction = {
					save_event_target_as = civwar_party
					random_owned_pop = {
						planet = { set_planet_flag = secession_planet }
					}
				}
				make_ruler_secession_country = yes
			}
			else_if = { # Sector Secession
				limit = {
					ruler.pop_faction = {
						OR = {
							is_sector_separatist_faction = yes
							is_iso_sector_separatist_faction = yes
						}
					}
				}
				ruler.pop_faction = {
					save_event_target_as = civwar_party
					random_owned_pop = {
						sector = {
							set_sector_flag = leader_sector
							save_event_target_as = sector_name_local
							sector_capital = { save_event_target_as = civil_war_planet }
						}
					}
				}
				create_sector_name_leader = yes
				make_ruler_secession_country = yes
			}
		}
	}
}

##############

# Cancel dispute if new election starts
country_event = {
	id = civelect.9000
	title = civelect.9000.name
	picture = GFX_evt_three_sided_deal
	hide_window = no
	is_triggered_only = yes

	trigger = {
		any_pop_faction = { has_pop_faction_flag = disputed_election_faction }
	}

	desc = {
		text = civelect.9000.dem.desc
		trigger = { has_democratic_elections = yes }
	}

	desc = {
		text = civelect.9000.other.desc
		trigger = { has_democratic_elections = no }
	}

	immediate = {

		every_pop_faction = {
			limit = { has_pop_faction_flag = disputed_election_faction }
			remove_pop_faction_flag = disputed_election_faction
		}
	}

	option = {
		name = GOOD
	}
}