###############
# SOLAR STORM #
###############

namespace = ssmisc

### Galactic Secrets I unity granting
country_event = {
	id = ssmisc.1
	hide_window = yes
	location = FROM

	is_triggered_only = yes
	
	trigger = {
		owner = {
			has_ascension_perk = ap_galactic_secrets_I
		}
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 1
			min = 15
			max = 9999
		}
	}
}

###############
# Apex Project
###############

### Gives the player the Apex Project
country_event = {
	id = ssmisc.10
	title = "ssmisc.2.title"
	desc = ssmisc.2.desc
	picture = GFX_evt_genetic_modification
	show_sound = event_mystic_reveal

	is_triggered_only = yes

	option = {
		name = "ssmisc.2.a"
		enable_special_project = {
			name = "SS_APEX_PROJECT"
			location = capital_scope
			owner = root
		}
	}
}

################
# Privatisation
################

### Player wants to sell some land.
### First; determine how much the land is worth.
### Second; Ask player for what they want to sell the land for (energy, alloy, influence)
### Third; generate an appropriate privatised feature for the planet (eg; no farms on a tomb world)

planet_event = {
	id = ssmisc.40
	hide_window = yes

	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				OR = {
					is_planet_class = pc_gaia
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_city
				}
			}
			set_variable = { which = planet_value value = 2 }
		}
		else_if = {
			limit = {
				OR = {
					is_planet_class = pc_nuked
					is_planet_class = pc_machine
					is_planet_class = pc_hive
				}
			}
			set_variable = { which = planet_value value = 0 }
		}
		else = {
			set_variable = { which = planet_value value = 1 }
		}
		every_deposit = {
			limit = {
				has_deposit_category = deposit_cat_rare
			}
			prev = {
				change_variable = { which = planet_value value = 0.4 }
			}
		}
		if = {
			limit = {
				planet_size < 10
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				planet_size > 20
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		if = {
			limit = {
				planet_stability < 35
			}
			change_variable = { which = planet_value value = -1.0 }
		}
		else_if = {
			limit = {
				planet_stability < 50
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				planet_stability > 65
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		else_if = {
			limit = {
				planet_stability > 75
			}
			change_variable = { which = planet_value value = 1.0 }
		}
		if = {
			limit = {
				num_pops < 15
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				num_pops > 30
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		else_if = {
			limit = {
				num_pops > 60
			}
			change_variable = { which = planet_value value = 1.0 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_mineral_rich
			}
			change_variable = { which = planet_value value = 0.4 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_ultra_rich
			}
			change_variable = { which = planet_value value = 1.0 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_mineral_poor
			}
			change_variable = { which = planet_value value = -0.4 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_titanic_life
			}
			change_variable = { which = planet_value value = -0.2 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_natural_beauty
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_lush
			}
			change_variable = { which = planet_value value = 0.2 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_bleak
			}
			change_variable = { which = planet_value value = -0.4 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_dangerous_wildlife
			}
			change_variable = { which = planet_value value = -0.2 }
		}
		if = {
			limit = {
				has_planet_modifier = pm_unstable_tectonics
			}
			change_variable = { which = planet_value value = -0.2 }
		}
		if = {
			limit = {
				free_jobs < 10
			}
			change_variable = { which = planet_value value = 0.4 }
		}
		else_if = {
			limit = {
				free_jobs > 10
			}
			change_variable = { which = planet_value value = -0.4 }
		}
		if = {
			limit = {
				is_capital = yes
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		planet_event = { id = ssmisc.41 }
	}
}

### Asks the player want they want to sell the districts for

planet_event = {
	id = ssmisc.41
	title = "ssmisc.41.title"
	
	desc = {
		trigger = {
			check_variable = { which = planet_value value < 1 }
		}
		text = ssmisc.41.desc.a #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		text = ssmisc.41.desc.b #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		text = ssmisc.41.desc.c #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 3 }
			}
		}
		text = ssmisc.41.desc.d #Localization string
	}
	
	picture = GFX_evt_financial_instruments
	show_sound = event_mystic_reveal

	is_triggered_only = yes
	
	immediate = {
		owner = {
			export_trigger_value_to_variable = { trigger = years_passed variable = ss_sale_mult }
			export_trigger_value_to_variable = { trigger = check_galaxy_setup_value parameters = { setting = end_game_year } variable = ss_end_year }
			if = {
				limit = {
					OR = {
						check_variable = { which = ss_end_year value < 1 }
						check_variable = { which = ss_end_year value > 500 }
					}
				}
				set_variable = { which = ss_end_year value = 200 }
			}
			divide_variable = { which = ss_sale_mult value = ss_end_year }
			if = {
				limit = {
					check_variable = { which = ss_sale_mult value > 1 }
				}
				set_variable = { which = ss_sale_mult value = 1 }
			}
		}
	}

	option = {
		name = "ssmisc.41.a"
		trigger = {
			check_variable = { which = planet_value value < 1 }
		}
		owner = {
			add_resource = {
				energy = 4500
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.a"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = {
			add_resource = {
				energy = 9000
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.a"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = {
			add_resource = {
				energy = 18000
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.a"
		trigger = {
			check_variable = { which = planet_value value > 3 }
		}
		owner = {
			add_resource = {
				energy = 36000
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	
	option = {
		name = "ssmisc.41.b"
		trigger = {
			check_variable = { which = planet_value value < 1 }
		}
		owner = {
			add_resource = {
				energy = 750
				alloys = 950
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.b"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = {
			add_resource = {
				energy = 1500
				alloys = 1900
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.b"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = {
			add_resource = {
				energy = 2250
				alloys = 3750
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.b"
		trigger = {
			check_variable = { which = planet_value value > 3 }
		}
		owner = {
			add_resource = {
				energy = 3000
				alloys = 7500
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	
	option = {
		name = "ssmisc.41.c"
		trigger = {
			check_variable = { which = planet_value value < 1 }
		}
		owner = {
			add_resource = {
				energy = 750
				influence = 55
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.c"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = {
			add_resource = {
				energy = 1500
				influence = 110
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.c"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = {
			add_resource = {
				energy = 2250
				influence = 225
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	option = {
		name = "ssmisc.41.c"
		trigger = {
			check_variable = { which = planet_value value > 3 }
		}
		owner = {
			add_resource = {
				energy = 3000
				influence = 450
				mult = ss_sale_mult
			}
		}
		hidden_effect = {
			planet_event = { id = ssmisc.42 }
		}
	}
	
	option = {
		name = "ssmisc.41.d"
	}
}


### Now the AI determines what type of privatised development to build
### For eg; a planet with rich minerals modifier should build mining developments.
### Or; a designated tech world should make more research labs

planet_event = {
	id = ssmisc.42
	hide_window = yes

	is_triggered_only = yes
	
	immediate = {
		
		if = {
			limit = {
				OR = {
					any_country = {
						is_at_war_with = root.owner
					}
					has_designation = col_fortress
				}
			}
			create_war_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_planet_modifier = pm_mineral_rich
					has_planet_modifier = pm_ultra_rich
					has_planet_modifier = pm_extensive_moon_system
					has_designation = col_mining
					owner = { has_monthly_income = { resource = minerals value < 30 } }
				}
			}
			create_mineral_weighted_development = yes
		}
		else_if = {
			limit = {
				owner = { has_monthly_income = { resource = energy value < 30 } }
			}
			create_trade_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_farming
					has_planet_modifier = pm_lush
					OWNER = { has_monthly_income = { resource = food value < 0 } }
				}
			}
			create_food_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_city
				}
			}
			create_services_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_research
				}
			}
			create_technical_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_foundry
					has_designation = col_refinery
				}
			}
			create_industry_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_factory
				}
			}
			create_factory_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_resort
				}
			}
			create_services_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_designation = col_penal
				}
			}
			create_resource_weighted_development = yes
		}
		else = {
			create_random_development = yes
		}
		create_message = {
			type = MESSAGE_TYPE_PLANET_PRIVATISED
			localization = MESSAGE_PLANET_PRIVATISED
			days = 30
			target = this
			variable = {
				type = name
				localization = PLANET
				scope = this
			}
			variable = {
				type = name
				localization = DEPOSIT
				scope = last_added_deposit
			}
		}
	}
}

### Special privatisation for special worlds (arcologies, artificial worlds)

planet_event = {
	id = ssmisc.43
	hide_window = yes

	is_triggered_only = yes
	
	immediate = {
		set_variable = { which = planet_value value = 2 }
		if = {
			limit = {
				planet_size < 10
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				planet_size > 20
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		if = {
			limit = {
				planet_stability < 35
			}
			change_variable = { which = planet_value value = -1.0 }
		}
		else_if = {
			limit = {
				planet_stability < 50
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				planet_stability > 65
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		else_if = {
			limit = {
				planet_stability > 75
			}
			change_variable = { which = planet_value value = 1.0 }
		}
		if = {
			limit = {
				num_pops < 15
			}
			change_variable = { which = planet_value value = -0.5 }
		}
		else_if = {
			limit = {
				num_pops > 30
			}
			change_variable = { which = planet_value value = 0.5 }
		}
		else_if = {
			limit = {
				num_pops > 60
			}
			change_variable = { which = planet_value value = 1.5 }
		}
		if = {
			limit = {
				free_jobs < 10
			}
			change_variable = { which = planet_value value = 0.4 }
		}
		else_if = {
			limit = {
				free_jobs > 10
			}
			change_variable = { which = planet_value value = -0.4 }
		}
		if = {
			limit = {
				is_capital = yes
			}
			change_variable = { which = planet_value value = 1.0 }
		}
		planet_event = { id = ssmisc.44 }
	}
}

planet_event = {
	id = ssmisc.44
	title = "ssmisc.41.title"
	
	desc = {
		trigger = {
			check_variable = { which = planet_value value < 1 }
		}
		text = ssmisc.41.desc.a #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		text = ssmisc.41.desc.b #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		text = ssmisc.41.desc.c #Localization string
	}
	desc = {
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 3 }
			}
		}
		text = ssmisc.41.desc.d #Localization string
	}
	
	picture = GFX_evt_financial_instruments
	show_sound = event_mystic_reveal

	is_triggered_only = yes

	option = {
		name = "ssmisc.41.a"
		trigger = { check_variable = { which = planet_value value < 1 } }
		owner = { add_resource = { energy = 6000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.a"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = { add_resource = { energy = 12000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.a"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = { add_resource = { energy = 24000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.a"
		trigger = { check_variable = { which = planet_value value > 3 } }
		owner = { add_resource = { energy = 48000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	
	option = {
		name = "ssmisc.41.b"
		trigger = { check_variable = { which = planet_value value < 1 } }
		owner = { add_resource = { energy = 1000 alloys = 1250 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.b"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = { add_resource = { energy = 2000 alloys = 2500 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.b"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = { add_resource = { energy = 3000 alloys = 5000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.b"
		trigger = { check_variable = { which = planet_value value > 3 } }
		owner = { add_resource = { energy = 4000 alloys = 10000 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	
	option = {
		name = "ssmisc.41.c"
		trigger = { check_variable = { which = planet_value value < 1 } }
		owner = { add_resource = { energy = 1000 influence = 75 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.c"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 1 }
				check_variable = { which = planet_value value < 2 }
			}
		}
		owner = { add_resource = { energy = 2000 influence = 150 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.c"
		trigger = {
			AND = {
				check_variable = { which = planet_value value >= 2 }
				check_variable = { which = planet_value value < 3 }
			}
		}
		owner = { add_resource = { energy = 3000 influence = 300 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	option = {
		name = "ssmisc.41.c"
		trigger = { check_variable = { which = planet_value value > 3 } }
		owner = { add_resource = { energy = 4000 influence = 600 } }
		hidden_effect = { planet_event = { id = ssmisc.45 } }
	}
	
	option = {
		name = "ssmisc.41.d"
	}
}

planet_event = {
	id = ssmisc.45
	hide_window = yes

	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				free_amenities < 5
			}
			create_sp_services_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_building = building_foundry_1
					has_building = building_foundry_2
					has_building = building_foundry_3
				}
			}
			create_sp_foundry_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_building = building_factory_1
					has_building = building_factory_2
					has_building = building_factory_3
				}
			}
			create_sp_industry_weighted_development = yes
		}
		else_if = {
			limit = {
				OR = {
					has_building = building_research_lab_3
					has_building = building_research_lab_2
				}
			}
			create_sp_research_weighted_development = yes
		}
		else = {
			create_sp_random_development = yes
		}
		create_message = {
			type = MESSAGE_TYPE_PLANET_PRIVATISED
			localization = MESSAGE_PLANET_PRIVATISED
			days = 30
			target = this
			variable = {
				type = name
				localization = PLANET
				scope = this
			}
			variable = {
				type = name
				localization = DEPOSIT
				scope = last_added_deposit
			}
		}
	}
}

### Checks Every so often which countries have Galactic Secrets II ascension perk

event = {
	id = ssmisc.50
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_country = {
			limit = {
				has_ascension_perk = ap_galactic_secrets_II
			}
			country_event = { id = ssmisc.51 }
		}
	}
}

### If they do; then check to see if their research deposits have the +2 bonus.
### If they don't have it, give it to them.

country_event = {
	id = ssmisc.51
	hide_window = yes
	location = FROM

	is_triggered_only = yes

	immediate = {
		every_planet_within_border = {
			limit = {
				AND = {
					has_deposit_for = shipclass_research_station
					NOT = { has_deposit = d_ss_gal_secrets_II }
				}
			}
			add_deposit = d_ss_gal_secrets_II
		}
	}
}

##################
# Hive Ascension #
##################

### Comes in 3 parts:
### Habitable planets within your borders (and occasionally outide your borders) spontaneously turn into hive worlds
### Nearby planets your enemies own slowly turn into hive worlds and assimilate the population
### Planets your opponents control, but you own, spontaneously re-control themselves.

### This is scanned every year; a planet within your borders might turn into a Hive-world precursor and then evcentually a full hive world.
### The functionality is there (not yet bug-tested) for enemy colonised worlds to spontaneously turn into
### hive worlds, assimilated the population. But this is disabled for now.

event = {
	id = ssmisc.59
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_country = {
			limit = {
				has_ascension_perk = ap_hive_ascension
			}
			country_event = { id = ssmisc.60 }
		}
	}
}

# Again functionality exists for converting colonised worlds, but it is disabled. Only uncolonized
# planets are converted. Instead the hive has to bomb the colonized planets they want to turn
# into hive worlds.

country_event = {
	id = ssmisc.60
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_list = {
			15 = { 
				random_planet_within_border = {
					limit = {
						AND = {
							is_colonizable = yes
							is_colony = no
							root = {
								NOT = { has_country_flag = converting_planet }
							}
						}
					}
					save_event_target_as = ss_infesting_planet
					root = { country_event = { id = ssmisc.61 } }
				}
				set_country_flag = converting_planet
			}
			75 = {}
		}
	}
}

### If it's un uncolonised planet in your territory, grants the option to start the conversion process

country_event = {
	id = ssmisc.61
	title = "ssmisc.61.title"
	desc = ssmisc.61.desc
	picture = GFX_evt_infested_planet
	show_sound = event_mystic_reveal
	location = event_target:ss_infesting_planet

	is_triggered_only = yes

	option = {
		name = "ssmisc.61.a"
		hidden_effect = {
			event_target:ss_infesting_planet = {
				add_modifier = {
					modifier = ss_converting_hive
					days = 3600
				}
			}
			country_event = { id = ssmisc.62 days = 1800 }
		}
	}
	
	option = {
		name = "ssmisc.61.b"
		hidden_effect = {
			FROM = {
				remove_country_flag = converting_planet
			}
		}
	}
}

### Changes your planet to a new hive world

country_event = {
	id = ssmisc.62
	title = "ssmisc.62.title"
	desc = ssmisc.62.desc
	picture = GFX_evt_infested_planet
	show_sound = event_mystic_reveal

	is_triggered_only = yes
	
	immediate = {
		remove_country_flag = converting_planet
		event_target:ss_infesting_planet = {
			change_pc = pc_hive
			clear_blockers = yes
		}
	}

	option = {
		name = "ssmisc.62.a"
	}
}

# If you bomb planet to dead, it turns into a hive world.

planet_event = {
	id = ssmisc.85
	title = "ssmisc.85.name"
	desc = "ssmisc.85.desc"
	picture = GFX_evt_city_ruins
	show_sound = event_ghost_town

	is_triggered_only = yes

	trigger = {
		planet_devastation >= 100
		has_orbital_bombardment_stance = hive_conversion
		NOR = {
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_habitat
		}
		FROM = {
			has_ascension_perk = ap_hive_ascension
		}
	}

	immediate = {
		add_threat = { who = from amount = 2 }
		destroy_colony = yes
		if = {
			limit = {
				NOR = {
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_habitat
				}
			}
			change_pc = pc_hive
		}
		FROM = {
			country_event = { id = ssmisc.86 }
		}
	}
	
	option = {
		name = ssmisc.85.a
	}
}

# Tell hive mind they have converted the planet

country_event = {
	id = ssmisc.86
	title = "ssmisc.86.title"
	desc = ssmisc.86.desc
	picture = GFX_evt_alien_planet
	show_sound = event_mystic_reveal

	is_triggered_only = yes

	option = {
		name = "ssmisc.86.a"
	}
}

# Hive world's grow in size over time

country_event = {
	id = ssmisc.87
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_authority = auth_hive_mind
		has_ascension_perk = ap_hive_ascension
		any_owned_planet = {
			AND = {
				OR = {
					AND = {
						NOT = { has_planet_flag = hive_expansion_1 }
						num_pops > 50
						num_pops <= 100
					}
					AND = {
						NOT = { has_planet_flag = hive_expansion_2 }
						num_pops > 100
					}
				}
				is_planet_class = pc_hive
			}
		}
	}

	immediate = {
		random_owned_planet = {
			limit = {
				AND = {
					NOT = { has_planet_flag = hive_expansion_1 }
					num_pops > 50
					num_pops <= 100
					is_planet_class = pc_hive
				}
			}
			planet_event = { id = ssmisc.88 days = 5 random = 25 }
		}
		random_owned_planet = {
			limit = {
				AND = {
					NOT = { has_planet_flag = hive_expansion_2 }
					num_pops > 100
					is_planet_class = pc_hive
				}
			}
			planet_event = { id = ssmisc.89 days = 5 random = 25 }
		}
	}
}

planet_event = {
	id = ssmisc.88
	title = "ssmisc.88.title"
	desc = ssmisc.88.desc
	picture = GFX_evt_alien_planet
	show_sound = event_mystic_reveal
	location = this
	
	is_triggered_only = yes
	
	trigger = {
	}
	
	immediate = {
	}

	option = {
		name = "ssmisc.88.a"
		change_planet_size = 2
		add_modifier = { modifier = hive_expansion_1 days = -1 }
	}
}

planet_event = {
	id = ssmisc.89
	title = "ssmisc.89.title"
	desc = ssmisc.89.desc
	picture = GFX_evt_alien_planet
	show_sound = event_mystic_reveal
	location = this

	is_triggered_only = yes
	
	trigger = {
	}
	
	immediate = {
		if = {
			limit = {
				has_modifier = hive_expansion_1
			}
			remove_modifier = hive_expansion_1
		}
	}
	
	option = {
		name = "ssmisc.89.a"
		change_planet_size = 2
		add_modifier = { modifier = hive_expansion_2 days = -1 }
	}
}

### Ascension Within
### Peace give bonuses

country_event = {
	id = ssmisc.90
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_pacifist_ascension_within
		exists = this
	}
	
	immediate = {
		if = {
			limit = {
				NOT = { is_at_war = yes }
			}
			add_modifier = {
				modifier = ss_ap_pacifist_ascension_within_modifier
				days = 150
			}
		}
		country_event = { id = ssmisc.90 days = 150 }
	}
}

### Mars Project
### Gives you the option to decide which type of capital ship you want.

country_event = {
	id = ssmisc.91
	title = "ssmisc.91.title"
	desc = ssmisc.91.desc
	picture = GFX_evt_automated_dreadnought
	show_sound = event_mystic_reveal

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_flagship
		NOT = { has_country_flag = ap_capital_chosen }
		any_owned_ship = {
			NOT = { has_ship_flag = ap_capital_ship }
		}
	}

	option = {
		name = "ssmisc.91.a"
		enable_special_project = {
			name = "AP_FLAGSHIP_BUILD_SHIP"
			location = this
			owner = root
		}
		hidden_effect = {
			set_country_flag = ap_kinetic_capital_chosen
			set_country_flag = ap_capital_chosen
		}
	}
	option = {
		name = "ssmisc.91.b"
		enable_special_project = {
			name = "AP_FLAGSHIP_BUILD_SHIP"
			location = this
			owner = root
		}
		hidden_effect = {
			set_country_flag = ap_energy_capital_chosen
			set_country_flag = ap_capital_chosen
		}
	}
	option = {
		name = "ssmisc.91.c"
		enable_special_project = {
			name = "AP_FLAGSHIP_BUILD_SHIP"
			location = this
			owner = root
		}
		hidden_effect = {
			set_country_flag = ap_missile_capital_chosen
			set_country_flag = ap_capital_chosen
		}
	}
}

### Offers the option to upgrade the Capital ship.

country_event = {
	id = ssmisc.94
	title = "ssmisc.94.name"
	desc = ssmisc.94.desc
	picture = GFX_evt_automated_dreadnought
	show_sound = event_ship_bridge

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_flagship
		has_country_flag = ap_capital_chosen
		any_owned_fleet = {
			has_fleet_flag = ap_capital_fleet
		}
	}
	
	immediate = {}

	option = {
		name = "ssmisc.94.a"
		hidden_effect = {
			set_timed_country_flag = { flag = ss_ap_flagship_upgrading days = 95 }
			random_owned_ship = {
				limit = {
					has_ship_flag = ap_capital_ship
				}
				delete_ship = this
				owner = { country_event = { id = ssmiscflg.92 days = 90 } }
			}
		}
	}
	
	option = {
		name = "ssmisc.94.b"
		country_event = { id = ssmisc.94 days = 100 }
	}
}

### Option to replace the capital ship if it is lost in battle.

country_event = {
	id = ssmisc.96
	title = "ssmisc.96.name"
	desc = ssmisc.96.desc
	picture = GFX_evt_automated_dreadnought
	show_sound = event_ship_explosion

	is_triggered_only = yes
	
	trigger = {
		exists = This
		has_ascension_perk = ap_flagship
		FromFrom = { has_ship_flag = ap_capital_ship }
	}

	option = {
		name = "ssmisc.96.a"
		enable_special_project = {
			name = "AP_FLAGSHIP_BUILD_SHIP"
			location = root.capital_scope
			owner = root
		}
	}
}

### Stationing it in orbit gives a temporary bonus to the planetary population

fleet_event = {
	id = ssmisc.97
	title = "ssmisc.97.name"
	desc = ssmisc.97.desc
	picture = GFX_evt_automated_dreadnought
	show_sound = event_mystic_reveal

	is_triggered_only = yes
	
	trigger = {
		owner = {
			has_ascension_perk = ap_flagship
			has_country_flag = ap_capital_chosen
		}
		From = {
			is_owned_by = root.owner
		}
		has_fleet_flag = ap_capital_fleet
	}
	
	immediate = {
	}
	
	option = {
		name = "ssmisc.96.a"
		From = {
			add_modifier = {
				modifier = ss_ap_capital_planet_inspiration
				days = 150
			}
		}
	}
}

country_event = {
	id = ssmisc.98
	title = "ssmisc.98.name"
	desc = "ssmisc.98.desc"
	picture = GFX_evt_small_space_battle
	show_sound = event_space_battle

	is_triggered_only = yes
	
	trigger = {
		NOT = { has_modifier = ss_ap_capital_planet_inspiration }
		exists = This
		has_ascension_perk = ap_flagship
		fromfrom = { any_owned_ship = { has_ship_flag = ap_capital_ship } }
	}
	
	option = {
		name = ssmisc.98.a
		owner = {
			add_modifier = {
				modifier = ss_ap_capital_planet_inspiration
				days = 700
			}
		}
	}
}

### If the flagship is lost through anomalous means, get option to rebuild it:


country_event = {
	id = ssmisc.99
	title = "ssmisc.99.name"
	desc = "ssmisc.99.desc"
	picture = GFX_evt_automated_dreadnought
	show_sound = event_sensor_ping

	is_triggered_only = yes
	
	trigger = {
		NOT = { has_special_project = AP_FLAGSHIP_BUILD_SHIP }
		NOT = { has_country_flag = ss_ap_flagship_upgrading }
		exists = This
		has_ascension_perk = ap_flagship
		NOT = { any_owned_ship = { has_ship_flag = ap_capital_ship } }
	}
	
	option = {
		name = ssmisc.99.a
		enable_special_project = {
			name = "AP_FLAGSHIP_BUILD_SHIP"
			location = root.capital_scope
			owner = root
		}
	}
}

country_event = {
	id = ssmisc.110
	title = "ssmisc.110.name"
	desc = "ssmisc.110.desc"
	picture = GFX_evt_small_space_battle
	show_sound = event_mystic_reveal

	is_triggered_only = yes
	
	trigger = {
		AND = {
			exists = root
			any_country = {
				AND = {
					has_ascension_perk = ap_egalitarian_indomitable_ideology
					is_at_war_with = root
					NOT = { is_same_value = root }
				}
			}
		}
	}
	
	option = {
		name = ssmisc.110.a
		owner = {
			add_modifier = {
				modifier = ss_ap_indomitable_ideology
				days = 3500
			}
		}
	}
}

country_event = {
	id = ssmisc.112
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_egalitarian_common_goals
		exists = root
	}
	
	immediate = {
		set_variable = { which = ss_common_goals_num value = 0 }
		every_country = {
			limit = {
				AND = {
					opinion_level = {
						who = root
						level > neutral
					}
					OR = {
						has_ethic = ethic_egalitarian
						has_ethic = ethic_fanatic_egalitarian
					}
					NOT = { is_same_value = root }
				}
			}
			if = {
				limit = {
					ROOT = { is_improving_relations_with = prev }
				}
				root = { 
					change_variable = { 
						which = "ss_common_goals_num" 
						value = 5
					}
				}
			}
			else = {
				root = { 
					change_variable = { 
						which = "ss_common_goals_num" 
						value = 3
					}
				}
			}
		}
		add_modifier = {
			modifier = ss_ap_common_goals
			multiplier = ss_common_goals_num
			days = 150
		}
		country_event = { id = ssmisc.112 days = 150 }
	}
}

country_event = {
	id = ssmisc.114
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_egalitarian_freedom
		exists = root
	}
	
	immediate = {
		set_variable = { which = ss_freedom_num value = 0 }
		every_country = {
			limit = {
				AND = {
					opinion_level = {
						who = root
						level > neutral
					}
					has_migration_access = root
					NOT = { is_same_value = root }
				}
			}
			root = { 
				change_variable = { 
					which = "ss_freedom_num" 
					value = 1 
				}
			}
		}
		add_modifier = {
			modifier = ss_ap_egalitarian_freedom_1
			days = 300
			multiplier = ss_freedom_num
		}
		country_event = { id = ssmisc.114 days = 300 }
	}
}

# AP AUTHORITARIAN UNIFORMITY
country_event = {
	id = ssmisc.116
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_authoritarian_uniformity
		exists = root
	}
	
	immediate = {
		every_owned_planet = {
			limit = {}
			export_trigger_value_to_variable = { trigger = planet_stability variable = ss_uniformity_num }
			subtract_variable = { which = ss_uniformity_num value = 50 }
			if = {
				limit = {
					check_variable = { which = ss_uniformity_num value > 0 }
				}
				add_modifier = {
					modifier = ss_ap_authoritarian_uniformity_1
					days = 150
					multiplier = ss_uniformity_num
				}
			}
			#set_variable = { which = ss_num_gov_pops value = 0 }
			#every_owned_pop = {
			#	limit = {
			#		has_same_ethos = root
			#	}
			#	root = {
			#		change_variable = { which = ss_num_gov_pops value = 1 }
			#	}
			#}
			#set_variable = { which = ss_num_gov_pops value = 0 }
			#export_trigger_value_to_variable = { trigger = ethos variable = ss_uniformity_ethos }
			#every_owned_pop = {
			#	limit = {
			#		owner = { has_same_ethos = prev }
			#	}
			#	root = {
			#		change_variable = { which = ss_num_gov_pops value = 1 }
			#	}
			#}
			#divide_variable = { which = ss_num_gov_pops value = root.trigger:num_pops }
			#add_modifier = {
			#	modifier = ss_ap_authoritarian_uniformity_2
			#	multiplier = ss_num_gov_pops
			#	days = 150
			#}
		}
		
		country_event = { id = ssmisc.116 days = 150 }
	}
}

# AP AUTHORITARIAN IMPERIUM
country_event = {
	id = ssmisc.118
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_authoritarian_imperium
		exists = root
	}
	
	immediate = {
		set_variable = { which = ss_imperium_num value = 0 }
		every_country = {
			limit = {
				is_loyal_to = root
			}
			root = { 
				change_variable = { 
					which = "ss_imperium_num" 
					value = 1 
				}
			}
		}
		if = {
			limit = {
				check_variable = { which = ss_imperium_num value > 5 }
			}
			set_variable = { which = ss_imperium_num value = 5 }
		}
		add_modifier = {
			modifier = ss_ap_authoritarian_imperium_1
			days = 150
			multiplier = ss_imperium_num
		}
		country_event = { id = ssmisc.118 days = 150 }
	}
}

# XENOPHILE POLITICAL GAME

country_event = {
	id = ssmisc.120
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_xenophile_political_game
		exists = root
	}
	
	immediate = {
		set_variable = { which = ss_political_game_improve_rel_num value = 0 }
		export_trigger_value_to_variable = { trigger = num_envoys_to_galcom variable = ss_political_game_num }
		#add_modifier = {
		#	modifier = ss_ap_xenophile_political_game_1
		#	days = 150
		#	multiplier = ss_political_game_num
		#}
		every_envoy = {
			limit = {
				has_envoy_task = { task = improve_relations }
			}
			root = { 
				change_variable = { 
					which = "ss_political_game_improve_rel_num" 
					value = 1 
				}
			}
		}
		add_modifier = {
			modifier = ss_ap_xenophile_political_game_2
			days = 150
			multiplier = ss_political_game_improve_rel_num
		}
		country_event = { id = ssmisc.120 days = 150 }
	}
}

# XENOPHILE STRENGTH IN ALLIES

country_event = {
	id = ssmisc.122
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_xenophile_allies
		exists = root
	}
	
	immediate = {
		every_federation = {
			limit = {
				any_member = { is_same_value = root }
			}
			export_trigger_value_to_variable = { trigger = num_members variable = ss_xenophile_allies }
			every_member = {
				limit = {}
				set_variable = { which = ss_xenophile_allies value = prev.ss_xenophile_allies }
				if = {
					limit = {
						check_variable = { which = ss_xenophile_allies value > 5 }
					}
					set_variable = { which = ss_xenophile_allies value = 5 }
				}
				add_modifier = {
					modifier = ss_ap_xenophile_allies
					days = 300
					multiplier = ss_xenophile_allies
				}
			}
		}
		country_event = { id = ssmisc.122 days = 300 }
	}
}

# MILITARIST HEROISM
country_event = {
	id = ssmisc.124
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_ascension_perk = ap_militarist_heroism
		from = {
			leader_class = admiral
		}
	}

	immediate = {
		random_list = {
			25 = {
				from = {
					add_trait = leader_trait_heroism_mastermind_1
					add_trait = leader_trait_heroism_mastermind_ruler_1
				}
			}
			25 = {
				from = {
					add_trait = leader_trait_heroism_gladiator_1
					add_trait = leader_trait_heroism_gladiator_ruler_1
				}
			}
			25 = {
				from = {
					add_trait = leader_trait_heroism_hero_1
					add_trait = leader_trait_heroism_hero_ruler_1
				}
			}
			25 = {
				from = {
					add_trait = leader_trait_heroism_guardian_1
					add_trait = leader_trait_heroism_guardian_ruler_1
				}
			}
			25 = {
				from = {
					add_trait = leader_trait_heroism_guerilla_1
					add_trait = leader_trait_heroism_guerilla_ruler_1
				}
			}
			125 = {}
		}
	}
}

country_event = {
	id = ssmisc.126
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_ascension_perk = ap_militarist_volunteer_fleet
		exists = root
	}

	immediate = {
		if = {
			limit = {
				AND = {
					used_naval_capacity_percent < 0.4
					has_edict = ap_militarist_volunteer_fleet_edict
				}
			}
			create_fleet_from_naval_cap = 0.10
			last_created_fleet = {
				add_modifier = {
					modifier = ss_ap_militarist_volunteer_fleet_1
					days = -1
				}
			}
			country_event = { id = ssmisc.127 }
		}
		country_event = { id = ssmisc.126 days = 700 }
	}
}

country_event = {
	id = ssmisc.127
	title = ssmisc.127.name
	desc = ssmisc.127.desc
	picture = GFX_evt_fleet_good
	show_sound = event_ship_bridge

	is_triggered_only = yes

	trigger = {}

	immediate = {}
	
	option = {
		name = ssmisc.127.a
	}
}

country_event = {
	id = ssmisc.128
	title = ssmisc.128.name
	desc = ssmisc.128.desc
	picture = GFX_evt_surreal_visions
	show_sound = event_ship_thrusters

	is_triggered_only = yes

	trigger = {
		AND = {
			exists = root
			any_country = {
				AND = {
					has_ascension_perk = ap_pacifist_soul
					NOT = { is_same_value = root }
					is_at_war_with = root
				}
			}
		}
	}

	immediate = {
		country_event = { id = ssmisc.129 }
	}
	
	option = {
		name = ssmisc.128.a
	}
}

country_event = {
	id = ssmisc.129
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		AND = {
			exists = root
			any_country = {
				AND = {
					has_ascension_perk = ap_pacifist_soul
					NOT = { is_same_value = root }
					is_at_war_with = root
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				any_country = {
					AND = {
						has_ascension_perk = ap_pacifist_soul
						NOT = { is_same_value = root }
						is_at_war_with = root
					}
				}
			}
			add_modifier = {
				modifier = ss_ap_pacifist_soul
				days = 450
			}
			country_event = { id = ssmisc.129 days = 150 }
		}
	}
}

country_event = {
	id = ssmisc.130
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		AND = {
			has_ascension_perk = ap_materialist_future_seekers
			exists = this
		}
	}

	immediate = {
		every_owned_pop = {
			limit = {
				OR = {
					has_job = researcher
					has_job = head_researcher
					has_job = ss_cosmologist
				}
			}
			add_modifier = {
				modifier = ss_ap_materialist_future_seekers
				days = 150
			}	
		}
		set_variable = { which = ss_future_artifacts_stock value = value:SS_ap_materialist_future_seekers_bonus }
		add_modifier = {
			modifier = ss_ap_materialist_future_seekers_artifacts
			multiplier = ss_future_artifacts_stock
			days = 150
		}
		country_event = { id = ssmisc.130 days = 150 }
	}
}

### MATERIALIST PARTNERS IN SCIENCE

country_event = {
	id = ssmisc.132
	hide_window = yes

	is_triggered_only = yes
	
	trigger = {
		has_ascension_perk = ap_materialist_partners
		exists = root
	}
	
	immediate = {
		set_variable = { which = ss_science_partners_num value = 0 }
		export_trigger_value_to_variable = { trigger = num_research_agreements variable = ss_science_partners_num rounded = yes }
		add_modifier = {
			modifier = ss_ap_materialist_partners_1
			days = 150
			multiplier = ss_science_partners_num
		}
		capital_scope = {
			add_modifier = {
				modifier = ss_ap_materialist_partners_2
				days = 150
				multiplier = prev.ss_science_partners_num
			}
		}
		country_event = { id = ssmisc.132 days = 150 }
	}
}

### SPIRITUALIST ESTABLISHMENT:

country_event = {
	id = ssmisc.134
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		AND = {
			has_ascension_perk = ap_spiritualist_establishment
			exists = this
		}
	}

	immediate = {
		set_variable = { which = ss_establishment_num value = 0 }
		every_owned_planet = {
			set_variable = { which = ss_establishment_num_planet value = 0 }
			every_owned_pop = {
				limit = {
					OR = {
						pop_has_ethic = ethic_spiritualist
						pop_has_ethic = ethic_fanatic_spiritualist
					}
				}
				root = { 
					change_variable = { 
						which = "ss_establishment_num" 
						value = 1 
					}
				}
				prev = {
					change_variable = { 
						which = "ss_establishment_num_planet" 
						value = 1 
					}
				}
			}
			add_modifier = {
				modifier = ss_ap_spiritualist_establishment_2
				days = 300
				multiplier = ss_establishment_num_planet
			}
		}
		add_modifier = {
			modifier = ss_ap_spiritualist_establishment_1
			days = 300
			multiplier = ss_establishment_num
		}
		
		country_event = { id = ssmisc.134 days = 300 }
	}
}

### IMMATERIAL MASTERS influential status checker event

country_event = {
	id = ssmisc.136
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		AND = {
			has_ascension_perk = ap_spiritualist_immaterial_masters
			exists = this
		}
	}

	immediate = {
		export_resource_income_to_variable = { resource = unity variable = host_unity_output }
		every_country = {
			limit = {
				is_neighbor_of = root
				NOT = { is_same_empire = root }
				opinion_level = {
					who = root
					level <= neutral
				}
				NOT = { is_overlord_to = root }
				NAND = {
					exists = overlord
					overlord = { is_overlord_to = prev }
				}
			}
			export_resource_income_to_variable = { resource = unity variable = neighbour_unity_output }
			set_variable = { which = comp_unity_output value = root.host_unity_output }
			if = {
				limit = {
					check_variable = { which = comp_unity_output value > neighbour_unity_output }
				}
				if = {
					limit = {
						has_country_flag = ss_influence_alerted
					}
					country_event = { id = ssmisc.137 }
				}
				else= {
					country_event = { id = ssmisc.138 }
					save_event_target_as = ss_immaterial_country_temp
					root = { country_event = { id = ssmisc.140 } }
				}
			}
			else_if = {
				limit = {
					has_country_flag = ss_influence_alerted
				}
				country_event = { id = ssmisc.139 }
			}
		}
		country_event = { id = ssmisc.136 days = 350 }
	}
}

### Refreshes influence debuff.

country_event = {
	id = ssmisc.137
    hide_window = yes

	is_triggered_only = yes

	trigger = {
	}

	immediate = {
		add_modifier = {
			modifier = ss_ap_spiritualist_immaterial_masters_penalty
			days = 350
		}
	}
}

### Tells enemy they are influenced

country_event = {
	id = ssmisc.138
    title = ssmisc.138.name
    desc = ssmisc.138.desc
    picture = GFX_evt_alien_propaganda
    show_sound = event_espionage_concluded

	is_triggered_only = yes

	trigger = {
	}

	immediate = {
		set_country_flag = ss_influence_alerted
	}
	
	option = {
        name = ssmisc.138.a
		add_modifier = {
			modifier = ss_ap_spiritualist_immaterial_masters_penalty
			days = 350
		}
    }
}

### Tells enemy they are NO LONGER influenced

country_event = {
	id = ssmisc.139
    title = ssmisc.139.name
    desc = ssmisc.139.desc
    picture = GFX_evt_alien_propaganda
    show_sound = event_espionage_concluded

	is_triggered_only = yes

	trigger = {
	}

	immediate = {
		remove_country_flag = ss_influence_alerted
	}
	
	option = {
        name = ssmisc.139.a
    }
}

### Tells host of the AP that they have influenced someone

country_event = {
	id = ssmisc.140
    title = ssmisc.140.name
    desc = ssmisc.140.desc
    picture = GFX_evt_alien_propaganda
    show_sound = event_espionage_concluded

	is_triggered_only = yes

	trigger = {
	}

	immediate = {
	}
	
	option = {
        name = ssmisc.140.a
    }
}

# SPIRITUALIST TRADITION BONUS
country_event = {
	id = ssmisc.142
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_ascension_perk = ap_spiritualist_tradition
	}

	immediate = {
		from = { add_trait = leader_ss_trait_tradition_ruler }
	}
}

country_event = {
	id = ssmisc.143
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_ascension_perk = ap_spiritualist_tradition
		exists = this
	}

	immediate = {
		every_owned_leader = {
			limit = {
				NOT = { has_trait = leader_ss_trait_tradition_ruler }
			}
			add_trait = leader_ss_trait_tradition_ruler
		}
		country_event = { id = ssmisc.143 days = 100 }
	}
}

# Weapon Specialisation

country_event = {
	id = ssmisc.144
    title = ssmisc.144.name
    desc = ssmisc.144.desc
    picture = GFX_evt_physics_research
    show_sound = event_mystic_reveal
	
	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_ss_weapon_specialisation
	}

	option = {
        name = ssmisc.144.a
		add_modifier = {
			modifier = ss_ap_weapon_specialisation_energy
			days = -1
		}
		add_research_option = tech_ss_ion_cannon_1
		add_research_option = tech_ss_particle_beam_1
		#add_research_option = tech_gravimetric_weapons
		add_research_option = tech_fleet_strength_parts
    }
	option = {
        name = ssmisc.144.b
		add_modifier = {
			modifier = ss_ap_weapon_specialisation_kinetic
			days = -1
		}
		add_research_option = tech_ss_artillery_1 
		add_research_option = tech_ss_flechette_1
		add_research_option = tech_ss_phase_1
		add_research_option = tech_fleet_strength_parts
    }
	option = {
        name = ssmisc.144.c
		add_modifier = {
			modifier = ss_ap_weapon_specialisation_missile
			days = -1
		}
		add_research_option = tech_ss_cruise_missiles_1
		add_research_option = tech_corvette_bomb
		add_research_option = tech_ss_stealth_torpedo_1
		add_research_option = tech_fleet_strength_parts
    }
}

country_event = {
	id = ssmisc.146
    hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_xenophobe_hatred
		exists = this
	}

	immediate = {
		export_trigger_value_to_variable = { trigger = num_rivals variable = ss_xenophobe_hatred }
		add_modifier = {
			modifier = ss_ap_xenophobe_hatred_mod
			days = 150
			multiplier = ss_xenophobe_hatred
		}
		country_event = { id = ssmisc.146 days = 150 }
	}
}

country_event = {
	id = ssmisc.147
    hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_xenophobe_hatred
		exists = this
	}

	immediate = {
		if = {
			limit = {
				any_neighbor_country = {
					AND = {
						opinion_level = {
							who = root
							level < neutral
						}
						relative_power = {
							who = root
							category = fleet
							value = overwhelming
						}
						NOT = { is_same_value = root }
					}
				}
			}
			add_modifier = {
				modifier = ss_ap_xenophobe_hatred_mod_2
				days = 150
			}
		}
		country_event = { id = ssmisc.147 days = 150 }
	}
}

country_event = {
	id = ssmisc.148
    hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_machine_networks
		exists = this
	}

	immediate = {
		set_variable = { which = ss_machine_networks value = 0 }
		every_owned_planet = {
			limit = {
				OR = {
					has_building = building_machine_capital
					has_building = building_machine_major_capital
					has_building = building_machine_system_capital
					has_building = building_imperial_machine_capital
				}
			}
			root = { 
				change_variable = { 
					which = "ss_machine_networks" 
					value = 2
				}
			}
		}
		every_spynetwork = {
			limit = {
				has_available_spy_power > 40
			}
			root = { 
				change_variable = { 
					which = "ss_machine_networks" 
					value = 4
				}
			}
		}
		add_modifier = {
			modifier = ss_ap_machine_networks
			days = 150
			multiplier = ss_machine_networks
		}
		country_event = { id = ssmisc.148 days = 150 }
	}
}

### SPIRITUALIST IMMATERIAL MASTERS OPERATIONS:

# this = operation; from = target (country)
#espionage_operation_event = {
#    id = ssmisc.200
#    title = ssmisc.200.name
#    desc = ssmisc.200.desc
#
#    picture = GFX_evt_alien_propaganda
#    show_sound = event_espionage_concluded
#    espionage_operation = yes
#    is_triggered_only = yes
#
#    trigger = {
#        exists = from
#    }
#
#   immediate = {
#	}
#
#    option = {
#       name = ssmisc.200.a
#		from = {
#			country_event = { id = ssmisc.201 days = 15 }
#		}
#    }
#
#    after = {
#        spynetwork = {
#          add_spy_network_level = -5
#        }
#        destroy_espionage_operation = this
#   }
#}

#country_event = {
#	id = ssmisc.201
#    title = ssmisc.201.name
#    desc = ssmisc.201.desc
#    picture = GFX_evt_conclave
#   show_sound = event_mystic_reveal
#	
#   is_triggered_only = yes
#
#	trigger = {
#		AND = {
#			has_ascension_perk = ap_spiritualist_establishment
#			exists = this
#		}
#	}
#
#	immediate = {
#		every_owned_pop = {
#			limit = {
#				OR = {
#					pop_has_ethic = ethic_spiritualist
#					pop_has_ethic = ethic_fanatic_spiritualist
#				}
#			}
#			add_modifier = {
#				modifier = ss_ap_spiritualist_establishment
#				days = 150
#			}	
#		}
#	}
#	
#	option = {
#      name = ssmisc.201.a
#   }
#}

country_event = {
	id = ssmisc.202
    title = ssmisc.202.name
    desc = ssmisc.202.desc
    picture = GFX_evt_surreal_visions
    show_sound = event_mystic_reveal
	
    is_triggered_only = yes

	trigger = {
	}

	immediate = {
		export_resource_stockpile_to_variable = { resource = sr_hypernuclear variable = ss_hypernuclear_stock }
		export_resource_income_to_variable = { resource = sr_hypernuclear variable = ss_hypernuclear_income }
		export_resource_stockpile_to_variable = { resource = sr_muonic_hydrogen variable = ss_muonic_hydrogen_stock }
		export_resource_income_to_variable = { resource = sr_muonic_hydrogen variable = ss_muonic_hydrogen_income }
		export_resource_stockpile_to_variable = { resource = sr_quantanium variable = ss_quantanium_stock }
		export_resource_income_to_variable = { resource = sr_quantanium variable = ss_quantanium_income }
	}
	
	option = {
        name = ssmisc.202.a
    }
}

planet_event = {
	id = ssmisc.203
    title = ssmisc.203.name
    desc = ssmisc.203.desc
    picture = GFX_evt_surreal_visions
    show_sound = event_mystic_reveal
	
    is_triggered_only = yes

	trigger = {
		OR = {
			is_planet_class = pc_city
			is_planet_class = pc_necrohive
			is_planet_class = pc_machine_necropolis
			is_planet_class = pc_capitalarc
			is_planet_class = pc_palacearc
			is_planet_class = pc_necropolis
			is_planet_class = pc_milarc
			is_planet_class = pc_ecocity
			is_planet_class = pc_bioforge
			is_planet_class = pc_biofort
			is_planet_class = pc_biocapital
			is_planet_class = pc_machine_factory
			is_planet_class = pc_machine_fort
			is_planet_class = pc_corpoarc
			is_artificial = yes
		}
		NOT = { is_planet_class = pc_habitat }
		owner = {
			has_ascension_perk = ap_free_market
			AND = {
				NOT = { has_authority = auth_hive_mind }
				NOT = { has_authority = auth_machine_intelligence }
			}
		}
		num_free_districts = { type = any value > 1 }
	}

	immediate = {
	}
	
	option = {
        name = ssmisc.203.a
    }
}

country_event = {
	id = ssmisc.204
	hide_window = yes
	
    is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_xenophile_diversity
		exists = root
	}

	immediate = {
		every_owned_planet = {
			set_variable = { which = ss_diversity_num value = 0 }
			export_trigger_value_to_variable = { trigger = num_species variable = ss_diversity_num }
			export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = entertainer } variable = ss_diversity_entertainer_num }
			multiply_variable = { which = ss_diversity_entertainer_num value = ss_diversity_num }
			add_modifier = {
				modifier = ss_diversity_unity_num
				multiplier = ss_diversity_num
				days = 150
			}
			add_modifier = {
				modifier = ss_diversity_trade_num
				multiplier = ss_diversity_entertainer_num
				days = 150
			}
		}
		country_event = { id = ssmisc.204 days = 150 }
	}
}

country_event = {
	id = ssmisc.206
	hide_window = yes
	
    is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_authoritarian_vision
		exists = root
	}

	immediate = {
		every_spynetwork = {
			if = {
				limit = {
					has_available_spy_power > 60
					owner = { is_same_value = root }
				}
				target = {
					add_modifier = {
						modifier = ss_imposition_pen_2
						days = 150
					}
				}
			}
			else_if = {
				limit = {
					has_available_spy_power > 30
				}
				target = {
					add_modifier = {
						modifier = ss_imposition_pen_1
						days = 150
					}
				}
			}
			target = {
				country_event = { id = ssmisc.207 }
			}
		}
		country_event = { id = ssmisc.206 days = 150 }
	}
}

country_event = {
	id = ssmisc.207
	hide_window = yes
	
    is_triggered_only = yes

	trigger = {}

	immediate = {
		if = {
			limit = {
				AND = {
					OR = {
						has_modifier = ss_imposition_pen_1
						has_modifier = ss_imposition_pen_2
					}
					NOT = { has_country_flag = ss_imposition_victim_alerted }
				}
			}
			set_country_flag = ss_imposition_victim_alerted
			country_event = { id = ssmisc.208 }
		}
		else_if = {
			limit = {
				AND = {
					NOR = {
						has_modifier = ss_imposition_pen_1
						has_modifier = ss_imposition_pen_2
					}
					has_country_flag = ss_imposition_victim_alerted
				}
			}
			remove_country_flag = ss_imposition_victim_alerted
			country_event = { id = ssmisc.209 }
		}
	}
}

country_event = {
	id = ssmisc.208
    title = ssmisc.208.name
    desc = ssmisc.208.desc
    picture = GFX_evt_spy_network
	show_sound = event_encrypted_comms
	
    is_triggered_only = yes

	trigger = {
	}

	immediate = {
	}
	
	option = {
        name = ssmisc.208.a
    }
}

country_event = {
	id = ssmisc.209
    title = ssmisc.209.name
    desc = ssmisc.209.desc
    picture = GFX_evt_decryption
	show_sound = event_espionage_concluded
	
    is_triggered_only = yes

	trigger = {
	}

	immediate = {
	}
	
	option = {
        name = ssmisc.209.a
    }
}

country_event = {
	id = ssmisc.210
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_pacifist_soul
		exists = root
	}

	immediate = {
		every_country = {
			limit = {
				has_claim = ROOT
			}
			if = {
				limit = {
					NOT = { has_country_flag = ap_pacifist_soul_alerted }
				}
				set_country_flag = ap_pacifist_soul_alerted
				root = { save_event_target_as = ss_soul_claimee }
				country_event = { id = ssmisc.211 }
			}
			add_modifier = {
				modifier = ss_ap_pacifist_soul_claim
				days = 150
			}
		}
		country_event = { id = ssmisc.210 days = 150 }
	}
}

country_event = {
	id = ssmisc.211
	title = ssmisc.211.name
	desc = ssmisc.211.desc
	picture = GFX_evt_arguing_senate
	show_sound = event_ship_thrusters

	is_triggered_only = yes

	trigger = {
	}

	immediate = {
	}
	
	option = {
		name = ssmisc.211.a
	}
}

country_event = {
	id = ssmisc.212
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_pacifist_body
		exists = root
	}

	immediate = {
		every_owned_leader = {
			limit = {
				ROOT = {
					is_at_war = no
				}
			}
			# Formula for exp required for next level, where N is current level: 200N + 75(N(N-1)/2)
			export_trigger_value_to_variable = { trigger = has_skill variable = exp_to_next_lvl }
			subtract_variable = { which = exp_to_next_lvl value = 1 }
			multiply_variable = { which = exp_to_next_lvl value = this.trigger:has_skill }
			divide_variable = { which = exp_to_next_lvl value = 2 }
			multiply_variable = { which = exp_to_next_lvl value = 75 }
			
			set_variable = { which = exp_to_next_lvl_comp2 value = this.trigger:has_skill }
			multiply_variable = { which = exp_to_next_lvl_comp2 value = 200 }
			
			change_variable = { which = exp_to_next_lvl value = this.exp_to_next_lvl_comp2 }
			divide_variable = { which = exp_to_next_lvl value = 10 }
			ceiling_variable = exp_to_next_lvl
			add_experience = exp_to_next_lvl
		}
		country_event = { id = ssmisc.212 days = 365 }
	}
}

country_event = {
	id = ssmisc.214
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_trade_winds
		exists = root
	}

	immediate = {
		set_variable = { which = ap_trade_winds_num value = 0 }
		every_country = {
			limit = {
				NOT = { is_same_value = ROOT }
				has_commercial_pact = ROOT
			}
			root = { 
				change_variable = { 
					which = "ap_trade_winds_num" 
					value = 1
				}
			}
			add_modifier = {
				modifier = ss_ap_trade_winds_mod_1
				days = 150
			}
		}
		add_modifier = {
			modifier = ss_ap_trade_winds_mod_2
			multiplier = ap_trade_winds_num
			days = 150
		}
		country_event = { id = ssmisc.214 days = 150 }
	}
}

country_event = {
	id = ssmisc.216
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_hive_genetic_memory
		exists = root
		from = {
			owner = { is_same_value = root }
			OR = {
				leader_class = admiral
				leader_class = general
				leader_class = scientist
				leader_class = governor
			}
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { is_variable_set = ss_genetic_memory_orig_date }
			}
			export_trigger_value_to_variable = { trigger = years_passed variable = ss_genetic_memory_orig_date }
		}
		export_trigger_value_to_variable = { trigger = years_passed variable = ss_genetic_memory_temp_date }
		subtract_variable = { which = ss_genetic_memory_temp_date value = ss_genetic_memory_orig_date }
		add_modifier = {
			modifier = ss_genetic_memory_mod
			multiplier = ss_genetic_memory_temp_date
			days = 370
		}
		country_event = { id = ssmisc.216 days = 370 }
	}
}

country_event = {
	id = ssmisc.217
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_hive_genetic_memory
		FROM = { NOT = { has_leader_flag = ss_leader_checked } }
		FROM = { has_skill > 1 }
		NOT = { has_country_flag = ss_leader_exp_given }
	}

	immediate = {
		set_timed_country_flag = { flag = ss_leader_exp_given days = 10 }

		from = {
			set_leader_flag = ss_leader_checked
			# Just use a checking table because I am not smart enough at the math to find a function
			export_trigger_value_to_variable = { trigger = has_skill variable = ss_current_level }
			if = { 	limit = { check_variable = { which = ss_current_level value < 2 } }
					set_variable = { which = ss_lvl_exp value = 0 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 2 } }
						set_variable = { which = ss_lvl_exp value = 200 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 3 } }
						set_variable = { which = ss_lvl_exp value = 675 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 4 } }
						set_variable = { which = ss_lvl_exp value = 1500 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 5 } }
						set_variable = { which = ss_lvl_exp value = 2750 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 6 } }
						set_variable = { which = ss_lvl_exp value = 4500 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 7 } }
						set_variable = { which = ss_lvl_exp value = 6825 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 8 } }
						set_variable = { which = ss_lvl_exp value = 9800 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 9 } }
						set_variable = { which = ss_lvl_exp value = 13500 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value = 10 } }
						set_variable = { which = ss_lvl_exp value = 18000 }
			}
			else_if = { limit = { check_variable = { which = ss_current_level value > 10 } }
						set_variable = { which = ss_lvl_exp value = 22000 }
			}
			
			change_variable = { which = ss_lvl_exp value = trigger:has_experience }
			multiply_variable = { which = ss_lvl_exp value = 0.5 }
			ceiling_variable = ss_lvl_exp
		}
		set_variable = { which = ss_tot_experience value = from.ss_lvl_exp }
		if = {
			limit = {
				AND = {
					FROM = {
						leader_class = admiral
					}
					any_owned_leader = {
						leader_class = admiral
					}
				}
			}
			random_owned_leader = {
				limit = {
					AND = {
						leader_class = admiral
						NOT = { is_same_value = FROM }
					}
				}
				save_event_target_as = ss_leader_knowledge_new
				add_experience = root.ss_tot_experience
			}
		}
		else_if = {
			limit = {
				AND = {
					FROM = {
						leader_class = general
					}
					any_owned_leader = {
						leader_class = general
					}
				}
			}
			random_owned_leader = {
				limit = {
					FROM = {
						leader_class = general  
					}
				}
				save_event_target_as = ss_leader_knowledge_new
				add_experience = root.ss_tot_experience
			}
		}
		else_if = {
			limit = {
				AND = {
					FROM = {
						leader_class = governor
					}
					any_owned_leader = {
						leader_class = governor
					}
				}
			}
			random_owned_leader = {
				limit = {
					FROM = {
						leader_class = governor   
					}
				}
				save_event_target_as = ss_leader_knowledge_new
				add_experience = root.ss_tot_experience
			}
		}
		else_if = {
			limit = {
				AND = {
					FROM = {
						leader_class = scientist
					}
					any_owned_leader = {
						leader_class = scientist
					}
				}
			}
			random_owned_leader = {
				limit = {
					FROM = {
						leader_class = scientist  
					}
				}
				save_event_target_as = ss_leader_knowledge_new
				add_experience = root.ss_tot_experience
			}
		}
		create_message = {
			type = MESSAGE_TYPE_LEADER_GENETIC_MEMORY
			localization = MESSAGE_LEADER_GENETIC_MEMORY
			days = 30
			target = this
			variable = {
				type = name
				localization = LEADER_NEW
				scope = event_target:ss_leader_knowledge_new
			}
			variable = {
				type = name
				localization = LEADER_OLD
				scope = from
			}
		}
	}
}

country_event = {
	id = ssmisc.218
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_machine_infinite_architecture
		exists = root
	}

	immediate = {
		every_owned_planet = {
			export_trigger_value_to_variable = { trigger = num_buildings parameters = { type = any } variable = ss_machine_num_buildings }
			if = {
				limit = {
					OR = {
						has_designation = col_default_machine
						has_designation = col_nexus
						has_designation = col_rural_gestalt
						has_designation = col_habitat
						has_designation = col_ring_mix
						has_designation = col_mac 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_1
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_mining
						has_designation = col_habitat_mining 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_2
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_generator 
						has_designation = col_habitat_energy
						has_designation = col_ring_generator 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_3
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_farming
						has_designation = col_ring_farming  
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_4
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_foundry 
						has_designation = col_habitat_foundry  
						has_designation = col_mac_foundry 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_5
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_factory  
						has_designation = col_habitat_factory   
						has_designation = col_mac_factory 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_6
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_factory  
						has_designation = col_habitat_factory   
						has_designation = col_mac_factory 
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_6
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else_if = {
				limit = {
					OR = {
						has_designation = col_research   
						has_designation = col_habitat_research   
						has_designation = col_ring_research  
					}
				}
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_7
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
			else = {
				add_modifier = {
					modifier = ss_ap_machine_infinite_architecture_8
					multiplier = ss_machine_num_buildings
					days = 150
				}
			}
		}
		country_event = { id = ssmisc.218 days = 150 }
	}
}

country_event = {
	id = ssmisc.220
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_hive_flesh_ascension
		exists = root
	}

	immediate = {
		if = {
			limit = { is_lithoid_empire = yes }
			set_variable = { which = SS_ap_hive_flesh_ascension_bonus value = value:SS_ap_hive_flesh_ascension_bonus|RESOURCE|minerals| }
			multiply_variable  = { which = SS_ap_hive_flesh_ascension_bonus value = 0.4 }
		}
		else = {
			set_variable = { which = SS_ap_hive_flesh_ascension_bonus value = value:SS_ap_hive_flesh_ascension_bonus|RESOURCE|food| }
		}
		every_owned_planet = {
			set_variable = { which = ss_hive_flesh_food value = root.SS_ap_hive_flesh_ascension_bonus }
			add_modifier = {
				modifier = ss_ap_hive_flesh_growth
				multiplier = ss_hive_flesh_food
				days = 300
			}
			if = {
				limit = { is_planet_class = pc_hive }
				planet_event = { id = ssmisc.221 }
			}
		}
		country_event = { id = ssmisc.220 days = 300 }
	}
}

planet_event = {
	id = ssmisc.221
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { has_ascension_perk = ap_hive_flesh_ascension }
		exists = owner
	}

	immediate = {
		set_variable = { which = ss_hive_flesh_num_pops value = trigger:num_pops }
		divide_variable = { which = ss_hive_flesh_num_pops value = trigger:planet_size }
		if = {
			limit = { NOT = { is_variable_set = ss_hive_flesh_size_increase } }
			set_variable = { which = ss_hive_flesh_size_increase value = 0 }
		}
		if = {
			limit = {
				AND = {
					check_variable = { which = ss_hive_flesh_num_pops value > 2.5 }
					check_variable = { which = ss_hive_flesh_size_increase value < 5 }
				}
			}
			change_planet_size = 1
			change_variable = { which = ss_hive_flesh_size_increase value = 1 }
			remove_modifier = ss_ap_hive_flesh_planet_growth
		}
		add_modifier = {
			modifier = ss_ap_hive_flesh_planet_growth
			multiplier = ss_hive_flesh_size_increase
			days = -1
		}
	}
}

country_event = {
	id = ssmisc.222
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_ascension_perk = ap_hive_mind_ascension
		exists = root
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_civic = civic_hive_devouring_swarm }
			}
			every_owned_planet = {
				export_trigger_value_to_variable = { 
					trigger = count_owned_pop 
					variable = ss_hive_dominated_pops
					parameters = { 
						limit = {
							is_enslaved = yes
						}
					}
				}
				add_modifier = {
					modifier = ss_ap_hive_mind_research
					days = 150
				}
			}
		}
		else = {
			every_owned_planet = {
				export_trigger_value_to_variable = { 
					trigger = count_owned_pop 
					variable = ss_hive_devoured_pops
					parameters = { 
						limit = {
							is_being_purged = yes
						}
					}
				}
				add_modifier = {
					modifier = ss_ap_hive_mind_research_2
					days = 150
				}
				add_modifier = {
					modifier = ss_ap_hive_mind_research_3
					multiplier = ss_hive_devoured_pops
					days = 150
				}
			}
		}
		country_event = { id = ssmisc.222 days = 150 }
	}
}

planet_event = {
	id = ssmisc.223
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		From = { has_ascension_perk = ap_hive_mind_ascension }
		has_orbital_bombardment_stance = hive_seeding
		planet_devastation >= 10
		exists = From
	}

	immediate = {
		create_army = {
			name = "NAME_ss_infested_army"
			owner = from
			species = this.owner.owner_species
			type = "ss_ap_infested_army"
		}
		create_army = {
			name = "NAME_ss_infested_army"
			owner = from
			species = this.owner.owner_species
			type = "ss_ap_infested_army"
		}
		create_army = {
			name = "NAME_ss_infested_army"
			owner = from
			species = this.owner.owner_species
			type = "ss_ap_infested_army"
		}
		create_army = {
			name = "NAME_ss_infested_army"
			owner = from
			species = this.owner.owner_species
			type = "ss_ap_infested_army"
		}
	}
}

planet_event = {
	id = ssmisc.224
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		From = { has_ascension_perk = ap_hive_mind_ascension }
		has_orbital_bombardment_stance = hive_seeding
		planet_devastation >= 95
		exists = From
	}

	immediate = {
		change_pc = pc_hive
		reset_planet = yes
	}
}

country_event = {
	id = ssmisc.250
	hide_window = yes
	is_triggered_only = yes

	trigger = {
	}

	immediate = {
		set_country_flag = ss_quant_tech_access
	}
}

country_event = {
	id = ssmisc.999
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		NOT = { has_global_flag = ss_host_found }
	}

	immediate = {
		set_global_flag = ss_host_found
		set_country_flag = ss_game_host
	}
}

country_event = {
	id = ssmisc.1000
	title = ssmisc.1000.name
	desc = ssmisc.1000.desc
	show_sound = event_mystic_reveal
	diplomatic = yes
	custom_gui = "ss_main_menu_window"

	is_triggered_only = yes

	trigger = { has_country_flag = ss_game_host }

	immediate = {
		set_global_flag = ss_AS_show_disable
		set_global_flag = ss_AS_gestalt_disable
		set_global_flag = ss_hard_disable
		set_global_flag = ss_experimental_enable_disable
		set_global_flag = ss_weapon_ascension_retire
		set_global_flag = ss_solar_storm_installed
		set_variable = { which = ss_AS_strength value = 0 }
		event_target:global_event_country = { set_variable = { which = ss_PF_chance value = 1.0 } }
	}
	
	option = {
        name = ssmisc.1000.a
		custom_gui = "ss_main_menu_confirm"
    }
	
	after = {
		hidden_effect = {
			if = {
				limit = { has_global_flag = ss_normal_disable }
				set_global_flag = ss_crisis_hardmode
				remove_global_flag = ss_hard_disable
			}
			if = {
				limit = { has_global_flag = ss_hard_disable }
				remove_global_flag = ss_normal_disable 
			}
			if = {
				limit = { NOT = { has_global_flag = ss_AS_show_disable } }
				set_global_flag = ss_AS_roll_crisis_tech
			}
			else = { remove_global_flag = ss_AS_show_disable }
			if = {
				limit = { NOT = { has_global_flag = ss_AS_gestalt_disable } }
				set_global_flag = ss_AS_gestalt_enable
			}
			else = { remove_global_flag = ss_AS_gestalt_disable }
			event_target:global_event_country = {
				set_variable = { which = ss_AS_strength value = prev.ss_AS_strength }
				#set_variable = { which = ss_PF_strength value = prev.ss_PF_strength } 
				#set_variable = { which = ss_PF_chance value = prev.ss_PF_chance }
			}
		}
	}
}

country_event = {
	id = ssmisc.1499
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = ss_ap_combat_supercapital_chosen
		OR = {
			last_increased_tech = tech_cruisers
			last_increased_tech = tech_battleships
		}
	}

	immediate = {
		create_message = {
			type = MESSAGE_TYPE_SS_DREADNOUGHT_UPGRADE
			localization = MESSAGE_SS_DREADNOUGHT_UPGRADE
			days = 30
			target = this
		}
	}
}

country_event = {
	id = ssmisc.1500
	title = ssmisc.1500.name
	desc = ssmisc.1500.desc
	show_sound = event_mystic_reveal
	diplomatic = yes
	custom_gui = "ss_ap_combat_window"

	is_triggered_only = yes

	trigger = { }

	immediate = {
		if = {
			limit = { has_country_flag = ss_ap_combat_supercapital_selected }
			remove_country_flag = ss_ap_combat_supercapital_selected
		}
		if = {
			limit = { has_country_flag = ss_ap_combat_shock_selected }
			remove_country_flag = ss_ap_combat_shock_selected
		}
		if = {
			limit = { has_country_flag = ss_ap_combat_standoff_selected }
			remove_country_flag = ss_ap_combat_standoff_selected
		}
		if = {
			limit = { has_country_flag = ss_ap_combat_guerilla_selected }
			remove_country_flag = ss_ap_combat_guerilla_selected
		}
		if = {
			limit = { has_country_flag = ss_ap_combat_logistics_selected }
			remove_country_flag = ss_ap_combat_logistics_selected
		}
	}
	
	option = {
        name = ssmisc.1500.a
		custom_gui = "ss_ap_combat_option"
    }
	
	after = {
		if = {
			limit = { has_country_flag = ss_ap_combat_supercapital_selected }
			set_country_flag = ss_ap_combat_supercapital_chosen
			add_modifier = { modifier = ss_ap_combat_supercapital_mod days = -1 }
			give_technology = { tech = tech_ss_ap_dreadnought message = yes }
			add_tech_progress = { tech = tech_supercapital_aux progress = 0.1 }
		}
		else_if = {
			limit = { has_country_flag = ss_ap_combat_shock_selected }
			set_country_flag = ss_ap_combat_shock_chosen
			add_modifier = { modifier = ss_ap_combat_shock_mod days = -1 }
			add_tech_progress = { tech = tech_ss_particle_beam_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_ion_cannon_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_articulator_1  progress = 0.1 }
		}
		else_if = {
			limit = { has_country_flag = ss_ap_combat_standoff_selected }
			set_country_flag = ss_ap_combat_standoff_chosen
			add_modifier = { modifier = ss_ap_combat_standoff_mod days = -1 }
			add_tech_progress = { tech = tech_ss_artillery_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_flechette_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_phase_1  progress = 0.1 }
		}
		else_if = {
			limit = { has_country_flag = ss_ap_combat_guerilla_selected }
			set_country_flag = ss_ap_combat_guerilla_chosen
			add_modifier = { modifier = ss_ap_combat_guerilla_mod days = -1 }
			add_tech_progress = { tech = tech_ss_stealth_torpedo_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_cruise_missiles_1  progress = 0.1 }
			add_tech_progress = { tech = tech_ss_emp_torpedo_1  progress = 0.1 }
			
		}
		else_if = {
			limit = { has_country_flag = ss_ap_combat_logistics_selected }
			set_country_flag = ss_ap_combat_logistics_chosen
			add_modifier = { modifier = ss_ap_combat_logistics_mod days = -1 }
		}
		else = {
			country_event = { id = ssmisc.1500 }
		}
	}
}

