namespace = machine_ringworlds

# Increase size of ringworld to counter losing all food districts
planet_event = {
	id = machine_ringworlds.1
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				is_planet_class = pc_ringworld_machine
			}
			change_planet_size = 2
		}
		
		if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			change_planet_size = -2
		}
	}
}

# Clear deposits after some terraforming actions
planet_event = {
	id = machine_ringworlds.2
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				is_planet_class = pc_ringworld_machine
			}
			every_deposit = {
				limit = {
					NOR = { # rare non-event deposits should not be cleared
						is_deposit_type = d_dust_caverns
						is_deposit_type = d_dust_desert
						is_deposit_type = d_bubbling_swamp
						is_deposit_type = d_fuming_bog
						is_deposit_type = d_crystalline_caverns
						is_deposit_type = d_crystal_forest
						is_deposit_type = d_crystal_reef
						is_deposit_type = d_betharian_deposit
						is_deposit_type = d_alien_pets_deposit
					}
				}
				remove_deposit = yes
			}
			remove_modifier = "natural_beauty"
			remove_modifier = "atmospheric_aphrodisiac"
			remove_modifier = "atmospheric_hallucinogen"
			remove_modifier = "lush_planet"
			if = {
				limit = {
					any_owned_pop = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
				}
				add_deposit = d_organic_slurry
				every_owned_pop = {
					limit = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
					if = {
						limit = {
							planet.owner = { has_valid_civic = civic_machine_terminator }
						}
						planet.owner = {
							add_resource = { unity = 100 }
						}
					}
					kill_pop = yes
				}
			}
		}

		remove_modifier = "bleak_planet"
		remove_modifier = "dangerous_wildlife"
		remove_modifier = "hazardous_weather"
		remove_modifier = "wild_storms"
		remove_modifier = "irradiated_planet"

		if = {
			limit = {
				NOT = {
					is_planet_class = pc_gaia
				}
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}
		if = {
			limit = {
				exists = mining_station
			}
			mining_station = {
				delete_fleet = this
			}
		}
		if = {
			limit = {
				exists = research_station
			}
			research_station = {
				delete_fleet = this
			}
		}
	}
}

# Planet of the Mechs achievement check
planet_event = {
	id = machine_ringworlds.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		host_has_dlc = "Synthetic Dawn Story Pack"
		is_planet_class = pc_ringworld_machine
		from = { is_country_type = default }
	}

	immediate = {
		from = {
			set_country_flag = planet_of_the_mechs
		}
	}
}

# Initial Ring World Built
country_event = {
	id = machine_ringworlds.4
	title = "utopia.2000.name"
	desc = "utopia.2000.desc"
	picture = GFX_evt_unknown_ships
	show_sound = event_ringworld_build_start
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		FROM = { is_megastructure_type = mac_ring_world_1 }
	}
	
	option = {
		name = "utopia.2000.a"
	}
}

# Building Skeletal Frame Notification (HIDDEN)
country_event = {
	id = machine_ringworlds.5
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		FROM = { is_megastructure_type = mac_ring_world_1 }
	}
	
	immediate = {
		FROMFROM = { save_event_target_as = ringworld_system }
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = ROOT }
			}
			country_event = { id = utopia.2002 }
		}
	}
	
	after = {
		if = {
			limit = {
				NOT = { has_country_flag = started_first_ring_world }
			}
			set_country_flag = started_first_ring_world
			break = yes
		}
		if = {
			limit = {
				has_country_flag = started_first_ring_world
			}
			set_country_flag = started_first_ring_world_2
		}
	}
}

# Skeletal Frame Built
country_event = {
	id = machine_ringworlds.6
	title = "utopia.2003.name"
	desc = "utopia.2003.desc"
	picture = GFX_evt_ringworld
	show_sound = event_ringworld_build_upgrade
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		FROM = { is_megastructure_type = mac_ring_world_2_intermediate }
	}
	
	option = {
		name = "utopia.2003.a"
	}
}

# Ring World Completed
country_event = {
	id = machine_ringworlds.7
	title = "utopia.2004.name"
	desc = {
		text = utopia.2004.desc.a
		trigger = {
			NOT = { has_country_flag = finished_ringworld }
		}
	}
	desc = {
		text = utopia.2004.desc.b
		trigger = {
			has_country_flag = finished_ringworld
		}
	}
	picture = GFX_evt_ringworld
	show_sound = event_ringworld_build_complete
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		FROM = { is_megastructure_type = mac_ring_world_3_intermediate }
		FROMFROM = {
			NOT = {
				any_system_megastructure = { is_megastructure_type = mac_ring_world_2 }
			}
		}
	}
	
	immediate = {
		set_country_flag = built_ringworld
		FROMFROM = { save_event_target_as = completed_ringworld_system }
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = ROOT }
			}
			country_event = { id = utopia.2005 }
		}
	}
	
	after = {
		country_event = { id = utopia.2006 days = 5 }
	}
	
	option = {
		name = "utopia.2004.a"
	}
}

# Alert Messages for intermediate steps
country_event = {
	id = machine_ringworlds.8
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				is_megastructure_type = mac_ring_world_1
				is_megastructure_type = mac_ring_world_3_intermediate
			}
		}
	}

	immediate = {
		create_message = {
			type = MEGASTRUCTURE_UPGRADED
			localization = MESSAGE_MEGASTRUCTURE_UPGRADED
			days = 30
			target = from # the Go To
			variable = {
				type = name
				localization = MEGASTRUCTURE
				scope = from
			}
			variable = {
				type = name
				localization = SYSTEM
				scope = fromfrom
			}
		}
	}
}