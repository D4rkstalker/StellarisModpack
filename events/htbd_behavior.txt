#####################################
### Here, There Be Dragons Events ###
### by Gogabor			  ###
#####################################

namespace = htbd

# change current action, days, mean
@decision_period = 450
# keep action after change, days
@decision_cooldown = 200
@decision_cooldown_hatching = 400
@decision_polling_days = 13

@recent_star = 3000
@recent_good_star = 2000

# Take that game time is about 200 years (beyond this empires are too strong to afraid dragons)
# 1 grand dragon produces 1 edd in each (x + y) years, x - egg hatching time and y is cooldown time,
# Let it be 20 + 10, so 1 kid each 30 years.
# Now kid time is 'a', teen - 'b', adult - 'c'. So new grand dragon will appear in (x + a + b + c) years
# that said dragons are doubled in that time, roughly. Let it be 100 years, so in first ~150 years
# there will be 1 grand dragons, 1 adult, 1 teen and 1 kid and 1 new grand dragon. In next 100 years
# there will be about 5 grand dragons and many smaller. This is max values. Considering that dragons
# can be killed at childhood time, and after 200 years empires are quite strong to beat grand dragon,
# this looks reasonable.

# 4000
@kid_period = 5000
# 6000
@teen_period = 7000
# 8000
@adult_period = 10000

# cooldown after egg hatching, ~12 years
# set to 2000 now to have more eggs, egg growing time is increased
@no_egg_days_short = 3000
@no_egg_days_long = 10000
@no_egg_days = 4000

# Dragon -> (~10-30yrs) Egg -> Young dragon ->(~50-100yrs) Dragon -> ...

# Events
# 11. Dragon enters new system low aggro, check planets, estimate for nesting
# 12. Dragon is hatching egg in system, guarding it. high aggro
# 13. Dragon is just roaming, spending some time in a system to feed and restore
# 14. Dragon choose new star to travel to
# 15. Egg is planted, set timer on planet, et.c
# 16. New dragon is being born at the planet 
#
# Dragon flags:
# htbd_hatching - hatch an egg
# htbd_roaming - just flying in a single solar system
# htbd_travel - travelling somewhere
# htbd_idle - doing nothing

# Dragon character flags:
# htbd_curious - tend to travel more and visit all systems
# htbd_stupid - make wrong dicision more often, e.g. visit recent system
# htbd_apathic - tend to stay at stars more

# state machine:

# idle->travel
#    |->roaming
#    |->hatching

# travel->idle

# roaming->travel
#       |->hatching

# hatching->travel
#        |->idle

# Decision making
country_event = {
	id = htbd.1011
	hide_window = yes

	trigger = {
		is_country_type = htbd_horde
	}

	mean_time_to_happen = { days = @decision_polling_days }

	immediate = {
		every_owned_fleet = {
			limit = {
				is_fleet_idle = yes
				NOT = { has_fleet_flag = htbd_cooldown }
				htbd_can_interrupt_fleet = yes
			}
			fleet_event = { id = htbd.11 random = @decision_polling_days }
		}
	}
}

fleet_event = {
	id = htbd.11
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_fleet_idle = yes
		NOT = { has_fleet_flag = htbd_cooldown }
		htbd_can_interrupt_fleet = yes
	}

	immediate = {
		random_list = {
			100 = { # hatching
				modifier = {
					factor = 0

					OR = {
						owner = { htbd_max = yes }
						NOT = { has_fleet_flag = dragon_mother }
						has_fleet_flag = htbd_no_egg
						solar_system = { htbd_is_good_for_egg = no }
						solar_system = { htbd_good_system = no }
					}
				}
				# don't change decision for some time
				set_timed_fleet_flag = { flag = htbd_cooldown days = @decision_cooldown_hatching }
				clear_fleet_actions = this
				queue_actions = {
					find_random_planet = {
						trigger = {
							id = htbd.11.trigger.1
							OR = {
								is_planet_class = pc_molten
								is_planet_class = pc_shattered
							}
							NOT = { has_planet_flag = egg_incubated }
							NOT = { has_planet_flag = htbd_egg_decision }
						}
						found_planet = {
							move_to = this
							orbit_planet = this
							effect = {
								id = htbd.11.effect.1
								log = "[Root.GetName] lays egg at [This.GetName]"
								htbd_start_incubation = yes
								root = {
									remove_fleet_flag = htbd_idle
									remove_fleet_flag = htbd_roaming
									if = {
										limit = { owner = { num_fleets > 30 } }
										set_timed_fleet_flag = { flag = htbd_no_egg days = @no_egg_days_long }
									}
									else_if = {
										limit = { owner = { num_fleets < 10 } }
										set_timed_fleet_flag = { flag = htbd_no_egg days = @no_egg_days_short }
									}
									else = {
										set_timed_fleet_flag = { flag = htbd_no_egg days = @no_egg_days }
									}
									set_fleet_flag = htbd_hatching
									if = {
										limit = { htbd_debug = yes}
										log = "[Root.GetName] is hatching an Egg at [Prev.GetName]"
									}
									clear_fleet_actions = this
									fleet_event = { id = htbd.12 }
								}
							}
						}
					}
				}
			}
			# want to travel
			40 = {
				modifier = {
					factor = 3
					solar_system = { htbd_avoid_system = yes }
				}
				modifier = {
					factor = 5
					solar_system = { htbd_bad_system = yes }
				}
				modifier = {
					factor = 3
					is_ship_size = space_dragon_teen
				}
				modifier = {
					factor = 2
					is_ship_size = space_dragon_adult
				}
				modifier = {
					factor = 5
					has_fleet_flag = dragon_mother
					NOT = { has_fleet_flag = htbd_no_egg }
				}
				modifier = {
					factor = 0.2
					OR = {
						is_ship_size = space_dragon_grand
						is_ship_size = space_dragon_adult
					}
					solar_system = {
						any_ship_in_system = {
							is_ship_size = space_dragon_kid
						}
					}
				}
				modifier = {
					factor = 0.2
					is_ship_size = space_dragon_kid
				}
				modifier = {
					factor = 0.5
					has_fleet_flag = htbd_hatching
				}
				modifier = {
					factor = 1.5
					solar_system = {
						OR = {
							is_star_class = sc_b
							is_star_class = sc_a
						}
					}
				}
				modifier = {
					factor = 1.2
					solar_system = {
						OR = {
							is_star_class = sc_m
							is_star_class = sc_f
						}
					}
				}
				# character influence
				modifier = {
					factor = 1.5
					has_fleet_flag = htbd_curious
				}
				modifier = {
					factor = 0.5
					has_fleet_flag = htbd_caution
				}
				modifier = {
					factor = 4
					has_fleet_flag = htbd_hermit
					solar_system = {
						any_ship_in_system = {
							fleet = {
								NOT = { is_same_value = root }
								exists = owner
								owner = { is_country_type = htbd_horde }
							}
						}
					}
				}
				remove_fleet_flag = htbd_idle
				htbd_report_leave = yes
				fleet_event = { id = htbd.14 }
			}
			#25
			25 = { # keep doing current action
				modifier = {
					factor = 3
					has_fleet_flag = htbd_apathic
				}
				modifier = {
					factor = 3
					has_fleet_flag = htbd_stuck
				}
				modifier = {
					factor = 0
					solar_system = { htbd_bad_system = yes }
				}
				modifier = {
					factor = 0.5
					solar_system = { htbd_avoid_system = yes }
				}
				modifier = {
					factor = 3
					has_fleet_flag = htbd_social
					solar_system = {
						any_ship_in_system = {
							fleet = {
								NOT = { is_same_value = root }
								exists = owner
								owner = { is_country_type = htbd_horde }
							}
						}
					}
				}

				# don't change decision for some time
				set_timed_fleet_flag = { flag = htbd_cooldown days = @decision_cooldown }
				if = {
					limit = { has_fleet_flag = htbd_idle }
					remove_fleet_flag = htbd_idle
					htbd_report_stay = yes
					fleet_event = { id = htbd.13 }
				}
			}
			200 = {
				modifier = {
					factor = 0
					OR = {
						has_hp_percentage < 0.7
						is_ship_size = space_dragon_kid
						NOT = { has_fleet_flag = htbd_stuck_stuck }
						solar_system = {
							OR = {
								htbd_has_ftl_inhibitor = yes
								htbd_bad_system = yes
								has_star_flag = htbd_pass_stay
								has_natural_wormhole = yes
							}
							any_neighbor_system_euclidean = { has_star_flag = htbd_pass_stay }
							any_neighbor_system = { has_star_flag = htbd_pass_stay }
						}
					}
				}
				if = {
					limit = {
						exists = orbit
						orbit = { htbd_etherhole_source = yes }
						solar_system = { htbd_etherhole_ok = yes }
					}
					fleet_event = { id = htbd.141 }
				}
				else = {
					remove_fleet_flag = htbd_idle
					set_fleet_flag = htbd_travel
					solar_system = {
						random_system_planet = {
							limit = { is_star = yes }
							root = {
								queue_actions = {
									move_to = prev
									orbit_planet = prev
									effect = {
										id = htbd.11.effect.4
										remove_fleet_flag = htbd_travel
										remove_fleet_flag = htbd_cooldown
										set_fleet_flag = htbd_idle
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# hatching the egg
# from - planet
fleet_event = {
	id = htbd.12
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		htbd_report_hatching = yes
		set_aggro_range = 500
		remove_fleet_flag = htbd_idle
		remove_fleet_flag = htbd_stuck
		remove_fleet_flag = htbd_stuck_stuck
		clear_fleet_actions = this
		queue_actions = {
			repeat = {
				while = {
					id = htbd.12.trigger.1
					solar_system = {
						any_system_planet = {
							has_planet_flag = egg_incubated
						}
					}
				}
				find_random_planet = {
					trigger = {
						id = htbd.12.trigger.2
						NOT = { is_same_value = root.orbit }
						htbd_not_recent_planet = yes
						htbd_preferable_planet = yes
					}
					found_planet = {
						move_to = this
						orbit_planet = this
						wait = { duration = @planet_stay_long random = @planet_stay_rnd }
						effect = {
							id = htbd.12.effect.2
							set_timed_planet_flag = { flag = htbd_recent days = @recent_good_planet }
						}
					}
				}
				find_random_planet = {
					trigger = {
						id = htbd.12.trigger.3
						NOT = { is_same_value = root.orbit }
						htbd_not_recent_planet = yes
						OR = {
							htbd_unpleasant_planet = no
							root = { htbd_idontcare = yes }
						}
					}
					found_planet = {
						move_to = this
						orbit_planet = this
						wait = { duration = @planet_stay random = @planet_stay_rnd }
						effect = {
							id = htbd.12.effect.4
							set_timed_planet_flag = { flag = htbd_recent days = @recent_planet }
						}
					}
				}
				effect = {
					id = htbd.12.effect.3
					# count how many cycles it stays inside system
					change_variable = { which = htbd_stay_level value = 2 }
				}
			}
			effect = {
				id = htbd.12.effect.1
				root = {
					set_aggro_range = 200
					remove_fleet_flag = htbd_hatching
					remove_fleet_flag = htbd_cooldown
					set_fleet_flag = htbd_idle
				}
			}
		}
	}
}

# Roaming around
fleet_event = {
	id = htbd.13
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = { is_country_type = htbd_horde }
	}

	immediate = {
		set_fleet_flag = htbd_roaming
		remove_fleet_flag = htbd_ignore_recent
		remove_fleet_flag = htbd_curiousity
		remove_fleet_flag = htbd_idle
		remove_fleet_flag = htbd_stuck
		remove_fleet_flag = htbd_stuck_stuck
		clear_fleet_actions = this

		if = {
			limit = { htbd_debug = yes }
			log = "[Root.GetName] is roaming in [root.solar_system.GetName]"
		}
		queue_actions = {
			repeat = {
				while = {
					id = htbd.13.trigger.1
					has_fleet_flag = htbd_roaming
				}
				find_random_planet = {
					trigger = {
						id = htbd.13.trigger.2
						NOT = { is_same_value = root.orbit }
						htbd_not_recent_planet = yes
						htbd_preferable_planet = yes
					}
					found_planet = {
						move_to = this
						orbit_planet = this
						wait = { duration = @planet_stay_long random = @planet_stay_rnd }
						effect = {
							id = htbd.13.effect.1
							# log = "1: [Root.GetName] is orbiting [This.GetName]"
							set_timed_planet_flag = { flag = htbd_recent days = @recent_good_planet }
						}
					}
				}
				find_random_planet = {
					trigger = {
						id = htbd.13.trigger.3
						NOT = { is_same_value = root.orbit }
						htbd_not_recent_planet = yes
						OR = {
							htbd_unpleasant_planet = no
							root = { htbd_idontcare = yes }
						}
					}
					found_planet = {
						move_to = this
						orbit_planet = this
						wait = { duration = @planet_stay random = @planet_stay_rnd }
						effect = {
							id = htbd.13.effect.4
							# log = "4: [Root.GetName] is orbiting [This.GetName]"
							set_timed_planet_flag = { flag = htbd_recent days = @recent_planet }
						}
					}
				}
				effect = {
					id = htbd.13.effect.3
					# count how many cycles it stays inside system
					change_variable = { which = htbd_stay_level value = 2 }
				}
			}
		}
	}
}

# Heal hull at first
fleet_event = {
	id = htbd.131
	hide_window = yes

	mean_time_to_happen = { months = 3 }

	trigger = {
		exists = owner
		owner = { is_country_type = htbd_horde }
		htbd_can_interrupt_fleet = yes
		htbd_need_hull = yes
		solar_system = { htbd_bad_system = no }
	}

	immediate = {
		if = {
			limit = { htbd_debug = yes}
			log = "[Root.GetName] is healing in [root.solar_system.GetName]"
		}
		htbd_clear_fleet_state = yes
		set_fleet_flag = htbd_healing
		clear_fleet_actions = this
		queue_actions = {
			find_random_planet = {
				trigger = {
					id = htbd.131.trigger.2
					is_star = yes
				}
				found_planet = {
					move_to = this
					orbit_planet = this
					effect = {
						id = htbd.131.effect.1
						root = { add_modifier = { modifier = htbd_hull_restore days = -1 } }
					}
				}
			}
			repeat = {
				while = {
					id = htbd.131.trigger.1
					htbd_need_hull = yes 
				}
				wait = { duration = @planet_stay random = @planet_stay_rnd }
				effect = {
					id = htbd.131.effect.3

					# count how many cycles it stays inside system
					change_variable = { which = htbd_stay_level value = 1 }
				}
			}
			effect = {
				id = htbd.131.effect.2

				root = {
					remove_modifier = htbd_hull_restore
					remove_fleet_flag = htbd_healing
					set_fleet_flag = htbd_idle
				}
			}
		}
	}
}

# Heal armor at second
fleet_event = {
	id = htbd.132
	hide_window = yes

	mean_time_to_happen = { months = 6 }

	trigger = {
		exists = owner
		owner = { is_country_type = htbd_horde }
		htbd_can_interrupt_fleet = yes
		htbd_need_hull = no
		htbd_need_armor = yes
		exists = solar_system
		solar_system = {
			any_system_planet = {
				is_asteroid = yes
			}
		}
	}

	immediate = {
		if = {
			limit = { htbd_debug = yes}
			log = "[Root.GetName] is restoring in [root.solar_system.GetName]"
		}
		htbd_clear_fleet_state = yes
		set_fleet_flag = htbd_healing
		clear_fleet_actions = this
		queue_actions = {
			find_random_planet = {
				trigger = {
					id = htbd.132.trigger.2
					is_asteroid = yes
				}
				found_planet = {
					move_to = this
					orbit_planet = this
					effect = {
						id = htbd.132.effect.1
						root = { add_modifier = { modifier = htbd_armor_restore days = -1 } }
					}
				}
			}
			repeat = {
				while = {
					id = htbd.132.trigger.1
					htbd_need_hull = no
					htbd_need_armor = yes
				}
				wait = { duration = @planet_stay random = @planet_stay_rnd }
				effect = {
					id = htbd.132.effect.3

					# count how many cycles it stays inside system
					change_variable = { which = htbd_stay_level value = 1 }
				}
			}
			effect = {
				id = htbd.132.effect.2

				root = {
					remove_modifier = htbd_armor_restore
					remove_fleet_flag = htbd_healing
					set_fleet_flag = htbd_idle
				}
			}
		}
	}
}

# Start to travel
fleet_event = {
	id = htbd.14
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		htbd_clear_fleet_state = yes
		set_fleet_flag = htbd_travel
		solar_system = {
			if = {
				limit = { NOT = { has_star_flag = htbd_recent_star_@root } }
				if = {
					limit = { htbd_good_system = yes }
					set_timed_star_flag = {
						flag = htbd_recent_star_@root
						days = @recent_good_star
					}
				}
				else = {
					set_timed_star_flag = {
						flag = htbd_recent_star_@root
						days = @recent_star
					}
				}
			}
		}
		set_variable = { which = htbd_stay_level value = 0 }
		clear_fleet_actions = this
		# randomize their behavior a bit
		random_list = {
			10 = {
				modifier = {
					factor = 2
					has_fleet_flag = htbd_stupid
				}
				modifier = {
					factor = 0.5
					has_fleet_flag = htbd_clever
				}
				modifier = {
					factor = 3
					has_fleet_flag = htbd_mad
				}
				set_fleet_flag = htbd_ignore_recent
			}
			20 = {
				modifier = {
					factor = 1.5
					has_fleet_flag = htbd_curious
				}
				modifier = {
					factor = 0.5
					has_fleet_flag = htbd_caution
				}
				modifier = {
					factor = 2
					has_fleet_flag = htbd_mad
				}
				set_fleet_flag = htbd_curiousity
			}
			100 = { }
		}
		# debug info
		if = {
			limit = { htbd_debug = yes }
			htbd_travel_debug = yes
		}
		# set ftl_system to the current just to distinguish failed case
		solar_system = {
			save_event_target_as = htbd_ftl_system
			### Wormhole travel doesn't work since 2.2.* because it is impossible to find WH pair.
			if = {
				limit = {
					has_natural_wormhole = yes
				}
				random_system = {
					limit = {
						has_natural_wormhole = yes
						distance = { source = prev type=hyperlane use_bypasses=yes bypass_empire=event_target:htbd_country min_jumps = 1 max_jumps = 1 }
						htbd_may_travel_to = yes
					}
					if = {
						limit = { htbd_debug = yes }
						log = "[Root.GetName] may travel by wormhole to [This.GetName]!"
					}
					save_event_target_as = htbd_ftl_system
				}
			}

			# Check ether holes if no new target yet
			if = {
				limit = {
					is_same_value = event_target:htbd_ftl_system
					has_star_flag = htbd_pass_stay
				}
				random_system = {
					limit = {
						OR = {
							AND = {
								prev = { has_star_flag = htbd_pass_to }
								has_star_flag = htbd_pass_from
							}
							AND = {
								prev = { has_star_flag = htbd_pass_from }
								has_star_flag = htbd_pass_to
							}
						}
						htbd_may_travel_to = yes
					}
					weights = {
						base = 1
						modifier = {
							factor = 3
							htbd_friend_system = yes
						}
					}
					if = {
						limit = { htbd_debug = yes }
						log = "[Root.GetName] may travel by ether hole to [This.GetName]!"
					}
					save_event_target_as = htbd_ftl_system
				}
			}

			# wormholes weren't used, take random neighbor system
			if = {
				limit = {
					is_same_value = event_target:htbd_ftl_system
				}
				random_neighbor_system = {
					limit = {
						htbd_may_travel_to = yes
					}
					weights = {
						base = 1
						modifier = {
							factor = 3
							htbd_friend_system = yes
						}
					}
					save_event_target_as = htbd_ftl_system
				}
			}
		}
		if = {
			limit = {
				exists = event_target:htbd_ftl_system
				solar_system = { NOT = { is_same_value = event_target:htbd_ftl_system } }
			}
			if = {
				limit = { htbd_debug = yes}
				log = "[Root.GetName] wants travel to [htbd_ftl_system.GetName]"
			}
			queue_actions = {
				repeat = {
				max_iterations = 1
				find_closest_system = {
					trigger = {
						id = htbd.14.trigger.1
						exists = event_target:htbd_ftl_system
						is_same_value = event_target:htbd_ftl_system
					}
					found_system = {
						move_to = this
						# just wait until htbd.15 takes controls
						wait = { duration = 30 }
						effect = {
							id = htbd.14.effect.1
							if = {
								limit = { htbd_debug = yes }
								log = "[Root.GetName] cannot travel to [htbd_ftl_system.GetName]"
							}
							# most likely inhibitor prevents this
							root = {
								clear_fleet_actions = this
								remove_fleet_flag = htbd_travel
								remove_fleet_flag = htbd_cooldown
								set_fleet_flag = htbd_idle
								if = {
									limit = { has_fleet_flag = htbd_stuck }
									set_fleet_flag = htbd_stuck_stuck
								}
								else = {
									set_fleet_flag = htbd_stuck
								}
							}
						}
					}
				}
				}
			}
		}
		else = {
			if = {
				limit = { htbd_debug = yes }
				log = "[Root.GetName] is stuck at [Root.GetStarName]"
			}
			if = {
				limit = { has_fleet_flag = htbd_stuck }
				set_fleet_flag = htbd_stuck_stuck
			}
			else = {
				set_fleet_flag = htbd_stuck
			}
			remove_fleet_flag = htbd_travel
			remove_fleet_flag = htbd_cooldown
			set_fleet_flag = htbd_idle
		}
	}
}

# Emergency travel, trying to escape from stuck situation
fleet_event = {
	id = htbd.141
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		htbd_clear_fleet_state = yes
		set_fleet_flag = htbd_travel
		clear_fleet_actions = this
		solar_system = { save_event_target_as = htbd_emrg_from }
		random_system = {
			limit = {
				distance = {
					source = event_target:htbd_emrg_from
					min_distance > 50
					max_distance < 300
					type = euclidean
				}
				htbd_etherhole_ok = yes
				NOR = {
					distance = {
						source = event_target:htbd_emrg_from
						type=hyperlane
						min_jumps = 1 max_jumps = 4
					}
					has_star_flag = htbd_recent_star_@prevprev
					AND = {
						htbd_has_ftl_inhibitor = yes
						htbd_friend_system = no
					}
					any_neighbor_system_euclidean = { has_star_flag = htbd_pass_stay }
					any_neighbor_system = { has_star_flag = htbd_pass_stay }
				}
				calc_true_if = {
					amount = 2
					htbd_good_system = yes
					NOT = { exists = space_owner }
					htbd_friend_system = yes
					htbd_bad_system = no
				}
			}
			save_event_target_as = htbd_emrg_to
		}

		if = {
			limit = { exists = event_target:htbd_emrg_to }
			log = "Emergency jump from [htbd_emrg_from.GetName] to [htbd_emrg_to.GetName]"
			event_target:htbd_emrg_from = {
				event_target:htbd_emrg_to = {
					prev = {
						htbd_spawn_hole = yes
						htbd_set_pass_timer = yes
					}
					htbd_spawn_hole_end = yes
					htbd_set_pass_timer = yes
				}
			}

			# dragon get's armor and hull damage
			owner = {
				every_owned_ship = {
					limit = { fleet = { is_same_value = root } }
					# reduce_hp_percent doesn't work at all, reduce asolute values to be about 25-30%
					switch = {
						trigger = is_ship_size
						space_dragon_dwarf = { reduce_hp = 4000 }
						space_dragon_teen = { reduce_hp = 5000 }
						space_dragon_adult = { reduce_hp = 10000 }
						space_dragon_grand = { reduce_hp = 15000 }
					}
				}
			}
			# log = "notify all countries about ether hole creation at [htbd_emrg_from.GetName]"
			solar_system = {
				# just because of intel_level accepts only prev/this/root...
				every_country = {
					limit = {
						is_country_type = default
						NOT = { has_country_flag = htbd_pass_origin_known }
						OR = {
							intel_level = { level > medium system = prev }
							prev = { is_inside_border = prev }
						}
					}
					country_event = { id = htbd_ev.112 }
				}
			}
			remove_fleet_flag = htbd_stuck_stuck
			clear_fleet_actions = this
			queue_actions = {
				find_closest_system = {
					trigger = {
						id = htbd.141.trigger.1
						is_same_value = event_target:htbd_emrg_to
					}
					found_system = {
						move_to = event_target:htbd_emrg_to
						wait = { duration = 30 }
						effect = {
							id = htbd.141.effect.1
							root = {
								remove_fleet_flag = htbd_travel
								remove_fleet_flag = htbd_cooldown
								set_fleet_flag = htbd_idle
							}
						}
					}
				}
			}
		}
		else = {
			remove_fleet_flag = htbd_travel
			remove_fleet_flag = htbd_cooldown
			set_fleet_flag = htbd_idle
		}
	}
}

# on entering emergency jump hole
# Scope = Fleet
# From = System to
# FROMFROM = system from
fleet_event = {
	id = htbd.142
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_country_type = htbd_horde }
	}

	immediate = {
		if = {
			limit = { htbd_debug = yes }
			log = "[root.GetName] is jumping from [fromfrom.GetName] to [from.GetName]"
		}
	}
}

# on entering system
# considering that each travel is 1 step
# Scope = Fleet
# From = System
fleet_event = {
	id = htbd.15
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = { is_country_type = htbd_horde }
	}

	immediate = {
		if = {
			limit = { htbd_debug = yes }
			log = "[This.GetName] arrived to [From.GetName]"
			# print_scope_effect = yes
		}
		clear_fleet_actions = this
		htbd_clear_fleet_state = yes
		remove_fleet_flag = htbd_ignore_recent
		remove_fleet_flag = htbd_curiousity
		if = {
			limit = {
				from = { htbd_may_travel_from = yes }
				NOT = { has_fleet_flag = htbd_stuck_stuck }
			}
			remove_fleet_flag = htbd_stuck
			set_fleet_flag = htbd_cooldown
			# just stop it now and don't let go to the star
			queue_actions = {
				move_to = root.location
				wait = { duration = 14 random = 7 }
				effect = {
					id = htbd.15.effect.1

					remove_fleet_flag = htbd_cooldown
					set_fleet_flag = htbd_idle
					clear_fleet_actions = this
				}
			}
		}
		else = {
			# log = "[From.GetName] can't leave this system easily"
			# just clear fleet actions and let it go to the star
			remove_fleet_flag = htbd_cooldown
			set_fleet_flag = htbd_idle
			#clear_fleet_actions = this
		}
	}
}

# Dragon is growing
ship_event = {
	id = htbd.117
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_ship_flag = htbd_growing
		OR = {
			is_ship_size = space_dragon_kid
			is_ship_size = space_dragon_teen
			is_ship_size = space_dragon_adult
		}
		fleet = { htbd_can_interrupt_fleet = yes }
	}

	immediate = {
		fleet = {
			remove_fleet_flag = htbd_growing
			clear_fleet_actions = this
			if = {
				limit = {
					is_ship_size = space_dragon_kid
				}
				htbd_dragon_teen = yes
			}
			else_if = {
				limit = {
					is_ship_size = space_dragon_teen
				}
				htbd_dragon_adult = yes
			}
			else = {
				htbd_dragon_grand = yes
			}
			remove_fleet_flag = htbd_roaming
			remove_fleet_flag = htbd_cooldown
			set_fleet_flag = htbd_idle
		}
		delete_ship = this
	}
}

# Kid is growing
# from - planet
fleet_event = {
	id = htbd.17
	hide_window = yes

	trigger = {
		owner = { is_country_type = htbd_horde }
		any_owned_ship = { is_ship_size = space_dragon_kid }
	}

	mean_time_to_happen = {
		days = @kid_period
	}

	immediate = {
		random_owned_ship = {
			limit = { is_ship_size = space_dragon_kid }
			set_ship_flag = htbd_growing
			ship_event = { id = htbd.117 random = 100 }
		}
	}
}

fleet_event = {
	id = htbd.18
	hide_window = yes

	trigger = {
		owner = { is_country_type = htbd_horde }
		any_owned_ship = { is_ship_size = space_dragon_teen }
	}

	mean_time_to_happen = {
		days = @teen_period
	}

	immediate = {
		random_owned_ship = {
			limit = { is_ship_size = space_dragon_teen }
			set_ship_flag = htbd_growing
			ship_event = { id = htbd.117 random = 100 }
		}
	}
}

# Adult becomes the grand dragon
fleet_event = {
	id = htbd.19
	hide_window = yes

	trigger = {
		owner = { is_country_type = htbd_horde }
		any_owned_ship = { is_ship_size = space_dragon_adult }
	}

	mean_time_to_happen = {
		days = @adult_period
	}

	immediate = {
		random_owned_ship = {
			limit = { is_ship_size = space_dragon_adult }
			set_ship_flag = htbd_growing
			ship_event = { id = htbd.117 random = 100 }
		}
	}
}

# baby's cry
# This = country
# FromFrom = fleet
country_event = {
	id = htbd.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = htbd_horde
		fromfrom = {
			OR = {
				is_ship_size = space_dragon_kid
				is_ship_size = space_dragon_teen
			}
		}
	}

	immediate = {
		every_owned_fleet = {
			limit = {
				OR = {
					is_ship_size = space_dragon_adult
					is_ship_size = space_dragon_grand
				}
				NOT = { has_fleet_flag = htbd_hatching }
				htbd_can_interrupt_fleet = yes
				distance = {
					source = fromfrom
					type = hyperlane
					min_jumps = 1
					max_jumps = 4
				}
			}
			random_list = {
			15 = {
				modifier = {
					factor = 3
					fromfrom = { is_ship_size = space_dragon_kid }
				}
				modifier = {
					factor = 2
					is_ship_size = space_dragon_grand
				}
				modifier = {
					factor = 2
					distance = {
						source = fromfrom
						type = hyperlane
						min_jumps = 1
						max_jumps = 2
					}
				}
				modifier = {
					factor = 0.5
					distance = {
						source = fromfrom
						min_jumps = 3
						max_jumps = 4
					}
				}

				set_fleet_flag = htbd_travel
				remove_fleet_flag = htbd_idle
				remove_fleet_flag = htbd_roaming
				remove_fleet_flag = htbd_cooldown
				clear_fleet_actions = this
				queue_actions = {
					move_to = fromfrom
					effect = {
						id = htbd.20.effect.1
						this = {
							remove_fleet_flag = htbd_travel
							set_fleet_flag = htbd_idle
						}
					}
				}
			}
			100 = {}
			}
		}
	}
}
