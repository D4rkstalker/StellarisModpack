namespace = exalted_subjects
@NumPopsShiftedSome = 5
@NumPopsShiftedMany = 10
@BeneficiaryDefectionMin = 180
@BeneficiaryDefectionVariance = 2880
@BeneficiaryArrivalMin = 1
@BeneficiaryArrivalVariance = 4
@AutomatedAssemblerDeliveryVariance = 90
@MachineCuratorArtifactsMin = 30
@MachineCuratorArtifactsMax = 300
@SymbioticBondsMin = 100
@SymbioticBondsVariance = 3500

# 0 Country made vassal; called by on_becoming_subject
country_event = {
	id = exalted_subjects.0
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = vassal
		exists = FROM
		FROM = { is_country_type = default }
	}

	immediate = {
		log = "exalted_subjects.0: [This.GetName] has been subjugated by [From.GetName]"
		if = {
			limit = {
				is_gestalt = no
				is_megacorp = no
			}
			FROM = {
				country_event = { id = exalted_subjects.5 days = 3 }
			}
		}
		else_if = {
			limit = {
				is_gestalt = yes
				is_machine_empire = yes
			}
			FROM = {
				country_event = { id = exalted_subjects.7 days = 3 }
			}
		}
		else_if = {
			limit = {
				is_gestalt = yes
				is_hive_empire = yes
			}
			FROM = {
				country_event = { id = exalted_subjects.8 days = 3 }
			}
		}
	}
}

# 1 Country made tributary; called by on_becoming_subject
country_event = {
	id = exalted_subjects.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = tributary
		exists = FROM
		FROM = { is_country_type = default }
	}

	immediate = {
		log = "exalted_subjects.1: [This.GetName] has been subjugated by [From.GetName]"
		FROM = {
			country_event = { id = exalted_subjects.6 days = 3 }
		}
	}
}

# 2 Check for vanilla vassals; called by on_monthly_pulse_country
# This is necessary because there are no actions for protectorates becoming vassals
country_event = {
	id = exalted_subjects.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_advanced_tributary_offered }
		NOT = { has_country_flag = exalted_advanced_vassal_offered }
		OR = { 
			is_subject_type = tributary
			is_subject_type = vassal
		}
		exists = OVERLORD
		OVERLORD = { is_country_type = default }
	}

	immediate = {
		if = {
			limit = {
				is_subject_type = vassal
			}

			log = "exalted_subjects.2: [This.GetName] is a vanilla vassal; offer chance to change"
			if = {
				limit = {
					is_gestalt = no
					is_megacorp = no
				}

				OVERLORD = {
					country_event = { id = exalted_subjects.5 }
				}
			}
			else_if = {
				limit = {
					is_gestalt = yes
					is_machine_empire = yes
				}

				OVERLORD = {
					country_event = { id = exalted_subjects.7 }
				}
			}
			else_if = {
				limit = {
					is_gestalt = yes
					is_hive_empire = yes
				}

				OVERLORD = {
					country_event = { id = exalted_subjects.8 }
				}
			}
		}
		else_if = {
			limit = {
				is_subject_type = tributary
			}
	
			log = "exalted_subjects.2: [This.GetName] is a vanilla tributary; offer chance to change"
			OVERLORD = {
				country_event = { id = exalted_subjects.6 }
			}
		}
	}
}

# 3 Country given AI bonus; called by on_becoming subject
country_event = {
	id = exalted_subjects.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_domination_difficulty_bonus }
		is_ai = yes
		exists = FROM
		FROM = { is_ai = no }
	}

	immediate = {
		set_country_flag = exalted_domination_difficulty_bonus

		if = {
			limit = { 
				OR = {
					is_difficulty = 0
					is_difficulty = 1
					is_difficulty = 2
				}
			}

			log = "exalted_subjects.3: [This.GetName] granted Captain difficulty bonus"
			add_modifier = { modifier = difficulty_captain }
		}
		else_if = {
			limit = {
				is_difficulty = 3
			}

			log = "exalted_subjects.2: [This.GetName] granted Commodore difficulty bonus"
			add_modifier = { modifier = difficulty_commodore }
		}
		else_if = {
			limit = {
				is_difficulty = 4
			}

			log = "exalted_subjects.2: [This.GetName] granted Admiral difficulty bonus"
			add_modifier = { modifier = difficulty_admiral }
		}
		else_if = {
			limit = {
				is_difficulty = 5
			}

			log = "exalted_subjects.3: [This.GetName] granted Grant Admiral difficulty bonus"
			add_modifier = { modifier = difficulty_grand_admiral }
		}
		else = {
			log = "exalted_subjects.3: [This.GetName] granted no difficulty bonus"
		}
	}
}

# 5 Overlord chooses type of new vassal
country_event = {
	id = exalted_subjects.5
	title = exalted_subjects.5.name
	desc = exalted_subjects.5.desc
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	location = from

	is_triggered_only = yes

	trigger = {
		exists = FROM
		FROM = {
			NOT = { has_country_flag = exalted_advanced_vassal_offered }
			is_gestalt = no
			is_megacorp = no
		}
		is_overlord_to = FROM
	}

	immediate = {
		log = "exalted_subjects.5: [This.GetName] deciding subjugation of [From.GetName]"
		FROM = {
			set_country_flag = exalted_advanced_vassal_offered
		}
	}

	# Transform into Beneficiary
	option = {
		name = SUBJECT_exalted_subject_beneficiary
		custom_tooltip = choice_exalted_subject_beneficiary_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_authority = auth_machine_intelligence
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Beneficiary"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_beneficiary
				}

				country_event = { id = exalted_subjects.10 }
			}
		}
	}

	# Transform into Cultural Conservation
	option = {
		name = SUBJECT_exalted_subject_cultural_conservation
		custom_tooltip = choice_exalted_subject_cultural_conservation_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Cultural Conservation"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_cultural_conservation
				}

				country_event = { id = exalted_subjects.19 }
			}
		}
	}

	# Transform into Dominion
	option = {
		name = SUBJECT_exalted_subject_dominion
		custom_tooltip = choice_exalted_subject_dominion_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Dominion"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_dominion
				}

				country_event = { id = exalted_subjects.11 }
			}
		}
	}

	# Transform into Exarchate
	option = {
		name = SUBJECT_exalted_subject_exarchate
		custom_tooltip = choice_exalted_subject_exarchate_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_authority = auth_machine_intelligence
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] an Exarchate"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_exarchate
				}
    
				country_event = { id = exalted_subjects.20 }
			}
		}
	}

	# Transform into Noble House
	option = {
		name = SUBJECT_exalted_subject_noble_house
		custom_tooltip = choice_exalted_subject_noble_house_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Noble House"
			owner_species = {
				save_event_target_as = exalted_domination_main_species
			}

			every_owned_leader = {
				remove_leader_flag = exalted_domination_house_candidate
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = admiral
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_adm1
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = admiral
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_adm2
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = admiral
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_adm3
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = admiral
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_adm4
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = admiral
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_adm5
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = governor
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_gov1
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = governor
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_gov2
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = governor
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_gov3
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = governor
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_gov4
			}

			random_owned_leader = {
				limit = {
					NOT = { has_leader_flag = exalted_domination_house_candidate}
					leader_class = governor
				}

				set_leader_flag = exalted_domination_house_candidate
				save_event_target_as = exalted_domination_house_gov5
			}

			FROM = {
				save_event_target_as = exalted_domination_declared_house
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_noble_house
				}

				country_event = { id = exalted_subjects.18 }
			}

			country_event = { id = exalted_subjects.180 }
		}
	}

	# Transform into Special Administrative Region
	option = {
		name = SUBJECT_exalted_subject_special_administrative_region
		custom_tooltip = choice_exalted_subject_special_administrative_region_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Special Administrative Region"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_special_administrative_region
				}

				country_event = { id = exalted_subjects.12 }
			}
		}
	}
	
	# Transform into Warden
	option = {
		name = SUBJECT_exalted_subject_warden
		custom_tooltip = choice_exalted_subject_warden_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Warden"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_warden
				}

				country_event = { id = exalted_subjects.13 }
			}
		}
	}

	# Transform into Xenoharvest
	option = {
		name = SUBJECT_exalted_subject_xenoharvest
		custom_tooltip = choice_exalted_subject_xenoharvest_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] a Xenoharvest"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_xenoharvest
				}

				country_event = { id = exalted_subjects.21 }
			}
		}
	}

	# Leave as vanilla Vassal
	option = {
		name = choice_exalted_subject_vassal
		custom_tooltip = choice_exalted_subject_vassal_tooltip

		hidden_effect = {
			log = "exalted_subjects.5: Leaving [From.GetName] as Vassal"
		}
	}
}

# 6 Overlord chooses type of new tributary
country_event = {
	id = exalted_subjects.6
	title = exalted_subjects.6.name
	desc = exalted_subjects.6.desc
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	location = from

	trigger = {
		exists = FROM
		FROM = {
			NOT = { has_country_flag = exalted_advanced_tributary_offered }
		}
		is_overlord_to = FROM
	}

	immediate = {
		log = "exalted_subjects.6: [This.GetName] deciding subjugation of [From.GetName]"
		FROM = {
			set_country_flag = exalted_advanced_tributary_offered
		}
	}

	is_triggered_only = yes

	# Transform into Prefecture
	option = {
		name = SUBJECT_exalted_subject_prefecture
		custom_tooltip = choice_exalted_subject_prefecture_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.6: [This.GetName] chose to make [From.GetName] a Prefecture"
			FROM = {
				set_subject_of = {
					who = ROOT
					subject_type = exalted_subject_prefecture
				}
			}
		}
	}
	
	# Transform into Satellite
	option = {
		name = SUBJECT_exalted_subject_satellite
		custom_tooltip = choice_exalted_subject_satellite_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
		hidden_effect = {
			log = "exalted_subjects.6: [This.GetName] chose to make [From.GetName] a Satellite"
			FROM = {
				set_subject_of = {
					who = root
					subject_type = exalted_subject_satellite
				}
			}
		}
	}

	# Transform into Signatory
	option = {
		name = SUBJECT_exalted_subject_signatory
		custom_tooltip = choice_exalted_subject_signatory_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
			}
		}
		hidden_effect = {
			log = "exalted_subjects.6: [This.GetName] chose to make [From.GetName] a Signatory"
			FROM = {
				set_subject_of = {
					who = ROOT
					subject_type = exalted_subject_signatory
				}
			}
		}
	}

	# Transform into Thrall
	option = {
		name = SUBJECT_exalted_subject_thrall
		custom_tooltip = choice_exalted_subject_thrall_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
		hidden_effect = {
			log = "exalted_subjects.6: [This.GetName] chose to make [From.GetName] a Thrall"
			FROM = {
				set_subject_of = {
					who = ROOT
					subject_type = exalted_subject_thrall
				}
			}
		}
	}

	# Leave as vanilla tributary
	option = {
		name = choice_exalted_subject_tributary
		custom_tooltip = choice_exalted_subject_tributary_desc

		hidden_effect = {
			log = "exalted_subjects.6: Leaving [From.GetName] as Tributary"
		}
	}
}

# 7 Overlord chooses type of new machine empire vassal
country_event = {
	id = exalted_subjects.7
	title = exalted_subjects.5.name
	desc = exalted_subjects.5.desc
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	location = from

	is_triggered_only = yes

	trigger = {
		exists = FROM
		FROM = {
			NOT = { has_country_flag = exalted_advanced_vassal_offered }
			is_gestalt = yes
			is_machine_empire = yes
		}
		is_overlord_to = FROM
	}

	immediate = {
		log = "exalted_subjects.7: [This.GetName] deciding subjugation of [From.GetName]"
		FROM = {
			set_country_flag = exalted_advanced_vassal_offered
		}
	}

	# Transform into Automated Assembler
	option = {
		name = SUBJECT_exalted_subject_automated_assembler
		custom_tooltip = choice_exalted_subject_automated_assembler_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
		hidden_effect = {
			log = "exalted_subjects.5: [This.GetName] chose to make [From.GetName] an Automated Assembler"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_automated_assembler
				}

				country_event = { id = exalted_subjects.14 }
			}
		}
	}

	# Transform into Remote Archive
	option = {
		name = SUBJECT_exalted_subject_remote_archive
		custom_tooltip = choice_exalted_subject_remote_archive_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
		hidden_effect = {
			log = "exalted_subjects.7: [This.GetName] chose to make [From.GetName] a Remote Archive"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_remote_archive
				}

				country_event = { id = exalted_subjects.15 }
			}
		}
	}

	# Leave as vanilla Vassal
	option = {
		name = choice_exalted_subject_vassal
		custom_tooltip = choice_exalted_subject_vassal_tooltip

		hidden_effect = {
			log = "exalted_subjects.7: Leaving [From.GetName] as Vassal"
		}
	}
}

# 8 Overlord chooses type of new hive-mind empire vassal
country_event = {
	id = exalted_subjects.8
	title = exalted_subjects.5.name
	desc = exalted_subjects.5.desc
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	location = from

	is_triggered_only = yes

	trigger = {
		exists = FROM
		FROM = {
			NOT = { has_country_flag = exalted_advanced_vassal_offered }
			is_gestalt = yes
			is_hive_empire = yes
		}
		is_overlord_to = FROM
	}

	immediate = {
		log = "exalted_subjects.8: [This.GetName] deciding subjugation of [From.GetName]"
		FROM = {
			set_country_flag = exalted_advanced_vassal_offered
		}
	}

	# Transform into Pet
	option = {
		name = SUBJECT_exalted_subject_pet
		custom_tooltip = choice_exalted_subject_pet_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_machine_intelligence
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
		hidden_effect = {
			log = "exalted_subjects.8: [This.GetName] chose to make [From.GetName] a Pet"

			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_pet
				}

				country_event = { id = exalted_subjects.17 }
			}
		}
	}

	# Transform into Symbiont
	option = {
		name = SUBJECT_exalted_subject_symbiont
		custom_tooltip = choice_exalted_subject_symbiont_tooltip
		trigger = {
			OR = {
				has_civic = civic_feudal_realm
				has_authority = auth_hive_mind
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
		hidden_effect = {
			log = "exalted_subjects.8: [This.GetName] chose to make [From.GetName] a Symbiont"
			FROM = {
				set_subject_of = {
					who = PREV
					subject_type = exalted_subject_symbiont
				}

				country_event = { id = exalted_subjects.16 }
			}
		}
	}

	# Leave as vanilla Vassal
	option = {
		name = choice_exalted_subject_vassal
		custom_tooltip = choice_exalted_subject_vassal_tooltip

		hidden_effect = {
			log = "exalted_subjects.8: Leaving [From.GetName] as Vassal"
		}
	}
}

# 10 Becoming Beneficiary
country_event = {
	id = exalted_subjects.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_beneficiary }
		is_subject_type = exalted_subject_beneficiary
	}

	immediate = {
		log = "exalted_subjects.10: [This.GetName] is becoming Beneficiary of [From.GetName]"
		
		# Set some pops to Xenophile
		while = {
			count = @NumPopsShiftedMany
			random_owned_pop = {
				limit = {
					NOT = {
						has_ethic = ethic_xenophile
					}
				}

				pop_force_add_ethic = ethic_xenophile
			}
		}

		# Hard Remove Xenophobe
		if = {
			limit = {
				has_ethic = ethic_fanatic_xenophobe
			}
			
			country_remove_ethic = ethic_fanatic_xenophobe
			log = "exalted_subjects.18: [This.GetName] no longer fanatic xenophobe"
		}
		else_if = {
			limit = {
				has_ethic = ethic_xenophobe
			 }

			country_remove_ethic = ethic_xenophobe
			log = "exalted_subjects.18: [This.GetName] no longer xenophobe"
		}

		# Make country Xenophile
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_xenophile
				}
			}
			log = "exalted_subjects.10: [This.GetName] made xenophile"
			country_add_ethic = ethic_xenophile
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_xenophile
			log = "exalted_subjects.18: [This.GetName] set to fanatic xenophile"
		}

		set_country_flag = exalted_beneficiary
	}
}

# 11 Becoming Dominion
country_event = {
	id = exalted_subjects.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_dominion }
		is_subject_type = exalted_subject_dominion
	}

	immediate = {
		log = "exalted_subjects.11: [This.GetName] is becoming Dominion to [From.GetName]"

		# Set some pops to Authoritarian
		while = {
			count = @NumPopsShiftedSome
			random_owned_pop = {
				limit = {
					NOR = {
						has_ethic = ethic_authoritarian
						has_ethic = ethic_spiritualist
					}
				}

				pop_force_add_ethic = ethic_authoritarian
			}
		}

		# Set some pops to Spiritualist
		while = {
			count = @NumPopsShiftedSome
			random_owned_pop = {
				limit = {
					NOR = {
						has_ethic = ethic_authoritarian
						has_ethic = ethic_spiritualist
					}
				}

				pop_force_add_ethic = ethic_spiritualist
			}
		}

		# Hard Remove Egalitarian
		if = {
			limit = {
				has_ethic = ethic_fanatic_egalitarian
			}
			
			country_remove_ethic = ethic_fanatic_egalitarian
			log = "exalted_subjects.11: [This.GetName] no longer fanatic egalitarian"
		}
		else_if = {
			limit = {
				has_ethic = ethic_egalitarian
			 }

			country_remove_ethic = ethic_egalitarian
			log = "exalted_subjects.11: [This.GetName] no longer egalitarian"
		}

		# Make country Authoritarian
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_authoritarian
					has_ethic = ethic_authoritarian
				}
			}
			log = "exalted_subjects.11: [This.GetName] set to authoritarian"
			country_add_ethic = ethic_authoritarian
		}

		# Hard Remove Materialist
		if = {
			limit = {
				has_ethic = ethic_fanatic_materialist
			}
			
			country_remove_ethic = ethic_fanatic_materialist
			log = "exalted_subjects.11: [This.GetName] no longer fanatic materialist"
		}
		else_if = {
			limit = {
				has_ethic = ethic_materialist
			 }

			country_remove_ethic = ethic_materialist
			log = "exalted_subjects.11: [This.GetName] no longer materialist"
		}

		# Make country Spiritualist
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_spiritualist
					has_ethic = ethic_spiritualist
				}
			}
			country_add_ethic = ethic_spiritualist
			log = "exalted_subjects.11: [This.GetName] set to spiritualist"
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_spiritualist
			log = "exalted_subjects.11: [This.GetName] set to fanatic spiritualist"
		}

		set_country_flag = exalted_dominion
		change_government = {
			authority = auth_imperial
			civics = {
				civic = civic_imperial_cult
				civic = random
			}
		}

		# Note Ruler/Heir
		overlord = {
			if = {
				limit = {
					exists = ruler
				}
				ruler = {
					save_event_target_as = exalted_domination_overlord_ruler
				}
			}
		}

		# Execute subject's ruler
		country_event = { id = exalted_subjects.110 days = 1 }
	}
}

# 12 Becoming Special Administrative Region
country_event = {
	id = exalted_subjects.12
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_special_administrative_region }
		is_subject_type = exalted_subject_special_administrative_region
	}

	immediate = {
		log = "exalted_subjects.12: [This.GetName] is becoming Special Administrative Region of [From.GetName]"
		
		# Set some pops to Pacifists
		while = {
			count = @NumPopsShiftedMany
			random_owned_pop = {
				limit = {
					NOT = {
						has_ethic = ethic_pacifist
					}
				}

				pop_force_add_ethic = ethic_pacifist
			}
		}

		# Hard Remove Militarist
		if = {
			limit = {
				has_ethic = ethic_fanatic_militarist
			}
			
			country_remove_ethic = ethic_fanatic_militarist
			log = "exalted_subjects.18: [This.GetName] no longer fanatic militarist"
		}
		else_if = {
			limit = {
				has_ethic = ethic_militarist
			 }

			country_remove_ethic = ethic_militarist
			log = "exalted_subjects.18: [This.GetName] no longer militarist"
		}

		# Make country Pacifist
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_pacifist
					has_ethic = ethic_pacifist
				}
			}
			log = "exalted_subjects.12: [This.GetName] made pacifist"
			country_add_ethic = ethic_pacifist
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_pacifist
			log = "exalted_subjects.18: [This.GetName] set to fanatic pacifist"
		}

		set_country_flag = exalted_special_administrative_region
		
		change_government = {
			civics = {
				civic = civic_mostly_harmless
				civic = random
			}
		}
	}
}

# 13 Becoming Warden
country_event = {
	id = exalted_subjects.13
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_warden }
		is_subject_type = exalted_subject_warden
	}

	immediate = {
		log = "exalted_subjects.13: [This.GetName] is becoming Warden of [From.GetName]"
		
		# Set some pops to Militarist
		while = {
			count = @NumPopsShiftedMany
			random_owned_pop = {
				limit = {
					NOT = {
						has_ethic = ethic_militarist
					}
				}

				pop_force_add_ethic = ethic_militarist
			}
		}

		# Hard Remove Pacifist
		if = {
			limit = {
				has_ethic = ethic_fanatic_pacifist
			}
			
			country_remove_ethic = ethic_fanatic_pacifist
			log = "exalted_subjects.18: [This.GetName] no longer fanatic pacifist"
		}
		else_if = {
			limit = {
				has_ethic = ethic_pacifist
			 }

			country_remove_ethic = ethic_pacifist
			log = "exalted_subjects.18: [This.GetName] no longer pacifist"
		}

		# Make country Militarist
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_militarist
					has_ethic = ethic_militarist
				}
			}
			log = "exalted_subjects.13: [This.GetName] made militarist"
			country_add_ethic = ethic_militarist
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_militarist
			log = "exalted_subjects.18: [This.GetName] set to fanatic militarist"
		}

		set_country_flag = exalted_warden
		change_government = {
			civics = {
				civic = civic_distinguished_admiralty
				civic = civic_stellar_guardian
			}
		}
	}
}

# 14 Becoming Automated Assembler
country_event = {
	id = exalted_subjects.14
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_automated_assembler }
		is_subject_type = exalted_subject_automated_assembler
	}

	immediate = {
		log = "exalted_subjects.14: [This.GetName] is becoming Automated Assembler for [From.GetName]"
		
		if = {
			limit = {
				overlord = {
					has_authority = auth_machine_intelligence
					has_ethic = ethic_gestalt_consciousness
				}
			}

			modify_species = {
				species = THIS
				change_scoped_species = no
			}
		}
		else = {
			modify_species = {
				species = THIS
				remove_trait = trait_machine_unit
				add_trait = trait_mechanical
			}
		}

		last_created_species = {
			save_global_event_target_as = "exalted_subjects_automated_assembler_@from"
		}
		log = "exalted_subjects.14: Created species as [event_target:exalted_subjects_automated_assembler_@from.GetName]"

		set_country_flag = exalted_automated_assembler
	}
}

# 15 Becoming Remote Archive
country_event = {
	id = exalted_subjects.15
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_remote_archive }
		is_subject_type = exalted_subject_remote_archive
	}

	immediate = {
		log = "exalted_subjects.15: [This.GetName] is becoming Remote Archive for [From.GetName]"
		set_country_flag = exalted_remote_archive
	}
}

# 16 Becoming Symbiont
country_event = {
	id = exalted_subjects.16
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_symbiont }
		is_subject_type = exalted_subject_symbiont
	}

	immediate = {
		log = "exalted_subjects.16: [This.GetName] is becoming Symbiont for [From.GetName]"

		set_country_flag = exalted_symbiont
	}
}

# 17 Becoming Pet
country_event = {
	id = exalted_subjects.17
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_pet }
		is_subject_type = exalted_subject_pet
	}

	immediate = {
		log = "exalted_subjects.17: [This.GetName] is becoming Pet for [From.GetName]"
		
		set_country_flag = exalted_pet
	}
}

# 18 Becoming Noble House
country_event = {
	id = exalted_subjects.18
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_house }
		is_subject_type = exalted_subject_noble_house
	}

	immediate = {
		log = "exalted_subjects.18: [This.GetName] is becoming Noble House of [From.GetName]"

		# Hard Remove Egalitarian
		if = {
			limit = {
				has_ethic = ethic_fanatic_egalitarian
			}
			
			country_remove_ethic = ethic_fanatic_egalitarian
			log = "exalted_subjects.18: [This.GetName] no longer fanatic egalitarian"
		}
		else_if = {
			limit = {
				has_ethic = ethic_egalitarian
			 }

			country_remove_ethic = ethic_egalitarian
			log = "exalted_subjects.18: [This.GetName] no longer egalitarian"
		}

		# Make country Authoritarian
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_authoritarian
					has_ethic = ethic_authoritarian
				}
			}
			log = "exalted_subjects.18: [This.GetName] set to authoritarian"
			country_add_ethic = ethic_authoritarian
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_authoritarian
			log = "exalted_subjects.18: [This.GetName] set to fanatic authoritarian"
		}

		set_country_flag = exalted_house
		change_government = {
			authority = auth_imperial
			civics = random
		}
	}
}

# 19 Becoming Cultural Conservation
country_event = {
	id = exalted_subjects.19
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_cultural_conservation }
		is_subject_type = exalted_subject_cultural_conservation
	}

	immediate = {
		log = "exalted_subjects.19: [This.GetName] is becoming Cultural Conservation of [From.GetName]"
		
		set_country_flag = exalted_cultural_conservation
		add_modifier = { modifier = modifier_exalted_cultural_conservation days = -1 }
	}
}

# 20 Becoming Exarchate
country_event = {
	id = exalted_subjects.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_exarchate }
		is_subject_type = exalted_subject_exarchate
	}

	immediate = {
		log = "exalted_subjects.20: [This.GetName] is becoming Exarchate to [From.GetName]"

		# Set some pops to Egalitarian
		while = {
			count = @NumPopsShiftedSome
			random_owned_pop = {
				limit = {
					NOR = {
						has_ethic = ethic_egalitarian
						has_ethic = ethic_spiritualist
					}
				}

				pop_force_add_ethic = ethic_egalitarian
			}
		}

		# Set some pops to Spiritualist
		while = {
			count = @NumPopsShiftedSome
			random_owned_pop = {
				limit = {
					NOR = {
						has_ethic = ethic_egalitarian
						has_ethic = ethic_spiritualist
						is_robot_pop = no
					}
				}

				pop_force_add_ethic = ethic_spiritualist
			}
		}

		# Hard Remove Authoritarian
		if = {
			limit = {
				has_ethic = ethic_fanatic_authoritarian
			}
			
			country_remove_ethic = ethic_fanatic_authoritarian
			log = "exalted_subjects.11: [This.GetName] no longer fanatic authoritarian"
		}
		else_if = {
			limit = {
				has_ethic = ethic_authoritarian
			 }

			country_remove_ethic = ethic_authoritarian
			log = "exalted_subjects.11: [This.GetName] no longer authoritarian"
		}

		# Make country Egalitarian
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_egalitarian
					has_ethic = ethic_egalitarian
				}
			}
			log = "exalted_subjects.11: [This.GetName] set to egalitarian"
			country_add_ethic = ethic_egalitarian
		}

		# Hard Remove Materialist
		if = {
			limit = {
				has_ethic = ethic_fanatic_materialist
			}
			
			country_remove_ethic = ethic_fanatic_materialist
			log = "exalted_subjects.11: [This.GetName] no longer fanatic materialist"
		}
		else_if = {
			limit = {
				has_ethic = ethic_materialist
			 }

			country_remove_ethic = ethic_materialist
			log = "exalted_subjects.11: [This.GetName] no longer materialist"
		}

		# Make country Spiritualist
		if = {
			limit = {
				NOR = {
					has_ethic = ethic_fanatic_spiritualist
					has_ethic = ethic_spiritualist
				}
			}
			country_add_ethic = ethic_spiritualist
			log = "exalted_subjects.11: [This.GetName] set to spiritualist"
		}

		if = {
			limit = {
				num_ethics <= 2
			}
			country_add_ethic = ethic_fanatic_egalitarian
			log = "exalted_subjects.11: [This.GetName] set to fanatic egalitarian"
		}

		set_country_flag = exalted_exarchate
	}
}

# 21 Becoming Xenoharvest
country_event = {
	id = exalted_subjects.21
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = exalted_xenoharvest }
		is_subject_type = exalted_subject_xenoharvest
	}

	immediate = {
		log = "exalted_subjects.21: [This.GetName] is becoming Xenoharvest for [From.GetName]"

		set_country_flag = exalted_xenoharvest
	}
}

# 100 Beneficiary - Once a decade a leader will flee to greener pasture; called by on_decade_pulse_country
country_event = {
	id = exalted_subjects.100
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		exists = overlord
		is_subject_type = exalted_subject_beneficiary
		is_gestalt = no
	}

	immediate = {
		log = "exalted_subjects.100: [This.GetName] is going to have a leader defect..."
		
		save_event_target_as = exalted_domination_fleeing_leader_home
		overlord = {
			save_event_target_as = exalted_domination_fleeing_leader_destination
		}

		random_owned_leader = {
			limit = {
				NOR = {
					leader_class = envoy
					leader_class = ruler
					has_trait = leader_trait_admiral_brainslug
					has_trait = leader_trait_general_brainslug
					has_trait = leader_trait_governor_brainslug
					has_trait = leader_trait_scientist_brainslug
					has_trait = leader_trait_admiral_chosen
					has_trait = leader_trait_general_chosen
					has_trait = leader_trait_governor_chosen
					has_trait = leader_trait_scientist_chosen
					has_trait = leader_trait_governor_gray
				}
			}

			save_event_target_as = exalted_domination_fleeing_leader

			if = {
				limit = {
					leader_class = scientist
				}

				FROM = {
					country_event = { id = exalted_subjects.101 days = @BeneficiaryDefectionMin random = @BeneficiaryDefectionVariance }
				}
			}
			else_if = {
				limit = {
					leader_class = admiral
				}

				FROM = {
					country_event = { id = exalted_subjects.103 days = @BeneficiaryDefectionMin random = @BeneficiaryDefectionVariance }
				}
			}
			else_if = {
				limit = {
					leader_class = governor
				}

				FROM = {
					country_event = { id = exalted_subjects.105 days = @BeneficiaryDefectionMin random = @BeneficiaryDefectionVariance }
				}
			}
			else_if = {
				limit = {
					leader_class = general
				}

				FROM = {
					country_event = { id = exalted_subjects.107 days = @BeneficiaryDefectionMin random = @BeneficiaryDefectionVariance }
				}
			}
		}
	}
}

# 101 Beneficiary - Scientist Defected
country_event = {
	id = exalted_subjects.101
	is_triggered_only = yes

	title = exalted_subjects.100a.name
	desc = exalted_subjects.101.desc
	picture = GFX_evt_unidentified_monster

	trigger = {
		is_gestalt = no
		exists = overlord
		has_overlord = event_target:exalted_domination_fleeing_leader_destination
		is_subject_type = exalted_subject_beneficiary
	}

	immediate = {
		log = "exalted_subjects.101: Scientist [event_target:exalted_domination_fleeing_leader.GetName] fleeing to [event_target:exalted_domination_fleeing_leader_destination.GetName]"
		event_target:exalted_domination_fleeing_leader = {
			exile_leader_as = exalted_domination_fled_leader
		}
		overlord = { country_event = { id = exalted_subjects.102 days = @BeneficiaryArrivalMin random = @BeneficiaryArrivalVariance } }
	}

	option = {
		name = exalted_subjects.100a.choice
	}
}

# 102 Beneficiary - Scientist Arrived at Overlord
country_event = {
	id = exalted_subjects.102
	is_triggered_only = yes

	title = exalted_subjects.100b.name
	desc = exalted_subjects.102.desc
	picture = GFX_evt_board_meeting

	trigger = {
		is_overlord_to = event_target:exalted_domination_fleeing_leader_home
		event_target:exalted_domination_fleeing_leader_home = {
			is_subject_type = exalted_subject_beneficiary
		}
	}

	immediate = {
		log = "exalted_subjects.102: Scientist [event_target:exalted_domination_fleeing_leader] has fleed to [This.GetName]"
		
		clone_leader = {
			target = event_target:exalted_domination_fleeing_leader
			class = scientist
		}
	}

	option = {
		name = exalted_subjects.100b.choice
	}
}

# 103 Beneficiary - Admiral Defected
country_event = {
	id = exalted_subjects.103
	is_triggered_only = yes

	title = exalted_subjects.100a.name
	desc = exalted_subjects.103.desc
	picture = GFX_evt_unidentified_monster

	trigger = {
		is_gestalt = no
		exists = overlord
		has_overlord = event_target:exalted_domination_fleeing_leader_destination
		is_subject_type = exalted_subject_beneficiary
	}

	immediate = {
		log = "exalted_subjects.101: Admiral [event_target:exalted_domination_fleeing_leader.GetName] fleeing to [event_target:exalted_domination_fleeing_leader_destination.GetName]"
		event_target:exalted_domination_fleeing_leader = {
			exile_leader_as = exalted_domination_fled_leader
		}
		overlord = { country_event = { id = exalted_subjects.104 days = @BeneficiaryArrivalMin random = @BeneficiaryArrivalVariance } }
	}

	option = {
		name = exalted_subjects.100a.choice
	}
}

# 104 Beneficiary - Admiral Arrived at Overlord
country_event = {
	id = exalted_subjects.104
	is_triggered_only = yes

	title = exalted_subjects.100b.name
	desc = exalted_subjects.104.desc
	picture = GFX_evt_board_meeting

	trigger = {
		is_overlord_to = event_target:exalted_domination_fleeing_leader_home
		event_target:exalted_domination_fleeing_leader_home = {
			is_subject_type = exalted_subject_beneficiary
		}
	}

	immediate = {
		log = "exalted_subjects.104: Admiral [event_target:exalted_domination_fleeing_leader] has fleed to [This.GetName]"
		
		clone_leader = {
			target = event_target:exalted_domination_fleeing_leader
			class = admiral
		}
	}

	option = {
		name = exalted_subjects.100b.choice
	}
}

# 105 Beneficiary - Governor Defected
country_event = {
	id = exalted_subjects.105
	is_triggered_only = yes

	title = exalted_subjects.100a.name
	desc = exalted_subjects.105.desc
	picture = GFX_evt_unidentified_monster

	trigger = {
		is_gestalt = no
		exists = overlord
		has_overlord = event_target:exalted_domination_fleeing_leader_destination
		is_subject_type = exalted_subject_beneficiary
	}

	immediate = {
		log = "exalted_subjects.101: Governor [event_target:exalted_domination_fleeing_leader.GetName] fleeing to [event_target:exalted_domination_fleeing_leader_destination.GetName]"
		event_target:exalted_domination_fleeing_leader = {
			exile_leader_as = exalted_domination_fled_leader
		}
		overlord = { country_event = { id = exalted_subjects.106 days = @BeneficiaryArrivalMin random = @BeneficiaryArrivalVariance } }
	}

	option = {
		name = exalted_subjects.100a.choice
	}
}

# 106 Beneficiary - Governor Arrived at Overlord
country_event = {
	id = exalted_subjects.106
	is_triggered_only = yes

	title = exalted_subjects.100b.name
	desc = exalted_subjects.106.desc
	picture = GFX_evt_board_meeting

	trigger = {
		is_overlord_to = event_target:exalted_domination_fleeing_leader_home
		event_target:exalted_domination_fleeing_leader_home = {
			is_subject_type = exalted_subject_beneficiary
		}
	}

	immediate = {
		log = "exalted_subjects.106: Governor [event_target:exalted_domination_fleeing_leader] has fleed to [This.GetName]"
		
		clone_leader = {
			target = event_target:exalted_domination_fleeing_leader
			class = governor
		}
	}

	option = {
		name = exalted_subjects.100b.choice
	}
}

# 107 Beneficiary - General Defected
country_event = {
	id = exalted_subjects.107
	is_triggered_only = yes

	title = exalted_subjects.100a.name
	desc = exalted_subjects.107.desc
	picture = GFX_evt_unidentified_monster

	trigger = {
		is_gestalt = no
		exists = overlord
		has_overlord = event_target:exalted_domination_fleeing_leader_destination
		is_subject_type = exalted_subject_beneficiary
	}

	immediate = {
		log = "exalted_subjects.101: General [event_target:exalted_domination_fleeing_leader.GetName] fleeing to [event_target:exalted_domination_fleeing_leader_destination.GetName]"
		event_target:exalted_domination_fleeing_leader = {
			exile_leader_as = exalted_domination_fled_leader
		}
		overlord = { country_event = { id = exalted_subjects.108 days = @BeneficiaryArrivalMin random = @BeneficiaryArrivalVariance } }
	}

	option = {
		name = exalted_subjects.100a.choice
	}
}

# 108 Beneficiary - General Arrived at Overlord
country_event = {
	id = exalted_subjects.108
	is_triggered_only = yes

	title = exalted_subjects.100b.name
	desc = exalted_subjects.108.desc
	picture = GFX_evt_board_meeting

	trigger = {
		is_overlord_to = event_target:exalted_domination_fleeing_leader_home
		event_target:exalted_domination_fleeing_leader_home = {
			is_subject_type = exalted_subject_beneficiary
		}
	}

	immediate = {
		log = "exalted_subjects.108: General [event_target:exalted_domination_fleeing_leader] has fleed to [This.GetName]"
		
		clone_leader = {
			target = event_target:exalted_domination_fleeing_leader
			class = general
		}
	}

	option = {
		name = exalted_subjects.100b.choice
	}
}

# 110 Dominion - Just vassalized, set this Dominion's ruler to same as Overlord
country_event = {
	id = exalted_subjects.110
	title = exalted_subjects.110.name
	desc = exalted_subjects.110.desc
	picture = GFX_evt_signing
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_dominion
	}

	immediate = {
		log = "exalted_subjects.110: This [This.GetName] From [From.GetName] Ruler [event_target:exalted_domination_overlord_ruler.GetName]"
		if = {
			limit = {
				exists = ruler
			}
			ruler = {
				kill_leader = { show_notification = yes }
			}
		}

		clone_leader = {
			target = event_target:exalted_domination_overlord_ruler
			class = ruler
			leader_age_max = 1000
		}

		assign_leader = last_created_leader
	}

	option = {
		name = exalted_subjects.110.choice
	}
}

# 111 Dominion - Overlord's leader changed, reset all dominions' ruler
country_event = {
	id = exalted_subjects.111
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_overlord = yes
		any_subject = {
			is_subject_type = exalted_subject_dominion
		}
		exists = ruler
	}

	immediate = {
		ruler = {
			save_event_target_as = exalted_domination_overlord_ruler
		}
		
		log = "exalted_subjects.111: [event_target:exalted_domination_overlord_ruler.GetName] is now ruler of [This.GetName]"
		
		every_subject = {
			limit = {
				is_subject_type = exalted_subject_dominion
			}

			if = {
				limit = {
					exists = ruler
				}
				log = "exalted_subjects.111: Removing Ruler [From.GetName] of [This.GetName]"
				ruler = {
					kill_leader = { show_notification = no }
				}
			}

			log = "exalted_subjects.111: Replacing Ruler [From.GetName] of [This.GetName]"
			clone_leader = {
				target = event_target:exalted_domination_overlord_ruler
				class = ruler
				leader_age_max = 1000
			}
	
			assign_leader = last_created_leader
		}
	}
}

# 112 Dominion - Overlord's ruler died/removed
country_event = {
	id = exalted_subjects.112
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_overlord = yes
		any_subject = {
			is_subject_type = exalted_subject_dominion
		}
		exists = FROM
		FROM = {
			leader_class = ruler
		}
	}

	immediate = {
		log = "exalted_subjects.112: [From.GetName] of [This.GetName] no longer rules"

		every_subject = {
			limit = {
				is_subject_type = exalted_subject_dominion
			}

			if = {
				limit = {
					exists = ruler
				}
				log = "exalted_subjects.112: Removing Ruler [From.GetName] of [This.GetName]"
				ruler = {
					kill_leader = { show_notification = no }
				}
			}
		}
	}
}

# 140 Automated Assembler - Pops/armies arrived
country_event = {
	id = exalted_subjects.140
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_automated_assembler
	}

	immediate = {
		log = "exalted_subjects.140: [This.GetName] has sent robot servants"

		random_owned_pop = {
			limit = {
				is_being_purged = no
				is_robotic_species = yes
			}

			resettle_pop = {
				pop = THIS
				planet = event_target:exalted_domination_overlord_capital
			}

			change_species = event_target:exalted_subjects_automated_assembler_@from
		}

		if = {
			limit = {
				has_technology = "tech_biomechanics"
			}

			overlord = {
				create_fleet = {
					effect = {
						set_owner = FROM
						while = {
							count = 2
							create_army_transport = {
								army_type = "machine_assault_3"
							}
						}
					}
				}

				create_message = {
					type = ARMY_RECRUITMENT
					localization = MESSAGE_ROBOTIC_SERVANTS_ARRIVED
					days = 30
					target = THIS.capital_scope

					variable = {
						type = name
						localization = SUBJECT
						scope = PREV
					}

					variable = {
						type = name
						localization = LOCATION
						scope = THIS.capital_scope
					}
				}
			}
		}
		else_if = {
			limit = { 
				has_technology = "tech_adaptive_combat_algorithms"
			}

			overlord = {
				create_fleet = {
					effect = {
						set_owner = FROM
						while = {
							count = 2
							create_army_transport = {
								army_type = "machine_assault_2"
							}
						}
					}
				}

				create_message = {
					type = ARMY_RECRUITMENT
					localization = MESSAGE_ROBOTIC_SERVANTS_ARRIVED
					days = 30
					target = THIS.capital_scope

					variable = {
						type = name
						localization = SUBJECT
						scope = PREV
					}

					variable = {
						type = name
						localization = LOCATION
						scope = THIS.capital_scope
					}
				}
			}
		}
		else = {
			overlord = {
				create_fleet = {
					effect = {
						set_owner = FROM
						while = {
							count = 2
							create_army_transport = {
								army_type = "machine_assault_1"
							}
						}
					}
				}

				create_message = {
					type = ARMY_RECRUITMENT
					localization = MESSAGE_ROBOTIC_SERVANTS_ARRIVED
					days = 30
					target = THIS.capital_scope

					variable = {
						type = name
						localization = SUBJECT
						scope = PREV
					}

					variable = {
						type = name
						localization = LOCATION
						scope = THIS.capital_scope
					}
				}
			}
		}

		add_opinion_modifier = {
			who = overlord
			modifier = opinion_subject_forced_to_contribute_pops
		}
	}
}

# 141 Automated Assembler - Pops produced for Overlord every 2 years mid game
country_event = {
	id = exalted_subjects.141
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_overlord = yes
		any_subject = {
			is_subject_type = exalted_subject_automated_assembler
		}
	}

	immediate = {
		log = "exalted_subjects.141: [This.GetName] demands robot servants"

		capital_scope = {
			save_event_target_as = exalted_domination_overlord_capital
		}

		every_subject = {
			limit = {
				is_subject_type = exalted_subject_automated_assembler
			}

			country_event = { id = exalted_subjects.140 days = 1 random = @AutomatedAssemblerDeliveryVariance }
		}
	}
}

# 150 Remote Archive - Minor artifacts being sent to overlord
country_event = {
	id = exalted_subjects.150
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		host_has_dlc = "Ancient Relics Story Pack"
		is_subject_type = exalted_subject_remote_archive
	}

	immediate = {
		log = "exalted_subjects.150: [This.GetName] is sending minor artifacts"
		country_event = { id = exalted_subjects.151 days = @MachineCuratorArtifactsMin random = @MachineCuratorArtifactsMax }
	}
}

# 151 Remote Archive - Minor artifacts have arrived at overlord
country_event = {
	id = exalted_subjects.151
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_remote_archive
	}

	immediate = {
		overlord = {
			log = "exalted_subjects.151: [This.GetName] received minor artifacts from [From.GetName]"

			random_list = {
				60 = {
					add_resource = {
						minor_artifacts = 1
					}
				}

				30 = {
					add_resource = {
						minor_artifacts = 2
					}
				}

				10 = {
					add_resource = {
						minor_artifacts = 3
					}
				}
			}

			create_message = {
				type = DIPLO_ACTION_OFFER_TRADE_DEAL
				localization = MESSAGE_MINOR_ARTIFACTS_OFFERING
				days = 30
				target = capital_scope

				variable = {
					type = name
					localization = SUBJECT
					scope = PREV
				}
			}
		}
	}
}

# 160 Symbiont - Considering a new Symbiotic Bond
country_event = {
	id = exalted_subjects.160
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_symbiont
	}

	immediate = {
		log = "exalted_subjects.160: [This.GetName] is considering a new symbioic bond"
		country_event = { id = exalted_subjects.161 days = @SymbioticBondsMin random = @SymbioticBondsVariance }
	}
}

# 161 Symbiont - Leader gains Symbiotic Bond trait
country_event = {
	id = exalted_subjects.161
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_symbiont
	}

	immediate = {
		overlord = {
			log = "exalted_subjects.161: [From.GetName] is ready to bond with a leader"

			random_owned_leader = {
				limit = {
					NOR = {
						has_trait = leader_trait_admiral_symbiotic_bond
						has_trait = leader_trait_general_symbiotic_bond
						has_trait = leader_trait_governor_symbiotic_bond
						has_trait = leader_trait_scientist_symbiotic_bond
						
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_scientist_synthetic
					}
				}

				if = {
					limit = {
						leader_class = admiral
					}

					add_trait = leader_trait_admiral_symbiotic_bond
				}
				else_if = {
					limit = {
						leader_class = general
					}

					add_trait = leader_trait_general_symbiotic_bond
				}
				else_if = {
					limit = {
						leader_class = governor
					}

					add_trait = leader_trait_governor_symbiotic_bond
				}
				else_if = {
					limit = {
						leader_class = scientist
					}

					add_trait = leader_trait_scientist_symbiotic_bond
				}

				log = "exalted_subjects.161: [From.GetName] bonded with [This.GetName]"
				create_message = {
					type = LEADER_LEVEL_UP
					localization = MESSAGE_BONDED_WITH_LEADER
					days = 30
					target = this
	
					variable = {
						type = name
						localization = SUBJECT
						scope = FROM
					}

					variable = {
						type = name
						localization = LEADER
						scope = THIS
					}
				}
			}
		}
	}
}

# 180 House - Overlord has created new House, choose a leader as ruler or leave vassalized's ruler alone
country_event = {
	id = exalted_subjects.180
	title = exalted_subjects.180.name
	desc = exalted_subjects.180.desc
	picture = GFX_evt_signing
	is_triggered_only = yes

	trigger = {
		exists = event_target:exalted_domination_declared_house
		#is_overlord_to = event_target:exalted_domination_declared_house
	}

	immediate = {
		log = "exalted_subjects.180: This [This.GetName] From [From.GetName] Ruler [event_target:exalted_domination_overlord_ruler.GetName]"
	}

	option = {
		name = exalted_subjects.180adm1.choice
		trigger = { exists = event_target:exalted_domination_house_adm1 }

		hidden_effect = {
			event_target:exalted_domination_house_adm1 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180adm2.choice
		trigger = { exists = event_target:exalted_domination_house_adm2 }

		hidden_effect = {
			event_target:exalted_domination_house_adm2 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180adm3.choice
		trigger = { exists = event_target:exalted_domination_house_adm3 }

		hidden_effect = {
			event_target:exalted_domination_house_adm3 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180adm4.choice
		trigger = { exists = event_target:exalted_domination_house_adm4 }

		hidden_effect = {
			event_target:exalted_domination_house_adm4 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180adm5.choice
		trigger = { exists = event_target:exalted_domination_house_adm5 }

		hidden_effect = {
			event_target:exalted_domination_house_adm5 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180gov1.choice
		trigger = { exists = event_target:exalted_domination_house_gov1 }

		hidden_effect = {
			event_target:exalted_domination_house_gov1 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180gov2.choice
		trigger = { exists = event_target:exalted_domination_house_gov2 }

		hidden_effect = {
			event_target:exalted_domination_house_gov2 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180gov3.choice
		trigger = { exists = event_target:exalted_domination_house_gov3 }

		hidden_effect = {
			event_target:exalted_domination_house_gov3 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180gov4.choice
		trigger = { exists = event_target:exalted_domination_house_gov4 }

		hidden_effect = {
			event_target:exalted_domination_house_gov4 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180gov5.choice
		trigger = { exists = event_target:exalted_domination_house_gov5 }

		hidden_effect = {
			event_target:exalted_domination_house_gov5 = {
				save_event_target_as = exalted_domination_house_ruler
				exile_leader_as = exalted_domination_house_dismissed_ruler
			}
		}
	}

	option = {
		name = exalted_subjects.180.choice
	}

	after = {
		if = {
			limit = {
				exists = event_target:exalted_domination_house_ruler
			}

			event_target:exalted_domination_declared_house = {
				country_event = { id = exalted_subjects.181 days = 1 }
			}
		}
		else = {
			event_target:exalted_domination_declared_house = {
				country_event = { id = exalted_subjects.182 days = 1 }
			}
		}
	}
}

# 181 House - New ruler appointed, execute vassal's current ruler and heir
country_event = {
	id = exalted_subjects.181
	title = exalted_subjects.181.name
	desc = exalted_subjects.181.desc
	picture = GFX_evt_signing
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_noble_house
		exists = event_target:exalted_domination_house_ruler
		exists = event_target:exalted_domination_main_species
	}

	immediate = {
		log = "exalted_subjects.181: This [This.GetName] From [From.GetName] Ruler [event_target:exalted_domination_house_ruler.GetName]"
		
		# Set dominant species for new rulers and heirs
		change_dominant_species = {
			species = event_target:exalted_domination_main_species
		}

		# Replace some capital pops with Overlord's species
		capital_scope = {
			while = {
				count = @NumPopsShiftedSome
				random_owned_pop = {
					limit = {
						species = {
							NOT = { is_same_value = event_target:exalted_domination_main_species }
						}
					}

					kill_pop = yes

					prev = {
						create_pop = {
							species = event_target:exalted_domination_main_species
						}

						last_created_pop = {
							pop_force_add_ethic = ethic_authoritarian
						}
					}
				}
			}
		}

		if = {
			limit = { exists = ruler }
			
			ruler = {
				kill_leader = { show_notification = yes }
			}
		}

		if = {
			limit = { exists = heir }

			heir = {
				kill_leader = { show_notification = no }
			}
		}

		# set appointed leader as new ruler of house
		clone_leader = {
			target = event_target:exalted_domination_house_ruler
			class = ruler
		}
	}

	option = {
		name = exalted_subjects.181.choice
	}
}

# 182 House - Existing ruler allowed to remain
country_event = {
	id = exalted_subjects.182
	title = exalted_subjects.182.name
	desc = exalted_subjects.182.desc
	picture = GFX_evt_signing
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_noble_house
	}

	immediate = {
		log = "exalted_subjects.182: This [This.GetName] From [From.GetName] Ruler [This.Ruler.GetName]"

		# Set some pops to Authoritarian
		while = {
			count = @NumPopsShiftedSome
			random_owned_pop = {
				limit = {
					NOT = {
						has_ethic = ethic_authoritarian
					}
				}

				pop_force_add_ethic = ethic_authoritarian
			}
		}
	}

	option = {
		name = exalted_subjects.182.choice
	}
}

# 4 Overlord routine; called by on_yearly_pulse_country
country_event = {
	id = exalted_subjects.183
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_overlord = yes
	}

	immediate = {
		# Make Houses of the same empire gradually hate each other
		every_subject = {
			limit = {
				is_subject_type = exalted_subject_noble_house
			}

			overlord = {
				every_subject = {
					limit = {
						is_subject_type = exalted_subject_noble_house
						NOT = { is_same_value = prevprev }
						has_communications = prevprev
					}

					add_opinion_modifier = {
						who = prevprev
						modifier = opinion_subject_opposing_house
					}
				}
			}
		}
	}
}

# 200 Exarchate - Overlord gets subject approval bonus from Exarchates
country_event = {
	id = exalted_subjects.200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_country_flag = exalted_exarchate_overlord
			AND = {
				is_overlord = yes
				any_subject = { is_subject_type = exalted_subject_exarchate }
			}
		}
	}

	immediate = {
		set_variable = { which = exalted_overlord_exarchate_count value = 0 }

		every_subject = {
			limit = {
				is_subject_type = exalted_subject_exarchate
			}

			overlord = {
				change_variable = { which = exalted_overlord_exarchate_count value = 1 }
			}
		}

		log = "exalted_subjects.200: This [This.GetName] has [This.exalted_overlord_exarchate_count] Exarchates"

		remove_modifier = modifier_exalted_exarchate_overlord_1
		remove_modifier = modifier_exalted_exarchate_overlord_2
		remove_modifier = modifier_exalted_exarchate_overlord_3
		remove_modifier = modifier_exalted_exarchate_overlord_4
		remove_modifier = modifier_exalted_exarchate_overlord_5
		remove_modifier = modifier_exalted_exarchate_overlord_6
		remove_modifier = modifier_exalted_exarchate_overlord_7
		remove_modifier = modifier_exalted_exarchate_overlord_8
		remove_modifier = modifier_exalted_exarchate_overlord_9
		remove_modifier = modifier_exalted_exarchate_overlord_10

		if = { 
			limit = { check_variable = { which = exalted_overlord_exarchate_count value >= 1 } }
			set_country_flag = exalted_exarchate_overlord
		}
		else = {
			remove_country_flag = exalted_exarchate_overlord
		}

		if = { 
			limit = { check_variable = { which = exalted_overlord_exarchate_count value >= 10 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_10 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 9 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_9 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 8 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_8 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 7 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_7 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 6 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_6 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 5 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_5 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 4 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_4 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 3 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_3 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 2 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_2 }
		}
		else_if = {
			limit = { check_variable = { which = exalted_overlord_exarchate_count value = 1 } }
			add_modifier = { modifier = modifier_exalted_exarchate_overlord_1 }
		}
	}
}

# 210 Xenoharvest - Pops arrived
country_event = {
	id = exalted_subjects.210
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject_type = exalted_subject_xenoharvest
	}

	immediate = {
		log = "exalted_subjects.210: [This.GetName] has sent organic sacrifices"

		random_owned_pop = {
			limit = {
				is_being_purged = no
				is_organic_species = yes
			}

			planet = {
				save_event_target_as = exalted_domination_abducted_from
			}

			resettle_pop = {
				pop = THIS
				planet = event_target:exalted_domination_abducted_to
			}

			prev = {
				add_opinion_modifier = {
					who = OVERLORD
					modifier = opinion_subject_forced_to_contribute_pops
				}

				create_message = {
					type = MESSAGE_TYPE_POP_ABDUCTED
					localization = MESSAGE_ORGANIC_SACRIFICES_ABDUCTED
					days = 30
					target = event_target:exalted_domination_abducted_from
	
					variable = {
						type = name
						localization = OVERLORD
						scope = OVERLORD
					}
	
					variable = {
						type = name
						localization = LOCATION
						scope = event_target:exalted_domination_abducted_from
					}
				}
		
				overlord = {
					create_message = {
						type = MESSAGE_TYPE_POP_ABDUCTED
						localization = MESSAGE_ORGANIC_SACRIFICES_ARRIVED
						days = 30
						target = THIS.capital_scope
		
						variable = {
							type = name
							localization = SUBJECT
							scope = PREV
						}
		
						variable = {
							type = name
							localization = LOCATION
							scope = event_target:exalted_domination_abducted_from
						}
					}
				}
			}
		}
	}
}

# 211 Xenoharvest - Pops produced for Overlord every 5 years mid game
country_event = {
	id = exalted_subjects.211
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_overlord = yes
		any_subject = {
			is_subject_type = exalted_subject_xenoharvest
		}
	}

	immediate = {
		log = "exalted_subjects.211: [This.GetName] demands organic sacrifices"

		capital_scope = {
			save_event_target_as = exalted_domination_abducted_to
		}

		every_subject = {
			limit = {
				is_subject_type = exalted_subject_xenoharvest
			}

			country_event = { id = exalted_subjects.210 days = 1 random = @AutomatedAssemblerDeliveryVariance }
		}
	}
}

# 900 Allow reselection of vassal type; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.900
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_advanced_vassal_offered
		is_subject = no
	}

	immediate = {
		log = "exalted_subjects.900: [This.GetName] is no longer vassal-type; allow advanced selection in the future"
		remove_country_flag = exalted_advanced_vassal_offered
		remove_country_flag = exalted_domination_difficulty_bonus

		remove_modifier = difficulty_captain
		remove_modifier = difficulty_commodore
		remove_modifier = difficulty_admiral
		remove_modifier = difficulty_grand_admiral
	}
}

# 901 Allow reselection of tributary type; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.901
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_advanced_tributary_offered
		is_subject = no
	}

	immediate = {
		log = "exalted_subjects.901: [This.GetName] is no longer tributary-type; allow advanced selection in the future"
		remove_country_flag = exalted_advanced_tributary_offered
		remove_country_flag = exalted_domination_difficulty_bonus

		remove_modifier = difficulty_captain
		remove_modifier = difficulty_commodore
		remove_modifier = difficulty_admiral
		remove_modifier = difficulty_grand_admiral
	}
}

# 902 Remove Benevolent Intervention if expired or country is no longer subject; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.902
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_benevolent_intervention_isactive
		NAND = {
			exists = overlord
			overlord = {
				has_edict = exalted_benevolent_intervention
			}
		}
	}

	immediate = {
		log = "exalted_subjects.902: Benevolent Intervention for [This.GetName] is expired"
		remove_country_flag = exalted_benevolent_intervention_isactive
		remove_modifier = modifier_exalted_benevolent_intervention
	}
}

# 903 Remove Developing Civilization Outreach if expired or country is no longer subject; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.903
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_developing_civilization_outreach_isactive
		NAND = {
			exists = overlord
			overlord = {
				has_edict = exalted_developing_civilization_outreach
			}
		}
	}

	immediate = {
		log = "exalted_subjects.903: Developing Civilization for [This.GetName] is expired"
		remove_country_flag = exalted_developing_civilization_outreach_isactive
		remove_modifier = modifier_exalted_developing_civilization_outreach
	}
}

# 904 Remove Military Aid if expired or country is no longer subject; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.904
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_military_aid_packages_isactive
		NAND = {
			exists = overlord
			overlord = {
				has_edict = exalted_military_aid_packages
			}
		}
	}

	immediate = {
		log = "exalted_subjects.904: Military Aid for [This.GetName] is expired"
		remove_country_flag = exalted_military_aid_packages_isactive
		remove_modifier = modifier_exalted_military_aid_package
	}
}

# 910 No longer Beneficiary; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.910
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_beneficiary
		NOT = { is_subject_type = exalted_subject_beneficiary }
	}

	immediate = {
		log = "exalted_subjects.910: [This.GetName] is no longer a Beneficiary"
		remove_country_flag = exalted_beneficiary
	}
}

# 911 No longer Cultural Conservation; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.911
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_cultural_conservation
		NOT = { is_subject_type = exalted_subject_cultural_conservation }
	}

	immediate = {
		log = "exalted_subjects.911: [This.GetName] is no longer a Cultural Conservation"
		remove_country_flag = exalted_cultural_conservation
		remove_modifier = modifier_exalted_cultural_conservation
	}
}

# 912 No longer Dominion; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.912
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_dominion
		NOT = { is_subject_type = exalted_subject_dominion }
	}

	immediate = {
		log = "exalted_subjects.912: [This.GetName] is no longer a Dominion"
		remove_country_flag = exalted_dominion
	}
}

# 913 No longer Exarchate; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.913
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_exarchate
		NOT = { is_subject_type = exalted_subject_exarchate }
	}

	immediate = {
		log = "exalted_subjects.913: [This.GetName] is no longer an Exarchate"
		remove_country_flag = exalted_exarchate
	}
}

# 914 Remove Noble House modifier if no longer subject; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.914
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_house
		NOT = { is_subject_type = exalted_subject_noble_house }
	}

	immediate = {
		log = "exalted_subjects.914: [This.GetName] is no longer a Noble House"
		remove_country_flag = exalted_house

		every_playable_country = {
			limit = {
				is_country_type = default
				has_opinion_modifier = {
					who = prev
					modifier = opinion_subject_opposing_house
				}
			}

			remove_opinion_modifier = {
				who = prev
				modifier = opinion_subject_opposing_house
			}

			prev = {
				remove_opinion_modifier = {
					who = prev
					modifier = opinion_subject_opposing_house
				}
			}
		}
	}
}

# 915 No longer SPA; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.915
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_special_administrative_region
		NOT = { is_subject_type = exalted_subject_special_administrative_region }
	}

	immediate = {
		log = "exalted_subjects.915: [This.GetName] is no longer a Special Administrative Region"
		remove_country_flag = exalted_special_administrative_region
	}
}

# 916 No longer Warden; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.916
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_warden
		NOT = { is_subject_type = exalted_subject_warden }
	}

	immediate = {
		log = "exalted_subjects.916: [This.GetName] is no longer a Warden"
		remove_country_flag = exalted_warden
	}
}

# 917 No longer Xenoharvest; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.917
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_xenoharvest
		NOT = { is_subject_type = exalted_subject_xenoharvest }
	}

	immediate = {
		log = "exalted_subjects.917: [This.GetName] is no longer a Xenoharvest"
		remove_country_flag = exalted_xenoharvest
	}
}

# 918 No longer Automated Assembler; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.918
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_automated_assembler
		NOT = { is_subject_type = exalted_subject_automated_assembler }
	}

	immediate = {
		log = "exalted_subjects.918: [This.GetName] is no longer an Automated Assembler"
		remove_country_flag = exalted_automated_assembler
	}
}

# 919 No longer Remote Archive; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.919
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_remote_archive
		NOT = { is_subject_type = exalted_subject_remote_archive }
	}

	immediate = {
		log = "exalted_subjects.919: [This.GetName] is no longer a Remote Archive"
		remove_country_flag = exalted_remote_archive
	}
}

# 920 No longer Pet; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.920
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_pet
		NOT = { is_subject_type = exalted_subject_pet }
	}

	immediate = {
		log = "exalted_subjects.920: [This.GetName] is no longer a Pet"
		remove_country_flag = exalted_pet
	}
}

# 921 No longer Symbiont; called by on_monthly_pulse_country
country_event = {
	id = exalted_subjects.921
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = exalted_symbiont
		NOT = { is_subject_type = exalted_subject_symbiont }
	}

	immediate = {
		log = "exalted_subjects.921: [This.GetName] is no longer a Symbiont"
		remove_country_flag = exalted_symbiont
	}
}
