namespace = complex_overmind

#overmind start
# set all the living standards
country_event = {
	id = complex_overmind.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		
			
		if = { limit = { owner = { has_origin = origin_hive_overmind } }
	ruler = { add_ruler_trait = leader_trait_ruler_overmind	}
	random_owned_pop = {
	limit = { species = { has_species_flag = overminded_flag } } 
	 
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}		
				
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
				
				set_migration_controls = {
				country = root.owner
				type = no
				}
				set_population_controls = {
				country = root.owner
				type = no
				}
					
	
				
			}


			}
	
	
	
		}
	}

planet_event = {
	id = complex_overmind.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { ## overmind
		limit = {
			owner = { has_origin = origin_hive_overmind	}
		}

		## clear everything out
		every_deposit = {
				limit = {is_deposit_type = d_hibernating_lithoids}
				remove_deposit = yes
				##add_deposit = d_hibernating_lithoids_remote
			}
		
		every_deposit = {
				limit = {is_deposit_type = d_collapsed_burrows}
				remove_deposit = yes
				##add_deposit = d_collapsed_burrows_remote
			}
			every_deposit = {
				limit = {is_deposit_type = d_decrepit_dwellings}
				remove_deposit = yes
				##add_deposit = d_collapsed_burrows_remote
			}

## create for remote drones
			
		if = {
			limit = { 
				owner = { has_lithoid_overminded_species = yes }
			}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids_remote
		}
		if = {limit = {  owner_species = { is_lithoid = no } }
			## remove default districts and rebuild them based on overminded pop		
			remove_district = district_farming
			remove_district = district_farming
			add_district = district_mining
			add_district = district_mining
			owner = { add_modifier = {   modifier = overmind_lithoids  days = -1 } }
			owner = { add_resource = { food = -200 } }
			owner = { add_resource = { minerals = 200 } }
		}

		
		
		}
		else = {
		if = {limit = { owner = {  owner_species = { is_lithoid = yes } } }
			## remove default districts and rebuild them based on overminded pop		
			add_district = district_farming
			add_district = district_farming
			remove_district = district_mining
			remove_district = district_mining
			## what about base resources
			owner = { add_modifier = {   modifier = overmind_biological  days = -1 } }
			owner = { add_resource = { minerals = -200 } }
			owner = { add_resource = { food = 200 } }
			
		}
		add_deposit = d_collapsed_burrows_remote
		
		}

	}
  }
}


# New Leaders Get erudite Trait
country_event = {
	id = complex_overmind.1000
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			species = { 
				has_trait = trait_hive_mind_overlord 
			}
		}
		 has_technology = "tech_genetic_resequencing"
	}

	immediate = {
		from = {
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
		}
	}
}


# gain genetic resequencing tech being a overmind
country_event = {
    id = complex_overmind.1001
	hide_window = yes

	is_triggered_only = yes 
    
    trigger = {
    	last_increased_tech = tech_genetic_resequencing
    	has_origin = origin_hive_overmind
    }

    immediate = {
    	
		owner_species = { save_event_target_as = owner_main_species }
		
		
		modify_species = {
				species = event_target:owner_main_species
				add_trait = trait_erudite
			}
		
		every_owned_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes
		}
		
		every_pool_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes			
		}
		
    }
}