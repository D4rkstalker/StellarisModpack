namespace = veru_misc


################
# Misc Events

# Client Kingdom Ruler Dies
# Executed as a leader has died
# This = Country
# From = Leader
country_event = {
	id = veru_misc.1000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ver_clientkingdom = yes
		from = { is_same_value = root.leader }
	}

	immediate = {
		save_event_target_as = chosen_subject
		overlord = {
			set_timed_country_flag = { flag = ck_desc days = 7 }
			country_event = { id = veru.6400 }
		}
	}
}

# Align Subject Policies
country_event = {
	id = veru_misc.2000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_subject = yes
		has_policy_allowed = yes
	}

	immediate = {
		
		# Diplomatic Stance
			if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_belligerent }
					NOT = { has_policy_flag = diplo_stance_belligerent }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_belligerent }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_belligerent cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_cooperative }
					NOT = { has_policy_flag = diplo_stance_cooperative }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_cooperative }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_cooperative cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_isolationist }
					NOT = { has_policy_flag = diplo_stance_isolationist }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_isolationist }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_isolationist cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_expansionist }
					NOT = { has_policy_flag = diplo_stance_expansionist }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_expansionist }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_expansionist cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_mercantile }
					NOT = { has_policy_flag = diplo_stance_mercantile }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_mercantile }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_mercantile cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_supremacist }
					NOT = { has_policy_flag = diplo_stance_supremacist }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_supremacist }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_supremacist cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = diplo_stance_hunger }
					NOT = { has_policy_flag = diplo_stance_hunger }
					can_set_policy = { policy = diplomatic_stance option = diplo_stance_hunger }
				}
				set_policy = { policy = diplomatic_stance option = diplo_stance_cooperative cooldown = yes }
			}
	
		# War Philosophy
			if = {
				limit = {
					overlord = { has_policy_flag = unrestricted_wars }
					NOT = { has_policy_flag = unrestricted_wars }
					can_set_policy = { policy = war_philosophy option = unrestricted_wars }
				}
				set_policy = { policy = war_philosophy option = unrestricted_wars cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = liberation_wars }
					NOT = { has_policy_flag = liberation_wars }
					can_set_policy = { policy = war_philosophy option = liberation_wars }
				}
				set_policy = { policy = war_philosophy option = liberation_wars cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = no_wars }
					NOT = { has_policy_flag = no_wars }
					can_set_policy = { policy = war_philosophy option = no_wars }
				}
				set_policy = { policy = war_philosophy option = no_wars cooldown = yes }
			}

		# War Doctrine --- ??? No Policy Flags?
			# if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = defense_in_depth_doctrine }
			# 		NOT = { has_policy_flag = defense_in_depth_doctrine }
			# 		can_set_policy = { policy = war_doctrine option = defense_in_depth_doctrine }
			# 	}
			# 	set_policy = { policy = war_doctrine option = defense_in_depth_doctrine cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = hit_and_run_doctrine }
			# 		NOT = { has_policy_flag = hit_and_run_doctrine }
			# 		can_set_policy = { policy = war_doctrine option = hit_and_run_doctrine }
			# 	}
			# 	set_policy = { policy = war_doctrine option = hit_and_run_doctrine cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = rapid_deployment_doctrine }
			# 		NOT = { has_policy_flag = rapid_deployment_doctrine }
			# 		can_set_policy = { policy = war_doctrine option = rapid_deployment_doctrine }
			# 	}
			# 	set_policy = { policy = war_doctrine option = rapid_deployment_doctrine cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = no_retreat_doctrine }
			# 		NOT = { has_policy_flag = no_retreat_doctrine }
			# 		can_set_policy = { policy = war_doctrine option = no_retreat_doctrine }
			# 	}
			# 	set_policy = { policy = war_doctrine option = no_retreat_doctrine cooldown = yes }
			# }

		# Orbital Bombardment
			if = {
				limit = {
					overlord = { has_policy_flag = orbital_bombardment_selective }
					NOT = { has_policy_flag = orbital_bombardment_selective }
					can_set_policy = { policy = orbital_bombardment option = orbital_bombardment_selective }
				}
				set_policy = { policy = orbital_bombardment option = orbital_bombardment_selective cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = orbital_bombardment_indiscriminate }
					NOT = { has_policy_flag = orbital_bombardment_indiscriminate }
					can_set_policy = { policy = orbital_bombardment option = orbital_bombardment_indiscriminate }
				}
				set_policy = { policy = orbital_bombardment option = orbital_bombardment_indiscriminate cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = orbital_bombardment_armageddon }
					NOT = { has_policy_flag = orbital_bombardment_armageddon }
					can_set_policy = { policy = orbital_bombardment option = orbital_bombardment_armageddon }
				}
				set_policy = { policy = orbital_bombardment option = orbital_bombardment_armageddon cooldown = yes }
			}

		# Native Interference
			if = {
				limit = {
					overlord = { has_policy_flag = interference_not_allowed }
					NOT = { has_policy_flag = interference_not_allowed }
					can_set_policy = { policy = interference option = interference_not_allowed }
				}
				set_policy = { policy = interference option = interference_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = interference_subtle }
					NOT = { has_policy_flag = interference_subtle }
					can_set_policy = { policy = interference option = interference_subtle }
				}
				set_policy = { policy = interference option = interference_subtle cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = interference_active }
					NOT = { has_policy_flag = interference_active }
					can_set_policy = { policy = interference option = interference_active }
				}
				set_policy = { policy = interference option = interference_active cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = interference_aggressive }
					NOT = { has_policy_flag = interference_aggressive }
					can_set_policy = { policy = interference option = interference_aggressive }
				}
				set_policy = { policy = interference option = interference_aggressive cooldown = yes }
			}

		# Native Enlightenment
			if = {
				limit = {
					overlord = { has_policy_flag = enlightenment_not_allowed }
					NOT = { has_policy_flag = enlightenment_not_allowed }
					can_set_policy = { policy = enlightenment option = enlightenment_not_allowed }
				}
				set_policy = { policy = enlightenment option = enlightenment_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = enlightenment_covert_only }
					NOT = { has_policy_flag = enlightenment_covert_only }
					can_set_policy = { policy = enlightenment option = enlightenment_covert_only }
				}
				set_policy = { policy = enlightenment option = enlightenment_covert_only cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = enlightenment_allowed }
					NOT = { has_policy_flag = enlightenment_allowed }
					can_set_policy = { policy = enlightenment option = enlightenment_allowed }
				}
				set_policy = { policy = enlightenment option = enlightenment_allowed cooldown = yes }
			}

		# Resettlement
			if = {
				limit = {
					overlord = { has_policy_flag = resettlement_not_allowed }
					NOT = { has_policy_flag = resettlement_not_allowed }
					can_set_policy = { policy = resettlement option = resettlement_not_allowed }
				}
				set_policy = { policy = resettlement option = resettlement_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = resettlement_allowed }
					NOT = { has_policy_flag = resettlement_allowed }
					can_set_policy = { policy = resettlement option = resettlement_allowed }
				}
				set_policy = { policy = resettlement option = resettlement_allowed cooldown = yes }
			}

		# Land Appropriation
			if = {
				limit = {
					overlord = { has_policy_flag = appropriation_not_allowed }
					NOT = { has_policy_flag = appropriation_not_allowed }
					can_set_policy = { policy = appropriation option = appropriation_not_allowed }
				}
				set_policy = { policy = appropriation option = appropriation_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = appropriation_allowed }
					NOT = { has_policy_flag = appropriation_allowed }
					can_set_policy = { policy = appropriation option = appropriation_allowed }
				}
				set_policy = { policy = appropriation option = appropriation_allowed cooldown = yes }
			}

		# Leader Enhancement
			if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_natural_selection }
					NOT = { has_policy_flag = leader_enhancement_natural_selection }
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_natural_selection }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_natural_selection cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_selected_lineages }
					NOT = { has_policy_flag = leader_enhancement_selected_lineages }
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_selected_lineages }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_selected_lineages cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_capacity_boosters }
					NOT = { has_policy_flag = leader_enhancement_capacity_boosters }
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_capacity_boosters }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_capacity_boosters cooldown = yes }
			}

		# First Contact Protocol
			if = {
				limit = {
					overlord = { has_policy_flag = first_contact_proactive }
					NOT = { has_policy_flag = first_contact_proactive }
					can_set_policy = { policy = first_contact_protocol option = first_contact_proactive }
				}
				set_policy = { policy = first_contact_protocol option = first_contact_proactive cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = first_contact_cautious }
					NOT = { has_policy_flag = first_contact_cautious }
					can_set_policy = { policy = first_contact_protocol option = first_contact_cautious }
				}
				set_policy = { policy = first_contact_protocol option = first_contact_cautious cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = first_contact_attack_allowed }
					NOT = { has_policy_flag = first_contact_attack_allowed }
					can_set_policy = { policy = first_contact_protocol option = first_contact_attack_allowed }
				}
				set_policy = { policy = first_contact_protocol option = first_contact_attack_allowed cooldown = yes }
			}

		# Border Policy
			if = {
				limit = {
					overlord = { has_policy_flag = border_policy_open }
					NOT = { has_policy_flag = border_policy_open }
					can_set_policy = { policy = border_policy option = border_policy_open }
				}
				set_policy = { policy = border_policy option = border_policy_open cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = border_policy_closed }
					NOT = { has_policy_flag = border_policy_closed }
					can_set_policy = { policy = border_policy option = border_policy_closed }
				}
				set_policy = { policy = border_policy option = border_policy_closed cooldown = yes }
			}

		# Leader Enhancement
			if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_natural_selection }
					NOT = { has_policy_flag = leader_enhancement_natural_selection }
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_natural_selection }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_natural_selection cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_selected_lineages }
					NOT = { has_policy_flag = leader_enhancement_selected_lineages }
					has_technology = tech_selected_lineages
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_selected_lineages }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_selected_lineages cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = leader_enhancement_capacity_boosters }
					NOT = { has_policy_flag = leader_enhancement_capacity_boosters }
					has_technology = tech_capacity_boosters
					can_set_policy = { policy = leader_enhancement option = leader_enhancement_capacity_boosters }
				}
				set_policy = { policy = leader_enhancement option = leader_enhancement_capacity_boosters cooldown = yes }
			}
		
		# Economic Policy  --- ??? No Policy Flags?
			# if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = leader_enhancement_natural_selection }
			# 		NOT = { has_policy_flag = leader_enhancement_natural_selection }
			# 		can_set_policy = { policy = economic_policy option = leader_enhancement_natural_selection }
			# 	}
			# 	set_policy = { policy = economic_policy option = leader_enhancement_natural_selection cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = leader_enhancement_selected_lineages }
			# 		NOT = { has_policy_flag = leader_enhancement_selected_lineages }
			# 		can_set_policy = { policy = economic_policy option = leader_enhancement_selected_lineages }
			# 	}
			# 	set_policy = { policy = economic_policy option = leader_enhancement_selected_lineages cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = leader_enhancement_capacity_boosters }
			# 		NOT = { has_policy_flag = leader_enhancement_capacity_boosters }
			# 		can_set_policy = { policy = economic_policy option = leader_enhancement_capacity_boosters }
			# 	}
			# 	set_policy = { policy = economic_policy option = leader_enhancement_capacity_boosters cooldown = yes }
			# }

		# Trade Policy  --- ??? No Policy Flags for default?
			if = {
				limit = {
					overlord = { has_policy_flag = trade_policy_default }
					NOR = {
						has_policy_flag = trade_conversion_consumer_goods
						has_policy_flag = trade_conversion_unity
						has_policy_flag = trade_conversion_trade_league
						has_policy_flag = trade_conversion_holy_covenant
					}
					can_set_policy = { policy = trade_policy option = trade_policy_default }
				}
				set_policy = { policy = trade_policy option = trade_policy_default cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = trade_conversion_consumer_goods }
					NOT = { has_policy_flag = trade_conversion_consumer_goods }
					can_set_policy = { policy = trade_policy option = trade_policy_consumer_goods }
				}
				set_policy = { policy = trade_policy option = trade_policy_consumer_goods cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = trade_conversion_unity }
					NOT = { has_policy_flag = trade_conversion_unity }
					can_set_policy = { policy = trade_policy option = trade_policy_unity }
				}
				set_policy = { policy = trade_policy option = trade_policy_unity cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = trade_conversion_trade_league }
					NOT = { has_policy_flag = trade_conversion_trade_league }
					can_set_policy = { policy = trade_policy option = trade_policy_trade_league }
				}
				set_policy = { policy = trade_policy option = trade_policy_trade_league cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = trade_conversion_holy_covenant }
					NOT = { has_policy_flag = trade_conversion_holy_covenant }
					can_set_policy = { policy = trade_policy option = trade_policy_holy_covenant }
				}
				set_policy = { policy = trade_policy option = trade_policy_holy_covenant cooldown = yes }
			}

		# Drone Policy  --- ??? No Policy Flags?
			# if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = drone_policy_balanced }
			# 		NOT = { has_policy_flag = drone_policy_balanced }
			# 		can_set_policy = { policy = drone_policy option = drone_policy_balanced }
			# 	}
			# 	set_policy = { policy = drone_policy option = drone_policy_balanced cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = drone_policy_worker }
			# 		NOT = { has_policy_flag = drone_policy_worker }
			# 		can_set_policy = { policy = drone_policy option = drone_policy_worker }
			# 	}
			# 	set_policy = { policy = drone_policy option = drone_policy_worker cooldown = yes }
			# }
			# else_if = {
			# 	limit = {
			# 		overlord = { has_policy_flag = drone_policy_thinker }
			# 		NOT = { has_policy_flag = drone_policy_thinker }
			# 		can_set_policy = { policy = drone_policy option = drone_policy_thinker }
			# 	}
			# 	set_policy = { policy = drone_policy option = drone_policy_thinker cooldown = yes }
			# }

		# Artifical Intelligence Policy
			if = {
				limit = {
					overlord = { has_policy_flag = ai_outlawed }
					NOT = { has_policy_flag = ai_outlawed }
					can_set_policy = { policy = artificial_intelligence_policy option = ai_outlawed }
				}
				set_policy = { policy = artificial_intelligence_policy option = ai_outlawed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = ai_servitude }
					NOT = { has_policy_flag = ai_servitude }
					can_set_policy = { policy = artificial_intelligence_policy option = ai_servitude }
				}
				set_policy = { policy = artificial_intelligence_policy option = ai_servitude cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = ai_full_rights }
					NOT = { has_policy_flag = ai_full_rights }
					can_set_policy = { policy = artificial_intelligence_policy option = ai_full_rights }
				}
				set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = yes }
			}

		# Robot Pop Policy
			if = {
				limit = {
					overlord = { has_policy_flag = robots_outlawed }
					NOT = { has_policy_flag = robots_outlawed }
					can_set_policy = { policy = robot_pop_policy option = robot_pops_outlawed }
				}
				set_policy = { policy = robot_pop_policy option = robot_pops_outlawed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = robots_allowed }
					NOT = { has_policy_flag = robots_allowed }
					can_set_policy = { policy = robot_pop_policy option = robot_pops_allowed }
				}
				set_policy = { policy = robot_pop_policy option = robot_pops_allowed cooldown = yes }
			}

		# Pre Sapients
			if = {
				limit = {
					overlord = { has_policy_flag = pre_sapients_protect }
					NOT = { has_policy_flag = pre_sapients_protect }
					can_set_policy = { policy = pre_sapients option = pre_sapients_protect }
				}
				set_policy = { policy = pre_sapients option = pre_sapients_protect cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = pre_sapients_allow }
					NOT = { has_policy_flag = pre_sapients_allow }
					can_set_policy = { policy = pre_sapients option = pre_sapients_allow }
				}
				set_policy = { policy = pre_sapients option = pre_sapients_allow cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = pre_sapients_eat }
					NOT = { has_policy_flag = pre_sapients_eat }
					can_set_policy = { policy = pre_sapients option = pre_sapients_eat }
				}
				set_policy = { policy = pre_sapients option = pre_sapients_eat cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = pre_sapients_purge }
					NOT = { has_policy_flag = pre_sapients_purge }
					can_set_policy = { policy = pre_sapients option = pre_sapients_purge }
				}
				set_policy = { policy = pre_sapients option = pre_sapients_purge cooldown = yes }
			}

		# Debris
			if = {
				limit = {
					overlord = { has_policy_flag = research_debris }
					NOT = { has_policy_flag = research_debris }
					can_set_policy = { policy = debris option = research_debris }
				}
				set_policy = { policy = debris option = research_debris cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = scavenge_debris }
					NOT = { has_policy_flag = scavenge_debris }
					can_set_policy = { policy = debris option = scavenge_debris }
				}
				set_policy = { policy = debris option = scavenge_debris cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = scavenge_and_research_debris }
					NOT = { has_policy_flag = scavenge_and_research_debris }
					can_set_policy = { policy = debris option = scavenge_and_research_debris }
				}
				set_policy = { policy = debris option = scavenge_and_research_debris cooldown = yes }
			}

		# Refugees
			if = {
				limit = {
					overlord = { has_policy_flag = refugees_not_allowed }
					NOT = { has_policy_flag = refugees_not_allowed }
					can_set_policy = { policy = refugees option = refugees_not_allowed }
				}
				set_policy = { policy = refugees option = refugees_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = refugees_only_citizens }
					NOT = { has_policy_flag = refugees_only_citizens }
					can_set_policy = { policy = refugees option = refugees_only_citizens }
				}
				set_policy = { policy = refugees option = refugees_only_citizens cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = refugees_allowed }
					NOT = { has_policy_flag = refugees_allowed }
					can_set_policy = { policy = refugees option = refugees_allowed }
				}
				set_policy = { policy = refugees option = refugees_allowed cooldown = yes }
			}

		# Population Controls
			if = {
				limit = {
					overlord = { has_policy_flag = population_controls_not_allowed }
					NOT = { has_policy_flag = population_controls_not_allowed }
					can_set_policy = { policy = population_controls option = population_controls_not_allowed }
				}
				set_policy = { policy = population_controls option = population_controls_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = population_controls_allowed }
					NOT = { has_policy_flag = population_controls_allowed }
					can_set_policy = { policy = population_controls option = population_controls_allowed }
				}
				set_policy = { policy = population_controls option = population_controls_allowed cooldown = yes }
			}

		# Slavery
			if = {
				limit = {
					overlord = { has_policy_flag = slavery_not_allowed }
					NOT = { has_policy_flag = slavery_not_allowed }
					can_set_policy = { policy = slavery option = slavery_not_allowed }
				}
				set_policy = { policy = slavery option = slavery_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = slavery_allowed }
					NOT = { has_policy_flag = slavery_allowed }
					can_set_policy = { policy = slavery option = slavery_allowed }
				}
				set_policy = { policy = slavery option = slavery_allowed cooldown = yes }
			}

		# Purge
			if = {
				limit = {
					overlord = { has_policy_flag = purge_not_allowed }
					NOT = { has_policy_flag = purge_not_allowed }
					can_set_policy = { policy = purge option = purge_not_allowed }
				}
				set_policy = { policy = purge option = purge_not_allowed cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = purge_displacement_only }
					NOT = { has_policy_flag = purge_displacement_only }
					can_set_policy = { policy = purge option = purge_displacement_only }
				}
				set_policy = { policy = purge option = purge_displacement_only cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = purge_allowed }
					NOT = { has_policy_flag = purge_allowed }
					can_set_policy = { policy = purge option = purge_allowed }
				}
				set_policy = { policy = purge option = purge_allowed cooldown = yes }
			}

		# Knightly Duties
			if = {
				limit = {
					overlord = { has_policy_flag = toxic_knights_questing }
					NOT = { has_policy_flag = toxic_knights_questing }
					can_set_policy = { policy = knightly_duties option = questing_knights }
				}
				set_policy = { policy = knightly_duties option = questing_knights cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = toxic_knights_military }
					NOT = { has_policy_flag = toxic_knights_military }
					can_set_policy = { policy = knightly_duties option = military_knights }
				}
				set_policy = { policy = knightly_duties option = military_knights cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = toxic_knights_diplomats }
					NOT = { has_policy_flag = toxic_knights_diplomats }
					can_set_policy = { policy = knightly_duties option = diplomats_knights }
				}
				set_policy = { policy = knightly_duties option = diplomats_knights cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = toxic_knights_herald }
					NOT = { has_policy_flag = toxic_knights_herald }
					can_set_policy = { policy = knightly_duties option = herald_knights }
				}
				set_policy = { policy = knightly_duties option = herald_knights cooldown = yes }
			}

		# Relentless Industrialists Policy
			if = {
				limit = {
					overlord = { has_policy_flag = relentless_industrialists_full_steam_ahead }
					NOT = { has_policy_flag = relentless_industrialists_full_steam_ahead }
					can_set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_full_steam_ahead }
				}
				set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_full_steam_ahead cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = relentless_industrialists_study }
					NOT = { has_policy_flag = relentless_industrialists_study }
					can_set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_study }
				}
				set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_study cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = relentless_industrialists_cleanup }
					NOT = { has_policy_flag = relentless_industrialists_cleanup }
					can_set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_cleanup }
				}
				set_policy = { policy = relentless_industrialists_policy option = relentless_industrialists_cleanup cooldown = yes }
			}

		# Roboticist Output
			if = {
				limit = {
					overlord = { has_policy_flag = roboticist_output_build_robots }
					NOT = { has_policy_flag = roboticist_output_build_robots }
					can_set_policy = { policy = roboticist_output option = build_robots }
				}
				set_policy = { policy = roboticist_output option = build_robots cooldown = yes }
			}
			else_if = {
				limit = {
					overlord = { has_policy_flag = roboticist_output_build_cyborgs }
					NOT = { has_policy_flag = roboticist_output_build_cyborgs }
					can_set_policy = { policy = roboticist_output option = build_cyborgs }
				}
				set_policy = { policy = roboticist_output option = build_cyborgs cooldown = yes }
			}
	}
}

# Get Buffer Zone Flag
country_event = {
	id = veru_misc.3000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type_with_subjects = yes
		OR = {
			any_system_within_border = {
				closest_system = {
					limit = {
						exists = space_owner
						space_owner = {
							is_auto_state = no
							exists = overlord
							overlord = {
								NOT = { is_same_value = root }
								is_country_type_with_subjects = yes
								NOT = { has_country_flag = valid_buffer_for_@root }
							}
						}
					}
					use_bypasses = yes
					max_steps = 1
				}
			}
			any_subject = {
				is_auto_state = no
				any_system_within_border = {
					closest_system = {
						limit = {
							exists = space_owner
							space_owner = {
								is_auto_state = no
								exists = overlord
								overlord = {
									NOT = { is_same_value = root }
									is_country_type_with_subjects = yes
									NOT = { has_country_flag = valid_buffer_for_@root }
								}
							}
						}
						use_bypasses = yes
						max_steps = 1
					}
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				any_system_within_border = {
					closest_system = {
						limit = {
							exists = space_owner
							space_owner = {
								is_auto_state = no
								exists = overlord
								overlord = {
									NOT = { is_same_value = root }
									is_country_type_with_subjects = yes
									NOT = { has_country_flag = valid_buffer_for_@root }
								}
							}
						}
						use_bypasses = yes
						max_steps = 1
					}
				}
			}
			every_system_within_border = {
				closest_system = {
					limit = {
						exists = space_owner
						space_owner = {
							is_auto_state = no
							exists = overlord
							overlord = {
								NOT = { is_same_value = root }
								is_country_type_with_subjects = yes
								NOT = { has_country_flag = valid_buffer_for_@root }
							}
						}
					}
					use_bypasses = yes
					max_steps = 1
					space_owner.overlord = { set_country_flag = valid_buffer_for_@root }
				}
			}
		}

		if = {
			limit = {
				any_subject = {
					is_auto_state = no
					any_system_within_border = {
						closest_system = {
							limit = {
								exists = space_owner
								space_owner = {
									is_auto_state = no
									exists = overlord
									overlord = {
										NOT = { is_same_value = root }
										is_country_type_with_subjects = yes
									}
								}
							}
							use_bypasses = yes
							max_steps = 1
						}
					}
				}
			}
			every_subject = {
				limit = {
					is_auto_state = no
					any_system_within_border = {
						closest_system = {
							limit = {
								exists = space_owner
								space_owner = {
									is_auto_state = no
									exists = overlord
									overlord = {
										NOT = { is_same_value = root }
										is_country_type_with_subjects = yes
									}
								}
							}
							use_bypasses = yes
							max_steps = 1
						}
					}
				}				
				every_system_within_border = {
					closest_system = {
						limit = {
							exists = space_owner
							space_owner = {
								is_auto_state = no
								exists = overlord
								overlord = {
									NOT = { is_same_value = root }
									is_country_type_with_subjects = yes
								}
							}
						}
						use_bypasses = yes
						max_steps = 1
						space_owner.overlord = { set_country_flag = valid_buffer_for_@root }
					}
				}
			}
		}		
	}
}

# Remove Buffer Zone Flag
country_event = {
	id = veru_misc.3010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			has_country_flag = valid_buffer_for_@root
			NOT = {
				any_subject = {
					is_auto_state = no
					any_system_within_border = {
						closest_system = {
							limit = {
								exists = space_owner
								OR = {
									space_owner = { is_same_value = root }
									space_owner = { has_overlord = root }
								}
							}
							use_bypasses = yes
							max_steps = 1
						}
					}
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = {
				has_country_flag = valid_buffer_for_@root
				NOT = {
					any_subject = {
						is_auto_state = no
						any_system_within_border = {
							closest_system = {
								limit = {
									exists = space_owner
									OR = {
										space_owner = { is_same_value = root }
										space_owner = { has_overlord = root }
									}
								}
								use_bypasses = yes
								max_steps = 1
							}
						}
					}
				}
			}
			remove_country_flag = valid_buffer_for_@root
		}		
	}
}

# Stop Wars if Buffer Target(s) are gone
country_event = {
	id = veru_misc.3015
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_war = {
			using_war_goal = { type = wg_claim_subject owner = root }
			OR = {
				AND = {
					attacker = { is_same_value = root }
					defender = { NOT = { has_country_flag = valid_buffer_for_@root } }
				}
				AND = {
					defender = { is_same_value = root }
					attacker = { NOT = { has_country_flag = valid_buffer_for_@root } }
				}
			}
		}
	}

	immediate = {
		every_war = {
			limit = {
				using_war_goal = { type = wg_claim_subject owner = root }
				OR = {
					AND = {
						attacker = { is_same_value = root }
						defender = { NOT = { has_country_flag = valid_buffer_for_@root } }
					}
					AND = {
						defender = { is_same_value = root }
						attacker = { NOT = { has_country_flag = valid_buffer_for_@root } }
					}
				}
			}
			random_war_participant = {
				limit = {
					is_war_leader = yes
					NOT = { is_same_value = root }
				}
				save_event_target_as = buffer_war_opponent
			}
			every_war_participant = { prev = { remove_war_participant = prev }  }
		}

		set_truce = { target = event_target:buffer_war_opponent type = war }
	}
}