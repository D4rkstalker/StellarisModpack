namespace = mmgsiege_stockpile_automation

# manage stockpile automation budget
country_event = {
	id = mmgsiege_stockpile_automation.101
	is_triggered_only = yes
	title = mmgsiege_manage_stockpile_budget
	desc = mmgsiege_manage_stockpile_budget_desc
	custom_gui = mmgsiege_stockpile_budget_menu
	diplomatic = yes
	picture_event_data = {
		portrait = root.owner_main_species
		room = enclave_curator_room
	}
	auto_opens = yes
	immediate = {
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_energy_stockpile_budget } }
			set_variable = {
				which = mmgsiege_energy_stockpile_budget
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_minerals_stockpile_budget } }
			set_variable = {
				which = mmgsiege_minerals_stockpile_budget
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_food_stockpile_budget } }
			set_variable = {
				which = mmgsiege_food_stockpile_budget
				value = 0
			}
		}
		if = {
			limit = { NOT = { is_variable_set = mmgsiege_consumer_goods_stockpile_budget } }
			set_variable = {
				which = mmgsiege_consumer_goods_stockpile_budget
				value = 0
			}
		}
	}
	option = {
		name = mmgsiege_back_to_local_stockpile
		trigger = {
			exists = fromfrom
			fromfrom = { is_scope_type = planet }
		}
		hidden_effect = {
			fromfrom = {
				planet_event = {
					id = mmgsiege_local_stockpile.102
				}
			}
		}
	}
	option = {
		name = CLOSE
		hidden_effect = {
			# initialize stockpile feature
			if = {
				limit = { exists = capital_scope }
				capital_scope = {
					planet_event = { id = mmgsiege_stockpile_automation.301 }
				}
			}
		}
	}
}

# wrapper to set up scopes
country_event = {
	id = mmgsiege_stockpile_automation.102
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		country_event = {
			id = mmgsiege_stockpile_automation.101
			scopes = {
				from = this
			}
		}
	}
}

# wrapper for to fire below event roughly every 6 months
# fire in middle of april and october to minimize lag (randomized per country)
event = {
	id = mmgsiege_stockpile_automation.201
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		every_country = {
			country_event = {
				id = mmgsiege_stockpile_automation.202
				days = 95
				random = 20
			}
			country_event = {
				id = mmgsiege_stockpile_automation.202
				days = 275
				random = 20
			}
		}
	}
}

# cache planet stockpile resource balance/upkeep for calcuating priorities, run every six months
country_event = {
	id = mmgsiege_stockpile_automation.202
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		every_owned_planet = {
			mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = energy }
			mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = minerals }
			mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = food }
			mmgsiege_export_planet_balance_and_upkeep = { RESOURCE = consumer_goods }
		}
	}
}

# handle budget stockpile on_capital_changed
planet_event = {
	id = mmgsiege_stockpile_automation.301
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				exists = from
			}
			from = {
				if = {
					limit = {
						is_scope_type = planet
						has_deposit = mmgsiege_stockpile_budget_feature
						is_capital = no
					}
					remove_deposit = mmgsiege_stockpile_budget_feature
				}
			}
		}
		if = {
			limit = {
				NOT = { has_deposit = mmgsiege_stockpile_budget_feature }
			}
			add_deposit = mmgsiege_stockpile_budget_feature
		}
	}
}

# remove stockpile budget feature on_planet_transfer or on_planet_ownerless
planet_event = {
	id = mmgsiege_stockpile_automation.302
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				OR = {
					NOT = { exists = owner }
					is_capital = no
				}
				has_deposit = mmgsiege_stockpile_budget_feature
			}
			remove_deposit = mmgsiege_stockpile_budget_feature
		}
	}
}

# initialize budget feature on_game_start
event = {
	id = mmgsiege_stockpile_automation.303
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_country = {
			if = {
				limit = { exists = capital_scope }
				capital_scope = {
					planet_event = {
						id = mmgsiege_stockpile_automation.301
						# days = 1
					}
				}
			}
		}
	}
}

# allocate budget
country_event = {
	id = mmgsiege_stockpile_automation.401
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		mmgsiege_allocate_stockpile_budget = { RESOURCE = energy }
		mmgsiege_allocate_stockpile_budget = { RESOURCE = minerals }
		mmgsiege_allocate_stockpile_budget = { RESOURCE = food }
		mmgsiege_allocate_stockpile_budget = { RESOURCE = consumer_goods }
	}
}

# wrapper to allocate budget on 2nd of each month
country_event = {
	id = mmgsiege_stockpile_automation.402
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		country_event = {
			id = mmgsiege_stockpile_automation.401
			days = 1
		}
	}
}

# set AI budget
country_event = {
	id = mmgsiege_stockpile_automation.501
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = yes
	}
	immediate = {
		if = {
			limit = {
				is_ai = yes
				exists = capital_scope
			}

			# initialize budget feature if needed
			capital_scope = {
				planet_event = { id = mmgsiege_stockpile_automation.301 }
			}
			
			# energy budget - higher if main species is energy-consuming
			if = {
				limit = {
					exists = owner_species
					owner_species = {
						OR = {
							has_trait = trait_plantoid_phototrophic
							has_trait = trait_plantoid_radiotrophic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = energy
					PERCENT = 15
				}
			}
			else = {
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = energy
					PERCENT = 10
				}
			}

			# minerals budget - higher if main species is lithoid
			if = {
				limit = {
					exists = owner_species
					owner_species = {
						has_trait = trait_lithoid
					}
				}
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = minerals
					PERCENT = 15
				}
			}
			else = {
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = minerals
					PERCENT = 10
				}
			}

			# food budget - higher if main species is food-consuming
			# higher base percent since stockpiled food isn't very useful
			if = {
				limit = {
					exists = owner_species
					owner_species = {
						NOR = {
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = trait_lithoid
						}
					}
				}
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = food
					PERCENT = 20
				}
			}
			else = {
				mmgsiege_set_stockpile_budget_percent = {
					RESOURCE = food
					PERCENT = 15
				}
			}

			# consumer goods budget - no special logic
			# higher base percent since stockpiled consumer aren't very useful
			mmgsiege_set_stockpile_budget_percent = {
				RESOURCE = consumer_goods
				PERCENT = 15
			}
		}
	}
}