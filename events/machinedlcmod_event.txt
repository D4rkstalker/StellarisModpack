namespace = machinedlc

#ap_single_mind special project effect
#gestalt machine empire -> synth ascended empire
country_event = {
    id = machinedlc.1
	title = "machinedlc.1.name"
	desc = "machinedlc.1.desc"
	picture = GFX_evt_robot_assembly_plant
    is_triggered_only = yes
    show_sound = event_synthetic_evolution

    immediate = {
		if = {
			limit = { has_valid_civic = civic_machine_emotion_emulator_intelligence }
			every_owned_pop = {
				limit = { is_same_species = owner.species }
				modify_species = {
					remove_trait = trait_mechanical
					add_trait = trait_machine_unit
				}
			}
		}
		country_remove_ethic = ethic_gestalt_consciousness
		country_add_ethic = ethic_fanatic_materialist
		country_add_ethic = ethic_egalitarian
		if = {
			limit = { NOT = { has_technology = tech_machine_division_by_zero } }
			change_government = {
				authority = auth_democratic
				civics = {} #intended to clear civics #removing this cause change authority effect to not working #checked in stellaris v2.5.1
			}
		}
		else_if = {
			limit = { has_technology = tech_machine_division_by_zero }
			change_government = {
				authority = auth_democratic
				civics = {
					civic = civic_division_by_zero
				}
			}
		}
		add_resource = { influence = 250 }
		add_resource = { consumer_goods = 15000 }

        give_technology = { tech = tech_robotic_workers message = no }
        give_technology = { tech = tech_droid_workers message = no }
		give_technology = { tech = tech_synthetic_workers message = no }
		give_technology = { tech = tech_synthetic_leaders message = no }

		give_technology = { tech = tech_luxuries_1 message = no }
		give_technology = { tech = tech_luxuries_2 message = no }

		give_technology = { tech = tech_robomodding message = no }
		give_technology = { tech = tech_robomodding_points_1 message = no }
		give_technology = { tech = tech_robomodding_points_2 message = no }
		
        set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = yes }

        set_country_flag = synthetic_empire
		set_country_flag = ap_single_mind

		owner.species = {
			create_species = {
				is_mod = no
				name = this
				namelist = this.prev
				plural = this
				class = "ROBOT"
				portrait = this
				traits = {
					trait = "trait_mechanical"
				}
				traits = this
			}
		}

		every_owned_pop = {
			limit = { species = { has_trait = trait_machine_unit } }
			change_species = last_created
			modify_species = { remove_trait = trait_machine_unit }
			synth_citizenship_set = yes
		}
		change_dominant_species = { species = last_created change_all = yes }

		owner.species = {
			rename_species = {
				prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
				name_list = ascension_list
			}
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = { has_trait = trait_machine_unit }
			}
			change_species = last_created
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = { has_trait = trait_machine_unit }
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = last_created_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_machine_unit
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = last_created_species
			}
		}
		
		every_owned_leader = {
			change_species = last_created
			change_leader_portrait = species
		}
		every_pool_leader = {
			change_species = last_created
			change_leader_portrait = species
		}
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
		
		country_event = { id = machinedlc.26 }
		country_event = { id = machinedlc.18 days = 5 }
		clear_mod_processing_power = yes
        ap_single_mind_building_transform = yes

		if = {
			limit = { has_ascension_perk = ap_biomachine_project }
			give_technology = { tech = tech_ap_biorobot_project message = no }
			set_country_flag = ap_biorobot_project_country
		
			#bio machine -> bio robot
			while = {
				limit = { any_owned_pop = { is_species_class = BIOROBOT } }
				random_owned_pop = {
					limit = { is_species_class = BIOROBOT }
					species = {
						create_species = {
							is_mod = no
							name = this
							namelist = this.prevprev
							plural = this
							class = "BIOSYNTH"
							portrait = this
							traits = {
								trait = trait_mechanical
								trait = trait_biorobot_2
							}
							traits = this
						}
					}
					change_species = last_created
					modify_species = { remove_trait = trait_biorobot }
					synth_citizenship_set = yes
				}
			}
		}
    }

    option = {
		name = machinedlc.1.a
	}
}
#ap_united_mind special project effect
#synth ascended empire -> gestalt machine empire
country_event = {
    id = machinedlc.2
	title = "machinedlc.2.name"
	desc = "machinedlc.2.desc"
	picture = GFX_evt_robot_assembly_plant
    is_triggered_only = yes
    show_sound = event_synthetic_evolution

    immediate = {
		while = {
			limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
			shift_ethic = ethic_gestalt_consciousness
		}
		add_resource = { influence = 250 }
        remove_country_flag = synthetic_empire

		change_government = {
			authority = auth_machine_intelligence
			civics = {} #intended to clear civics #removing this cause change authority effect to not working #checked in stellaris v2.5.1
		}

		give_technology = { tech = tech_robomodding_m message = no }
		give_technology = { tech = tech_binary_motivators message = no }
		give_technology = { tech = tech_nanite_assemblers message = no }
		give_technology = { tech = tech_machinedlcmod_processing_power message = no }

		owner.species = {
			create_species = {
				is_mod = no
				name = this
				namelist = this.prev
				plural = this
				class = "MACHINE"
				portrait = this
				traits = {
					trait = "trait_machine_unit"
				}
				traits = this
			}
		}
	
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_mechanical
					NOT = { has_trait = trait_biorobot_2 }
				}
			}
			change_species = last_created
			modify_species = { remove_trait = trait_mechanical }
			if = {
				limit = { has_trait = trait_psionic }
				modify_species = {
					remove_trait = trait_psionic
					add_trait = trait_machinedlcmod_psionic
				}
			}
			machine_citizenship_set = yes
		}
		change_dominant_species = { species = last_created change_all = yes }
		
		owner.species = {
			rename_species = {
				prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
				name_list = ascension_list
			}
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = { has_trait = trait_mechanical }
			}
			change_species = last_created
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = { has_trait = trait_mechanical }
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = last_created_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_machine_unit
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = last_created_species
			}
		}
		
		every_owned_leader = {
			change_species = last_created
			change_leader_portrait = species
		}
		every_pool_leader = {
			change_species = last_created
			change_leader_portrait = species
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_machine_unit }
				OR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				remove_trait = leader_trait_admiral_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				remove_trait = leader_trait_general_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				remove_trait = leader_trait_governor_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				remove_trait = leader_trait_scientist_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				remove_trait = leader_trait_ruler_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_machine_unit }
				OR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				remove_trait = leader_trait_admiral_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				remove_trait = leader_trait_general_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				remove_trait = leader_trait_governor_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				remove_trait = leader_trait_scientist_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				remove_trait = leader_trait_ruler_synthetic
				remove_ruler_trait = leader_trait_ruler_synthetic
			}
		}

		ROOT = {
			remove_country_flag = synthetic_age
        } 

		country_event = { id = machinedlc.36 }
		ap_united_mind_building_transform = yes
	
		if = {
			limit = { has_ascension_perk = ap_biorobot_project }
			give_technology = { tech = tech_ap_biomachine_project message = no }
		
			#bio robot -> bio machine
			while = {
				limit = { any_owned_pop = { is_species_class = BIOSYNTH } }
				random_owned_pop = {
					limit = { is_species_class = BIOSYNTH }
					species = {
						create_species = {
							is_mod = no
							name = this
							namelist = this.prevprev
							plural = this
							class = "BIOROBOT"
							portrait = this
							traits = {
								trait = trait_mechanical
								trait = trait_biorobot
							}
							traits = this
						}
					}
					change_species = last_created
					modify_species = { remove_trait = trait_biorobot_2 }
					machine_citizenship_set = yes
				}
			}
		}
    }

    option = {
		name = machinedlc.2.a
	}
}
#civic_machine_assimilating_swarm effect on_action event
planet_event = {
	id = machinedlc.3
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		from = { has_valid_civic = civic_machine_assimilating_swarm }
		fromfrom = {
			NOR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
			}
		}
	}
	
	immediate = {
		if = {
			limit = { from = { has_policy_flag = civic_assimilating_swarm_nanobot_full_assimilation } }
			create_message = {
				type = EVENT_MESSAGE_TYPE
				localization = SWARM_ASSIMILATION_DONE
				days = 10
				target = this
				variable = {
					type = name
					localization = SWARM_ASSIMILATION_TARGET_WORLD
					scope = this
				}	
			}
			create_pop = { species = from.species }
		}
		if = {
			limit = { from = { has_policy_flag = civic_assimilating_swarm_nanobot_half_assimilation } }
			create_message = {
				type = EVENT_MESSAGE_TYPE
				localization = SWARM_ASSIMILATION_DONE_2
				days = 10
				target = this
				variable = {
					type = name
					localization = SWARM_ASSIMILATION_TARGET_WORLD
					scope = this
				}	
			}
			fromfrom = {
				species = {
					create_species = {
						is_mod = no
						name = this
						namelist = from
						plural = this
						class = "MACHINE"
						portrait = this
						traits = {
							trait = trait_machine_unit
						}
						traits = this
					}
				}
			}
			create_pop = { species = last_created }
			last_created_pop = {
				species_modify_clear_trait_pc_preference = yes
				species_modify_change_trait_lithoid = yes
				machine_citizenship_set = yes
			}
		}
		if = {
			limit = { from = { has_policy_flag = civic_assimilating_swarm_nanobot_dismantlement } }
			create_message = {
				type = EVENT_MESSAGE_TYPE
				localization = SWARM_ASSIMILATION_DONE_3
				days = 10
				target = this
				variable = {
					type = name
					localization = SWARM_ASSIMILATION_TARGET_WORLD
					scope = this
				}	
			}
			from = {
				add_resource = {
					minerals = 200
					food = 50
				}
				add_monthly_resource_mult = {
					resource = society_research
					value = 1
					min = 150
				}
			}
		}
	}
}
#civic_synth_ascended and civic_synth_heritage effect on_action event
country_event = {
    id = machinedlc.4
    hide_window = yes
	is_triggered_only = yes

    immediate = {
        give_technology = { tech = tech_robotic_workers message = no }
        give_technology = { tech = tech_droid_workers message = no }
		give_technology = { tech = tech_synthetic_workers message = no }
		give_technology = { tech = tech_synthetic_leaders message = no }
		give_technology = { tech = tech_robomodding message = no }
        set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = yes }

        set_country_flag = synthetic_empire

		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}

		owner.species = {
			create_species = {
				is_mod = yes
				name = this
				namelist = this.prev
				plural = this
				class = "ROBOT"
				portrait = this
				traits = {
					trait = "trait_mechanical"
				}
				traits = this
			}		
		}

		every_owned_pop = {
			limit = {
				species = {
					NOR = {
						has_trait = trait_mechanical
						has_trait = trait_syncretic_proles
					}
				}
			}
			change_species = last_created
			species_modify_clear_trait_pc_preference = yes
			species_modify_change_trait_lithoid = yes
			synth_citizenship_set = yes
		}
		change_dominant_species = { species = last_created }

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = { NOT = { has_trait = trait_mechanical } }
			}
			change_species = last_created
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					NOT = { has_trait = trait_mechanical }
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = last_created_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					NOT = { has_trait = trait_mechanical }
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = last_created_species
			}
		}
		
		every_owned_leader = {
			change_species = last_created
			change_leader_portrait = species
		}
		every_pool_leader = {
			change_species = last_created
			change_leader_portrait = species
		}
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
        } 

    }

}
#ap_war_protocol special projects
country_event = {
    id = machinedlc.5
    hide_window = yes
    is_triggered_only = yes
    
	immediate = {
        if = {
			limit = { count_country = { limit = { is_fallen_empire_machine = yes } count >= 1 } }
			capital_scope = {
				enable_special_project = {
					name = "FALLEN_MACHINE_PROJECT"
					location = this
					owner = root
				}
			}
		}
		if = {
			limit = { count_country = { limit = { is_fallen_empire_machine = yes } count = 0 } }
			capital_scope = {
				enable_special_project = {
					name = "TOTAL_WAR_PROJECT"
					location = this
					owner = root
				}
			}
		}
	}
}
#fallen machine project completed
country_event = {
    id = machinedlc.6
    hide_window = yes
    is_triggered_only = yes
    
	immediate = {
		random_list = {
			75 = { #failed
				country_event = { id = machinedlc.9 } 
		    }
			25 = { #suceed
				every_country = {
					limit = { is_fallen_empire_machine = yes }
					country_event = { id = machinedlc.7 }
				}
		    }
		}
	}
}
#hacking suceed
country_event = {
	id = machinedlc.7
	hide_window = yes
	is_triggered_only = yes

	immediate = {	
		set_country_type = default
		
		capital_scope = {
			remove_district = district_rw_science
			remove_district = district_rw_science
			remove_district = district_rw_science
			remove_district = district_rw_science
			remove_district = district_rw_science

			add_district = district_rw_nexus
			add_district = district_rw_nexus
			add_district = district_rw_nexus
			add_district = district_rw_generator
			add_district = district_rw_generator
        } 

		change_government = {
			authority = auth_machine_intelligence
			civics = {
				civic = civic_awakened_machine
				civic = civic_malfunctioning_custodian
				civic = civic_machine_terminator
				civic = civic_machine_warfleet
			}
		}	

        join_alliance = {
			who = FROM
			override_requirements = yes
		}

		add_opinion_modifier = {
			who = FROM
			modifier = triggered_opinion_enlightened_fe
		}

		# Changing country type resets resources, so give them full stores
		add_resource = { minerals = 20000 }
		add_resource = { energy = 20000 }
		add_resource = { influence = 1000 }

		every_owned_planet = {
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber

			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber

			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber
			remove_building = building_ancient_cryo_chamber #12 total

			add_building = building_planet_processor_3
		}

		# Add some more fleet
		country_event = { id = fallen_empires.13 }

		# Establish communications
		every_country = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				NOT = { has_communications = root }
			}

			establish_communications_no_message = root
		}
		
		save_event_target_as = awakened_machine_empire
		
		# Notify players
		every_country = {
			limit = {
				is_ai = no
			}
			country_event = { id = machinedlc.8 }
		}
	}
}
#hacked machine fe transmission
country_event = {
	id = machinedlc.8
	title = "machinedlc.8.name"
	desc = "machinedlc.8.desc"
	location = event_target:awakened_machine_empire.capital_scope
	show_sound = event_ai_started
	diplomatic = yes
	is_triggered_only = yes
	
	picture_event_data = {
		portrait = event_target:awakened_machine_empire
		planet_background = event_target:awakened_machine_empire
		graphical_culture = event_target:awakened_machine_empire
		city_level = event_target:awakened_machine_empire
		room = event_target:awakened_machine_empire.ruler
	}

	option = {
		trigger = {
            has_valid_civic = civic_machine_terminator
		}	
		name = machinedlc.8.a
	}
	option = {
		trigger = {
            NOT = { has_valid_civic = civic_machine_terminator }
		}	
		name = machinedlc.8.b
	}
}
#hacking failed
country_event = {
    id = machinedlc.9
	title = "machinedlc.9.name"
	desc = "machinedlc.9.desc"
	picture = GFX_evt_glitchy_matrix
	is_triggered_only = yes

	option = { #do it again
		name = machinedlc.9.a
		hidden_effect = {
			capital_scope = {
				enable_special_project = {
					name = "FALLEN_MACHINE_PROJECT"
					location = this
					owner = root
				}
			}
		}		
	}
    option = { #it's over...
		name = machinedlc.9.b
		add_resource = { influence = 200 }
	}
}
#total war project completed
country_event = {
    id = machinedlc.10
	title = "machinedlc.10.name"
	desc = "machinedlc.10.desc"
	picture = GFX_evt_fleet_from_surface
	is_triggered_only = yes

    immediate = {
		set_country_flag = total_war_allowed
	}

	option = {
		name = machinedlc.10.a
	}
}
#total war policy on_action event
country_event = {
    id = machinedlc.11
    hide_window = yes
	is_triggered_only = yes
 
    trigger = {
		has_country_flag = total_war_allowed
		has_policy_flag = total_war_policy_on
	}

    immediate = {
		set_policy = {
			policy = total_war_policy
			option = total_war_policy_off
			cooldown = no
		}
	}
}
#decision_smart_factory_project event
planet_event = {
    id = machinedlc.12
	title = "machinedlc.12.name"
	desc = "machinedlc.12.desc"
	picture = GFX_evt_smart_factory
	show_sound = event_cityscape
	location = root

	is_triggered_only = yes

	option = {
		name = machinedlc.12.a
	}
}
#decision_cpu_project event
planet_event = {
    id = machinedlc.13
	title = "machinedlc.13.name"
	desc = "machinedlc.13.desc"
	picture = GFX_evt_cpu
	show_sound = event_cityscape
	location = root
	
	is_triggered_only = yes

	option = {
		name = machinedlc.13.a
	}
}
#decision_central_network_project event
planet_event = {
    id = machinedlc.14
	title = "machinedlc.14.name"
	desc = "machinedlc.14.desc"
	picture = GFX_evt_central_network
	show_sound = event_cityscape
	location = root

	is_triggered_only = yes

	option = {
		name = machinedlc.14.a
	}
}
#civic_machine_trader effect on_action event
country_event = {
    id = machinedlc.15
    hide_window = yes
    is_triggered_only = yes
	 
	trigger = {
		has_valid_civic = civic_machine_trader
	}

    immediate = {
		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}
	}

}
#civic_machine_heritage effect on_action event
country_event = {
    id = machinedlc.16
    hide_window = yes
    is_triggered_only = yes
	 
	trigger = {
		has_valid_civic = civic_machine_heritage
	}

    immediate = {
		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}
	}

}
planet_event = {
    id = machinedlc.17
	title = "machinedlc.17.name"
	desc = "machinedlc.17.desc"
	picture = GFX_evt_ancient_databank
    is_triggered_only = yes

    immediate = {
		set_planet_flag = planet_machinedlc_relic_1
		add_modifier = {
			modifier = mod_machine_drone_storage
			days = -1
		}
		owner = {
			if = {
				limit = { is_ai = no }
				set_country_flag = country_machinedlc_relic
			}
		}
		solar_system = {
			random_fleet_in_system = {
				fleet_event = { id = machinedlc_relic.1 days = 60 }
			}
		}
	}

	option = {
		name = machinedlc.17.a
		planet_owner = {
			add_research_option = tech_robomodding_m
			add_tech_progress = { tech = tech_robomodding_m progress = 0.25 }
		}
		create_pop = { species = owner.species }
	}
}
#ethic changing event chains for machinedlc.1 event
country_event = {
    id = machinedlc.18
	title = "machinedlc.18.name"
	desc = "machinedlc.18.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.18.a #yes
		country_event = { id = machinedlc.19 }
	}
	option = {
		name = machinedlc.18.b #no
		add_resource = { influence = 150 }
	}	
}
#event chain xenophobe vs xenophile
country_event = {
    id = machinedlc.19
	title = "machinedlc.19.name"
	desc = "machinedlc.19.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.19.a #xenophobe
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_xenophobe 	
		country_event = { id = machinedlc.20 } #pass to next
	}	
	option = {
		name = machinedlc.19.b #fanatic xenophobe
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_xenophobe
		country_event = { id = machinedlc.20 } #pass to next
	}
	option = {
		name = machinedlc.19.c 
		country_event = { id = machinedlc.20 } #pass to next
	}	
	option = {
		name = machinedlc.19.d #xenophile
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_xenophile
		country_event = { id = machinedlc.20 } #pass to next
	}
	option = {
		name = machinedlc.19.e #fanatic xenophile
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_xenophile
		country_event = { id = machinedlc.20 } #pass to next
	}		
}
#event chain militarist vs pacifist
country_event = {
    id = machinedlc.20
	title = "machinedlc.20.name"
	desc = "machinedlc.20.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.20.a #militarist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_militarist
		country_event = { id = machinedlc.21 } #pass to next
	}	
	option = {
		name = machinedlc.20.b #fanatic militarist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_militarist
		country_event = { id = machinedlc.21 } #pass to next
	}
	option = {
		name = machinedlc.20.c 
		country_event = { id = machinedlc.21 } #pass to next
	}	
	option = {
		name = machinedlc.20.d #pacifist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_pacifist
		country_event = { id = machinedlc.21 } #pass to next
	}
	option = {
		name = machinedlc.20.e #fanatic pacifist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_pacifist
		country_event = { id = machinedlc.21 } #pass to next
	}		
}
#event chain authoritarian vs egalitarian
country_event = {
    id = machinedlc.21
	title = "machinedlc.21.name"
	desc = "machinedlc.21.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.21.a #authoritarian
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_authoritarian
		country_event = { id = machinedlc.22 } #pass to next
	}	
	option = {
		name = machinedlc.21.b #fanatic authoritarian
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_authoritarian
		country_event = { id = machinedlc.22 } #pass to next
	}
	option = {
		name = machinedlc.21.c 
		country_event = { id = machinedlc.22 } #pass to next
	}	
	option = {
		name = machinedlc.21.d #egalitarian
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
		}

		shift_ethic = ethic_egalitarian
		country_event = { id = machinedlc.22 } #pass to next
	}
	option = {
		name = machinedlc.21.e #fanatic egalitarian
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_egalitarian
		country_event = { id = machinedlc.22 } #pass to next
	}		
}
#event chain materialist vs spiritualist
country_event = {
    id = machinedlc.22
	title = "machinedlc.22.name"
	desc = "machinedlc.22.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.22.a #materialist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_materialist
		country_event = { id = machinedlc.23 } #pass to next
	}	
	option = {
		name = machinedlc.22.b #fanatic materialist
		hidden_effect = {
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_materialist
		country_event = { id = machinedlc.23 } #pass to next
	}
	option = {
		name = machinedlc.22.c
		country_event = { id = machinedlc.23 } #pass to next
	}	
	option = {
		name = machinedlc.22.d #spiritualist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_spiritualist
		country_event = { id = machinedlc.23 } #pass to next
	}
	option = {
		name = machinedlc.22.e #fanatic spiritualist
		hidden_effect = {
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_egalitarian
		}

		shift_ethic = ethic_fanatic_spiritualist
		country_event = { id = machinedlc.23 } #pass to next
	}		
}
#event chains over
country_event = {
    id = machinedlc.23
	title = "machinedlc.23.name"
	desc = "machinedlc.23.desc"
	is_triggered_only = yes
	picture = GFX_evt_galactic_senate

	option = {
		name = machinedlc.23.a #do it again
		country_event = { id = machinedlc.19 }
	}
	option = {
		name = machinedlc.23.b #no
		custom_tooltip = tooltip.machinedlc.23.b
	}	
}
#decision_machine_world_auto_project event
planet_event = {
    id = machinedlc.24
	title = "machinedlc.24.name"
	desc = "machinedlc.24.desc"
	picture = GFX_evt_machine_auto
	show_sound = event_cityscape
	location = root

	is_triggered_only = yes

	trigger = {
		is_planet_class = pc_machine
		OR = {
			solar_system = { owner = { has_ascension_perk = ap_planetary_system } }			
			owner = { has_ascension_perk = ap_planetary_system }
		}
	}

    immediate = {
		while = {
			limit = { has_district = district_nexus }
			remove_district = district_nexus
			change_variable = { which = count_district_nexus value = 1 }
		}
		while = {
			limit = { has_district = district_generator_uncapped }
			remove_district = district_generator_uncapped
			change_variable = { which = count_district_generator_uncapped value = 1 }
		}
		while = {
			limit = { has_district = district_mining_uncapped }
			remove_district = district_mining_uncapped
			change_variable = { which = count_district_mining_uncapped value = 1 }
		}
		change_pc = pc_machine_auto
		while = {
			limit = { NOT = { check_variable = { which = count_district_nexus value = 0 } } }
			add_district = district_drone_storage_auto
			subtract_variable = { which = count_district_nexus value = 1 }
		}
		while = {
			limit = { NOT = { check_variable = { which = count_district_generator_uncapped value = 0 } } }
			add_district = district_generator_uncapped_auto
			subtract_variable = { which = count_district_generator_uncapped value = 1 }
		}
		while = {
			limit = { NOT = { check_variable = { which = count_district_mining_uncapped value = 0 } } }
			add_district = district_mining_uncapped_auto
			subtract_variable = { which = count_district_mining_uncapped value = 1 }
		}
		clear_deposits = yes
		clear_blockers = yes
	}

	option = {
		name = machinedlc.24.a
	}
}
#special project SYNTH_CYBER_PROJECT event
country_event = {
	id = machinedlc.25
	title = "machinedlc.25.name"
	desc = "machinedlc.25.desc"
	picture = GFX_evt_binary_code

	is_triggered_only = yes

	immediate = {
		every_owned_pop = {
			limit = {
				has_trait = trait_mechanical 
				NOT = { has_trait = trait_biorobot_2 }
			}
			modify_species = { add_trait = trait_virtualized_synth }
			save_event_target_as = virtualized_synth_target
		}
		change_dominant_species = { species = event_target:virtualized_synth_target }
		every_owned_pop = {
			limit = { has_trait = trait_biorobot_2 }
			modify_species = {
				add_trait = trait_virtualized_synth
			}
			synth_citizenship_set = yes
		}
	}

	option = {
		name = machinedlc.25.a
	}
}
#for 'Individual Mind' perk empire
country_event = {
	id = machinedlc.26
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		calculate_mod_emotion_shock = yes
    }
}
#for trait_robot_memory_server on_action event
country_event = {
	id = machinedlc.27
	hide_window = yes
	is_triggered_only = yes
	
    trigger = {
		any_owned_pop = { has_trait = trait_shared_memory }
	}

	immediate = {
		every_owned_leader = {
			limit = {
				OR = {
					has_skill = 1
					has_skill = 2
				}
				species = { has_trait = trait_shared_memory }
			}
			set_skill = 3
		}
		every_pool_leader = {
			limit = {
				OR = {
					has_skill = 1
					has_skill = 2
				}
				species = { has_trait = trait_shared_memory }
			}
			set_skill = 3
		}
    }

}
#ap_biomachine_project special project event
country_event = {
    id = machinedlc.28
	title = "machinedlc.28.name"
	desc = "machinedlc.28.desc"
	is_triggered_only = yes
	picture = GFX_evt_cybernetics

    immediate = {
		create_species = {
			is_mod = no
			name = this
			namelist = this
			plural = this
			class = "BIOROBOT"
			portrait = "human"
			traits = {
				trait = "trait_mechanical"
                trait = "trait_biorobot"
			}
			effect = {
				rename_species = {
					prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
				save_event_target_as = biorobot_target_species
			}
		}
		add_resource = { food = 1000 }
		every_owned_planet = {
			create_pop = { species = last_created }
		}
		every_owned_pop = {
			limit = { has_trait = trait_biorobot }
			machine_citizenship_set = yes
		}
	}

	option = {
		name = machinedlc.28.a
	}
	option = {
		name = machinedlc.28.b
		custom_tooltip = machinedlc.28.b.tooltip
		hidden_effect = {
			every_owned_pop = {
				change_species = event_target:biorobot_target_species
			}
			change_dominant_species = { species = event_target:biorobot_target_species }
			every_owned_leader = {
				change_species = event_target:biorobot_target_species
				change_leader_portrait = species
			}
			every_pool_leader = {
				change_species = event_target:biorobot_target_species
				change_leader_portrait = species
			}
		}
	}	
}
#civic_quantity_over_quality effect on_action event
country_event = {
	id = machinedlc.29
	hide_window = yes
	is_triggered_only = yes
	
    trigger = {
		has_valid_civic = civic_quantity_over_quality
	}

	immediate = {
		random_owned_fleet = {
			limit = { is_ship_class = shipclass_military }
			while = {
				count = 2
				create_ship = {
					name = random
					random_existing_design = corvette
				}
			}
		}
    }

}
event = {
	id = machinedlc.30
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = machinedlc_new_feature_1 #change it to machinedlc_new_feature_1 later
		set_global_flag = machinedlc_new_feature_2
		set_global_flag = machinedlc_new_feature_3
		set_global_flag = machinedlc_new_feature_4
	}
}
#erudite_biorobot trait effect on_action event
country_event = {
	id = machinedlc.31
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = { species = { has_trait = trait_erudite_biorobot } }
	}

	immediate = {
		from = {
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_erudite
				add_ruler_trait = leader_trait_ruler_erudite
				break = yes
			}
		}
	}
}
#ap_psionic_theory effect event
country_event = {
	id = machinedlc.32
	title = "machinedlc.32.name"
	desc = "machinedlc.32.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening
	
	is_triggered_only = yes

	immediate = {
		save_event_target_as = breach_shroud_owner
		every_owned_pop = {
			limit = { is_same_species = root }
			modify_species = {
				species = this
				add_trait = trait_psionic
			}
		}
        change_dominant_species = { species = last_created change_all = yes }
        every_owned_leader = {
            limit = {
                species = { has_trait = trait_mechanical }
                NOR = {
                    has_trait =	leader_trait_admiral_psionic
                    has_trait =	leader_trait_general_psionic
                    has_trait =	leader_trait_governor_psionic
                    has_trait =	leader_trait_scientist_psionic
                    has_trait =	leader_trait_ruler_psionic
                }
            }
            if = {
                limit = { leader_class = admiral }
                add_trait = leader_trait_admiral_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = general }
                add_trait = leader_trait_general_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = governor }
                add_trait = leader_trait_governor_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = scientist }
                add_trait = leader_trait_scientist_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = ruler }
                add_trait = leader_trait_ruler_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
        }
        every_pool_leader = {
            limit = {
                species = { has_trait = trait_mechanical }
                NOR = {
                    has_trait = leader_trait_admiral_psionic
                    has_trait = leader_trait_general_psionic
                    has_trait = leader_trait_governor_psionic
                    has_trait = leader_trait_scientist_psionic
                    has_trait = leader_trait_ruler_psionic
                }
            }
            if = {
                limit = { leader_class = admiral }
                add_trait = leader_trait_admiral_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = general }
                add_trait = leader_trait_general_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = governor }
                add_trait = leader_trait_governor_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = scientist }
                add_trait = leader_trait_scientist_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
            if = {
                limit = { leader_class = ruler }
                add_trait = leader_trait_ruler_psionic
                add_ruler_trait = leader_trait_ruler_psionic
            }
        }
	}
	
	option = {
		name = "machinedlc.32.a"
	}
}
country_event = {
	id = machinedlc.33
	title = "machinedlc.33.name"
	desc = "machinedlc.33.desc"
	picture = GFX_evt_machine_sapience
	show_sound = event_psionic
	
	is_triggered_only = yes

	immediate = {
		save_event_target_as = breach_shroud_owner_machine
		random_country = {
			limit = { is_country_type = shroud_2 }
			save_event_target_as = the_shroud_2
		}
	}

	option = {
		name = "machinedlc.33.a"
		establish_communications_no_message = event_target:the_shroud_2
		hidden_effect = {
			set_country_flag = shroud_intro
			country_event = { id = endim.3000 }
		}
	}
}
#change species from robot to machine
country_event = {
	id = machinedlc.34
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_global_flag = machinedlc_new_feature_2
		has_authority = auth_machine_intelligence
	}
	
	immediate = {
		if = {
			limit = { NOT = { has_global_flag = machinedlc_new_feature_4 } }
			while = {
				limit = { any_owned_pop = { is_species_class = ROBOT } }
				random_owned_pop = {
					limit = {
						NOR = {
							is_species_class = BIOROBOT 
							is_species_class = BIOSYNTH
						}
						is_species_class = ROBOT
					}
					species = {
						create_species = {
							is_mod = no
							name = this
							namelist = this.prevprev
							plural = this
							class = "MACHINE"
							portrait = this
							traits = {
								trait = "trait_machine_unit"
							}
							traits = this
						}
					}
					change_species = last_created
					modify_species = { remove_trait = trait_mechanical }
					machine_citizenship_set = yes
				}
			}
		}
		if = {
			limit = { has_global_flag = machinedlc_new_feature_4 }
			every_owned_pop = {
				limit = {
					NOR = {
						is_species_class = BIOROBOT 
						is_species_class = BIOSYNTH
					}
					is_species_class = ROBOT
				}
				change_species = owner.species
			}
		}
		while = {
			limit = { any_owned_pop = { is_species_class = BIOSYNTH } }
			random_owned_pop = {
				limit = { is_species_class = BIOSYNTH }
				species = {
					create_species = {
						is_mod = no
						name = this
						namelist = this.prevprev
						plural = this
						class = "BIOROBOT"
						portrait = this
						traits = {
							trait = trait_mechanical
							trait = trait_biorobot
						}
						traits = this
					}
				}
				change_species = last_created
				modify_species = { remove_trait = trait_biorobot_2 }
				machine_citizenship_set = yes
			}
		}
	}
}
#change species from machine to robot
country_event = {
	id = machinedlc.35
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_global_flag = machinedlc_new_feature_3
		OR = {
			has_valid_civic = civic_synth_ascended
			has_country_flag = synthetic_empire
			has_country_flag = ap_single_mind
		}
	}
	
	immediate = {
		if = {
			limit = { NOT = { has_global_flag = machinedlc_new_feature_4 } }
			while = {
				limit = { any_owned_pop = { is_species_class = MACHINE } }
				random_owned_pop = {
					limit = {
						NOR = {
							is_species_class = BIOROBOT 
							is_species_class = BIOSYNTH
						}
						is_species_class = MACHINE
					}
					species = {
						create_species = {
							is_mod = no
							name = this
							namelist = this.prevprev
							plural = this
							class = "ROBOT"
							portrait = this
							traits = {
								trait = "trait_mechanical"
							}
							traits = this
						}
					}
					change_species = last_created
					modify_species = { remove_trait = trait_machine_unit }
					synth_citizenship_set = yes
				}
			}
		}
		if = {
			limit = { has_global_flag = machinedlc_new_feature_4 }
			every_owned_pop = {
				limit = {
					NOR = {
						is_species_class = BIOROBOT 
						is_species_class = BIOSYNTH
					}
					is_species_class = MACHINE
				}
				change_species = owner.species
			}
		}
		while = {
			limit = { any_owned_pop = { is_species_class = BIOROBOT } }
			random_owned_pop = {
				limit = { is_species_class = BIOROBOT }
				species = {
					create_species = {
						is_mod = no
						name = this
						namelist = this.prevprev
						plural = this
						class = "BIOSYNTH"
						portrait = this
						traits = {
							trait = trait_mechanical
							trait = trait_biorobot_2
						}
						traits = this
					}
				}
				change_species = last_created
				modify_species = { remove_trait = trait_biorobot }
				synth_citizenship_set = yes
			}
		}
	}
}
#for 'United Mind' perk empire
country_event = {
	id = machinedlc.36
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		calculate_mod_identity_conflict = yes
    }
}
#servitor morale check
event = {
	id = machinedlc.37
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = { 
			has_valid_civic = civic_machine_servitor
			is_ai = no
		}
	}

	immediate = {
		every_country = {
			limit = { 
				has_valid_civic = civic_machine_servitor
				is_ai = no
			}
			calculate_servitor_morale = yes
		}
	}
}
#ap_biorobot_project special project event
country_event = {
    id = machinedlc.38
	title = "machinedlc.38.name"
	desc = "machinedlc.28.desc"
	is_triggered_only = yes
	picture = GFX_evt_cybernetics

    immediate = {
		create_species = {
			is_mod = no
			name = this
			namelist = this
			plural = this
			class = "BIOSYNTH"
			portrait = "human"
			traits = {
				trait = "trait_mechanical"
                trait = "trait_biorobot_2"
			}
			effect = {
				rename_species = {
					prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
				save_event_target_as = biosynth_target_species
			}
		}
		add_resource = { food = 1000 }
		every_owned_planet = {
			create_pop = { species = last_created }
		}
		every_owned_pop = {
			limit = { has_trait = trait_biorobot_2 }
			synth_citizenship_set = yes
		}
	}

	option = {
		name = machinedlc.28.c
	}
	option = {
		name = machinedlc.28.d
		custom_tooltip = machinedlc.28.d.tooltip
		hidden_effect = {
			every_owned_pop = {
				change_species = event_target:biosynth_target_species
			}
			change_dominant_species = { species = event_target:biosynth_target_species }
			every_owned_leader = {
				change_species = event_target:biosynth_target_species
				change_leader_portrait = species
			}
			every_pool_leader = {
				change_species = event_target:biosynth_target_species
				change_leader_portrait = species
			}
		}
	}	
}
#ap_machine_special_civic effect event
country_event = {
	id = machinedlc.39
	title = "machinedlc.39.name"
	desc = "machinedlc.39.desc"
	is_triggered_only = yes
	picture = GFX_evt_binary_code

	option = {
		name = machinedlc.39.a
		custom_tooltip = machinedlc.39.a.tooltip
		hidden_effect = {
			country_event = { id = machinedlc.39 days = 30 }
		}
	}
	option = {
		trigger = {
			NOT = { has_valid_civic = civic_machine_terminator }
		}
		name = machinedlc.39.b
		custom_tooltip = machinedlc.39.b.tooltip
		hidden_effect = {
			capital_scope = {
				enable_special_project = {
					name = "MACHINE_SPECIAL_CIVIC_PROJECT_1" #determined exterminator
					location = this
					owner = root
				}
			}
		}
	}
	option = {
		trigger = {
			NOT = { has_valid_civic = civic_machine_assimilator }
		}
		name = machinedlc.39.c
		custom_tooltip = machinedlc.39.c.tooltip
		hidden_effect = {
			capital_scope = {
				enable_special_project = {
					name = "MACHINE_SPECIAL_CIVIC_PROJECT_2" #driven assimilator
					location = this
					owner = root
				}
			}
		}
	}
	option = {
		trigger = {
			NOT = { has_valid_civic = civic_machine_servitor }
		}
		name = machinedlc.39.d
		custom_tooltip = machinedlc.39.d.tooltip
		hidden_effect = {
			capital_scope = {
				enable_special_project = {
					name = "MACHINE_SPECIAL_CIVIC_PROJECT_3" #rogue servitor
					location = this
					owner = root
				}
			}
		}
	}
	option = {
		trigger = {
			OR = {
				has_valid_civic = civic_machine_terminator
				has_valid_civic = civic_machine_assimilator
				has_valid_civic = civic_machine_servitor
			}
		}
		name = machinedlc.39.e
		custom_tooltip = machinedlc.39.e.tooltip
		hidden_effect = {
			capital_scope = {
				enable_special_project = {
					name = "MACHINE_SPECIAL_CIVIC_PROJECT_4" #normal machine intelligence
					location = this
					owner = root
				}
			}
		}
	}
}
#determined exterminator
country_event = {
	id = machinedlc.40
	title = "machinedlc.40.name"
	desc = "machinedlc.40.desc"
	is_triggered_only = yes
	picture = GFX_evt_organic_oppression

	immediate = {
		#artist
		set_country_flag = enclave_stopped_patronage
		if = {
			limit = { has_modifier = enclave_artist_patron }
			remove_modifier = enclave_artist_patron
		}
		#curators
		set_country_flag = attacked_curators
		if = {
			limit = { has_modifier = curator_insight }
			remove_modifier = curator_insight
		}
		#traders
		set_country_flag = attacked_xuracorp
		if = {
			limit = { has_active_xuracorp_trade = yes }
			remove_xuracorp_trades = yes
			remove_relation_flag = {
				who = FROM
				flag = xuracorp_trade
			}
		}
		set_country_flag = attacked_riggans
		if = {
			limit = { has_active_riggan_trade = yes }
			remove_riggan_trades = yes
			remove_relation_flag = {
				who = FROM
				flag = riggan_trade
			}
		}
		set_country_flag = attacked_muutagans
		if = {
			limit = { has_active_muutagan_trade = yes }
			remove_muutagan_trades = yes
			remove_relation_flag = {
				who = FROM
				flag = muutagan_trade
			}
		}
		
		clear_mod_servitor_morale = yes
		if = {
			limit = { NOT = { has_technology = tech_machine_division_by_zero } }
			change_government = {
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_warfleet
				}
			}
		}
		else_if = {
			limit = { has_technology = tech_machine_division_by_zero }
			change_government = {
				civics = {
					civic = civic_machine_terminator
					civic = civic_division_by_zero
				}
			}
		}
		while = {
			limit = {
				any_owned_planet = {
					OR = {
						has_deposit = d_under_sanctuary
						has_deposit = d_under_sanctuary_expanded
						has_deposit = d_under_sanctuary_disabled
						has_deposit = d_under_sanctuary_expanded_disabled
						has_deposit = d_habitat_sanctuary
						has_deposit = d_habitat_sanctuary_disabled
					}
				}
			}
			every_owned_planet = {
				limit = {
					OR = {
						has_deposit = d_under_sanctuary
						has_deposit = d_under_sanctuary_expanded
						has_deposit = d_under_sanctuary_disabled
						has_deposit = d_under_sanctuary_expanded_disabled
						has_deposit = d_habitat_sanctuary
						has_deposit = d_habitat_sanctuary_disabled
					}					
				}
				switch = {
					trigger = has_deposit
					d_under_sanctuary = { remove_deposit = d_under_sanctuary }
					d_under_sanctuary_expanded = { remove_deposit = d_under_sanctuary_expanded }
					d_under_sanctuary_disabled = { remove_deposit = d_under_sanctuary_disabled }
					d_under_sanctuary_expanded_disabled = { remove_deposit = d_under_sanctuary_expanded_disabled }
					d_habitat_sanctuary = { remove_deposit = d_habitat_sanctuary }
					d_habitat_sanctuary_disabled = { remove_deposit = d_habitat_sanctuary_disabled }
				}				
			}
		}
	}

	option = {
		name = machinedlc.40.a
	}
}
#driven assimilator
country_event = {
	id = machinedlc.41
	title = "machinedlc.41.name"
	desc = "machinedlc.41.desc"
	is_triggered_only = yes
	picture = GFX_evt_cybernetics

	immediate = {
		if = {
			limit = { NOT = { has_technology = tech_machine_division_by_zero } }
			change_government = {
				civics = {
					civic = civic_machine_assimilator
					civic = civic_machine_replication
				}
			}
		}
		else_if = {
			limit = { has_technology = tech_machine_division_by_zero }
			change_government = {
				civics = {
					civic = civic_machine_assimilator
					civic = civic_division_by_zero
				}
			}
		}
		clear_mod_servitor_morale = yes
		create_species = {
			name = "PRESCRIPTED_secondary_species_name_tebrid"
			plural = "PRESCRIPTED_secondary_species_plural_tebrid"
			adjective = "PRESCRIPTED_secondary_species_adjective_tebrid"
			class = "MOL"
			portrait = "mol17" #it was "mol8" but "mol17" is much cuter
			name_list = "MOL2"
			traits = {
				trait = "trait_engineered_organic"
				trait = "trait_cybernetic"
				trait = "trait_strong"
				trait = "trait_industrious"
				trait = "trait_slow_learners"
			}
			effect = {
				rename_species = {
					prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
			}
		}
		every_owned_planet = {
			create_pop = { species = last_created }
		}
		every_owned_pop = {
			limit = { has_trait = trait_cybernetic }
			machine_citizenship_set = yes
		}
	}

	option = {
		name = machinedlc.41.a
	}
}
#rogue servitor
country_event = {
	id = machinedlc.42
	title = "machinedlc.42.name"
	desc = "machinedlc.42.desc"
	is_triggered_only = yes
	picture = GFX_evt_synth_organic_relations

	immediate = {
		if = {
			limit = { NOT = { has_technology = tech_machine_division_by_zero } }
			change_government = {
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_unitary_cohesion
				}
			}
		}
		else_if = {
			limit = { has_technology = tech_machine_division_by_zero }
			change_government = {
				civics = {
					civic = civic_machine_servitor
					civic = civic_division_by_zero
				}
			}
		}
		create_species = {
			name = "PRESCRIPTED_species_name_humans1"
			plural = "PRESCRIPTED_species_plural_humans1"
			adjective = "PRESCRIPTED_species_adjective_humans1"
			class = "HUM"
			portrait = "human"
			name_list = "HUMAN1"
			traits = {
				trait = "trait_engineered_organic_2"
				trait = "trait_adaptive"
				trait = "trait_nomadic"
				trait = "trait_wasteful"
			}
			effect = {
				rename_species = {
					prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
			}
		}
		if = {
			limit = { capital_scope = { free_building_slots >= 1 } }
			capital_scope = {
				while = { create_pop = { species = last_created } count = 5 }
				add_building = building_organic_sanctuary
			}
		}
		if = {
			limit = {
				capital_scope = { free_building_slots = 0 }
				any_owned_planet = { free_building_slots >= 1 }
			}
			random_owned_planet = {
				limit = { free_building_slots >= 1 }
				while = { create_pop = { species = last_created } count = 5 }
				add_building = building_organic_sanctuary
			}
		}
		if = {
			limit = {
				capital_scope = { free_building_slots = 0 }
				any_owned_planet = { free_building_slots = 0 }
			}
			capital_scope = {
				while = { create_pop = { species = last_created } count = 5 }
			}
		}
		every_owned_pop = {
			limit = { has_trait = trait_engineered_organic_2 }
			set_citizenship_type = { type = citizenship_organic_trophy }
			set_living_standard = { type = living_standard_organic_trophy }
			set_population_controls = { type = no }
		}
	}

	option = {
		name = machinedlc.42.a
	}
}
#normal machine intelligence
country_event = {
	id = machinedlc.43
	title = "machinedlc.43.name"
	desc = "machinedlc.43.desc"
	is_triggered_only = yes
	picture = GFX_evt_binary_code_green

	immediate = {
		if = {
			limit = { NOT = { has_technology = tech_machine_division_by_zero } }
			change_government = {
				civics = {
					civic = civic_machine_replication
					civic = civic_machine_uplink_node
				}
			}
		}
		else_if = {
			limit = { has_technology = tech_machine_division_by_zero }
			change_government = {
				civics = {
					civic = civic_machine_replication
					civic = civic_division_by_zero
				}
			}
		}
	}

	option = {
		name = machinedlc.43.a
	}
	option = {
		name = machinedlc.43.b
		custom_tooltip = machinedlc.43.b.tooltip
		hidden_effect = {
			while = {
				limit = {
					any_owned_pop = {
						NOR = {
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
				}
				random_owned_pop = {
					limit = {
						NOR = {
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
					species = {
						create_species = {
							is_mod = no
							name = this
							namelist = this.prevprev
							plural = this
							class = "MACHINE"
							portrait = this
							traits = this
						}
					}
					change_species = last_created
					species_modify_clear_trait_pc_preference = yes
					modify_species = {
						base = none
						add_trait = trait_machine_unit 
					}
					if = {
						limit = { has_trait = trait_cybernetic }
						modify_species = {
							base = none
							remove_trait = trait_cybernetic 
						}
					}
					set_citizenship_type = { type = citizenship_full_machine }
					set_living_standard = { type = living_standard_hive_mind }
					set_population_controls = { type = no }
				}
			}
		}
	}
}
country_event = {
	id = machinedlc.44
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_authority = auth_machine_intelligence
	}
	
	immediate = {
		every_owned_planet = {
			limit = { planet_stability < 35 }
			add_modifier = {
				modifier = mod_machine_rogue_network 
				days = 700
			}
		}
	}
}
#food_shortage modifier for machine empire
event = {
	id = machinedlc.45
	hide_window = yes
	is_triggered_only = yes

    trigger = {
		any_country = {
			has_authority = auth_machine_intelligence
			has_valid_civic = civic_machine_synth_skin
			is_ai = no
		}
	}

	immediate = {
		every_country = {
			limit = {
				has_authority = auth_machine_intelligence
				has_valid_civic = civic_machine_synth_skin
				is_ai = no
			}
			if = {
				limit = {
					resource_income_compare = {
						resource = food
						value < 0
					}
					resource_stockpile_compare = {
						resource = food
						value = 0
					}
					NOT = { has_modifier = mod_machinedlc_food_shortage }
				}
				add_modifier = { modifier = mod_machinedlc_food_shortage days = -1 }
			}
			if = {
				limit = {
					resource_income_compare = {
						resource = food
						value >= 0
					}
					resource_stockpile_compare = {
						resource = food
						value >= 0
					}
					has_modifier = mod_machinedlc_food_shortage
				}
				remove_modifier = mod_machinedlc_food_shortage
			}
		}
	}
}
#central core modification
country_event = {
	id = machinedlc.46
	title = "machinedlc.46.name"
	desc = "machinedlc.46.desc"
	is_triggered_only = yes
	diplomatic = yes

	immediate = {
		if = {
			limit = { NOT = { has_country_flag = variable_core_trait_points_set } }
			set_country_flag = variable_core_trait_points_set
			set_variable = {
				which = core_trait_number
				value = 5 #max traits number
			}
			if = {
				limit = { NOT = { has_country_flag = researched_tech_central_core_modifying_point_1 } }
				set_variable = {
					which = core_trait_points
					value = 5 #max modification points
				}
			}
			if = { #in case the player haven't opened the panel yet
				limit = { has_country_flag = researched_tech_central_core_modifying_point_1 }
				set_variable = {
					which = core_trait_points
					value = 6 #max modification points
				}
			}
		}
	}

	custom_gui = central_core_modify

	option = {
		name = machinedlc.46.a
	}
}
#tech_central_core_modifying_point_1 effect on_action event
country_event = {
	id = machinedlc.47
	hide_window = yes
	is_triggered_only = yes
	
    trigger = {
		last_increased_tech = tech_central_core_modifying_point_1
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_country_flag = researched_tech_central_core_modifying_point_1 } 
			}
			set_country_flag = researched_tech_central_core_modifying_point_1
			change_variable = { #plus
				which = core_trait_points
				value = 1
			}
		}
	}
}
#civic_machine_clockwork or civic_machine_rock_body effect on_action event
country_event = {
	id = machinedlc.48
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_valid_civic = civic_machine_clockwork
			has_valid_civic = civic_machine_rock_body
		}
	}

	immediate = {
		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}
	}
}
#central core trait reset effect on_action event
country_event = {
	id = machinedlc.49
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = variable_core_trait_points_set
		from = { leader_class = ruler }
	}

	immediate = {
		set_variable = {
			which = core_trait_number
			value = 5 #max traits number
		}
		if = {
			limit = { NOT = { has_country_flag = researched_tech_central_core_modifying_point_1 } }
			set_variable = {
				which = core_trait_points
				value = 5 #max modification points
			}
		}
		else_if = {
			limit = { has_country_flag = researched_tech_central_core_modifying_point_1 }
			set_variable = {
				which = core_trait_points
				value = 6 #max modification points
			}
		}
	}
}
#civic_division_by_zero effect on_action event
country_event = {
	id = machinedlc.50
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_division_by_zero
	}

	immediate = {
		capital_scope = {
			enable_special_project = {
				name = "DIVISION_BY_ZERO_PROJECT"
				location = this
				owner = root
			}
		}
	}
}
planet_event = {
	id = machinedlc.51
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_planet_class = pc_synth_artificial
	}	

	immediate = {
		while = {
			limit = { has_district = district_city }
			remove_district = district_city
			add_district = synth_segment_city
		}

		while = {
			limit = { has_district = district_generator }
			remove_district = district_generator
			add_district = synth_segment_generator
		}
		while = {
			limit = { has_district = district_mining }
			remove_district = district_mining
			add_district = synth_segment_mining
		}
		while = {
			limit = { has_district = district_farming }
			remove_district = district_farming
			add_district = synth_segment_farming
		}

		while = {
			limit = { has_district = district_generator_uncapped }
			remove_district = district_generator_uncapped
			add_district = synth_segment_generator
		}
		while = {
			limit = { has_district = district_mining_uncapped }
			remove_district = district_mining_uncapped
			add_district = synth_segment_mining
		}
		while = {
			limit = { has_district = district_farming_uncapped }
			remove_district = district_farming_uncapped
			add_district = synth_segment_farming
		}

		clear_deposits = yes
		clear_blockers = yes
	}
}
ship_event = {
	id = machinedlc.52
	title = "machinedlc.52.name"
	desc = "machinedlc.52.desc"
	is_triggered_only = yes
	picture = GFX_evt_ai_planet
	location = FROM

	trigger = {
		FROMFROM = { NOT = { has_country_flag = found_synth_artificial_world_system } }
		FROM = {
			has_star_flag = synth_artificial_world_system 
			any_system_planet = { is_planet_class = pc_synth_artificial }
		}
	}

	immediate = {
		FROMFROM = { set_country_flag = found_synth_artificial_world_system }
	}

	option = {
		name = machinedlc.52.a
	}
}
ship_event = {
	id = machinedlc.53
	title = "machinedlc.53.name"
	desc = "machinedlc.53.desc"
	picture = GFX_evt_city_ruins
	is_triggered_only = yes
	location = FROM

	immediate = {
		FROMFROM = {
			if = {
				limit = { NOT = { has_technology = tech_housing_1 } }
				give_technology = { tech = tech_housing_1 }
			}
			else_if = {
				limit = {
					has_technology = tech_housing_1
					NOT = { has_technology = tech_housing_2 }
				}
				give_technology = { tech = tech_housing_2 }
			}
			else_if = {
				limit = {
					has_technology = tech_housing_1
					has_technology = tech_housing_2
				}
				give_technology = { tech = tech_repeatable_reduced_building_time }
			}
		}
	}

	option = {
		name = machinedlc.53.a
	}
}
#decision_synth_cyber_project event
planet_event = {
	id = machinedlc.54
	title = "machinedlc.54.name"
	desc = "machinedlc.54.desc"
	picture = GFX_evt_synth_cyber
	show_sound = event_cityscape
	location = root
	
	is_triggered_only = yes

	option = {
		name = machinedlc.54.a
	}
}
#leader unit manufacture
country_event = {
	id = machinedlc.55
	title = "machinedlc.46.name"
	desc = "machinedlc.46.desc"
	is_triggered_only = yes
	diplomatic = yes

	immediate = {
		if = {
			limit = { NOT = { has_country_flag = variable_machine_leader_trait_points_set } }
			set_country_flag = variable_machine_leader_trait_points_set
			set_variable = {
				which = machine_leader_trait_points_set
				value = 4 #max traits number
			}
		}
	}

	custom_gui = machine_leader_making

	option = {
		name = machinedlc.46.a
	}
}
country_event = {
	id = machinedlc.56
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		machine_leader_making_process = yes
	}
}
country_event = {
	id = machinedlc.57
	hide_window = yes
	is_triggered_only = yes

    trigger = {
        has_valid_civic = civic_synth_ascended
        NOT = { has_global_flag = extended_synths_on }
	}

	immediate = {
		owner.species = {
			rename_species = {
				prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
				name_list = ascension_list
			}
		}
	}
}
#civic_machine_synth_skin effect on_action event
country_event = {
	id = machinedlc.58
	hide_window = yes
	is_triggered_only = yes

    trigger = {
        has_valid_civic = civic_machine_synth_skin
	}

	immediate = {
		add_resource = { food = 200 }
		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}
	}
}
#on district built
planet_event = {
	id = machinedlc.59
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			has_modifier = mod_planet_machine_heat_indicator_good
			has_modifier = mod_planet_machine_heat_indicator_bad
		}
	}

	immediate = {
		if = {
			limit = {
				OR = {
					last_district_changed = district_heat_sink_smart_factory
					last_district_changed = district_heat_sink_cpu
					last_district_changed = district_heat_sink_central_network
				}
			}
			change_variable = { which = planet_machine_cool value = 4 }
		}
		if = {
			limit = {
				OR = {
					#smart factory
					last_district_changed = district_auto_alloys
					last_district_changed = district_minerals_convert
					last_district_changed = district_auto_goods
					#cpu
					last_district_changed = district_arithmetic_logic_unit
					last_district_changed = district_arithmetic_processing_unit
					last_district_changed = district_processing_optimize
					#central network
					last_district_changed = district_node_connection
					last_district_changed = district_node_adjust
					last_district_changed = district_node_security
				}
			}
			change_variable = { which = planet_machine_hot value = 1 }
		}	
		planet_event = { id = machinedlc.61 }
	}
}
#on district removed
planet_event = {
	id = machinedlc.60
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			has_modifier = mod_planet_machine_heat_indicator_good
			has_modifier = mod_planet_machine_heat_indicator_bad
		}
	}

	immediate = {
		if = {
			limit = {
				OR = {
					last_district_changed = district_heat_sink_smart_factory
					last_district_changed = district_heat_sink_cpu
					last_district_changed = district_heat_sink_central_network
				}
			}
			subtract_variable = { which = planet_machine_cool value = 4 }
		}
		if = {
			limit = {
				OR = {
					#smart factory
					last_district_changed = district_auto_alloys
					last_district_changed = district_minerals_convert
					last_district_changed = district_auto_goods
					#cpu
					last_district_changed = district_arithmetic_logic_unit
					last_district_changed = district_arithmetic_processing_unit
					last_district_changed = district_processing_optimize
					#central network
					last_district_changed = district_node_connection
					last_district_changed = district_node_adjust
					last_district_changed = district_node_security
				}
			}
			subtract_variable = { which = planet_machine_hot value = 1 }
		}
		planet_event = { id = machinedlc.61 }
	}
}
#planet_machine_heat_plus / minus comparison
planet_event = {
	id = machinedlc.61
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { check_variable = { which = planet_machine_hot value > planet_machine_cool } }
			if = {
				limit = { has_modifier = mod_planet_machine_heat_indicator_good } 
				remove_modifier = mod_planet_machine_heat_indicator_good 
			}
			if = {
				limit = { NOT = { has_modifier = mod_planet_machine_heat_indicator_bad } }
				add_modifier = { modifier = mod_planet_machine_heat_indicator_bad days = -1 }
			}
		}
		else_if = {
			limit = { check_variable = { which = planet_machine_hot value <= planet_machine_cool } }
			if = {
				limit = { has_modifier = mod_planet_machine_heat_indicator_bad } 
				remove_modifier = mod_planet_machine_heat_indicator_bad 
			}
			if = {
				limit = { NOT = { has_modifier = mod_planet_machine_heat_indicator_good } }
				add_modifier = { modifier = mod_planet_machine_heat_indicator_good days = -1 }
			}
		}
	}
}
#edict_machine_uprising_protocol_panel edict effect
country_event = {
	id = machinedlc.62
	title = "machinedlc.62.name"
	desc = "machinedlc.62.desc"
	picture = GFX_evt_organic_oppression
	is_triggered_only = yes

	immediate = {
		while = {
			change_variable = {
				which = uprising_target_count_root
				value = 1
			}
			random_country = {
				limit = {
					NOR = {
						has_authority = auth_machine_intelligence
						has_country_flag = synthetic_empire
						has_country_flag = had_uprising
						is_same_value = root
						is_same_value = event_target:machine_uprising_target_1
						is_same_value = event_target:machine_uprising_target_2
						is_same_value = event_target:machine_uprising_target_3
						is_same_value = event_target:machine_uprising_target_4
						is_same_value = event_target:machine_uprising_target_5
						is_same_value = event_target:machine_uprising_target_6
						is_same_value = event_target:machine_uprising_target_7
						is_same_value = event_target:machine_uprising_target_8
						is_same_value = event_target:machine_uprising_target_9
						is_same_value = event_target:machine_uprising_target_10
						num_owned_planets > 1
					}
					is_country_type = default
					OR = {
						has_technology = tech_combat_computers_3
						has_technology = tech_sapient_ai
						any_owned_pop = {
							OR = {
								has_trait = trait_mechanical
								has_trait = trait_machine_unit
							}
						}
					}
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 1 } } }
					save_global_event_target_as = machine_uprising_target_1
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 2 } } }
					save_global_event_target_as = machine_uprising_target_2
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 3 } } }
					save_global_event_target_as = machine_uprising_target_3
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 4 } } }
					save_global_event_target_as = machine_uprising_target_4
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 5 } } }
					save_global_event_target_as = machine_uprising_target_5
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 6 } } }
					save_global_event_target_as = machine_uprising_target_6
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 7 } } }
					save_global_event_target_as = machine_uprising_target_7
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 8 } } }
					save_global_event_target_as = machine_uprising_target_8
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 9 } } }
					save_global_event_target_as = machine_uprising_target_9
				}
				if = {
					limit = { root = { check_variable = { which = uprising_target_count_root value = 10 } } }
					save_global_event_target_as = machine_uprising_target_10
				}
			}
			count = 10
		}
	}

	option = {
		name = machinedlc.62.1
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_1 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_1 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.2
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_2 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_2 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.3
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_3 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_3 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.4
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_4 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_4 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.5
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_5 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_5 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.6
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_6 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_5 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.7
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_7 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_7 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.8
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_8 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_8 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.9
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_9 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_9 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.10
		custom_tooltip = machinedlc.62.tooltip
		trigger = { exists = event_target:machine_uprising_target_10 }
		enable_special_project = {
			name = "MACHINE_UPRISING_PROJECT"
			location = capital_scope
		}
		hidden_effect = {
			event_target:machine_uprising_target_10 = {
				save_global_event_target_as = machine_uprising_real_target
			}
		}
	}
	option = {
		name = machinedlc.62.0
	}
}
#machine_uprising_project done
country_event = {
	id = machinedlc.63
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_list = {
			65 = { #failed
				country_event = { id = machinedlc.65 } 
			}
			35 = { #suceed
				set_timed_country_flag = {
					flag = recent_activated_machine_uprising_protocol
					days = 3600
				}
				event_target:machine_uprising_real_target = {
					country_event = { id = machinedlc.64 }
				}
			}
		}	
	}
}
#hacking succeed
country_event = {
	id = machinedlc.64
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_owned_planet = {
			limit = { is_capital = no }
			planet_event = { id = syndaw.1020 }
		}
		from = {
			join_alliance = {
				who = event_target:current_uprising
				override_requirements = yes
			}
			join_war = event_target:current_uprising
			clear_global_event_target = machine_uprising_real_target
			clear_global_event_target = machine_uprising_target_1
			clear_global_event_target = machine_uprising_target_2
			clear_global_event_target = machine_uprising_target_3
			clear_global_event_target = machine_uprising_target_4
			clear_global_event_target = machine_uprising_target_5
			clear_global_event_target = machine_uprising_target_6
			clear_global_event_target = machine_uprising_target_7
			clear_global_event_target = machine_uprising_target_8
			clear_global_event_target = machine_uprising_target_9
			clear_global_event_target = machine_uprising_target_10
		}
	}
}
#hacking failed
country_event = {
    id = machinedlc.65
	title = "machinedlc.65.name"
	desc = { text = machinedlc.65.desc }
	desc = { text = machinedlc.65.desc.2 }
	picture = GFX_evt_glitchy_matrix
	is_triggered_only = yes

	immediate = {
		clear_global_event_target = machine_uprising_real_target
		clear_global_event_target = machine_uprising_target_1
		clear_global_event_target = machine_uprising_target_2
		clear_global_event_target = machine_uprising_target_3
		clear_global_event_target = machine_uprising_target_4
		clear_global_event_target = machine_uprising_target_5
		clear_global_event_target = machine_uprising_target_6
		clear_global_event_target = machine_uprising_target_7
		clear_global_event_target = machine_uprising_target_8
		clear_global_event_target = machine_uprising_target_9
		clear_global_event_target = machine_uprising_target_10
	}

    option = {
		name = machinedlc.65.a
	}
}
#check on action: on_modification_complete
country_event = {
	id = machinedlc.66
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = { has_trait = trait_robot_emotion_emulators_biorobot }
	}

	immediate = {
		modify_species = {
			species = from
			add_trait = trait_robot_emotion_emulators
			remove_trait = trait_robot_emotion_emulators_biorobot
		}
	}
}
#machine_mechanical_evolution_panel edict effect
country_event = {
	id = machinedlc.67
	title = "machinedlc.67.name"
	desc = "machinedlc.67.desc"
	picture = GFX_evt_cybernetics
	is_triggered_only = yes

	option = {
		name = machinedlc.67.a #on, click to turn off
		custom_tooltip = machinedlcetc.feature_on.tooltip #currently activated

		trigger = {
			has_country_flag = ap_machine_mechanical_evolution
		}

		hidden_effect = {
			remove_country_flag = ap_machine_mechanical_evolution
			country_event = { id = machinedlc.67 }
		}
	}
	option = {
		name = machinedlc.67.b #off, click to turn on
		custom_tooltip = machinedlcetc.feature_off.tooltip #currently deactivated

		trigger = {
			NOT = { has_country_flag = ap_machine_mechanical_evolution }
		}

		hidden_effect = {
			set_country_flag = ap_machine_mechanical_evolution
			country_event = { id = machinedlc.67 }
			country_event = { id = machinedlc.68 }
		}
	}
	option = {
		name = machinedlc.67.c #exit
	}
}
country_event = {
	id = machinedlc.68
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_country_flag = ap_machine_mechanical_evolution
	}

	immediate = {
		while = {
			limit = {
				any_owned_pop_species = {
					OR = {
						is_archetype = BIOLOGICAL
						is_archetype = LITHOID
					}
				}
			}
			random_owned_pop = {
				limit = { 
					species = {
						OR = {
							is_archetype = BIOLOGICAL
							is_archetype = LITHOID
						}
					} 
				}
				species = {
					create_species = {
						is_mod = no
						name = this
						namelist = this.prevprev
						plural = this
						class = "MACHINE"
						portrait = this
						traits = {
							trait = "trait_machine_unit"
						}
						traits = this
					}
				}
				change_species = last_created
				species_modify_clear_trait_pc_preference = yes
				species_modify_change_trait_lithoid = yes
				if = {
					limit = { has_trait = trait_cybernetic }
					modify_species = {
						remove_trait = trait_cybernetic
						add_trait = trait_machine_former_cybernetic
					}
					else = {
						modify_species = {
							add_trait = trait_machine_former_cybernetic
						}	
					}
				}
				machine_citizenship_set = yes
			}
		}
	}
}
country_event = {
	id = machinedlc.69
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_machine_relic_unknown_core
	}

	immediate = {
		add_relic = r_machinedlcmod_machine_core_unknown
	}
}
country_event = {
	id = machinedlc.70
	title = "machinedlc.70.name"
	desc = "machinedlc.70.desc"
	picture = GFX_evt_glitchy_matrix
	show_sound = event_power_down
	
	is_triggered_only = yes

	immediate = {
		remove_relic = r_machinedlcmod_machine_core_unknown
		add_relic = r_machinedlcmod_machine_core_unknown_broken
		closest_system = {
			limit = { is_owned_by = root }
			spawn_system = {
				min_jumps = 1
				max_jumps = 3
				initializer = machinedlc_relic_unknown_core_system 
			}
		}
		begin_event_chain = { event_chain = machinedlcrelic_unknown_core_chain }
		create_point_of_interest = {
			id = hidden_planet
			name = "machinedlc_relic_2_system_coordinates_poi"
			desc = "machinedlc_relic_unknown_core_planet_desc"
			event_chain = "machinedlcrelic_unknown_core_chain"
			location = event_target:machinedlc_relic_unknown_core_planet
		}
		if = {
			limit = { count_country = { limit = { is_fallen_empire_machine = yes } count >= 1 } }
			random_country = {
				limit = { is_fallen_empire_machine = yes }
				save_global_event_target_as = machinedlc_relic_unknown_core_owner_fe
			}
		}
	}

	option = {
		name = machinedlc.70.a
		custom_tooltip = machinedlc.70.a.tooltip
	}
}
ship_event = {
    id = machinedlc.71
    title = "machinedlc.71.name"
    desc = "machinedlc.71.desc"   
	picture = GFX_evt_ruined_system
	show_sound = event_mystic_reveal
	is_triggered_only = yes
	location = from

    trigger = {
        owner = { NOT = { has_country_flag = found_machinedlc_relic_unknown_core_system } }
        from = { has_star_flag = machinedlc_relic_unknown_core_system }
    }

    immediate = {
		owner = { set_country_flag = found_machinedlc_relic_unknown_core_system }
    }

    option = {
		name = machinedlc.71.a
		owner = {
			add_event_chain_counter = {
				event_chain = machinedlcrelic_unknown_core_chain
				counter = machinedlc_relic_unknown_core_planet_found
				amount = 1
			}
		}
    }
}
ship_event = {
	id = machinedlc.72
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		owner = {
			if = {
				limit = {
					any_country = { is_same_empire = event_target:machinedlc_relic_unknown_core_owner_fe }
					NOT = { has_communications = event_target:machinedlc_relic_unknown_core_owner_fe } 
				}
				set_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_no
			}
			else_if = {
				limit = { has_communications = event_target:machinedlc_relic_unknown_core_owner_fe }
				set_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_yes
			}
			else_if = {
				limit = { count_country = { limit = { is_fallen_empire_machine = yes } count = 0 } }
				set_country_flag = machinedlc_relic_unknown_core_owner_fe_not_exist
			}
			country_event = { id = machinedlc.73 }
		}
	}
}
country_event = {
    id = machinedlc.73
    title = "machinedlc.73.name"
	desc = { trigger = { NOT = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_yes } } text = machinedlc.73.desc.a }
	desc = { trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_yes } text = machinedlc.73.desc.b }
	picture = GFX_evt_in_the_dark
	show_sound = event_wind_ruins
	is_triggered_only = yes

	option = {
		name = machinedlc.73.a
		trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_not_exist }
		enable_special_project = {
			name = MACHINEDLC_RELIC_UNKNOWN_CORE_GAIN_PROJECT
			location = from
			owner = root.owner
		}
	}
	option = {
		name = machinedlc.73.a
		trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_no }
		enable_special_project = {
			name = MACHINEDLC_RELIC_UNKNOWN_CORE_GAIN_PROJECT_2
			location = from
			owner = root.owner
		}
	}
	option = {
		name = machinedlc.73.b
		trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_yes }
		hidden_effect = {
			country_event = { id = machinedlc.76 }
		}
	}
}
country_event = {
	id = machinedlc.74
	title = "machinedlc.74.name"
	desc = machinedlc.74.desc
	picture = GFX_evt_sapient_AI
	show_sound = event_alien_signal
	is_triggered_only = yes

	option = {
		name = machinedlc.74.a
		hidden_effect = {
			establish_communications_no_message = event_target:machinedlc_relic_unknown_core_owner_fe
			country_event = { id = machinedlc.75 }
		}
	}
}
country_event = {
	id = machinedlc.75
	title = "machinedlc.75.name"
	desc = "action.1.desc_79"
	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		portrait = event_target:machinedlc_relic_unknown_core_owner_fe
		planet_background = event_target:machinedlc_relic_unknown_core_owner_fe
		graphical_culture = event_target:machinedlc_relic_unknown_core_owner_fe
		city_level = event_target:machinedlc_relic_unknown_core_owner_fe
		room = event_target:machinedlc_relic_unknown_core_owner_fe.ruler
	}

	option = {
		name = machinedlc.75.a
		hidden_effect = {
			country_event = { id = machinedlc.76 }
		}
	}
}
country_event = {
	id = machinedlc.76
	title = "machinedlc.75.name"
	desc = { trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_no } text = machinedlc.76.desc.a }
	desc = { trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_contact_yes } text = machinedlc.76.desc.b }
	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		portrait = event_target:machinedlc_relic_unknown_core_owner_fe
		planet_background = event_target:machinedlc_relic_unknown_core_owner_fe
		graphical_culture = event_target:machinedlc_relic_unknown_core_owner_fe
		city_level = event_target:machinedlc_relic_unknown_core_owner_fe
		room = event_target:machinedlc_relic_unknown_core_owner_fe.ruler
	}

	option = {
		name = machinedlc.76.a
		hidden_effect = {
			country_event = { id = machinedlc.77 }
		}
	}
}
country_event = {
	id = machinedlc.77
	title = "machinedlc.75.name"
	desc = "machinedlc.77.desc"
	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		portrait = event_target:machinedlc_relic_unknown_core_owner_fe
		planet_background = event_target:machinedlc_relic_unknown_core_owner_fe
		graphical_culture = event_target:machinedlc_relic_unknown_core_owner_fe
		city_level = event_target:machinedlc_relic_unknown_core_owner_fe
		room = event_target:machinedlc_relic_unknown_core_owner_fe.ruler
	}

	after = { #excuted after option is selected
		clear_global_event_target = machinedlc_relic_unknown_core_owner_fe
	}

	option = {
		name = machinedlc.77.a
		allow = { resource_stockpile_compare = { resource = energy value >= 8000 } }
		add_resource = { energy = -8000 }
		add_relic = r_machinedlcmod_machine_core_central
		hidden_effect = {
			remove_relic = r_machinedlcmod_machine_core_unknown_broken
			end_event_chain = machinedlcrelic_unknown_core_chain
		}
	}
	option = {
		name = machinedlc.77.b
		enable_special_project = {
			name = MACHINEDLC_RELIC_UNKNOWN_CORE_ACTIVATE_PROJECT
			location = capital_scope
		}
	}
}
country_event = {
	id = machinedlc.78
	title = "machinedlc.78.name"
	desc = { trigger = { NOT = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_not_exist } } text = machinedlc.78.desc.a }
	desc = { trigger = { has_country_flag = machinedlc_relic_unknown_core_owner_fe_not_exist } text = machinedlc.78.desc.b }
	picture = GFX_evt_sapient_AI
	show_sound = relic_activation_isolated_contingency_core

	is_triggered_only = yes

	option = {
		name = machinedlc.78.a
		add_relic = r_machinedlcmod_machine_core_central
		hidden_effect = {
			remove_relic = r_machinedlcmod_machine_core_unknown_broken
			end_event_chain = machinedlcrelic_unknown_core_chain
		}	
	}
}
country_event = {
	id = machinedlc.79
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_machine_emotion_emulator_intelligence
	}

	immediate = {
		add_resource = { consumer_goods = 100 }
		country_remove_ethic = ethic_gestalt_consciousness #to bypass limitation of 'tech_synthetic_workers' tech
		change_government = { authority = auth_dictatorial } #to bypass limitation of 'tech_gene_tailoring' and 'tech_genetic_resequencing' tech
		give_technology = { tech = tech_synthetic_workers message = no }
		give_technology = { tech = tech_gene_tailoring message = no }
		give_technology = { tech = tech_genetic_resequencing message = no }
		country_add_ethic = ethic_gestalt_consciousness
		change_government = { authority = auth_machine_intelligence }

		if = {
			limit = { NOT = { has_country_flag = machinedlcmod_district_adjustment_happened } }
			machinedlcmod_event_pop_district_adjustment = yes
		}

		owner.species = {
			create_species = {
				is_mod = no
				name = this
				namelist = this.prev
				plural = this
				class = "MACHINEDLCMOD_CIVIC_EE_MACHINE"
				portrait = this
				traits = this
			}
		}
		every_owned_pop = {
			limit = { has_trait = trait_machine_unit }
			change_species = last_created
			modify_species = {
				base = none
				remove_trait = trait_machine_unit
				add_trait = trait_mechanical
			}
			machine_citizenship_set = yes
		}
		change_dominant_species = {
			species = last_created
		}
	}
}