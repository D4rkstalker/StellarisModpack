namespace = compound_spawn

# Trigger
event = {
	id = compound_spawn.000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		#########################################################################################################################
		##################################################################### Can only spawn if ALL of the following is true:
		has_global_flag = galactic_crisis_happened							# Vanilla crisis has spawned
		end_game_years_passed > 0											# End game year has passed
		#########################################################################################################################
		##################################################################### Can only spawn if ALL of the following is NOT true:
		NOR = {
			has_global_flag = ehof_disabled									# EHOF's are disabled
			has_global_flag = compound_disabled								# Compound is disabled
			has_global_flag = compound_invasion_happened					# Already spawned
		}
		#########################################################################################################################
		##################################################################### Can only spawn if ONE of the following is true:
		OR = {
			has_global_flag = compound_capped_2								# Compound + Vanilla x1 is enabled
			has_global_flag = compound_capped_3								# Compound + Vanilla x2 is enabled
			has_global_flag = compound_capped_4								# Compound + Vanilla x3 is enabled
			has_global_flag = compound_capped_s								# Compound shuffle is enabled
			AND = {															# The War in heaven has started and ended
				has_global_flag = war_in_heaven_started
				NOT = { has_global_flag = war_in_heaven_ongoing }
			}
			AND = {															# The Contingency has started and ended
				has_global_flag = ai_invasion_happened
				NOT = { has_global_flag = ai_invasion_ongoing }
			}
			AND = {															# The Unbidden has started and ended
				has_global_flag = extradimensional_invasion_happened
				has_global_flag = extradimensional_invasion_defeated
			}
			AND = {															# The Scourge has started and ended
				has_global_flag = prethoryn_invasion_happened
				NOT = { has_global_flag = ongoing_prethoryn_invasion }
			}
		}
	}

	immediate = {
		random_country = {
			limit = { is_country_type = global_event }
			if = {
				limit = { exists = event_target:current_system_creator }
				clear_global_event_target = current_system_creator
			}
			save_global_event_target_as = current_system_creator

			set_global_flag = compound_invasion_happened
			country_event = { id = compound_spawn.001 days = 2 }			# Spawn systems

			if = {
				limit = {
					NOR = {
						has_global_flag = compound_capped_1					# Spawn after vanilla crisis (Dealt with in trigger)
						has_global_flag = compound_capped_2					# Spawn with vanilla crisis  (Dealt with in trigger)
					}
				}
				if = {		limit = { has_global_flag = compound_capped_4 } set_variable = { which = giga_spawn_crisis_compound value = 2 } }	# 2 additional crisis
				else_if = {	limit = { has_global_flag = compound_capped_3 } set_variable = { which = giga_spawn_crisis_compound value = 1 } }	# 1 additional crisis
				else_if = {
					limit = { has_global_flag = compound_capped_s }
					random_list = {
						1 = { set_variable = { which = giga_spawn_crisis_compound value = 0 } remove_global_flag = compound_capped_s set_global_flag = compound_capped_2 }
						1 = { set_variable = { which = giga_spawn_crisis_compound value = 1 } remove_global_flag = compound_capped_s set_global_flag = compound_capped_3 }
						1 = { set_variable = { which = giga_spawn_crisis_compound value = 2 } remove_global_flag = compound_capped_s set_global_flag = compound_capped_4 }
					}
				}

				while = {
					limit = { check_variable = { which = giga_spawn_crisis_compound value > 0 } }
					subtract_variable = { which = giga_spawn_crisis_compound value = 1 }
					random_list = {
						1 = {	### Prethoryn Scourge (Swarm)
							modifier = { factor = 0 has_global_flag = prethoryn_invasion_happened }
							modifier = { factor = 0 has_global_flag = giga_spawned_scourge }
							country_event = { id = crisis.10 days = 100 random = 400 }
							set_global_flag = giga_spawned_scourge
						}
						1 = {	### Unbidden (Extradimensionals)
							modifier = { factor = 0 has_global_flag = extradimensional_invasion_happened }
							modifier = { factor = 0 has_global_flag = giga_spawned_unbidden }
							country_event = { id = crisis.1000 days = 100 random = 400 }
							set_global_flag = giga_spawned_unbidden
						}
						1 = {	### Contingency (AI)
							modifier = { factor = 0 has_global_flag = ai_invasion_happened }
							modifier = { factor = 0 has_global_flag = giga_spawned_contingency }
							country_event = { id = crisis.2005 days = 100 random = 400 }
							set_global_flag = giga_spawned_contingency
						}
					}
				}
			}
		}
	}
}

# Spawn compound country/cluster
country_event = {
	id = compound_spawn.001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = ehof_spawning_compound

		create_species = {
			name = "NAME_Dark_Matter_Species"
			class = "compound"
			portrait = compound1
			traits = {
				trait = trait_psionic
				trait = trait_hive_mind
			}
			immortal = yes
			effect = { save_global_event_target_as = compound_species }
		}
		create_country = {
			name = "NAME_The_Compound"
			type = compound_empire
			species = event_target:compound_species
			ignore_initial_colony_error = yes
			day_zero_contact = no
			authority = auth_hive_mind
			ethos = { ethic = ethic_gestalt_consciousness }
			civics = {
				civic = civic_hive_devouring_swarm
				civic = civic_hive_one_mind
			}
			name_list = "compound"
			flag = {
				icon= {
					category = "special"
					file = "compound_flag.dds"
				}
				background= {
					category = "backgrounds"
					file = "hex.dds"
				}
				colors={
					"indigo"
					"black"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			save_global_event_target_as = compound_country
			create_leader = {
				class = ruler
				species = event_target:compound_species
				immortal = yes
				name = random
				effect = { save_event_target_as = compound_ruler }
			}
			set_leader = event_target:compound_ruler
			set_global_flag = compound_invasion_ongoing
			set_graphical_culture = ehof_01
			set_country_flag = day_0
			create_ship_design = { design = "NAME_Aegis" } add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Bulwark" } add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Bastion" } add_ship_design = last_created_design
			create_ship_design = { design = "NAME_Barricade" } add_ship_design = last_created_design
		}

		set_spawn_system_batch = begin
		if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 510 max_distance <= 520 hyperlane = no initializer = "special_init_01" } } }
		else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 485 max_distance <= 495 hyperlane = no initializer = "special_init_01" } } }
		else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 460 max_distance <= 470 hyperlane = no initializer = "special_init_01" } } }
		else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 360 max_distance <= 370 hyperlane = no initializer = "special_init_01" } } }
		else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 260 max_distance <= 270 hyperlane = no initializer = "special_init_01" } } }
		else = {									 no_scope = { spawn_system = { min_orientation_angle = 314 max_orientation_angle = 316 min_distance >= 510 max_distance <= 520 hyperlane = no initializer = "special_init_01" } } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_1 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 300 max_orientation_angle = 60  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_2 = {	spawn_system = { hyperlane = no min_distance >=  20 max_distance <=  30 min_orientation_angle = 10  max_orientation_angle = 80  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_2 = {	spawn_system = { hyperlane = no min_distance >=  20 max_distance <=  30 min_orientation_angle = 280 max_orientation_angle = 350 initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_3 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 10  max_orientation_angle = 80  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_3 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 280 max_orientation_angle = 350 initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_3 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 100 max_orientation_angle = 170 initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_5 = {	spawn_system = { hyperlane = no min_distance >=  20 max_distance <=  30 min_orientation_angle = 10  max_orientation_angle = 80  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_8 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 280 max_orientation_angle = 80  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_9 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 10  max_orientation_angle = 70  initializer = "special_init_01" } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		event_target:ehof_compound_system_9 = {	spawn_system = { hyperlane = no min_distance >=  10 max_distance <=  20 min_orientation_angle = 290 max_orientation_angle = 350 initializer = "compound_capital_system"   } }
		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.005 }	# Generate System Color
		country_event = { id = ehof_systems.006 }	# Generate Deposits

		# add hyperlanes
		event_target:ehof_compound_system_1 = {
			add_hyperlane = { from = event_target:ehof_compound_system_1	to = event_target:ehof_compound_system_2 }
		}
		event_target:ehof_compound_system_2 = {
			add_hyperlane = { from = event_target:ehof_compound_system_2		to = event_target:ehof_compound_system_3 }
			add_hyperlane = { from = event_target:ehof_compound_system_2		to = event_target:ehof_compound_system_4 }
		}
		event_target:ehof_compound_system_3 = {
			add_hyperlane = { from = event_target:ehof_compound_system_3		to = event_target:ehof_compound_system_5 }
			add_hyperlane = { from = event_target:ehof_compound_system_3		to = event_target:ehof_compound_system_6 }
			add_hyperlane = { from = event_target:ehof_compound_system_3		to = event_target:ehof_compound_system_7 }
		}
		event_target:ehof_compound_system_5 = {
			add_hyperlane = { from = event_target:ehof_compound_system_5		to = event_target:ehof_compound_system_7 }
			add_hyperlane = { from = event_target:ehof_compound_system_5		to = event_target:ehof_compound_system_8 }
		}
		event_target:ehof_compound_system_8 = {
			add_hyperlane = { from = event_target:ehof_compound_system_8		to = event_target:ehof_compound_system_9 }
		}
		event_target:ehof_compound_system_9 = {
			add_hyperlane = { from = event_target:ehof_compound_system_9		to = event_target:ehof_compound_system_10 }
			add_hyperlane = { from = event_target:ehof_compound_system_9		to = event_target:compound_capital_system }
		}
		set_spawn_system_batch = end

		every_system = {
			limit = { compound_cluster = yes }

			# Create Starbases
			create_starbase = {
				size = starbase_ehof_05
				owner = event_target:compound_country
			}

			# Spawn wormhole in compound cluster
			if = {
				limit = { has_star_flag = ehof_compound_system_1 }
				star = {
					set_planet_size = 12
					change_pc = pc_ehof_black_hole
				}
				spawn_megastructure = {
					type = "compound_wormhole_ehof"
					owner = event_target:compound_country
				}
			}

			# Change planet classes
			every_system_planet = {

				# Create mining stations
				if = {
					limit = {
						has_deposit_for = shipclass_mining_station
						has_mining_station = no
					}
					create_mining_station = { owner = event_target:compound_country }
				}

				# Create research stations
				if = {
					limit = {
						has_deposit_for = shipclass_research_station
						has_research_station = no
					}
					create_research_station = { owner = event_target:compound_country }
				}
			}

			# Create military stations
			create_compound_system_stations = yes
		}

		every_country = {
			add_modifier = { modifier = compound_invincible days = -1 }
			establish_communications_no_message = event_target:compound_country
		}

		remove_global_flag = ehof_spawning_compound
		if = {
			limit = {
				any_country = {
					is_ai = yes
					NOT = { any_neighbor_country = { is_ai = no } }
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							any_neighbor_system = { any_system_planet = { is_colony = yes } }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					NOT = { any_neighbor_country = { is_ai = no } }
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							any_neighbor_system = { any_system_planet = { is_colony = yes } }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
		else_if = {
			limit = {
				any_country = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							any_neighbor_system = { any_system_planet = { is_colony = yes } }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							any_neighbor_system = { any_system_planet = { is_colony = yes } }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
		else_if = {
			limit = {
				any_country = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							has_star_flag = empire_cluster
							cohesive_system = yes
						}
					}
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
		else_if = {
			limit = {
				any_country = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							cohesive_system = yes
						}
					}
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = {
						NOR = {
							any_system_planet = { is_colony = yes }
							cohesive_system = yes
						}
					}
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
		else_if = {
			limit = {
				any_country = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = { NOT = { cohesive_system = yes } }
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					ehof_default_country = yes
					any_system_within_border = { NOT = { cohesive_system = yes } }
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
		else = {
			random_country = {
				limit = {
					ehof_default_country = yes
					any_system_within_border = { NOT = { cohesive_system = yes } }
				}
				country_event = { id = compound_spawn.002 days = 30 }
			}
		}
	}
}

country_event = {
	id = compound_spawn.002
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		awaken_guardians_of_the_galaxy = yes					# Awaken Fallen Empires
		save_global_event_target_as = ehof_seized_country

		if = {
			limit = {
				any_system_within_border = {
					NOR = {
						any_system_planet = { is_colony = yes }
						any_neighbor_system = { any_system_planet = { is_colony = yes } }
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
			}
			random_system_within_border = {
				limit = {
					NOR = {
						any_system_planet = { is_colony = yes }
						any_neighbor_system = { any_system_planet = { is_colony = yes } }
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
				save_event_target_as = compound_invade_here_plz
			}
		}
		else_if = {
			limit = {
				any_system_within_border = {
					NOR = {
						any_system_planet = { is_colony = yes }
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
			}
			random_system_within_border = {
				limit = {
					NOR = {
						any_system_planet = { is_colony = yes }
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
				save_event_target_as = compound_invade_here_plz
			}
		}
		else_if = {
			limit = {
				any_system_within_border = {
					NOR = {
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
			}
			random_system_within_border = {
				limit = {
					NOR = {
						has_star_flag = empire_cluster
						cohesive_system = yes
					}
				}
				save_event_target_as = compound_invade_here_plz
			}
		}
		else = {
			random_system_within_border = {
				limit = { NOT = { cohesive_system = yes } }
				save_event_target_as = compound_invade_here_plz
			}
		}

		event_target:compound_invade_here_plz = {
			# Set Flags
			set_star_flag = ehof_compound_system
			set_star_flag = compound_invasion_entry
			save_global_event_target_as = compound_invasion_entry

			# Starbase
			if = {
				limit = { exists = starbase }
				starbase = { fleet = { delete_fleet = this } }
			}
			create_starbase = {
				size = starbase_ehof_05
				owner = event_target:compound_country
			}
			event_target:compound_country = { every_system_within_border = { prev = { change_variable = { which = compound_systems value = 1 } } } }

			# Spawn initial fleets
			star = {
				planet_event = { id = compound_fleet_spawn.002 days = 2 }
				planet_event = { id = compound_fleet_spawn.002 days = 4 }
				planet_event = { id = compound_fleet_spawn.002 days = 6 }
			}

			# Spawn wormhole
			spawn_megastructure = {
				type = "compound_wormhole_portal"
				orbit_angle = @ehof_wormhole_angle
				orbit_distance = @ehof_wormhole_distance
				owner = event_target:compound_country
			}
		}

		# Mark planned expansion
		every_system = {
			limit = {
				OR = {
					AND = { galaxy_size = tiny		distance = { source = event_target:compound_invasion_entry use_bypasses = no min_jumps = 1 max_jumps = 2 } }
					AND = { galaxy_size = small		distance = { source = event_target:compound_invasion_entry use_bypasses = no min_jumps = 1 max_jumps = 3 } }
					AND = { galaxy_size = medium	distance = { source = event_target:compound_invasion_entry use_bypasses = no min_jumps = 1 max_jumps = 4 } }
					AND = { galaxy_size = large		distance = { source = event_target:compound_invasion_entry use_bypasses = no min_jumps = 1 max_jumps = 5 } }
					AND = { galaxy_size = huge		distance = { source = event_target:compound_invasion_entry use_bypasses = no min_jumps = 1 max_jumps = 6 } }
					AND = {
						NAND = {
							galaxy_size = tiny
							galaxy_size = small
							galaxy_size = medium
							galaxy_size = large
							galaxy_size = huge
						}
						distance = {
							source = event_target:compound_invasion_entry
							use_bypasses = no
							min_jumps = 1
							max_jumps = 6
						}
					}
				}
			}
			every_system_planet = { set_planet_flag = cant_build_here set_planet_flag = cant_target_this_planet } # Prevents NDB & QSO
			set_star_flag = compound_expand
		}

		every_country = {
			limit = { ehof_default_country = yes }

			# Notify everyone of the compound arrival
			country_event = { id = compound_dialog.1 }

			# Notify everyone of the solution in 10 years, if it hasn't already happened
			set_timed_global_flag = { flag = compound_10_years years = 10 }

			# Notify everyone the traders are closed
			if = {
				limit = {
					exists = event_target:urmazin_country
					has_country_flag = ehof_traders_first_time
				}
				country_event = { id = ehof_mega_trader.013 days = 14 }
			}
		}
	}
}

# Diplomacy
country_event = {
	id = compound_spawn.004
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				is_country_type = compound_empire
				is_country_type = creators
			}
		}
	}

	immediate = {
		# Compound standard
		if = {
			limit = {
				exists = event_target:compound_invasion_entry
				from = {
					is_country_type = compound_empire
					NOT = { has_country_flag = compound_empire_berserk }
				}
			}
			country_event = { id = compound_dialog.4 }
		}

		# Compound berserk
		if = {
			limit = {
				exists = event_target:compound_invasion_entry
				from = { has_country_flag = compound_empire_berserk }
			}
			country_event = { id = compound_dialog.7 }
		}

		# SA standard
		if = {
			limit = {
				from = {
					is_country_type = creators
					NOT = { any_owned_ship = { is_ship_size = annihilator_sk } }
				}
			}
			country_event = { id = annihilator_dialog.007 }
		}

		# SA dormant
		if = {
			limit = {
				from = {
					is_country_type = creators
					any_owned_ship = { is_ship_size = annihilator_sk }
				}
			}
			country_event = { id = annihilator_dialog.011 }
		}
	}
}