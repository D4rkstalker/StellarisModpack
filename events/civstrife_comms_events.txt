
###############################
### Civil Wars by MrFunEGUY ###
###############################

namespace = civcom

################
#  Rebellions  #
################

# Without Vassalization Option
country_event = {
	id = civcom.1000
	title = civcom.1000.name
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	# Descriptions
	inline_script = "comms/rebellion_no_vas_desc"

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	immediate = {
		get_motherland_effect = yes
	}

	# Declare War on rebels 
	option = {
		name = civcom.1000.war
		hidden_effect = {
			country_event = { id = civcom.2000 }
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_authoritarian = yes
					is_militarist = yes
				}
			}
		}
	}

	# Let them be fully independent.
	option = {
		name = civcom.1000.independence
		hidden_effect = {
			country_event = { id = civcom.2020 }
		}
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 5
				event_target:civwar_rebels = { has_origin = origin_isolated_rebellion }	
			}

			modifier = {
				factor = 0
				OR = {
					has_valid_civic = civic_fanatic_purifiers
					event_target:civwar_rebels = {
						any_system_within_border = { is_bottleneck_system = no }
					}
				}	
			}
		}
	}
}

# With Vassalization Option
country_event = {
	id = civcom.1005
	title = civcom.1000.name
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	# Descriptions
	inline_script = "comms/rebellion_with_vas_desc"

	immediate = {
		get_motherland_effect = yes
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	# Declare War on the rebels
	option = {
		name = civcom.1000.war
		hidden_effect = {
			country_event = { id = civcom.2000 }
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_authoritarian = yes
					is_militarist = yes
				}
			}
		}
	}

	# Accept their offer of vassalization
	option = {
		name = civcom.1005.vassal
		custom_tooltip = civcom.1005.vassal.tooltip
		hidden_effect = { country_event = { id = civcom.2010 } }
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				OR = {
					has_valid_civic = civic_fanatic_purifiers
					event_target:civwar_rebels = {
						any_system_within_border = { is_bottleneck_system = no }
					}
				}	
			}
		}
	}

	# Let them be fully independent
	option = {
		name = civcom.1000.independence
		hidden_effect = {
			country_event = { id = civcom.2025 }
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 1.15
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				OR = {
					has_valid_civic = civic_fanatic_purifiers
					event_target:civwar_rebels = {
						any_system_within_border = { is_bottleneck_system = no }
					}
				}	
			}
		}
	}
}

################
#  Civil Wars  #
################

# Without Vassalization Option
country_event = {
	id = civcom.1100
	title = civcom.1000.name
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	# Descriptions
	inline_script = "comms/civil_war_no_vas"

	immediate = {
		event_target:civwar_rebels = {
			if = {
				limit = { is_overlord = yes }
				if = {
					limit = { subjects >= 1 }
					random_subject = {
						save_event_target_as = stolen_subject_1
						set_country_flag = counted_stolen_sub
					}
					root = { set_variable = { which = stolen_subjects value = 1 } }
				}
				if = {
					limit = { subjects >= 2 }
					random_subject = {
						limit = { NOT = { has_country_flag = counted_stolen_sub } }
						save_event_target_as = stolen_subject_2
						set_country_flag = counted_stolen_sub
					}
					root = { set_variable = { which = stolen_subjects value = 2 } }
				}
				if = {
					limit = { subjects >= 3 }
					random_subject = {
						limit = { NOT = { has_country_flag = counted_stolen_sub } }
						save_event_target_as = stolen_subject_3
						set_country_flag = counted_stolen_sub
					}
					root = { set_variable = { which = stolen_subjects value = 3 } }
				}
				if = {
					limit = { subjects >= 4 }
					random_subject = {
						limit = { NOT = { has_country_flag = counted_stolen_sub } }
						save_event_target_as = stolen_subject_4
						set_country_flag = counted_stolen_sub
					}
					root = { set_variable = { which = stolen_subjects value = 4 } }
				}
				if = {
					limit = { subjects >= 5 }
					random_subject = {
						limit = { NOT = { has_country_flag = counted_stolen_sub } }
						save_event_target_as = stolen_subject_5
						set_country_flag = counted_stolen_sub
					}
					root = { set_variable = { which = stolen_subjects value = 5 } }
				}
				every_subject = { remove_country_flag = counted_stolen_sub }
			}
		}
		if = {
			limit = {
				count_country = {
					count = 1
					limit = { has_country_flag = subject_free_from_@root }
				}
			}
			random_country = {
				limit = { has_country_flag = subject_free_from_@root }
				save_event_target_as = free_subject
			}
		}
		get_motherland_effect = yes		
	}	

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	# Declare War on the rebels
	option = {
		name = civcom.1000.war
		hidden_effect = { country_event = { id = civcom.2000 } }
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_authoritarian = yes
					is_militarist = yes
				}	
			}
		}
	}

	# Let them be fully independent.
	option = {
		name = civcom.1000.independence
		hidden_effect = { country_event = { id = civcom.2020 } }
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				has_valid_civic = civic_fanatic_purifiers	
			}
		}
	}
}

# With Vassalization Option
country_event = {
	id = civcom.1105
	title = civcom.1000.name
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	# Descriptions
	inline_script = "comms/civil_war_with_vas"

	immediate = {
		get_motherland_effect = yes
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	# Declare War on the rebels
	option = {
		name = civcom.1105.a
		hidden_effect = { country_event = { id = civcom.2000 } }
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_authoritarian = yes
					is_militarist = yes
				}	
			}

			modifier = {
				factor = 0
				has_valid_civic = civic_fanatic_purifiers	
			}
		}
	}

	# Accept their offer of vassalization
	option = {
		name = civcom.1105.b
		custom_tooltip = civcom.1105.b.tooltip
		hidden_effect = { country_event = { id = civcom.2010 } }
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				has_valid_civic = civic_fanatic_purifiers	
			}
		}
	}

	# Let them be fully independent
	option = {
		name = civcom.1000.independence
		hidden_effect = { country_event = { id = civcom.2025 } }
		ai_chance = {
			factor = 1

			modifier = {
				factor = 1.15
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				has_valid_civic = civic_fanatic_purifiers	
			}
		}
	}
}

###############

# Civil War - Subject requests assistance in civil war
country_event = {
	id = civcom.1200
	title = civcom.1200.name
	desc = civcom.1200.desc
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_originator.ruler
		planet_background = event_target:civwar_originator.capital_scope
		graphical_culture = event_target:civwar_originator
		city_level = event_target:civwar_originator.capital_scope
		room = event_target:civwar_originator.ruler
	}

	# Lead subject in their war
	option = {
		name = civcom.1200.a
		custom_tooltip = civcom.1200.a.tooltip
		hidden_effect = {
			event_target:civwar_originator = { set_country_flag = subject_for_traitor_@event_target:civwar_rebels }
			get_declare_war_subject = yes
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_militarist = yes
					is_authoritarian = yes
				}
			}
		}
	}

	# Grant independence to the rebels
	option = {
		name = civcom.1200.b
		custom_tooltip = civcom.1200.b.tooltip
		hidden_effect = {
			if = {
				limit = { event_target:civwar_rebels = { has_origin = origin_nationalist_rebellion } }
				event_target:nat_motherland_model = { country_event = { id = civnat.1340 } }
			}	
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 1.15
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				has_valid_civic = civic_fanatic_purifiers	
			}
		}
	}

	after = {
		if = {
			limit = { any_war = { has_war_flag = war_for_subject_join } }
			random_war = {
				limit = { has_war_flag = war_for_subject_join }
				remove_war_flag = war_for_subject_join
				save_event_target_as = subject_war_join
			}
			event_target:civwar_originator = {
				join_war_on_side = {
					war = event_target:subject_war_join
					side = root
				}
			}
			event_target:subject_war_join = {
				every_war_participant = {
					limit = {
						is_war_leader = no
						NOT = { is_same_value = event_target:civwar_originator }
					}
					prev = { remove_war_participant = prev }
				}
			}
		}
		event_target:civwar_originator = { after_comms_cleanup_effect = yes }
		if = {
			limit = { exists = event_target:subject_war_join }
			event_target:subject_war_join = {
				every_war_participant = {
					limit = {
						NOR = {
							is_same_value = root
							is_same_value = event_target:civwar_originator
						}
					}
					every_system_within_border = {
						if = {
							limit = { root = { has_claim = prev } }
							remove_claims = { who = root }
						}
						add_claims = {
							who = event_target:civwar_originator
							num_of_claims = 10
							show_notification = no
						}
					}
				}
			}
		}
	}
}

###############
#  Responses  #
###############

# Leader Communication - Declared War
country_event = {
	id = civcom.2000
	title = civcom.1000.name
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.2000.norm.desc
		trigger = {
			event_target:civwar_rebels = { NOT = { has_country_flag = heir_rebel_country } }
		}
	}

	desc = {
		text = civcom.2000.heir.desc
		trigger = {
			event_target:civwar_rebels = { has_country_flag = heir_rebel_country }
		}
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	option = {
		name = civcom.2000.a
		hidden_effect = {
			if = {
				limit = { event_target:civwar_rebels = { has_country_flag = heir_rebel_country } }
				get_declare_war_heirwar = yes
			}
			else_if = {
				limit = { event_target:civwar_rebels = { has_country_flag = plan_rebel_country } }
				get_declare_war_plan_rebellion = yes
			}
			else_if = {
				limit = { event_target:civwar_rebels = { has_country_flag = sec_rebel_country } }
				get_declare_war_sec_rebellion = yes
			}
			else_if = {
				limit = { event_target:civwar_rebels = { has_country_flag = plan_slave_rebel_country } }
				get_declare_war_plan_slave_rebellion = yes
			}
			else_if = {
				limit = { event_target:civwar_rebels = { has_country_flag = sec_slave_rebel_country } }
				get_declare_war_sec_slave_rebellion = yes
			}
			else_if = {
				limit = { event_target:civwar_rebels = { has_country_flag = nat_civwar } }
				get_declare_war_natwar = yes
			}
			else = {
				get_declare_war_civwar = yes
			}
			
		}
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			after_comms_cleanup_effect = yes
		}
	}
}

# Leader Communication - Accepted Vassalization Offer
country_event = {
	id = civcom.2010
	title = civcom.1000.name
	desc = civcom.2010.desc
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	option = {
		name = civcom.2010.a
		ai_chance = { factor = 1 }
		event_target:civwar_rebels = {
			set_subject_of = {
				who = root
				preset = preset_tributary
			}
		}
	}

	after = {
		hidden_effect = {
			after_comms_cleanup_effect = yes
		}
	}
}

# Leader Communication - Granted Independence
country_event = {
	id = civcom.2020
	title = civcom.1000.name
	desc = civcom.2020.desc
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	option = {
		name = civcom.2020.a
		ai_chance = { factor = 1 }
		
		hidden_effect = {
			event_target:civwar_rebels = {
				every_system_within_border = {
					limit = {
						NOT = { root = { has_claim = prev } }
					}
					add_claims = { who = root }
				}
			}
		}
	}

	after = {
		hidden_effect = {
			after_comms_cleanup_effect = yes

			if = { # Exiled Government can join with restored country
				limit = { event_target:civwar_rebels = { has_country_flag = exile_restored_country } }
				event_target:nat_motherland_model = { country_event = { id = civnat.1340 } }
			}
		}
	}
}

# Leader Communication - Granted Independence (even though they offered vassalization)
country_event = {
	id = civcom.2025
	title = civcom.1000.name
	desc = civcom.2025.desc
	location = event_target:rebellion_planet
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	option = {
		name = civcom.2020.a
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			after_comms_cleanup_effect = yes
		}
	}
}

#######################
#  Succession Crisis  #
#######################

# Talk with crisis sector leaders (governors/dynasts)
country_event = {
	id = civcom.3000
	title = civcom.3000.name
	location = event_target:crisis_sector.sector_capital
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.3000.gov_may_deal.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_may_deal }
		}
	}

	desc = {
		text = civcom.3000.gov_wont_deal.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_wont_deal }
		}
	}

	desc = {
		text = civcom.3000.royal.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = dynast_rebel_sector }
		}
	}

	picture_event_data = {
		portrait = event_target:crisis_sector_leader
		planet_background = event_target:crisis_sector.sector_capital
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	immediate = {

		event_target:crisis_sector = {
			if = {
				limit = { has_sector_flag = governor_rebel_sector }
				random_list = {
					50 = { set_sector_flag = gov_may_deal }
					50 = { set_sector_flag = gov_wont_deal }
				}
			}
		}
	}

	# I am no pretender.
	option = {
		name = civcom.3000.pretender
		trigger = {
			event_target:crisis_sector = {
				OR = {
					has_sector_flag = gov_wont_deal
					has_sector_flag = dynast_rebel_sector
				}
			}
		}
		hidden_effect = {
			if = {
				limit = { event_target:crisis_sector = { has_sector_flag = gov_wont_deal } }
				country_event = { id = civcom.3010 }
			}
			else = {
				country_event = { id = civcom.3015 }
			}
			
		}
	}

	# What do you want?
	option = {
		name = civcom.3000.want
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_may_deal }
		}
		hidden_effect = {
			country_event = { id = civcom.3020 }
		}
	}
}

# Governor Rebels - Independent Kingdom
country_event = {
	id = civcom.3010
	title = civcom.3000.name
	desc = civcom.3010.desc
	location = event_target:crisis_sector.sector_capital
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:crisis_sector_leader
		planet_background = event_target:crisis_sector.sector_capital
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# This means war
	option = {
		name = civcom.3010.war
		ai_chance = { factor = 1 }
	}

	# Go, we don't need you.
	option = {
		name = civcom.3010.go
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			make_succession_crisis_gov_country = yes
			destroy_succession_crisis = yes
		}
	}
}

# Dynast Rebels - Successor State
country_event = {
	id = civcom.3015
	title = civcom.3000.name
	desc = civcom.3015.desc
	location = event_target:crisis_sector.sector_capital
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:crisis_sector_leader
		planet_background = event_target:crisis_sector.sector_capital
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# This is war
	option = {
		name = civcom.3015.life
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			make_succession_crisis_dynast_country = yes
			destroy_succession_crisis = yes
		}
	}
}

# Governor Rebels - Negotiates
country_event = {
	id = civcom.3020
	title = civcom.3000.name
	location = event_target:crisis_sector.sector_capital
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.3020.monetary.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_monetary }
		}
	}

	desc = {
		text = civcom.3020.subject.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_subject }
		}
	}

	desc = {
		text = civcom.3020.heir.desc
		trigger = {
			event_target:crisis_sector = { has_sector_flag = gov_heir }
		}
	}

	picture_event_data = {
		portrait = event_target:crisis_sector_leader
		planet_background = event_target:crisis_sector.sector_capital
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	immediate = {

		export_trigger_value_to_variable = {
			trigger = resource_revenue_compare
			parameters = { resource = alloys }
			variable = monthly_alloys
		}

		set_variable = { which = demand_energy value = monthly_energy }
		set_variable = { which = demand_consumer_goods value = monthly_consumer_goods }
		set_variable = { which = demand_alloys value = monthly_alloys }

		multiply_variable = { which = demand_energy value = 24 }
		multiply_variable = { which = demand_consumer_goods value = 18 }
		multiply_variable = { which = demand_alloys value = 18 }

		if = {
			limit = { NOT = { exists = heir } }
			event_target:crisis_sector = {
				random_list = {
					5 = { set_sector_flag = gov_monetary }
					45 = { set_sector_flag = gov_subject }
					50 = { set_sector_flag = gov_heir }
				}
			}
		}
		else = {
			event_target:crisis_sector = {
				random_list = {
					5 = { set_sector_flag = gov_monetary }
					95 = { set_sector_flag = gov_subject }
				}
			}
		}
	}

	# Very Well
	option = {
		name = civroyal.1105.very_well
		allow = {
			if = {
				limit = { event_target:crisis_sector = { has_sector_flag = gov_monetary } }
				has_country_resource = { type = energy amount >= demand_energy }
				has_country_resource = { type = consumer_goods amount >= demand_consumer_goods }
				has_country_resource = { type = alloys amount >= demand_alloys }
			}
		}
		if = {
			limit = { event_target:crisis_sector = { has_sector_flag = gov_monetary } }
			add_resource = {
				energy = -1
				mult = demand_energy
			}
			add_resource = {
				consumer_goods = -1
				mult = demand_consumer_goods
			}
			add_resource = {
				alloys = -1
				mult = demand_alloys
			}
		}
		hidden_effect = {
			if = {
				limit = { event_target:crisis_sector = { has_sector_flag = gov_subject } }
				set_country_flag = crisis_subject
				make_succession_crisis_gov_country = yes
			}
			else_if = {
				limit = { event_target:crisis_sector = { has_sector_flag = gov_heir } }
				set_heir = event_target:crisis_sector_leader
			}
		}
		ai_chance = { factor = 1 }
	}

	# This means war
	option = {
		name = civcom.3020.no
		hidden_effect = {
			make_succession_crisis_gov_country = yes
		}
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			destroy_succession_crisis = yes
		}
	}
}

# Disinherited heir
country_event = {
	id = civcom.3100
	title = civcom.1100.name
	location = event_target:civwar_rebels.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.3100.norm.desc
		trigger = {
			NOT = { has_valid_civic = civic_adoptive_dynasties }
			event_target:civwar_rebels.ruler = { NOT = { has_leader_flag = appointed_heir_ruler } }
			event_target:civwar_rebels.ruler = { NOT = { has_leader_flag = civil_war_ruler_heir_gov_changed } }
		}
	}

	desc = {
		text = civcom.3100.ad.desc
		trigger = {
			AND = {
				event_target:civwar_rebels.ruler = { NOT = { has_leader_flag = civil_war_ruler_heir_gov_changed } }
				OR = {
					has_valid_civic = civic_adoptive_dynasties
					event_target:civwar_rebels.ruler = { has_leader_flag = appointed_heir_ruler }
				}
			}
			
		}
	}

	desc = {
		text = civcom.3100.norm.gov.desc
		trigger = {
			NOT = { has_valid_civic = civic_adoptive_dynasties }
			event_target:civwar_rebels.ruler = { NOT = { has_leader_flag = appointed_heir_ruler } }
			event_target:civwar_rebels.ruler = { has_leader_flag = civil_war_ruler_heir_gov_changed }
		}
	}

	desc = {
		text = civcom.3100.ad.gov.desc
		trigger = {
			OR = {
				has_valid_civic = civic_adoptive_dynasties
				event_target:civwar_rebels.ruler = { has_leader_flag = appointed_heir_ruler }
				event_target:civwar_rebels.ruler = { has_leader_flag = civil_war_ruler_heir_gov_changed }
			}
		}
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = event_target:civwar_rebels.capital_scope
		graphical_culture = event_target:civwar_rebels
		city_level = event_target:civwar_rebels.capital_scope
		room = event_target:civwar_rebels.ruler
	}

	# Declare War on rebels 
	option = {
		name = civcom.1000.war
		hidden_effect = {
			country_event = { id = civcom.2000 }
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 1.5
				OR = {
					is_authoritarian = yes
					is_militarist = yes
				}
			}
		}
	}

	# Let them be fully independent.
	option = {
		name = civcom.1000.independence
		hidden_effect = {
			country_event = { id = civcom.2020 }
		}
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 0
				OR = {
					has_valid_civic = civic_fanatic_purifiers
					event_target:civwar_rebels = {
						any_system_within_border = { is_bottleneck_system = no }
					}
				}	
			}
		}
	}
}

###############################
#  Rebels Request Assistance  #
###############################

# Rebels request assistance from neighbors or nationalist motherland
country_event = {
	id = civcom.4000
	title = civcom.4000.name
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.4000.nat.desc
		trigger = { event_target:civwar_rebels = { has_country_flag = nat_civwar } }
	}

	desc = {
		text = civcom.4000.heir.desc
		trigger = { event_target:civwar_rebels = { has_country_flag = heir_rebel_country } }
	}

	desc = {
		text = civcom.4000.norm.desc
		trigger = {
			NOR = {
				event_target:civwar_rebels = { has_country_flag = nat_civwar }
				event_target:civwar_rebels = { has_country_flag = heir_rebel_country }
			}
		}
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root.capital_scope
		room = root.ruler
	}

	# Abstain from assisting
	option = {
		name = civcom.4000.abstain
		hidden_effect = {
			if = {
				limit = { is_same_value = event_target:nat_motherland_model }
				set_country_flag = motherland_wont_join_@event_target:civwar_rebels
			}
			country_event = { id = civcom.4100 }
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 0.5
				has_rival = event_target:civwar_originator
			}

			modifier = {
				factor = 0.25
				is_at_war_with = event_target:civwar_originator
			}

			modifier = {
				factor = 2
				opinion = { who = event_target:civwar_originator value > 0 }
			}
		}
	}

	# Provide Resources
	option = {
		name = civcom.4000.resources
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
			has_country_resource = { type = minerals amount >= 1000 }
			has_country_resource = { type = food amount >= 1000 }
			has_country_resource = { type = consumer_goods amount >= 500 }
			has_country_resource = { type = alloys amount >= 500 }
		}
		hidden_effect = {
			if = {
				limit = { is_same_value = event_target:nat_motherland_model }
				set_country_flag = motherland_wont_join_@event_target:civwar_rebels
			}
			country_event = { id = civcom.4110 }
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 2
				has_rival = event_target:civwar_originator
			}

			modifier = {
				factor = 3
				is_at_war_with = event_target:civwar_originator
			}

			modifier = {
				factor = 1.5
				opinion = { who = event_target:civwar_originator value < 0 }
			}
		}
	}

	# Provide Ships
	option = {
		name = civcom.4000.ships
		allow = {
			hidden_trigger = {
				any_owned_fleet = { any_owned_ship = { is_ship_class = shipclass_military } }
				OR = {
					is_ai = no
					AND = {
						opinion = { who = event_target:civwar_originator value < 0 }
						NOT = { has_defensive_pact = event_target:civwar_originator }
						NOT = { has_non_aggression_pact = event_target:civwar_originator }
					}
				}
			}
		}
		hidden_effect = {
			if = {
				limit = { event_target:civwar_rebels = { has_country_flag = nat_civwar } }
				set_country_flag = motherland_wont_join_@event_target:civwar_rebels
			}
			country_event = { id = civcom.4120 }
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 1.5
				has_rival = event_target:civwar_originator
			}

			modifier = {
				factor = 0
				is_at_war = yes
			}

			modifier = {
				factor = 1.1
				opinion = { who = event_target:civwar_originator value < 0 }
			}
		}
	}

	# Join them in their war
	option = {
		name = civcom.4000.help
		allow = {
			hidden_trigger = {
				OR = {
					is_ai = no
					AND = {
						opinion = { who = event_target:civwar_originator value < 0 }
						NOT = { has_defensive_pact = event_target:civwar_originator }
						NOT = { has_non_aggression_pact = event_target:civwar_originator }
					}
				}
			}
			custom_tooltip = {
				fail_text = we_must_border_rebels
				if = {
					limit = { is_same_value = event_target:nat_motherland_model }
					any_system_within_border = {
						closest_system = {
							limit = {
								exists = space_owner
								space_owner = {
									OR = {
										is_same_value = event_target:civwar_rebels
										is_same_value = event_target:civwar_originator
										is_in_federation_with = event_target:civwar_originator
										AND = {
											exists = overlord
											overlord = { is_same_value = event_target:civwar_originator }
											overlord_protects_subject = yes
										}
									}
								}
							}
							use_bypasses = yes
							max_steps = 1
						}
					}
				}				
			}
		}
		hidden_effect = {
			if = {
				limit = { is_same_value = event_target:nat_motherland_model }
				set_country_flag = motherland_will_join_@event_target:civwar_rebels
			}
			country_event = { id = civcom.4125 }
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 1.15
				has_rival = event_target:civwar_originator
			}

			modifier = {
				factor = 0
				is_at_war = yes
			}

			modifier = {
				factor = 0
				opinion = { who = event_target:civwar_originator value > -50 }
			}
		}
	}

	after = {
		if = {
			limit = { has_country_flag = borders_rebels }
			remove_country_flag = borders_rebels
		}
	}
}

# Neighbor/Motherland Abstains
country_event = {
	id = civcom.4100
	title = civcom.4000.name
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.4100.norm.desc
		trigger = {
			OR = {
				NOT = { exists = event_target:nat_motherland_model }
				event_target:nat_motherland_model = { NOT = { is_same_value = root } }
			}
		}
	}

	desc = {
		text = civcom.4100.nat.desc
		trigger = {
			exists = event_target:nat_motherland_model
			event_target:nat_motherland_model = { is_same_value = root }
		}
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root.capital_scope
		room = root.ruler
	}

	# Bye
	option = {
		name = civcom.4100.sorry
	}

	after = {
		if = {
			limit = {
				event_target:civwar_rebels = { has_country_flag = nat_civwar }
				event_target:civwar_rebels = { NOT = { is_at_war_with = event_target:civwar_originator } }
			}
			event_target:civwar_originator = { country_event = { id = civwar.2055 } }
		}
	}
}

# Neighbor/Motherland gives resources
country_event = {
	id = civcom.4110
	title = civcom.4000.name
	desc = civcom.4110.desc
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root.capital_scope
		room = root.ruler
	}

	# Nevermind
	option = {
		name = civcom.4120.nevermind
		ai_chance = { factor = 0 }
	}

	# Small
	option = {
		name = civcom.2115.small
		allow = {
			has_country_resource = { type = energy amount >= 1000 }
			has_country_resource = { type = minerals amount >= 1000 }
			has_country_resource = { type = food amount >= 1000 }
			has_country_resource = { type = consumer_goods amount >= 500 }
			has_country_resource = { type = alloys amount >= 500 }
		}
		event_target:civwar_rebels = {
			add_resource = {
				energy = 1000
				minerals = 1000
				food = 1000
				consumer_goods = 500
				alloys = 500
			}
			add_opinion_modifier = {
				who = prev
				modifier = opinion_gives_small_resources
			}
		}
		add_resource = {
			energy = -1000
			minerals = -1000
			food = -1000
			consumer_goods = -500
			alloys = -500
		}
		ai_chance = { factor = 1 }
	}

	# Medium
	option = {
		name = civcom.2115.medium
		allow = {
			has_country_resource = { type = energy amount >= 3000 }
			has_country_resource = { type = minerals amount >= 3000 }
			has_country_resource = { type = food amount >= 3000 }
			has_country_resource = { type = consumer_goods amount >= 1500 }
			has_country_resource = { type = alloys amount >= 1500 }
		}
		event_target:civwar_rebels = {
			add_resource = {
				energy = 3000
				minerals = 3000
				food = 3000
				consumer_goods = 1500
				alloys = 1500
			}
			add_opinion_modifier = {
				who = prev
				modifier = opinion_gives_medium_resources
			}
		}
		add_resource = {
			energy = -3000
			minerals = -3000
			food = -3000
			consumer_goods = -1500
			alloys = -1500
		}
		ai_chance = { factor = 1 }
	}

	# Large
	option = {
		name = civcom.2115.large
		allow = {
			has_country_resource = { type = energy amount >= 5000 }
			has_country_resource = { type = minerals amount >= 5000 }
			has_country_resource = { type = food amount >= 5000 }
			has_country_resource = { type = consumer_goods amount >= 2500 }
			has_country_resource = { type = alloys amount >= 2500 }
		}
		event_target:civwar_rebels = {
			add_resource = {
				energy = 5000
				minerals = 5000
				food = 5000
				consumer_goods = 2500
				alloys = 2500
			}
			add_opinion_modifier = {
				who = prev
				modifier = opinion_gives_small_resources
			}
		}
		add_resource = {
			energy = -5000
			minerals = -5000
			food = -5000
			consumer_goods = -2500
			alloys = -2500
		}
		ai_chance = { factor = 1 }
	}

	after = {
		if = {
			limit = {
				event_target:civwar_rebels = { has_country_flag = nat_civwar }
				event_target:civwar_rebels = { NOT = { is_at_war_with = event_target:civwar_originator } }
			}
			event_target:civwar_originator = { country_event = { id = civwar.2055 } }
		}
	}
}

# Neighbor/Motherland gives ships
country_event = {
	id = civcom.4120
	title = civcom.4000.name
	desc = civcom.4120.desc
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root.capital_scope
		room = root.ruler
	}

	option = {
		name = civcom.4120.nevermind
		ai_chance = { factor = 0 }
	}

	option = {
		name = civcom.4120.5
		hidden_effect = {

			export_trigger_value_to_variable = {
				trigger = used_naval_capacity_percent
				variable = five_percent_naval_cap
			}

			multiply_variable = {
				which = five_percent_naval_cap
				value = 0.05
			}

			create_fleet_from_naval_cap = five_percent_naval_cap

			last_created_fleet = {
				set_owner = event_target:civwar_rebels
				set_location = event_target:civwar_rebels.capital_scope
			}

			get_ship_delete_effect = { PERCENT = 5 }

			event_target:civwar_rebels = {
				add_opinion_modifier = {
					who = prev
					modifier = opinion_gives_5_ships
				}
			}
		}
		ai_chance = { factor = 5 }
	}

	option = {
		name = civcom.4120.10
		hidden_effect = {

			export_trigger_value_to_variable = {
				trigger = used_naval_capacity_percent
				variable = ten_percent_naval_cap
			}

			multiply_variable = {
				which = ten_percent_naval_cap
				value = 0.1
			}

			create_fleet_from_naval_cap = ten_percent_naval_cap

			last_created_fleet = {
				set_owner = event_target:civwar_rebels
				set_location = event_target:civwar_rebels.capital_scope
			}

			get_ship_delete_effect = { PERCENT = 10 }

			event_target:civwar_rebels = {
				add_opinion_modifier = {
					who = prev
					modifier = opinion_gives_10_ships
				}
			}
		}
		ai_chance = {
			factor = 3

			modifier = {
				factor = 2
				has_rival = event_target:civwar_originator
			}
		}
	}

	option = {
		name = civcom.4120.15
		hidden_effect = {

			export_trigger_value_to_variable = {
				trigger = used_naval_capacity_percent
				variable = fifteen_percent_naval_cap
			}

			multiply_variable = {
				which = fifteen_percent_naval_cap
				value = 0.15
			}

			create_fleet_from_naval_cap = fifteen_percent_naval_cap

			last_created_fleet = {
				set_owner = event_target:civwar_rebels
				set_location = event_target:civwar_rebels.capital_scope
			}

			get_ship_delete_effect = { PERCENT = 15 }

			event_target:civwar_rebels = {
				add_opinion_modifier = {
					who = prev
					modifier = opinion_gives_15_ships
				}
			}
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 3
				has_rival = event_target:civwar_originator
			}
		}
	}

	option = {
		name = civcom.4120.20
		hidden_effect = {

			export_trigger_value_to_variable = {
				trigger = used_naval_capacity_percent
				variable = twenty_percent_naval_cap
			}

			multiply_variable = {
				which = twenty_percent_naval_cap
				value = 0.2
			}

			create_fleet_from_naval_cap = twenty_percent_naval_cap

			last_created_fleet = {
				set_owner = event_target:civwar_rebels
				set_location = event_target:civwar_rebels.capital_scope
			}

			get_ship_delete_effect = { PERCENT = 20 }

			event_target:civwar_rebels = {
				add_opinion_modifier = {
					who = prev
					modifier = opinion_gives_20_ships
				}
			}
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 3
				has_rival = event_target:civwar_originator
			}
		}
	}

	option = {
		name = civcom.4120.25
		hidden_effect = {

			export_trigger_value_to_variable = {
				trigger = used_naval_capacity_percent
				variable = twenty_five_percent_naval_cap
			}

			multiply_variable = {
				which = twenty_five_percent_naval_cap
				value = 0.25
			}

			create_fleet_from_naval_cap = twenty_five_percent_naval_cap

			last_created_fleet = {
				set_owner = event_target:civwar_rebels
				set_location = event_target:civwar_rebels.capital_scope
			}

			get_ship_delete_effect = { PERCENT = 25 }

			event_target:civwar_rebels = {
				add_opinion_modifier = {
					who = prev
					modifier = opinion_gives_25_ships
				}
			}
		}
		ai_chance = {
			factor = 1

			modifier = {
				factor = 3
				has_rival = event_target:civwar_originator
			}
		}
	}

	after = {
		if = {
			limit = {
				event_target:civwar_rebels = { has_country_flag = nat_civwar }
				event_target:civwar_rebels = { NOT = { is_at_war_with = event_target:civwar_originator } }
			}
			event_target:civwar_originator = { country_event = { id = civwar.2055 } }
		}
	}
}

# Neighbor/Motherland joins war
country_event = {
	id = civcom.4125
	title = civcom.4000.name
	location = event_target:civwar_rebels
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.4125.nat.desc
		trigger = { event_target:civwar_rebels = { has_country_flag = nat_civwar } }
	}

	desc = {
		text = civcom.4125.norm.desc
		trigger = { event_target:civwar_rebels = { NOT = { has_country_flag = nat_civwar } } }
	}

	picture_event_data = {
		portrait = event_target:civwar_rebels.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root.capital_scope
		room = root.ruler
	}

	option = {
		name = civcom.4120.nevermind
		ai_chance = { factor = 0 }
	}

	option = {
		name = civcom.4125.welcome
		hidden_effect = {
			if = { # Nationalists get this message before war can start, and so they will join after it has been determined whether war is happening
				limit = { event_target:civwar_rebels = { NOT = { has_country_flag = nat_civwar } } }
				join_war = event_target:civwar_rebels
			}
		}
		ai_chance = { factor = 5 }
	}

	after = {
		if = {
			limit = {
				event_target:civwar_rebels = { has_country_flag = nat_civwar }
				event_target:civwar_rebels = { NOT = { is_at_war_with = event_target:civwar_originator } }
			}
			event_target:civwar_originator = { country_event = { id = civwar.2055 } }
		}
	}
}

###############

# Subjects Overlord Interaction
country_event = {
	id = civcom.5000
	title = civcom.5000.name
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	# Descriptions
	inline_script = "comms/civil_war_subject_interaction"

	picture_event_data = {
		portrait = event_target:civil_war_secretary
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	trigger = {
		is_at_war = yes # Lazy, but fuck you for now
	}

	immediate = {
		if = {
			limit = { NOT = { exists = event_target:civil_war_secretary } }
			create_leader = {
				class = ruler
				species = owner_main_species
				name = random
				skill = 5
				effect = {
					save_event_target_as = civil_war_secretary
				}
			}
			last_created_leader = { leader_event = { id = civleader.1000 days = 60 } }
		}
		get_helper_subjects_effect = yes
	}

	option = {
		name = civcom.5000.finished
		ai_chance = {
			factor = 1
			modifier = {
				factor = 10
				check_variable = { which = combined_rebel_power_ratio value < 0.8 }
			}
		}
	}

	option = {
		name = civcom.5000.subject_1
		trigger = {
			check_variable = { which = helper_subjects value >= 1 }
			event_target:helper_subject_1 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_1 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_2
		trigger = {
			check_variable = { which = helper_subjects value >= 2 }
			event_target:helper_subject_2 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_2 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_3
		trigger = {
			check_variable = { which = helper_subjects value >= 3 }
			event_target:helper_subject_3 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_3 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_4
		trigger = {
			check_variable = { which = helper_subjects value >= 4 }
			event_target:helper_subject_4 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_4 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_5
		trigger = {
			check_variable = { which = helper_subjects value >= 5 }
			event_target:helper_subject_5 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_5 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_6
		trigger = {
			check_variable = { which = helper_subjects value >= 6 }
			event_target:helper_subject_6 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_6 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_7
		trigger = {
			check_variable = { which = helper_subjects value >= 7 }
			event_target:helper_subject_7 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_7 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_8
		trigger = {
			check_variable = { which = helper_subjects value >= 8 }
			event_target:helper_subject_8 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_8 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_9
		trigger = {
			check_variable = { which = helper_subjects value >= 9 }
			event_target:helper_subject_9 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_9 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}
	option = {
		name = civcom.5000.subject_10
		trigger = {
			check_variable = { which = helper_subjects value >= 10 }
			event_target:helper_subject_10 = {
				NOT = {
					any_war = {
						OR = {
							using_war_goal = { type = wg_civwar owner = root }
							using_war_goal = { type = wg_natwar owner = root }
							using_war_goal = { type = wg_civwar_heir owner = root }
							using_war_goal = { type = wg_coup_successor owner = root }
							using_war_goal = { type = wg_coup_independent owner = root }
						}
					}
				}
			}
		}
		hidden_effect = {
			event_target:helper_subject_10 = {
				join_war_on_side = {
					war = event_target:civwar_for_subs
					side = root
				}
			}
			country_event = { id = civcom.5000 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				check_variable = { which = combined_rebel_power_ratio value >= 0.8 }
			}
		}
	}

	option = {
		name = civcom.5000.refresh
		trigger = {
			check_variable = { which = helper_subjects value > 10 }
		}
		hidden_effect = {
			get_helper_subjects_effect_refresh = yes
			country_event = { id = civcom.5000 }
		}
	}

	after = {
		hidden_effect = {
			# If there are more then 10 subjects, more should appear every time one is chosen
			get_helper_subjects_effect = yes
		}
	}
}

######################
#  Traitor Captured  #
######################

# Traitor Onscreen.
country_event = {
	id = civcom.7000
	title = civcom.7000.name
	desc = civcom.7000.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Execute
	option = {
		name = civcom.7000.a
		hidden_effect = {
			random_list = {
				33 = { set_country_flag = traitor_hanged }
				33 = { set_country_flag = traitor_firing_squad }
				33 = { set_country_flag = traitor_guillotine }
			}
			country_event = { id = civcom.7001 }
		}
	}

	# Torture
	option = {
		name = civcom.7000.b
		hidden_effect = {
			random_list = {
				33 = { set_country_flag = traitor_flayed }
				33 = { set_country_flag = traitor_stretched }
				33 = { set_country_flag = traitor_piked }
			}
			country_event = { id = civcom.7002 }
		}
	}

	# Imprison
	option = {
		name = civcom.7000.c
		hidden_effect = {
			country_event = { id = civcom.7003 }
		}
	}

	# Pardon
	option = {
		name = civcom.7000.d
		hidden_effect = {
			country_event = { id = civcom.7004 }
		}
	}

	# Banish
	option = {
		name = civcom.7000.e
		hidden_effect = {
			country_event = { id = civcom.7005 }
		}
	}
}

# Traitor Executed
country_event = {
	id = civcom.7001
	title = civcom.7000.name
	desc = civcom.7001.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Execute
	option = {
		name = civcom.7001.a
		hidden_effect = {
			country_event = { id = civend.6000 }
		}
	}
}

# Traitor Tortured
country_event = {
	id = civcom.7002
	title = civcom.7000.name
	desc = civcom.7002.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Torture
	option = {
		name = civcom.7002.a
		hidden_effect = {
			country_event = { id = civend.6000 }
		}
	}
}

# Traitor Imprisoned
country_event = {
	id = civcom.7003
	title = civcom.7000.name
	desc = civcom.7003.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Imprison
	option = {
		name = civcom.7003.a
		hidden_effect = {
			event_target:defeated_traitor = {
				kill_leader = { show_notification = no }
			}
		}
	}
}

# Traitor Pardoned
country_event = {
	id = civcom.7004
	title = civcom.7000.name
	desc = civcom.7004.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Pardon
	option = {
		name = civcom.7004.a
		hidden_effect = {
			event_target:defeated_traitor = {
				kill_leader = { show_notification = no }
			}
		}
	}
}

# Traitor Banished
country_event = {
	id = civcom.7005
	title = civcom.7000.name
	desc = civcom.7005.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Banish
	option = {
		name = civcom.7005.a
		hidden_effect = {
			country_event = { id = civend.5100 }
		}
	}
}

#######################
#  Traitor Retrieved  #
#######################

# Retrieved Traitor Onscreen.
country_event = {
	id = civcom.7100
	title = civcom.7000.name
	desc = civcom.7100.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Execute
	option = {
		name = civcom.7000.a
		hidden_effect = {
			random_list = {
				33 = { set_country_flag = traitor_hanged }
				33 = { set_country_flag = traitor_firing_squad }
				33 = { set_country_flag = traitor_guillotine }
			}
			country_event = { id = civcom.7110 }
		}
	}

	# Torture
	option = {
		name = civcom.7000.b
		hidden_effect = {
			random_list = {
				33 = { set_country_flag = traitor_flayed }
				33 = { set_country_flag = traitor_stretched }
				33 = { set_country_flag = traitor_piked }
			}
			country_event = { id = civcom.7110 }
		}
	}

	# Imprison
	option = {
		name = civcom.7000.c
		hidden_effect = {
			country_event = { id = civcom.7115 }
		}
	}
}

# Retrieved Traitor Executed
country_event = {
	id = civcom.7110
	title = civcom.7000.name
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	desc = {
		text = civcom.7001.desc
		trigger = {
			OR = {
				has_country_flag = traitor_hanged
				has_country_flag = traitor_firing_squad
				has_country_flag = traitor_guillotine
			}
		}
	}

	desc = {
		text = civcom.7002.desc
		trigger = {
			OR = {
				has_country_flag = traitor_flayed
				has_country_flag = traitor_stretched
				has_country_flag = traitor_piked
			}
		}
	}

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	option = {
		name = civcom.7110.die
		trigger = {
			OR = {
				has_country_flag = traitor_hanged
				has_country_flag = traitor_firing_squad
				has_country_flag = traitor_guillotine
			}
		}
		hidden_effect = {
			country_event = { id = civend.6000 }
		}
	}

	option = {
		name = civcom.7110.bye
		trigger = {
			OR = {
				has_country_flag = traitor_flayed
				has_country_flag = traitor_stretched
				has_country_flag = traitor_piked
			}
		}
		hidden_effect = {
			country_event = { id = civend.6000 }
		}
	}
}

# Retrieved Traitor Imprisoned
country_event = {
	id = civcom.7115
	title = civcom.7000.name
	desc = civcom.7003.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Imprison
	option = {
		name = civcom.7003.a
		hidden_effect = {
			event_target:defeated_traitor = {
				kill_leader = { show_notification = no }
			}
		}
	}
}

####################
#   Asylum Events  #
####################

# Traitor Asylum Request
country_event = {
	id = civcom.8000
	title = civcom.7000.name
	desc = civcom.8000.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:defeated_traitor
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Deny them asylum
	option = {
		name = civcom.8000.a
		hidden_effect = {
			set_country_flag = traitor_already_asked@event_target:defeated_traitor
			event_target:traitor_home_country = {
				country_event = { id = civend.5000 }
			}
		}
		ai_chance = {
			factor = 3

			modifier = {
				factor = 0
				is_pacifist = yes	
			}

			modifier = {
				factor = 0.2
				is_at_war_with = event_target:traitor_home_country	
			}

			modifier = {
				factor = 1.25
				opinion = { who = event_target:traitor_home_country value > 0 }	
			}
		}
	}

	# Grant Asylum
	option = {
		name = civcom.8000.b
		hidden_effect = {
			every_country = {
				limit = { has_country_flag = traitor_already_asked@event_target:defeated_traitor }
				remove_country_flag = traitor_already_asked@event_target:defeated_traitor
			}
			event_target:defeated_traitor = {
				set_owner = root
				set_leader_flag = traitor_@event_target:traitor_home_country
			}
			event_target:traitor_home_country = {
				country_event = { id = civend.5002 days = 14 random = 360 }
			}
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 2
				is_pacifist = yes	
			}

			modifier = {
				factor = 2
				has_rival = event_target:traitor_home_country	
			}

			modifier = {
				factor = 2
				is_at_war_with = event_target:traitor_home_country	
			}

			modifier = {
				factor = 2
				opinion = { who = event_target:traitor_home_country value < 0 }	
			}
		}
	}
}

# Heir Asylum Request
country_event = {
	id = civcom.8100
	title = civcom.8100.name
	desc = civcom.8100.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:disinherited_heir
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Deny them asylum
	option = {
		name = civcom.8000.a
		hidden_effect = {
			set_country_flag = traitor_heir_already_asked
			event_target:traitor_home_country = {
				country_event = { id = civheir.3010 }
			}
		}
		ai_chance = { factor = 4 }
	}

	# Grant Asylum
	option = {
		name = civcom.8000.b
		hidden_effect = {
			country_event = { id = civcom.8110 }
			every_country = {
				limit = { has_country_flag = traitor_heir_already_asked }
				remove_country_flag = traitor_heir_already_asked
			}
		}
		ai_chance = { factor = 6 }
	}
}

# Heir Asylum Granted
country_event = {
	id = civcom.8110
	title = civcom.8100.name
	desc = civcom.8010.desc
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:disinherited_heir
		planet_background = root.owner
		graphical_culture = root.owner
		city_level = root.owner
		room = root.owner
	}

	# Governor
	option = {
		name = civcom.8010.a
		ai_chance = { factor = 5 }
		hidden_effect = {
			clone_leader = {
				target = event_target:disinherited_heir
				class = governor
				traits = {
					trait = random_trait
					trait = random_trait
					trait = random_trait
				}
				effect = {
					save_global_event_target_as = disinherited_heir_asylum
				}
			}
			event_target:disinherited_heir_asylum = {
				set_leader_flag = heir_traitor_@event_target:traitor_home_country
			}
			event_target:disinherited_heir = {
				set_leader_flag = dead_ruler
				kill_leader = { show_notification = no }
			}
			event_target:traitor_home_country = {
				country_event = { id = civheir.3030 days = 14 random = 360 }
			}
		}
	}

	# Admiral
	option = {
		name = civcom.8010.b
		ai_chance = { factor = 5 }
		hidden_effect = {
			clone_leader = {
				target = event_target:disinherited_heir
				class = admiral
				traits = {
					trait = random_trait
					trait = random_trait
					trait = random_trait
				}
				effect = {
					save_global_event_target_as = disinherited_heir_asylum
				}
			}
			event_target:disinherited_heir_asylum = {
				set_leader_flag = heir_traitor_@event_target:traitor_home_country
			}
			event_target:disinherited_heir = {
				set_leader_flag = dead_ruler
				kill_leader = { show_notification = no }
			}
			event_target:traitor_home_country = {
				country_event = { id = civheir.3030 days = 14 random = 360 }
			}
		}
	}

	# General
	option = {
		name = civcom.8010.c
		ai_chance = { factor = 3 }
		hidden_effect = {
			clone_leader = {
				target = event_target:disinherited_heir
				class = general
				traits = {
					trait = random_trait
					trait = random_trait
					trait = random_trait
				}
				effect = {
					save_global_event_target_as = disinherited_heir_asylum
				}
			}
			event_target:disinherited_heir_asylum = {
				set_leader_flag = heir_traitor_@event_target:traitor_home_country
			}
			event_target:disinherited_heir = {
				set_leader_flag = dead_ruler
				kill_leader = { show_notification = no }
			}
			event_target:traitor_home_country = {
				country_event = { id = civheir.3030 days = 14 random = 360 }
			}
		}
	}

	# Scientist
	option = {
		name = civcom.8010.d
		ai_chance = { factor = 2 }
		hidden_effect = {
			clone_leader = {
				target = event_target:disinherited_heir
				class = scientist
				traits = {
					trait = random_trait
					trait = random_trait
					trait = random_trait
				}
				effect = {
					save_global_event_target_as = disinherited_heir_asylum
				}
			}
			event_target:disinherited_heir_asylum = {
				set_leader_flag = heir_traitor_@event_target:traitor_home_country
			}
			event_target:disinherited_heir = {
				set_leader_flag = dead_ruler
				kill_leader = { show_notification = no }
			}
			event_target:traitor_home_country = {
				country_event = { id = civheir.3030 days = 14 random = 360 }
			}
		}
	}

	after = {
		add_intel = {
			who = event_target:traitor_home_country
			amount = 10
		}
	}
}

########################
# Governments in Exile #
########################

# Country Destroyed - Seeking Host
country_event = {
	id = civcom.9000
	title = civcom.9000.name
	location = root.capital_scope
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civcom.9000.regular
		trigger = { NOT = { has_country_flag = overlord_of_@from } }
	}

	desc = {
		text = civcom.9000.subject
		trigger = { has_country_flag = overlord_of_@from }
	}

	diplomatic = yes

	picture_event_data = {
		portrait = from.ruler
		planet_background = root.capital_scope
		graphical_culture = root
		city_level = root
		room = root.ruler
	}

	# Deny Hosting Them
	option = {
		name = civcom.9000.deny
		hidden_effect = {
			set_country_flag = exile_already_asked_@from
			from = {
				country_event = { id = civnat.1300 }
			}
		}
	}

	# Host Their Government
	option = {
		name = civcom.9000.host
		hidden_effect = {
			every_country = {
				limit = { has_country_flag = exile_already_asked_@from }
				remove_country_flag = exile_already_asked_@from
			}

			if = {
				limit = { from = { NOT = { has_country_flag = switching_hosts } } }
				create_exile_enclave_country = yes
			}
			else = {
				from = { save_event_target_as = exile_new_host }
				if = {
					limit = { any_owned_planet = { NOT = { has_planet_flag = exiled_gov_host_planet } } }
					if = {
						limit = { capital_scope = { NOT = { has_planet_flag = exiled_gov_host_planet } } }
						capital_scope = {
							set_planet_flag = exiled_gov_host_planet
							save_event_target_as = gov_hosting_planet
						}
					}
					else = {
						random_owned_planet = {
							limit = { NOT = { has_planet_flag = exiled_gov_host_planet } }
							set_planet_flag = exiled_gov_host_planet
							save_event_target_as = gov_hosting_planet
						}
					}
				}
				else = {
					random_system_within_border = {
						random_system_planet = {
							limit = { NOT = { has_planet_flag = exiled_gov_host_planet } }
							set_planet_flag = exiled_gov_host_planet
							save_event_target_as = gov_hosting_planet
						}
					}
				}
				create_fleet = {
					settings = { spawn_debris = no }
					effect = {
						set_owner = event_target:exile_new_host
						create_ship = {
							name = "Exiled Government Headquarters"
							design = "NAME_Mercenary_Enclave_Station_1"
							graphical_culture = from
						}
						set_location = {
							target = event_target:gov_hosting_planet
							distance = 45
							angle = random
						}
						save_event_target_as = new_capital_station
					}
				}

				event_target:gov_hosting_planet = {
					set_planet_flag = exile_enclave_link_@event_target:exile_new_host
				}

				event_target:exile_new_host = {
					remove_country_flag = switching_hosts
					random_owned_fleet = {
						limit = { NOT = { is_same_value = event_target:new_capital_station } }
						destroy_fleet = this
					}
				}
			}
		}
	}

	after = {
		if = {
			limit = { has_country_flag = overlord_of_@from }
			remove_country_flag = overlord_of_@from
		}
	}
}

# Exile Enclave Greetings: Gatekeeper event
# Via on_custom_diplomacy | this = target country (player); from = country being contacted
country_event = {
	id = civcom.9005
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_country_type = enclave_exiled_gov
			has_country_flag = exiled_gov_enclave_country
		}
		NOT = {
			has_active_event = {
				civcom.9100 # Initial
				civcom.9110
				civcom.9120
				civcom.9130
			}
		}
	}

	immediate = {
		ai_trade_facility = {
			from = { save_event_target_as = exiled_gov_enclave_country }
			country_event = { id = civcom.9100 }
		}
	}
}

# Exile Enclave: GREETINGS
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9100
	title = civcom.9100.name
	is_triggered_only = yes

	desc = {
		text = civcom.9100.other.desc
		trigger = { NOT = { event_target:exiled_gov_host = { is_same_empire = root } } }
	}

	desc = {
		text = civcom.9100.host.desc
		trigger = { event_target:exiled_gov_host = { is_same_empire = root } }
	}

	diplomatic = yes
	custom_gui = "enclave_exiled_gov_window"
	custom_gui_option = "enclave_exiled_gov_option"
	picture_event_data = {
		portrait = event_target:exiled_gov_enclave_country.ruler
		room = ethic_spaceship_room
	}
	location = event_target:exiled_gov_enclave_system

	immediate = {
		event_target:exiled_gov_enclave_country = {
			random_owned_fleet = {
				limit = { is_ship_size = enclave_mercenary_station }
				solar_system = {
					save_event_target_as = exiled_gov_enclave_system
					if = {
						limit = { exists = space_owner }
						space_owner = { save_event_target_as = exiled_gov_host }
					}
				}
			}
		}
		# without this immediate is not invoked when event runs in a special mode that allows AI to collect trade data
		run_in_ai_mode = yes
	}

	# Cease dialog
	option = {
		name = GOODBYE
		default_hide_option = yes
	}

	# Give Land (Planet/Sector)
	option = {
		name = civcom.9100.land
		trigger = {
			NOT = { is_hostile = event_target:exiled_gov_enclave_country }
			exists = event_target:exiled_gov_host
		}
		hidden_effect = {
			country_event = { id = civcom.9200 }
		}
	}

	# Host Panel
	option = {
		name = civcom.9100.host
		trigger = {
			NOT = { is_hostile = event_target:exiled_gov_enclave_country }
			exists = event_target:exiled_gov_host
			event_target:exiled_gov_host = { is_same_empire = root }
		}
		hidden_effect = {
			country_event = { id = civcom.9110 }
		}
	}

	after = {
		hidden_effect = {

		}
	}
}

# Exile Enclave: Host PANEL
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9110
	base = civcom.9100
	desc_clear = yes
	option_clear = yes

	desc = civcom.9110.desc

	#Discuss another matter (return to menu)
	option = {
		name = civcom.9100.back
		hidden_effect = {
			country_event = { id = civcom.9100 }
		}
	}

	# Declare War on Behalf
	option = {
		name = civcom.9110.war
		trigger = { # Still deciding whether to implement this
			always = no
		}
		allow = {
			any_country = {
				has_communications = root
				is_country_type_with_subjects = yes
				NOT = { has_overlord = root }
				NOT = { has_defensive_pact = root }
				NOT = { has_non_aggression_pact = root }
				NOT = { is_in_federation_with = root }
			}
		}
		hidden_effect = {
			# country_event = { id = civcom.9120 }
		}
	}

	# Terminate host relationship (tell them to find new host)
	option = {
		name = civcom.9110.end
		hidden_effect = {
			country_event = { id = civcom.9130 }
		}
	}
}

# Exile Enclave: Stop Hosting Government
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9130
	base = civcom.9100
	desc_clear = yes
	option_clear = yes

	desc = civcom.9130.desc

	# Nevermind
	option = {
		name = civcom.nevermind
	}

	# Stop Hosting Government (tell them to find new host)
	option = {
		name = civcom.9130.terminate
		hidden_effect = {
			country_event = { id = civnat.1330 }
		}
	}
}

# Exile Enclave: Give Land
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9200
	base = civcom.9100
	desc_clear = yes
	option_clear = yes

	desc = civcom.9200.desc

	immediate = {
		set_variable = { which = monthly_unity_prod value = 0 }

		export_trigger_value_to_variable = {
			trigger = resource_income_compare
			parameters = { resource = unity }
			variable = year_unity_prod
			rounded = yes
		}

		set_variable = { which = two_year_unity_prod value = year_unity_prod }

		multiply_variable = { which = year_unity_prod value = 12 }
		multiply_variable = { which = two_year_unity_prod value = 24 }
	}

	#Discuss another matter (return to menu)
	option = {
		name = civcom.9100.back
		hidden_effect = {
			country_event = { id = civcom.9100 }
		}
	}

	# Give them a planet
	option = {
		name = civcom.9200.planet
		allow = {
			custom_tooltip = {
				fail_text = one_year_unity_fail_text
				has_country_resource = { type = unity amount >= year_unity_prod }
			}
		}
		hidden_effect = {
			get_restoration_planets = yes
			country_event = { id = civcom.9210 }
		}
	}

	# Give them a Sector
	option = {
		name = civcom.9200.sector
		allow = {
			custom_tooltip = {
				fail_text = two_year_unity_fail_text
				has_country_resource = { type = unity amount >= two_year_unity_prod }
			}
		}
		hidden_effect = {
			get_restoration_sectors = yes
			country_event = { id = civcom.9220 }
		}
	}
}

# Exile Enclave: Grant Planet
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9210
	base = civcom.9100
	desc_clear = yes
	option_clear = yes

	desc = civcom.9210.desc

	#Discuss another matter (return to menu)
	option = {
		name = civcom.9100.back
		hidden_effect = {
			country_event = { id = civcom.9100 }
		}
	}

	option = {
		name = civcom.9210.restoration_planet_1
		trigger = { check_variable = { which = total_restoration_planets value >= 1 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_1 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_2
		trigger = { check_variable = { which = total_restoration_planets value >= 2 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_2 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_3
		trigger = { check_variable = { which = total_restoration_planets value >= 3 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_3 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_4
		trigger = { check_variable = { which = total_restoration_planets value >= 4 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_4 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_5
		trigger = { check_variable = { which = total_restoration_planets value >= 5 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_5 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_6
		trigger = { check_variable = { which = total_restoration_planets value >= 6 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_6 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_7
		trigger = { check_variable = { which = total_restoration_planets value >= 7 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_7 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_8
		trigger = { check_variable = { which = total_restoration_planets value >= 8 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_8 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_9
		trigger = { check_variable = { which = total_restoration_planets value >= 9 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_9 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_10
		trigger = { check_variable = { which = total_restoration_planets value >= 10 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_10 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}
	
	option = {
		name = civcom.9210.restoration_planet_11
		trigger = { check_variable = { which = total_restoration_planets value >= 11 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_11 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_12
		trigger = { check_variable = { which = total_restoration_planets value >= 12 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_12 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_13
		trigger = { check_variable = { which = total_restoration_planets value >= 13 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_13 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_14
		trigger = { check_variable = { which = total_restoration_planets value >= 14 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_14 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_15
		trigger = { check_variable = { which = total_restoration_planets value >= 15 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_15 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_16
		trigger = { check_variable = { which = total_restoration_planets value >= 16 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_16 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_17
		trigger = { check_variable = { which = total_restoration_planets value >= 17 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_17 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_18
		trigger = { check_variable = { which = total_restoration_planets value >= 18 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_18 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_19
		trigger = { check_variable = { which = total_restoration_planets value >= 19 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_19 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9210.restoration_planet_20
		trigger = { check_variable = { which = total_restoration_planets value >= 20 } }
		add_resource = { unity = -1 mult = year_unity_prod }
		hidden_effect = {
			event_target:restoration_planet_20 = { exile_restore_planet_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			clear_variable = year_unity_prod
			clear_variable = two_year_unity_prod
		}
	}
}

# Exile Enclave: Grant sector
# This = player country; event_target:exiled_gov_enclave_country = enclave country
country_event = {
	id = civcom.9220
	base = civcom.9100
	desc_clear = yes
	option_clear = yes

	desc = civcom.9220.desc

	#Discuss another matter (return to menu)
	option = {
		name = civcom.9100.back
		hidden_effect = {
			country_event = { id = civcom.9100 }
		}
	}

	option = {
		name = civcom.9220.restoration_sector_1
		trigger = { check_variable = { which = total_restoration_sectors value >= 1 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_1 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_2
		trigger = { check_variable = { which = total_restoration_sectors value >= 2 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_2 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_3
		trigger = { check_variable = { which = total_restoration_sectors value >= 3 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_3 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_4
		trigger = { check_variable = { which = total_restoration_sectors value >= 4 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_4 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_5
		trigger = { check_variable = { which = total_restoration_sectors value >= 5 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_5 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_6
		trigger = { check_variable = { which = total_restoration_sectors value >= 6 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_6 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_7
		trigger = { check_variable = { which = total_restoration_sectors value >= 7 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_7 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_8
		trigger = { check_variable = { which = total_restoration_sectors value >= 8 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_8 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_9
		trigger = { check_variable = { which = total_restoration_sectors value >= 9 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_9 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_10
		trigger = { check_variable = { which = total_restoration_sectors value >= 10 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_10 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}
	
	option = {
		name = civcom.9220.restoration_sector_11
		trigger = { check_variable = { which = total_restoration_sectors value >= 11 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_11 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_12
		trigger = { check_variable = { which = total_restoration_sectors value >= 12 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_12 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_13
		trigger = { check_variable = { which = total_restoration_sectors value >= 13 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_13 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_14
		trigger = { check_variable = { which = total_restoration_sectors value >= 14 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_14 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_15
		trigger = { check_variable = { which = total_restoration_sectors value >= 15 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_15 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_16
		trigger = { check_variable = { which = total_restoration_sectors value >= 16 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_16 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_17
		trigger = { check_variable = { which = total_restoration_sectors value >= 17 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_17 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_18
		trigger = { check_variable = { which = total_restoration_sectors value >= 18 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_18 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_19
		trigger = { check_variable = { which = total_restoration_sectors value >= 19 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_19 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	option = {
		name = civcom.9220.restoration_sector_20
		trigger = { check_variable = { which = total_restoration_sectors value >= 20 } }
		add_resource = { unity = -2 mult = year_unity_prod }
		hidden_effect = {	
			event_target:restoration_sector_20 = { exile_restore_sector_setup = yes }
			exile_restoration_gen_effect = yes
		}
		ai_chance = { factor = 1 }
	}

	after = {
		hidden_effect = {
			clear_variable = year_unity_prod
			clear_variable = two_year_unity_prod
		}
	}
}