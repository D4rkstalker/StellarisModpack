# Stellaris Modjam 2020 - Caretaker
# Writer/Scripter NHunter
# Reviewer/Editor AphaAsh

namespace = caretaker_origin_event

# country flags index:
#
# - caretaker_killer_glitch                         : A random flag added at the game start for disappeared pops event chain
# - caretaker_killer_glitch_persists                : Shows that the player either chose to ingore the glitch or project to fix it failed
#
# - caretaker_tr_a_new_life_logged                  : Shows that the Caretaker mood modifier for taking "A New Life" tradition has been applied
# - caretaker_ap_eternal_vigilance_logged           : Shows that the Caretaker mood modifier for taking "Eternal Vigilance" AP has been applied
# - caretaker_ap_one_vision_logged                  : Shows that the Caretaker mood modifier for taking "One Vision" AP has been applied
# - caretaker_ap_enigmatic_engineering_logged       : Shows that the Caretaker mood modifier for taking "Enigmatic Engineering" AP has been applied
# - caretaker_ap_defender_of_the_galaxy_logged      : Shows that the Caretaker mood modifier for taking "Defender of the Galaxy" AP has been applied
# - caretaker_ap_xenocompatilibility_logged         : Shows that the Caretaker mood modifier for taking "Xenocompatibility" AP has been applied
# - caretaker_ap_nihilistic_acquisition_logged      : Shows that the Caretaker mood modifier for taking "Nihilistic Acquisition" AP has been applied
# - caretaker_ap_flesh_is_weak_logged               : Shows that the Caretaker mood modifier for taking "The Flesh Is Weak" AP has been applied
# - caretaker_ap_mind_over_matter_logged            : Shows that the Caretaker mood modifier for taking "Mind Over Matter" AP has been applied
# - caretaker_ap_engineered_evolution_logged        : Shows that the Caretaker mood modifier for taking "Engineered Evolution" AP has been applied
# - caretaker_ap_synthetic_evolution_logged         : Shows that the Caretaker mood modifier for taking "Synthetic Evolution" AP has been applied
# - caretaker_ap_transcendence_logged               : Shows that the Caretaker mood modifier for taking "Transcendence" AP has been applied
# - caretaker_ap_evolutionary_master_logged         : Shows that the Caretaker mood modifier for taking "Evolutionary Mastery" AP has been applied
# - caretaker_ap_personal_care_logged               : Shows that the Caretaker mood modifier for taking "Personal Care" AP has been applied
# - caretaker_ap_monitor_directive_logged           : Shows that the Caretaker mood modifier for taking "Monitor Directive" AP has been applied
#
# - caretaker_abandoned_vault                       : A random flag added at the game start for the abandoned vault event 'chain'
# - caretaker_downshifters                          : A random flag added at the game start for the downshifters event 'chain'
#
# - caretaker_hubs_on_colonies_explained            : Shows that the player was shown a message saying that the Caretaker hubs must be established on colonies
# - caretaker_no_hub_angry_letter_shown             : Shows that the played was shown an angry message from the Caretaker for not building Hubs on colonies
#
# - caretaker_pop_creation_cooldown                 : Shows that a decision to request a pop from the Caretaker has been recently used
# - caretaker_resource_request_cooldown             : Shows that a decision to request resources from the Caretaker has been recently used
# - caretaker_gift_cooldown                         : Shows that the Caretaker has recently given a gift to the empire
#
# - caretaker_break_up                              : Generic flag to show that empire no longer hosts the Caretaker
# - caretaker_experiment_scrapped                   : The Caretaker has proclaimed that species have failed it and must be assimilated/eradicated
# - caretaker_destoryed                             : The Caretaker has been dealt with (used by faction status check event loop)
# - caretaker_awful_truth_learned                   : Knows what the Caretaker has done to the species
# - caretaker_delayed_psi_cure                      : Used to stop watchman event
#
# - caretaker_personal_care_rolled_out				: Primary species has been upgraded with Personal Care Interfaces
# - caretaker_interface_traits_removed				: PCI and First Monitor traits removed due to break up

# planet flag index:
#
# - caretaker_origin_reminded_to_build_caretaker_hub: This flag shows that the played was given a notification about the colony not having a Caretaker hub after 1 year
# - caretaker_core_planet_take_over_attempt         : Shows that the Caretaker is in process of trying to take over the core planet
# - caretaker_core_planet_take_over_success         : Shows that the Caretaker successfully managed to take over the core planet
# - caretaker_core_planet_take_over_failed          : Shows that the Caretaker failed to take over the core planet
# - caretaker_hub_planet_take_over_attempt          : Shows that the Caretaker is in process of trying to take over a hub planet
# - caretaker_hub_planet_take_over_success          : Shows that the Caretaker successfully managed to take over a hub planet
# - caretaker_hub_planet_take_over_failed           : Shows that the Caretaker failed to take over a hub planet
#
# - caretaker_hub_hack_preserved                    : It was decided to preserve the changes to the Caretaker Hub made by the hacker

## ##################################################### ##
##        Additional empire set up on game start         ##
## ##################################################### ##

### on game start : on homeworld : remove slums tile blocker and give pop
country_event = {
    id = caretaker_origin_event.1
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
    }

    immediate = {
        capital_scope = {
            remove_deposit = d_decrepit_dwellings
			add_deposit = d_caretaker_core
            # save current planet as target for caretaker core updates
            save_global_event_target_as = caretaker_core_planet@root
        }
        # base caretaker mood = country_level variable
        set_variable = {
            which = caretaker_mood
            value = 0
        }
        # keep track of the number of migration treaties
        set_variable = {
            which = migration_treaties
            value = 0
        }
       # roll for the glitch event chain
        random_list = {
            50 = {}
            50 = {
                set_country_flag = caretaker_killer_glitch
                country_event = { id = caretaker_origin_event.2000 days = 18000 } # 50 years
            }
        }
       # roll for the abandoned vault event 'chain'
        random_list = {
            50 = {}
            50 = {
                set_country_flag = caretaker_abandoned_vault
                # this event chain is triggered at mid-game so no need to explicitly call an event on delay here
            }
        }
        # roll for the hacked Caretaker hub event 'chain'
        random_list = {
            50 = {}
            50 = {
                set_country_flag = caretaker_hacked_hub
                country_event = { id = caretaker_origin_event.2600 days = 21600 } # 60 years
            }
        } 
        # roll for the downshifters event 'chain'
        random_list = {
            50 = {}
            50 = {
                set_country_flag = caretaker_downshifters
                country_event = { id = caretaker_origin_event.2700 days = 19800 } # 55 years
			}
		}

		# give bonus techs etc from civics
		give_technology = { message = no tech = tech_planetary_unification }
		if = {
			limit = { has_civic = civic_drone_culture }
			give_technology = { message = no tech = tech_powered_exoskeletons }
			give_technology = { message = no tech = tech_robotic_workers  }
			create_built_robot_species = yes
			modify_species = {
				species = last_created_species
				add_trait = trait_robot_caretaker_directives
				# add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
			capital_scope = {
				create_pop = { species = last_created_species }
				create_pop = { species = last_created_species }
				add_building = building_robot_assembly_plant
			}
		}
		else = {
			capital_scope = {
				create_pop = { species = ROOT }
				create_pop = { species = ROOT }
				add_building = building_monitor_station_1
			}
		}
		#if = {
		#	limit = { has_civic = civic_care_crusade }
		#	give_technology = { message = no tech = tech_centralized_command }
		#}		
		if = {
			limit = { has_civic = civic_love_the_alien }			
			give_technology = { message = no tech = tech_neural_implants }
		}
	}
}

## ##################################################### ##
## Managing Caretaker deposits when planet change owners ##
## ##################################################### ##

### if colony with caretaker deposit changes owner, remove it
planet_event = {
    id = caretaker_origin_event.10
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        caretaker_presence_on_planet = yes
        FROM = { NOT = { has_origin = origin_caretaker } }
    }

    immediate = {
        caretaker_hub_clean_up = yes
        caretaker_core_clean_up = yes
        remove_modifier = caretaker_hacked_hub_1
        remove_modifier = caretaker_hacked_hub_2
        remove_modifier = caretaker_hacked_hub_3a
        remove_modifier = caretaker_hacked_hub_3b
        remove_deposit = d_caretaker_free_settlements
        remove_modifier = pm_caretaker_free_settler_discord
    }
}

### empire with caretaker origin takes over a colony of someone else : schedule caretaker hub construction events
planet_event = {
    id = caretaker_origin_event.20
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROM = { has_origin = origin_caretaker }
    }

    immediate = {
        # country has active caretaker
        if = {
            limit = { FROM = { has_country_flag = caretaker_break_up } }
            # planet has a caretaker core -> change it into caretaker hub
            if = {
                limit = { caretaker_core_exists_on_planet = yes }
                caretaker_core_clean_up = yes
                add_deposit = d_caretaker_hub
            }
            # planet doesn't have caretaker core -> schedule event for checking if the core was built
            else_if = {
                limit = { NOT = { has_deposit = d_caretaker_hub } }
                planet_event = { id = caretaker_origin_event.1110 days = 360 }
                planet_event = { id = caretaker_origin_event.1120 days = 720 }
            }
			remove_deposit = d_caretaker_free_settlements
			remove_modifier = pm_caretaker_free_settler_discord
        }
        # country doesn't have active caretaker anymore
        else = {
            caretaker_core_clean_up = yes
            caretaker_hub_clean_up = yes
			remove_deposit = d_caretaker_free_settlements
			remove_modifier = pm_caretaker_free_settler_discord
        }
        # break event chain from another country's caretaker : hacked hub
        if = {
            limit = {
				or = {
					has_modifier = caretaker_hacked_hub_1
					has_modifier = caretaker_hacked_hub_2
					has_modifier = caretaker_hacked_hub_3a
					has_modifier = caretaker_hacked_hub_3b
				}
				NOT = { has_planet_flag = caretaker_hub_hack_preserved }
				exists = event_target:caretaker_hacked_hub_planet@root
                NOT = { is_planet = event_target:caretaker_hacked_hub_planet@root }
            }
            remove_modifier = caretaker_hacked_hub_1
            remove_modifier = caretaker_hacked_hub_2
            remove_modifier = caretaker_hacked_hub_3a
            remove_modifier = caretaker_hacked_hub_3b
        }
    }
}

### if colony with a caretaker deposit for some reason falls ownerless
planet_event = {
    id = caretaker_origin_event.50
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        caretaker_presence_on_planet = yes
    }

    immediate = {
        caretaker_core_clean_up = yes
        caretaker_hub_clean_up = yes
        remove_modifier = caretaker_hacked_hub_1
        remove_modifier = caretaker_hacked_hub_2
        remove_modifier = caretaker_hacked_hub_3a
        remove_modifier = caretaker_hacked_hub_3b
        remove_deposit = d_caretaker_free_settlements
        remove_modifier = pm_caretaker_free_settler_discord
    }
}

## ##################################################### ##
##               Updating caretaker's mood               ##
## ##################################################### ##

### evaluate variable storing The Caretaker's mood and update deposit on the capital world to reflect current mood
country_event = {
    id = caretaker_origin_event.500
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        ### update mood if empire took 'Expansion : A new life' tradition
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_tr_a_new_life_logged }
                has_tradition = tr_expansion_a_new_life
            }
            set_country_flag = caretaker_tr_a_new_life_logged
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME
            }
        }
        ### update mood if empire took 'Xeno-Compatilibility' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_xenocompatilibility_logged }
                has_ascension_perk = ap_xeno_compatibility
            }
            set_country_flag = caretaker_ap_xenocompatilibility_logged
            change_variable = {
                which = caretaker_mood
                value = -10 # FIXME
            }
            country_event = { id = caretaker_origin_event.510 days = 2 random = 3 }
        }
        ### update mood if empire took 'Nihilistic Acquisition' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_nihilistic_acquisition_logged }
                has_ascension_perk = ap_nihilistic_acquisition
            }
            set_country_flag = caretaker_ap_nihilistic_acquisition_logged
            change_variable = {
                which = caretaker_mood
                value = -8 # FIXME
            }
            country_event = { id = caretaker_origin_event.511 days = 2 random = 3 }
        }
        ### update mood if empire took 'The Flesh Is Weak' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_flesh_is_weak_logged }
                has_ascension_perk = ap_the_flesh_is_weak
            }
            set_country_flag = caretaker_ap_flesh_is_weak_logged
            change_variable = {
                which = caretaker_mood
                value = -25 # FIXME
            }
            country_event = { id = caretaker_origin_event.512 days = 2 random = 3 }
        }
        ### update mood if empire took 'Mind Over Matter' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_mind_over_matter_logged }
                has_ascension_perk = ap_mind_over_matter
            }
            set_country_flag = caretaker_ap_mind_over_matter_logged
            change_variable = {
                which = caretaker_mood
                value = -25 # FIXME
            }
            country_event = { id = caretaker_origin_event.513 days = 2 random = 3 }
        }
        ### update mood if empire took 'Engineered Evolution' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_engineered_evolution_logged }
                has_ascension_perk = ap_engineered_evolution
            }
            set_country_flag = caretaker_ap_engineered_evolution_logged
            change_variable = {
                which = caretaker_mood
                value = -25 # FIXME
            }
            country_event = { id = caretaker_origin_event.514 days = 2 random = 3 }
        }
        ### update mood if empire took 'Synthetic Evolution' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_synthetic_evolution_logged }
                has_ascension_perk = ap_synthetic_evolution
            }
            set_country_flag = caretaker_ap_synthetic_evolution_logged
            change_variable = {
                which = caretaker_mood
                value = -250 # FIXME
            }
            country_event = { id = caretaker_origin_event.515 days = 2 random = 3 }
            random_list = {
                33 = { country_event = { id = caretaker_origin_event.4000 days = 150 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 180 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 210 random = 15 } }
            }
        }
        ### update mood if empire took 'Transcendence' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_transcendence_logged }
                has_ascension_perk = ap_transcendence
            }
            set_country_flag = caretaker_ap_transcendence_logged
            change_variable = {
                which = caretaker_mood
                value = -250 # FIXME
            }
            country_event = { id = caretaker_origin_event.516 days = 2 random = 3 }
            random_list = {
                33 = { country_event = { id = caretaker_origin_event.4000 days = 150 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 180 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 210 random = 15 } }
            }
        }
        ### update mood if empire took 'Evolutionary Mastery' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_evolutionary_master_logged }
                has_ascension_perk = ap_evolutionary_mastery
            }
            set_country_flag = caretaker_ap_evolutionary_master_logged
            change_variable = {
                which = caretaker_mood
                value = -250 # FIXME
            }
            country_event = { id = caretaker_origin_event.517 days = 2 random = 3 }
            random_list = {
                33 = { country_event = { id = caretaker_origin_event.4000 days = 150 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 180 random = 15 } }
                33 = { country_event = { id = caretaker_origin_event.4000 days = 210 random = 15 } }
            }
        }

        ### update mood if empire took 'Eternal Vigilance' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_eternal_vigilance_logged }
                has_ascension_perk = ap_eternal_vigilance
            }
            set_country_flag = caretaker_ap_eternal_vigilance_logged
            change_variable = {
                which = caretaker_mood
                value = 5 # FIXME
            }
            country_event = { id = caretaker_origin_event.520 days = 2 random = 3 }
        }
        ### update mood if empire took 'One Vision' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_one_vision_logged }
                has_ascension_perk = ap_one_vision
            }
            set_country_flag = caretaker_ap_one_vision_logged
            change_variable = {
                which = caretaker_mood
                value = 8 # FIXME
            }
            country_event = { id = caretaker_origin_event.521 days = 2 random = 3 }
        }
        ### update mood if empire took 'Enigmatic Engineering' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_enigmatic_engineering_logged }
                has_ascension_perk = ap_enigmatic_engineering
            }
            set_country_flag = caretaker_ap_enigmatic_engineering_logged
            change_variable = {
                which = caretaker_mood
                value = 5 # FIXME
            }
            country_event = { id = caretaker_origin_event.522 days = 2 random = 3 }
        }
        ### update mood if empire took 'Defender of the Galaxy' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_defender_of_the_galaxy_logged }
                has_ascension_perk = ap_defender_of_the_galaxy
            }
            set_country_flag = caretaker_ap_defender_of_the_galaxy_logged
            change_variable = {
                which = caretaker_mood
                value = 8 # FIXME
            }
            country_event = { id = caretaker_origin_event.523 days = 2 random = 3 }
        }

        ### update mood if empire took 'Personal Care' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_personal_care_logged }
                has_ascension_perk = ap_caretaker_personal_care
            }
            set_country_flag = caretaker_ap_personal_care_logged
            change_variable = {
                which = caretaker_mood
                value = 20 # FIXME
            }
            country_event = { id = caretaker_origin_event.524 days = 2 random = 3 }
        }
        ### update mood if empire took 'Monitor Directive' AP
        if = {
            limit = {
                NOT = { has_country_flag = caretaker_ap_monitor_directive_logged }
                has_ascension_perk = ap_caretaker_monitor_control
            }
            set_country_flag = caretaker_ap_monitor_directive_logged
            change_variable = {
                which = caretaker_mood
                value = 60 # FIXME
            }
            country_event = { id = caretaker_origin_event.525 days = 2 random = 3 }
        }

        ### migration treaties
        caretaker_update_mood_migration_treaties = yes

        ### check that previous core planet is still valid - if so, update core there
        if = {
            limit = {
                event_target:caretaker_core_planet@root = {
                    is_owned_by = root
                    is_colony = yes
                    num_pops > 0
                }
            }
            event_target:caretaker_core_planet@root = { caretaker_set_current_mood = yes }
            log = "Updated core at event target"
        }
        ### scope to (new) capital and setup core there
        else = {
            # remove core deposit from old event target as it no longer works for our purposes
            event_target:caretaker_core_planet@root = { caretaker_core_clean_up = yes }
            # move core to the current capital and save it as new event target for core mood updates
            capital_scope = {
                caretaker_hub_clean_up = yes
                caretaker_set_current_mood = yes
                save_global_event_target_as = caretaker_core_planet@root
            }
            log = "Updated core at empire capital"
        }
    }
}

## ##################################################### ##
##      Strongly-worded letters for taking 'bad' AP      ##
## ##################################################### ##

### Angry message from the Caretaker for taking 'Xeno-Compatilibility' AP
country_event = {
    id = caretaker_origin_event.510
    is_triggered_only = yes
    title = caretaker_origin_event.510.name
    desc = caretaker_origin_event.510.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.510.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.510.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.510.option.c
        trigger = {
            OR = {
                has_ethic = ethic_xenophile
                has_ethic = ethic_fanatic_xenophile
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    # option = {
    #     name = caretaker_origin_event.510.option.d
    #     hidden_effect = {
    #         change_variable = {
    #             which = caretaker_mood
    #             value = -2 # FIXME?
    #         }
    #     }
    # }
}

### Angry message from the Caretaker for taking 'Nihilistic Acquisition' AP
country_event = {
    id = caretaker_origin_event.511
    is_triggered_only = yes
    title = caretaker_origin_event.511.name
    desc = caretaker_origin_event.511.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.511.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.511.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.511.option.c
        trigger = {
            OR = {
                has_ethic = ethic_authoritarian
                has_ethic = ethic_fanatic_authoritarian
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.511.option.d
        trigger = {
            OR = {
                has_ethic = ethic_xenophobe
                has_ethic = ethic_fanatic_xenophobe
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'The Flesh Is Weak' AP
country_event = {
    id = caretaker_origin_event.512
    is_triggered_only = yes
    title = caretaker_origin_event.512.name
    desc = caretaker_origin_event.512.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.512.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.512.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.512.option.c
        trigger = {
            OR = {
                has_ethic = ethic_materialist
                has_ethic = ethic_fanatic_materialist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'Mind Over Matter' AP
country_event = {
    id = caretaker_origin_event.513
    is_triggered_only = yes
    title = caretaker_origin_event.513.name
    desc = caretaker_origin_event.513.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.513.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.513.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.513.option.c
        trigger = {
            OR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'Engineered Evolusion' AP
country_event = {
    id = caretaker_origin_event.514
    is_triggered_only = yes
    title = caretaker_origin_event.514.name
    desc = caretaker_origin_event.514.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.514.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.514.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.514.option.c
        trigger = {
			OR = {
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
			}
		}
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.514.option.d
        trigger = {
            OR = {
                has_ethic = ethic_xenophile
                has_ethic = ethic_fanatic_xenophile
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'Synthetic Evolution' AP
country_event = {
    id = caretaker_origin_event.515
    is_triggered_only = yes
    title = caretaker_origin_event.515.name
    desc = caretaker_origin_event.515.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.515.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.515.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.515.option.c
        trigger = {
            OR = {
                has_ethic = ethic_materialist
                has_ethic = ethic_fanatic_materialist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'Transcendence' AP
country_event = {
    id = caretaker_origin_event.516
    is_triggered_only = yes
    title = caretaker_origin_event.516.name
    desc = caretaker_origin_event.516.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.516.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.516.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.516.option.c
        trigger = {
            OR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
}

### Angry message from the Caretaker for taking 'Evolutionary Mastery' AP
country_event = {
    id = caretaker_origin_event.517
    is_triggered_only = yes
    title = caretaker_origin_event.517.name
    desc = caretaker_origin_event.517.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.517.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.517.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.517.option.c
        trigger = {
            OR = {
                has_ethic = ethic_materialist
                has_ethic = ethic_fanatic_materialist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -3 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.517.option.d
        trigger = {
            OR = {
                has_ethic = ethic_xenophile
                has_ethic = ethic_fanatic_xenophile
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }
    }
}

## ##################################################### ##
##        Caretaker praises for taking 'good' APs        ##
## ##################################################### ##

### Praise from the Caretaker for taking 'Eternal Vigilance' AP
country_event = {
    id = caretaker_origin_event.520
    is_triggered_only = yes
    title = caretaker_origin_event.520.name
    desc = caretaker_origin_event.520.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.520.option.a
    }
    option = {
        name = caretaker_origin_event.520.option.b
        trigger = {
            OR = {
                has_ethic = ethic_pacifist
                has_ethic = ethic_fanatic_pacifist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.520.option.c
        trigger = {
            OR = {
                has_ethic = ethic_xenophobe
                has_ethic = ethic_fanatic_xenophobe
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
}

### Praise from the Caretaker for taking 'One Vision' AP
country_event = {
    id = caretaker_origin_event.521
    is_triggered_only = yes
    title = caretaker_origin_event.521.name
    desc = caretaker_origin_event.521.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.521.option.a
    }
    option = {
        name = caretaker_origin_event.521.option.b
        trigger = {
            OR = {
                has_ethic = ethic_authoritarian
                has_ethic = ethic_fanatic_authoritarian
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.521.option.c
        trigger = {
            OR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
            }
        }
    }
}

### Praise from the Caretaker for taking 'Enigmatic Engineering' AP
country_event = {
    id = caretaker_origin_event.522
    is_triggered_only = yes
    title = caretaker_origin_event.522.name
    desc = caretaker_origin_event.522.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.522.option.a
    }
    option = {
        name = caretaker_origin_event.522.option.b
        trigger = {
            OR = {
                has_ethic = ethic_materialist
                has_ethic = ethic_fanatic_materialist
            }
        }
    }
    option = {
        name = caretaker_origin_event.522.option.c
        trigger = {
            OR = {
                has_ethic = ethic_xenophobe
                has_ethic = ethic_fanatic_xenophobe
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
}

### Praise from the Caretaker for taking 'Defender of the Galaxy' AP
country_event = {
    id = caretaker_origin_event.523
    is_triggered_only = yes
    title = caretaker_origin_event.523.name
    desc = caretaker_origin_event.523.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.523.option.a
    }
    option = {
        name = caretaker_origin_event.523.option.b
        trigger = {
            OR = {
                has_ethic = ethic_militarist
                has_ethic = ethic_fanatic_militarist
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
    option = {
        name = caretaker_origin_event.523.option.c
        trigger = {
            OR = {
                has_ethic = ethic_xenophile
                has_ethic = ethic_fanatic_xenophile
            }
        }
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME?
            }
        }
    }
}

### Praise from the Caretaker for taking 'Personal Care' AP
country_event = {
    id = caretaker_origin_event.524
    is_triggered_only = yes
    title = caretaker_origin_event.524.name
    desc = caretaker_origin_event.524.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.524.option.a
    }
}

### Praise from the Caretaker for taking 'Monitor Directive' AP
country_event = {
    id = caretaker_origin_event.525
    is_triggered_only = yes
    title = caretaker_origin_event.525.name
    desc = caretaker_origin_event.525.desc
    picture = GFX_evt_caretaker_pleased

    trigger = {
        is_ai = no
        has_origin = origin_caretaker
    }

    option = {
        name = caretaker_origin_event.525.option.a
    }
}

## ##################################################### ##
##             Caretaker hubs on colonies                ##
## ##################################################### ##

### When a colony ship is built, explain that Caretaker hubs need to be established on colonies
ship_event = {
    id = caretaker_origin_event.1100
    is_triggered_only = yes
    title = caretaker_origin_event.1100.name
    desc = caretaker_origin_event.1100.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        owner = {
            has_origin = origin_caretaker
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
                has_country_flag = caretaker_hubs_on_colonies_explained
            }
        }
    }

    immediate = {
        owner = {
            set_country_flag = caretaker_hubs_on_colonies_explained
        }
    }

    option = {
        name = caretaker_origin_event.1100.option.a
    }
}

### Gate event for checking that the new colony doesn't have a Caretaker hub yet.
###  - if the colonization process hasn't finished yet, retry check later (on_action triggers appear to be borked as discovered by Ash)
###  - if colonization is finished, call actual checking event in 360 days
planet_event = {
	id = caretaker_origin_event.1110
	hide_window = yes
    is_triggered_only = yes

    trigger = {
		exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
		caretaker_presence_on_planet = no
		NOT = { has_planet_flag = caretaker_origin_reminded_to_build_caretaker_hub }
    }

	immediate = {
		if = {
			limit = {
				is_colony = yes
				num_pops > 0
			}
			log = "Colony has been established; Remind to build a Caretaker hub in 360 days."
			planet_event = { id = caretaker_origin_event.1111 days = 360 }
		}
		else = {
			log = "Colonization is still in progress, try later..."
			planet_event = { id = caretaker_origin_event.1110 days = 180 }
		}
	}
}

### Check whether a new colony has a Caretaker hub yet (called 1 year or so after colonization is actually finished)
planet_event = {
    id = caretaker_origin_event.1111
    is_triggered_only = yes
    title = caretaker_origin_event.1110.name
    desc = caretaker_origin_event.1110.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        is_colony = yes
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
        caretaker_presence_on_planet = no
    }

    immediate = {
        set_planet_flag = caretaker_origin_reminded_to_build_caretaker_hub
        # Give time for flag to settle
        planet_event = { id = caretaker_origin_event.1120 days = 360 }
    }

    option = {
        name = caretaker_origin_event.1110.option.a
    }
    option = {
        name = caretaker_origin_event.1110.option.b
        trigger = { owner = { has_country_flag = caretaker_break_up } }
        hidden_effect = {
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2 # FIXME?
                }
            }
        }
    }
}

### Check if colony has a Caretaker Hub after 2 years, if not - worsen Caretaker's mood
### - if this is the first time it happens, show a notification window explaining what's going on
planet_event = {
	id = caretaker_origin_event.1120
    is_triggered_only = yes
    hide_window = yes

	pre_triggers = {
		has_owner = yes
		is_homeworld = no
		is_capital = no
		is_occupied_flag = no
	}

    trigger = {
		is_colony = yes
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
		caretaker_presence_on_planet = no
		has_planet_flag = caretaker_origin_reminded_to_build_caretaker_hub
    }

    immediate = {
        owner = {
            change_variable = {
                which = caretaker_mood
                value = -2 # FIXME?
            }
        }

        # explain what's going on
        if = {
            limit = { owner = { NOT = { has_country_flag = caretaker_no_hub_angry_letter_shown } } }
            planet_event = { id = caretaker_origin_event.1121 days = 1 }
        }
    }
}

### Explain that Caretaker gets angry if you don't build hubs on colonies
planet_event = {
    id = caretaker_origin_event.1121
    is_triggered_only = yes
    title = caretaker_origin_event.1121.name
    desc = caretaker_origin_event.1121.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        owner = { set_country_flag = caretaker_no_hub_angry_letter_shown }
    }

    option = {
        name = caretaker_origin_event.1121.option.b
    }
    option = {
        name = caretaker_origin_event.1121.option.b
        trigger = { owner = { has_country_flag = caretaker_experiment_scrapped } }
        hidden_effect = {
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2 # FIXME?
                }
            }
        }
    }
}

## ##################################################### ##
##  Caretaker's reactions to doing stuff with buildings  ##
## ##################################################### ##

### built building_monitor_station_1 -  happier
### upgraded to building_monitor_station_2 or building_monitor_station_3 - happier
planet_event = {
	id = caretaker_origin_event.1200
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }											  
        OR = {
            last_building_changed = building_monitor_station_1
            last_building_changed = building_monitor_station_2
            last_building_changed = building_monitor_station_3
        }
    }

    ### cumulatively adds +1 mood point every time you build or upgrade monitor station -- change?
    immediate = {
        owner = {
            change_variable = {
                which = caretaker_mood
                value = 1 # FIXME ?
            }
        }
    }
}

### built building_clinic - angrier
### upgraded to building_hospital or built building_clone_vats - angrier
planet_event = {
	id = caretaker_origin_event.1220
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        if = {
            limit = {
                OR = {
                    last_building_changed = building_clinic
                    last_building_changed = building_hospital
                }
            }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2 # FIXME ?
                }
            }
			if = {
				limit = {
					owner = { not = { has_country_flag = caretaker_ate_a_building }}
				}
				random_list = {
					97 = {}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20900 days = 90 random = 720 }
					}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20900 days = 180 random = 720 }
					}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20900 days = 360 random = 720 }
					}
				}
			}
        }
        else_if = {
            limit = {
                last_building_changed = building_clone_vats
            }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -4 # FIXME ?
                }
            }
			if = {
				limit = {
					owner = { not = { has_country_flag = caretaker_ate_a_building }}
				}
				random_list = {
					97 = {}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20800 days = 90 random = 720 }
					}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20800 days = 180 random = 720 }
					}
					1 = {
						owner = { set_country_flag = caretaker_ate_a_building }
						planet_event = { id = caretaker_origin_event.20800 days = 360 random = 720 }
					}
				}
			}
        }
    }
}

### demolished or replaced building_monitor_station_1, building_monitor_station_2 or building_monitor_station_3 - angrier
planet_event = {
	id = caretaker_origin_event.1210
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        if = {
            limit = { last_building_changed = building_monitor_station_1 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2 # FIXME ?
                }
            }
        }
        else_if = {
            limit = { last_building_changed = building_monitor_station_2 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2 # FIXME ?
                }
            }
        }
        else_if = {
            limit = { last_building_changed = building_monitor_station_3 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -4 # FIXME ?
                }
            }
        }
    }
}

### demolished or replaced building_clinic, building_hospital or building_clone_vats - happier
planet_event = {
	id = caretaker_origin_event.1230
	is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        if = {
            limit = {
                last_building_changed = building_clinic
            }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 1 # FIXME ?
                }
            }
        }
        else_if = {
            limit = {
                OR = {
                    last_building_changed = building_hospital
                    last_building_changed = building_clone_vats
                }
            }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 2 # FIXME ?
                }
            }
        }
    }
}

## ##################################################### ##
##    Caretaker's reactions to technologies researched   ##
## ##################################################### ##

### increased tech_genome_mapping, tech_cloning, tech_frontier_health, tech_frontier_hospital - angrier
country_event = {
	id = caretaker_origin_event.1300
	is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        OR = {
            last_increased_tech = tech_genome_mapping
            last_increased_tech = tech_cloning
            last_increased_tech = tech_frontier_health
            last_increased_tech = tech_frontier_hospital
        }
    }

    immediate = {
        change_variable = {
            which = caretaker_mood
            value = -2 # FIXME ?
        }
    }
}

### increased tech_gene_tailoring, tech_glandular_acclimation, tech_gene_expressions or tech_genetic_resequencing - angrier
country_event = {
	id = caretaker_origin_event.1310
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        OR = {
            last_increased_tech = tech_gene_tailoring
            last_increased_tech = tech_glandular_acclimation
            last_increased_tech = tech_gene_expressions
            last_increased_tech = tech_genetic_resequencing
        }
    }

    immediate = {
        change_variable = {
            which = caretaker_mood
            value = -3 # FIXME ?
        }
    }
}

### increased tech_droid_workers, tech_synthetic_workers or tech_synthetic_leaders - angrier
country_event = {
	id = caretaker_origin_event.1320
	is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
		not = { has_valid_civic = civic_drone_culture }
        OR = {
            last_increased_tech = tech_droid_workers
            last_increased_tech = tech_synthetic_workers
            last_increased_tech = tech_synthetic_leaders
        }
    }

    immediate = {
        change_variable = {
            which = caretaker_mood
            value = -2 # FIXME ?
        }
    }
}

## ##################################################### ##
##                The Glitch event chain                 ##
## ##################################################### ##

### Gatekeeped event
country_event = {
    id = caretaker_origin_event.2000
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_killer_glitch
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        # if caretaker is not if good mood, roll for event chain to start
        if = {
            limit = { caretaker_mood_is_not_good_check = yes }
            random_list = {
                75 = { country_event = { id = caretaker_origin_event.2000 days = 180 } }
                25 = { country_event = { id = caretaker_origin_event.2001 days = 10 random = 5 } }
            }
        }
        # if not, try again later
        else = {
            country_event = { id = caretaker_origin_event.2000 days = 180 }
        }
    }
}

### Trigger event for missing pop
country_event = {
    id = caretaker_origin_event.2001
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_killer_glitch
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        # if there is a xeno pop somewhere in the empire, fire disappearing pop event on that planet
        if = {
            limit = {
                any_owned_species = {
                    NOR = {
                        is_same_species = root
                        is_robotic_species = yes
                        has_citizenship_type = { type = citizenship_purge }
                        has_citizenship_type = { type = citizenship_assimilation }
                    }
                }
            }
            random_owned_planet = {
                limit = {
                    caretaker_presence_on_planet = yes
                    num_pops > 1
                    any_owned_pop = {
                        NOT = { is_same_species = root }
                        is_robot_pop = no
                        is_being_assimilated = no
                        is_being_purged = no
                    }
                }
                # call disappearing xeno pop event
                planet_event = { id = caretaker_origin_event.2010 days = 30 }
            }
        }
        # otherwise target random owned planet
        else = {
            random_owned_planet = {
                limit = {
                    caretaker_presence_on_planet = yes
                    num_pops > 1
                }
                # call disappearing pop event
                planet_event = { id = caretaker_origin_event.2020 days = 30 }
            }
        }
    }
}

### Disappearing xeno pop
planet_event = {
    id = caretaker_origin_event.2010
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        random_owned_pop = {
            limit = {
                NOT = { is_same_species = owner }
										   
                is_robot_pop = no
                is_being_assimilated = no
                is_being_purged = no
            }
            kill_pop = yes
        }
        # trigger replace-with-native pop event
        planet_event = { id = caretaker_origin_event.2011 days = 30 }
    }
}

### Replace killed xeno pop with a native one
planet_event = {
    id = caretaker_origin_event.2011
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        create_pop = { species = owner }
        # schedule notification about strange occurence on targeted planet
        planet_event = { id = caretaker_origin_event.2012 days = 30 }
    }
}

### Notification about strange occurence (xeno replacement)
planet_event = {
    id = caretaker_origin_event.2012
    is_triggered_only = yes
    title = caretaker_origin_event.2012.name
    desc = caretaker_origin_event.2012.desc
    picture = GFX_evt_dark_alley

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        # schedule caretaker contact
        planet_event = { id = caretaker_origin_event.2030 days = 30 }
    }

    option = {
        name = caretaker_origin_event.2012.option.a
    }
    option = {
        name = caretaker_origin_event.2012.option.b
        trigger = {
			owner = {
				OR = {
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
				}
			}
        }
    }
}

### Disappearing native pop
planet_event = {
    id = caretaker_origin_event.2020
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        random_owned_pop = {
            limit = { is_robot_pop = no }
            kill_pop = yes
        }
        # schedule notification about strange occurence on targeted planet
        planet_event = { id = caretaker_origin_event.2021 days = 30 }
    }
}

### Notification about strange occurence (natives missing)
planet_event = {
    id = caretaker_origin_event.2021
    is_triggered_only = yes
    title = caretaker_origin_event.2021.name
    desc = caretaker_origin_event.2021.desc
    picture = GFX_evt_alien_propaganda

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    immediate = {
        # schedule caretaker contact
        planet_event = { id = caretaker_origin_event.2030 days = 30 }
    }

    option = {
        name = caretaker_origin_event.2021.option.a
    }
    option = {
        name = caretaker_origin_event.2021.option.b
        trigger = {
			owner = {
				OR = {
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
				}
			}
        }
    }
}

### The Caretaker contacts about the glitch
planet_event = {
    id = caretaker_origin_event.2030
    is_triggered_only = yes
    title = caretaker_origin_event.2030.name
    desc = caretaker_origin_event.2030.desc
    picture = GFX_evt_caretaker_malfunctioning

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    option = {
        name = caretaker_origin_event.2030.option.a
        custom_tooltip = caretaker_origin_event.2030.option.a.tooltip
        hidden_effect = {
            owner = {
                save_global_event_target_as = caretaker_glitch_fixing@root
                capital_scope = {
                    enable_special_project = {
                        name = CARETAKER_FIXING_KILLER_GLITCH
                        location = this
                        owner = event_target:caretaker_glitch_fixing@root
                    }
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2030.option.b
        custom_tooltip = caretaker_origin_event.2030.option.b.tooltip
        hidden_effect = {
            owner = {
                set_country_flag = caretaker_killer_glitch_persists
                # trigger the repeating 'pop killed' event
                country_event = { id = caretaker_origin_event.2100 days = 3240 random = 2160 }
            }
        }
    }
}

### Decide whether the glitch was fixed successfully
country_event = {
    id = caretaker_origin_event.2031
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_killer_glitch
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        clear_global_event_target = caretaker_glitch_fixing@root
		random_list = {
            # success
            90 = { country_event = { id = caretaker_origin_event.2032 days = 0 } }
            # failure
            10 = { country_event = { id = caretaker_origin_event.2033 days = 0 } }
        }
    }
}

### Glitch was fixed successfully
country_event = {
    id = caretaker_origin_event.2032
    is_triggered_only = yes
    title = caretaker_origin_event.2032.name
    desc = caretaker_origin_event.2032.desc
    picture = GFX_evt_caretaker_pleased

    option = {
        name = caretaker_origin_event.2032.option.a
        custom_tooltip = caretaker_origin_event.2032.option.a.tooltip
        hidden_effect = {
            remove_country_flag = caretaker_killer_glitch
			remove_country_flag = caretaker_killer_glitch_persists
            set_variable = {
                which = caretaker_mood
                value = 10
            }
            add_resource = {
                physics_research = 5000
                unity = 5000
            }
        }
    }
}

### Failed to fix the glitch
country_event = {
    id = caretaker_origin_event.2033
    is_triggered_only = yes
    title = caretaker_origin_event.2033.name
    desc = caretaker_origin_event.2033.desc
    picture = GFX_evt_caretaker_malfunctioning

    option = {
        name = caretaker_origin_event.2033.option.a
        custom_tooltip = caretaker_origin_event.2033.option.a.tooltip
        hidden_effect = {
            set_country_flag = caretaker_killer_glitch_persists
            add_modifier = {
                modifier = caretaker_overclocked_cloning_vats
                days = -1
            }
            set_variable = {
                which = caretaker_mood
                value = 10
            }
            add_resource = {
                physics_research = 5000
                unity = 5000
            }
            # trigger the repeating 'pop killed' event
            country_event = { id = caretaker_origin_event.2100 days = 3240 random = 2160 }
        }
    }
}

### Killer glitch strikes again - choose planet
country_event = {
    id = caretaker_origin_event.2100
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_killer_glitch_persists
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        random_owned_planet = {
            limit = {
                num_pops > 1
                any_owned_pop = { is_robot_pop = no }
            }
            planet_event = { id = caretaker_origin_event.2101 days = 1 }
        }
        # reschedule the event for next glitch
        country_event = { id = caretaker_origin_event.2100 days = 3240 random = 2160 }
    }
}

### Killer glitch strikes again - kill pop
planet_event = {
    id = caretaker_origin_event.2101
    is_triggered_only = yes
    title = caretaker_origin_event.2101.name
    desc = caretaker_origin_event.2101.desc
    picture = GFX_evt_caretaker_malfunctioning

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_killer_glitch_persists
            NOT = { has_country_flag = caretaker_break_up }
        }
    }

    option = {
        name = caretaker_origin_event.2101.option.a
        custom_tooltip = caretaker_origin_event.2101.option.a.tooltip
        hidden_effect = {
            random_owned_pop = {
                limit = { is_robot_pop = no }
                kill_pop = yes
            }
        }
    }
}


## ##################################################### ##
##           The Abandoned Vault event chain             ##
## ##################################################### ##

### Gate event for the abandoned vault event chain
country_event = {
    id = caretaker_origin_event.2500
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_abandoned_vault
        NOT = { has_country_flag = caretaker_break_up }
    }

    immediate = {
        event_target:caretaker_core_planet@root = {
            # randomly delay the event again so that it doesn't coinside with other events triggered at mid-game
            random_list = {
                25 = { planet_event = { id = caretaker_origin_event.2501 days = 360 random = 180 } }
                25 = { planet_event = { id = caretaker_origin_event.2501 days = 720 random = 180 } }
                25 = { planet_event = { id = caretaker_origin_event.2501 days = 1080 random = 180 } }
                25 = { planet_event = { id = caretaker_origin_event.2501 days = 1440 random = 180 } }
            }
        }
    }
}

### Actual kick-off of the event chain
planet_event = {
    id = caretaker_origin_event.2501
    is_triggered_only = yes
    title = caretaker_origin_event.2501.name
    desc = caretaker_origin_event.2501.desc
    picture = GFX_evt_busy_spaceport

    trigger = {
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2501.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2502 days = 1 }
        }
    }
    option = {
        name = caretaker_origin_event.2501.option.b
        custom_tooltip = caretaker_origin_event.2501.option.b.tooltip
        hidden_effect = {
            owner = {
                add_resource = {
                    society_research = 1000
                }
                change_variable = {
                    which = caretaker_mood
                    value = 1
                }
            }
        }
    }
}

### Caretaker reacts to an empire deciding to investigate the abandoned vault
planet_event = {
    id = caretaker_origin_event.2502
    is_triggered_only = yes
    title = caretaker_origin_event.2502.name
    desc = caretaker_origin_event.2502.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2502.option.a
        custom_tooltip = caretaker_origin_event.2502.option.a.tooltip
        hidden_effect = {
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2
                }
                # issue special project to open the ancient vault
                save_global_event_target_as = caretaker_vault_explorer@root
                capital_scope = {
                    enable_special_project = {
                        name = CARETAKER_ANCIENT_VAULT_EXPLORE
                        location = this
                        owner = event_target:caretaker_vault_explorer@root
                    }
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2502.option.b
        custom_tooltip = caretaker_origin_event.2502.option.b.tooltip
        hidden_effect = {
            owner = {
                add_resource = {
                    society_research = 1000
                }
                change_variable = {
                    which = caretaker_mood
                    value = 1
                }
            }
        }
    }
}

### Gained entrance to the ancient Caretaker vault
country_event = {
    id = caretaker_origin_event.2503
    is_triggered_only = yes
    title = caretaker_origin_event.2503.name
    desc = caretaker_origin_event.2503.desc
    picture = GFX_evt_derelict_interior

    trigger = {
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2503.option.a
        hidden_effect = {
            country_event = { id = caretaker_origin_event.2504 days = 1 }
        }
    }
    option = {
        name = caretaker_origin_event.2503.option.b
        custom_tooltip = caretaker_origin_event.2503.option.b.tooltip
        hidden_effect = {
            add_resource = {
                engineering_research = 1000
            }
            change_variable = {
                which = caretaker_mood
                value = 1
            }
        }
    }
}

### Caretaker reacts to our attempt to download the data from the ancient databanks
country_event = {
    id = caretaker_origin_event.2504
    is_triggered_only = yes
    title = caretaker_origin_event.2504.name
    desc = caretaker_origin_event.2504.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2504.option.a
        custom_tooltip = caretaker_origin_event.2504.option.a.tooltip
        hidden_effect = {
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2
                }
                # issue special project to open the ancient vault
                capital_scope = {
                    enable_special_project = {
                        name = CARETAKER_ANCIENT_VAULT_DATA_ANALYSIS
                        location = this
                        owner = event_target:caretaker_vault_explorer@root
                    }
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2504.option.b
        custom_tooltip = caretaker_origin_event.2504.option.b.tooltip
        hidden_effect = {
            owner = {
                add_resource = {
                    engineering_research = 1000
                }
                change_variable = {
                    which = caretaker_mood
                    value = 1
                }
            }
        }
    }
}

### Ancient data analysis complete
country_event = {
    id = caretaker_origin_event.2505
    is_triggered_only = yes
    title = caretaker_origin_event.2505.name
    desc = caretaker_origin_event.2505.desc
    picture = GFX_evt_circuitry_modification

    trigger = {
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    immediate = {
        clear_global_event_target = caretaker_vault_explorer@root
    }

    option = {
        name = caretaker_origin_event.2505.option.a
        custom_tooltip = caretaker_origin_event.2505.option.a.tooltip
        hidden_effect = {
            country_event = { id = caretaker_origin_event.2506 days = 1 }
            add_resource = {
                physics_research = 1000
                society_research = 1000
                engineering_research = 1000
            }
        }
    }
}

### Caretaker explains the purpose of the data
country_event = {
    id = caretaker_origin_event.2506
    is_triggered_only = yes
    title = caretaker_origin_event.2506.name
    desc = caretaker_origin_event.2506.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_abandoned_vault
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2506.option.a
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = 5
            }
        }
    }
    option = {
        name = caretaker_origin_event.2506.option.b
        hidden_effect = {
            change_variable = {
                which = caretaker_mood
                value = -5
            }
        }
    }
}


## ##################################################### ##
##         The hacked Caretaker hub event chain          ##
## ##################################################### ##

### Determine the target planet
country_event = {
    id = caretaker_origin_event.2600
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_hacked_hub
        NOR = {
            has_country_flag = caretaker_break_up
            has_country_flag = caretaker_experiment_scrapped
        }
    }

    immediate = {
        # find a planet to run the event chain on
        if = {
            limit = {
                any_owned_planet = {
                    is_capital = no
                    num_pops > 20
                    has_deposit = d_caretaker_hub
                }
            }
            random_owned_planet = {
                limit = {
                    is_capital = no
                    num_pops > 20
                    has_deposit = d_caretaker_hub
                }
                save_global_event_target_as = caretaker_hacked_hub_planet@root
                planet_event = { id = caretaker_origin_event.2601 days = 0 }
            }
        }
        # or try again in a year
        else = {
            country_event = { id = caretaker_origin_event.2600 days = 360}
        }
    }
}

### Caretaker Hub hacked for the first time : quietly add a modifier, then notify about it after a month
planet_event = {
    id = caretaker_origin_event.2601
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_deposit = d_caretaker_hub
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    immediate = {
        add_modifier = { modifier = caretaker_hacked_hub_1 days = -1 }
        planet_event = { id = caretaker_origin_event.2602 days = 30 }
    }
}

### Caretaker notices the hack
planet_event = {
    id = caretaker_origin_event.2602
    is_triggered_only = yes
    title = caretaker_origin_event.2602.name
    desc = caretaker_origin_event.2602.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        has_modifier = caretaker_hacked_hub_1
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2602.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2603 days = 60 }
        }
    }
}

### Remove hacked hub modifier (1)
planet_event = {
    id = caretaker_origin_event.2603
    is_triggered_only = yes
    title = caretaker_origin_event.2603.name
    desc = caretaker_origin_event.2603.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        has_modifier = caretaker_hacked_hub_1
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2603.option.a
        hidden_effect = {
            remove_modifier = caretaker_hacked_hub_1
            # setup next hacker attack
            planet_event = { id = caretaker_origin_event.2604 days = 180 }
        }
    }
}

### Caretaker hub is hacked again
planet_event = {
    id = caretaker_origin_event.2604
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_deposit = d_caretaker_hub
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    immediate = {
        add_modifier = { modifier = caretaker_hacked_hub_2 days = -1 }
        planet_event = { id = caretaker_origin_event.2605 days = 30 }
    }
}

### Caretaker notices that the hub has been hacked again
planet_event = {
    id = caretaker_origin_event.2605
    is_triggered_only = yes
    title = caretaker_origin_event.2605.name
    desc = caretaker_origin_event.2605.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        has_modifier = caretaker_hacked_hub_2
         exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2605.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2606 days = 30 }
        }
    }
}

### Remove hacked hub modifier (2)
planet_event = {
    id = caretaker_origin_event.2606
    is_triggered_only = yes
    title = caretaker_origin_event.2606.name
    desc = caretaker_origin_event.2606.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        has_modifier = caretaker_hacked_hub_2
		exists = owner   
	   owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2606.option.a
        hidden_effect = {
            remove_modifier = caretaker_hacked_hub_2
            # setup next hacker attack
            planet_event = { id = caretaker_origin_event.2607 days = 540 }
        }
    }
}

### Hacker attacks for the third time
planet_event = {
    id = caretaker_origin_event.2607
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_deposit = d_caretaker_hub
        exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    immediate = {
        random_list = {
            66 = {
                add_modifier = { modifier = caretaker_hacked_hub_3a days = -1 }
                planet_event = { id = caretaker_origin_event.2608 days = 15 }
            }
            33 = {
                add_modifier = { modifier = caretaker_hacked_hub_3b days = -1 }
                planet_event = { id = caretaker_origin_event.2609 days = 15 }
            }
        }
    }
}

### Caretaker notices the third hack (science version)
planet_event = {
    id = caretaker_origin_event.2608
    is_triggered_only = yes
    title = caretaker_origin_event.2608.name
    desc = caretaker_origin_event.2608.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        has_modifier = caretaker_hacked_hub_3a
        exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2608.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2610 days = 60 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 3
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2608.option.b
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2610 days = 120 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2
                }
            }
        }
    }
}

### Caretaker notices the third hack (pop growth version)
planet_event = {
    id = caretaker_origin_event.2609
    is_triggered_only = yes
    title = caretaker_origin_event.2609.name
    desc = caretaker_origin_event.2609.desc
    picture = GFX_evt_caretaker_annoyed

    trigger = {
        has_modifier = caretaker_hacked_hub_3b
        exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2609.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2610 days = 60 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 3
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2609.option.b
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2610 days = 120 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -2
                }
            }
        }
    }
}

### Hacker is caught
planet_event = {
    id = caretaker_origin_event.2610
    is_triggered_only = yes
    title = caretaker_origin_event.2610.name
    desc = caretaker_origin_event.2610.desc
    picture = GFX_evt_caretaker_content

    trigger = {
        OR = {
            has_modifier = caretaker_hacked_hub_3a
            has_modifier = caretaker_hacked_hub_3b
        }
        exists = owner
		owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_hacked_hub
            NOR = {
                has_country_flag = caretaker_break_up
                has_country_flag = caretaker_experiment_scrapped
            }
        }
    }

    option = {
        name = caretaker_origin_event.2610.option.a
        custom_tooltip = caretaker_origin_event.2610.option.a.tooltip
        hidden_effect = {
            remove_modifier = caretaker_hacked_hub_3a
            remove_modifier = caretaker_hacked_hub_3b
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 3
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2610.option.b
        custom_tooltip = caretaker_origin_event.2610.option.b.tooltip
        hidden_effect = {
            remove_modifier = caretaker_hacked_hub_3a
            remove_modifier = caretaker_hacked_hub_3b
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -3
                }
                # create a scientist
                create_leader = {
                    class = scientist
                    species = this
                    name = random
                    skill = 4
                }
                last_created_leader = {
                    add_trait = leader_trait_spark_of_genius
                    add_trait = leader_trait_expertise_computing
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.2610.option.c
        custom_tooltip = caretaker_origin_event.2610.option.c.tooltip
        hidden_effect = {
            set_planet_flag = caretaker_hub_hack_preserved
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -7
                }
            }
        }
    }
}

## ##################################################### ##
##                Downshifters event chain               ##
## ##################################################### ##

### Gate event
country_event = {
    id = caretaker_origin_event.2700
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_downshifters
		not = { has_country_flag = caretaker_downshifted_planet_found }
    }

    immediate = {
        # event runs on a colony
        if = {
            limit = {
				not = { has_country_flag = caretaker_downshifted_planet_found }
                any_owned_planet = {
                    is_homeworld = no
                    num_pops > 10
                    NOR = {
                        is_planet_class = pc_city
                        is_planet_class = pc_relic
                    }
                }
            }
            random_owned_planet = {
                limit = {
                    is_homeworld = no
                    num_pops > 10
                    NOR = {
                        is_planet_class = pc_city
                        is_planet_class = pc_relic
                    }
                }
				owner = { set_country_flag = caretaker_downshifted_planet_found }
                planet_event = { id = caretaker_origin_event.2701 days = 30 }
            }
        }
        # try again later
        else = {
			if = {
				limit = { not = { has_country_flag = caretaker_downshifted_planet_found }}
				country_event = { id = caretaker_origin_event.2700 days = 360 }
			}			
        }
    }
}

### Downshifters' settlement discovered
planet_event = {
    id = caretaker_origin_event.2701
    is_triggered_only = yes
    title = caretaker_origin_event.2701.name
    desc = caretaker_origin_event.2701.desc
    picture = GFX_evt_satellite_in_orbit

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    option = {
        name = caretaker_origin_event.2701.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2702 days = 30 }
        }
    }
}

### Detailed scans of the settlement are made
planet_event = {
    id = caretaker_origin_event.2702
    is_triggered_only = yes
    title = caretaker_origin_event.2702.name
    desc = caretaker_origin_event.2702.desc
    picture = GFX_evt_satellite_in_orbit

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    option = {
        name = caretaker_origin_event.2702.option.a
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2703 days = 5 }
        }
    }
    option = {
        name = caretaker_origin_event.2702.option.b
        custom_tooltip = caretaker_origin_event.2702.option.b.tooltip
        hidden_effect = {
            add_deposit = d_caretaker_free_settlements
            owner = {
                if = {
                    limit = {
                        NOR = {
                            has_country_flag = caretaker_break_up
                            has_country_flag = caretaker_experiment_scrapped
                        }
                    }
                    change_variable = {
                        which = caretaker_mood
                        value = -1
                    }
                }
            }
        }
    }
}

### People of the free settlements approached
planet_event = {
    id = caretaker_origin_event.2703
    is_triggered_only = yes
    title = caretaker_origin_event.2703.name
    desc = caretaker_origin_event.2703.desc
    picture = GFX_evt_busy_spaceport

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    # force free settlers to rejoin the empire
    option = {
        name = caretaker_origin_event.2703.option.a
        custom_tooltip = caretaker_origin_event.2703.option.a.tooltip
        trigger = {
            owner = {
                NOR = {
                    has_country_flag = caretaker_break_up
                    has_country_flag = caretaker_experiment_scrapped
                }
            }
        }
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2710 days = 1 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 1
                }
            }
        }
    }
    # caretaker is gone, free settlers don't need to hide anymore
    option = {
        name = caretaker_origin_event.2703.option.b
        custom_tooltip = caretaker_origin_event.2703.option.b.tooltip
        trigger = {
            owner = {
                OR = {
                    has_country_flag = caretaker_break_up
                    has_country_flag = caretaker_experiment_scrapped
                }
            }
        }
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2712 days = 1 }
        }
    }
    # try convincing them to return on their own
    option = {
        name = caretaker_origin_event.2703.option.c
        trigger = {
            owner = {
                NOR = {
                    has_country_flag = caretaker_break_up
                    has_country_flag = caretaker_experiment_scrapped
                }
            }
        }
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2704 days = 0 }
        }
    }
    # let the free settlers be
    option = {
        name = caretaker_origin_event.2703.option.d
        custom_tooltip = caretaker_origin_event.2703.option.d.tooltip
        hidden_effect = {
            add_deposit = d_caretaker_free_settlements
            owner = {
                if = {
                    limit = {
                        NOR = {
                            has_country_flag = caretaker_break_up
                            has_country_flag = caretaker_experiment_scrapped
                        }
                    }
                    change_variable = {
                        which = caretaker_mood
                        value = -1
                    }
                }
            }
        }
    }
}

### Convincing free settlers to return to the country on their own fails
planet_event = {
    id = caretaker_origin_event.2704
    is_triggered_only = yes
    title = caretaker_origin_event.2704.name
    desc = caretaker_origin_event.2704.desc
    picture = GFX_evt_busy_spaceport

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    # force free settlers to rejoin the empire
    option = {
        name = caretaker_origin_event.2704.option.a
        custom_tooltip = caretaker_origin_event.2704.option.a.tooltip
        hidden_effect = {
            planet_event = { id = caretaker_origin_event.2710 days = 1 }
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = 1
                }
            }
        }
    }
    # let the free settlers be
    option = {
        name = caretaker_origin_event.2704.option.b
        custom_tooltip = caretaker_origin_event.2704.option.b.tooltip
        hidden_effect = {
            add_deposit = d_caretaker_free_settlements
            owner = {
                change_variable = {
                    which = caretaker_mood
                    value = -1
                }
            }
        }
    }
}

### Integration of free settlers back into the empire (Caretaker active)
planet_event = {
    id = caretaker_origin_event.2710
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    immediate = {
        while = {
            count = 2
            create_pop = {
                species = owner
            }
            last_created_pop = {
                add_modifier = {
                    modifier = caretaker_unhappy_settler
                    days = 9060 # 25 years 2 months
                }
            }
        }
        planet_event = { id = caretaker_origin_event.2711 days = 60 }
    }
}

### Former free settlers are causing issues
planet_event = {
    id = caretaker_origin_event.2711
    is_triggered_only = yes
    title = caretaker_origin_event.2711.name
    desc = caretaker_origin_event.2711.desc
    picture = GFX_evt_burning_settlement

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
    }

    # force free settlers to rejoin the empire
    option = {
        name = caretaker_origin_event.2711.option.a
        custom_tooltip = caretaker_origin_event.2711.option.a.tooltip
        hidden_effect = {
            add_modifier = { modifier = pm_caretaker_free_settler_discord days = 9000 }
        }
    }
}

### Integration of free settlers back into the empire (Caretaker inactive)
planet_event = {
    id = caretaker_origin_event.2712
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_downshifters
        }
        num_pops > 1
    }

    immediate = {
        while = {
            count = 2
            create_pop = { species = owner }
        }
    }
}

## ##################################################### ##
##         Caretaker goes into exterminatus mode         ##
## ##################################################### ##

### Primary notification event
country_event = {
    id = caretaker_origin_event.4000
    is_triggered_only = yes
    title = caretaker_origin_event.4000.name
    desc = caretaker_origin_event.4000.desc
    picture = GFX_evt_caretaker_angry

    trigger = {
        has_origin = origin_caretaker
    }

    immediate = {
        remove_modifier = caretaker_overclocked_cloning_vats
		set_country_flag = caretaker_experiment_scrapped
        if = {
            limit = { has_special_project = CARETAKER_FIXING_KILLER_GLITCH }
            abort_special_project = { type = CARETAKER_FIXING_KILLER_GLITCH }
            clear_global_event_target = caretaker_glitch_fixing@root
        }
        if = {
            limit = { has_special_project = CARETAKER_ANCIENT_VAULT_EXPLORE }
            abort_special_project = { type = CARETAKER_ANCIENT_VAULT_EXPLORE }
            clear_global_event_target = caretaker_vault_explorer@root
        }
        if = {
            limit = { has_special_project = CARETAKER_ANCIENT_VAULT_DATA_ANALYSIS }
            abort_special_project = { type = CARETAKER_ANCIENT_VAULT_DATA_ANALYSIS }
            clear_global_event_target = caretaker_vault_explorer@root
        }
        event_target:caretaker_core_planet@root = {
            random_list = {
                33 = { planet_event = { id = caretaker_origin_event.4001 days = 150 random = 15 } }
                33 = { planet_event = { id = caretaker_origin_event.4001 days = 180 random = 15 } }
                33 = { planet_event = { id = caretaker_origin_event.4001 days = 210 random = 15 } }
            }
        }
    }

    option = {
        name = caretaker_origin_event.4000.option.a
    }
    option = {
        name = caretaker_origin_event.4000.option.b
    }
    option = {
        name = caretaker_origin_event.4000.option.c
        trigger = {		
            OR = {
                has_ethic = ethic_pacifist
                has_ethic = ethic_fanatic_pacifist	 
            }
        }
    }
    option = {
        name = caretaker_origin_event.4000.option.d
        trigger = {			
            OR = {
                has_ethic = ethic_militarist
                has_ethic = ethic_fanatic_militarist	 
            }
        }
    }
    option = {
        name = caretaker_origin_event.4000.option.e
        trigger = {
            OR = {
                has_ethic = ethic_materialist
                has_ethic = ethic_fanatic_materialist
            }
        }
    }
    option = {
        name = caretaker_origin_event.4000.option.f
        trigger = {
            OR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
            }
        }
    }
}

### Notificaiton that brown matter is about to hit rotary air cooling device
planet_event = {
    id = caretaker_origin_event.4001
    is_triggered_only = yes
    title = caretaker_origin_event.4001.name
    desc = caretaker_origin_event.4001.desc
    picture = GFX_evt_ground_combat

    trigger = {
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_experiment_scrapped
        }
    }

    immediate = {
        owner = { set_country_flag = caretaker_break_up }
        planet_event = { id = caretaker_origin_event.4002 days = 5 }
    }

    option = {
        name = caretaker_origin_event.4001.option.a
		hidden_effect = {
			owner = {
				country_event = { id = caretaker_origin_event.25000 days = 2 }
			}
		}
    }
}

### Spawn robotic armies invading the planet hosting the Caretaker core
planet_event = {
    id = caretaker_origin_event.4002
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_experiment_scrapped
        }
        caretaker_core_exists_on_planet = yes # should be fine
    }

    immediate = {
        set_planet_flag = caretaker_core_planet_take_over_attempt
        # create Caretaker faction
        create_country = {
            name = "NAME_CARETAKER_COUNTRY"
            type = caretaker_faction_special
            flag = {
                icon = { category = "special" file = "caretaker_emblem.dds" }
                background = { category = "backgrounds" file = "00_solid.dds" }
                colors = { "black" "black" "null" "null" }
            }
            effect = {
                establish_communications_no_message = ROOT.owner
                set_country_flag = caretaker_faction
                set_variable = {
                    which = planets_under_occupation
                    value = 1
                }
                save_global_event_target_as = caretaker_exterminatus_faction@root
            }
        }

        # spawn armies : base armies
        while = {
            count = 16
            create_army = {
                name = "NAME_CARETAKER_SMALL_ARMY"
                owner = event_target:caretaker_exterminatus_faction@root
                type = robotic_occupation_army
            }
        }
        # spawn armies : extra armies from monitor stations
        if = {
            limit = { has_building = building_monitor_station_3 }
            while = {
                count = 9
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { has_building = building_monitor_station_2 }
            while = {
                count = 6
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { has_building = building_monitor_station_1 }
            while = {
                count = 3
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
    }
}

### Caretaker armies lose on initial assault : core planet
country_event = {
    id = caretaker_origin_event.4010
    is_triggered_only = yes
    title = caretaker_origin_event.4010.name
    desc = caretaker_origin_event.4010.desc
    picture = GFX_evt_victorious_army
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROM = { is_country = event_target:caretaker_exterminatus_faction@root }
        FROMFROM = { has_planet_flag = caretaker_core_planet_take_over_attempt }
    }

    immediate = {
        event_target:caretaker_exterminatus_faction@root = {
            change_variable = {
                which = planets_under_occupation
                value = -1
            }
        }
        FROMFROM = {
            remove_planet_flag = caretaker_core_planet_take_over_attempt
            set_planet_flag = caretaker_core_planet_take_over_failed
            caretaker_core_clean_up = yes
            remove_modifier = pm_caretaker_free_settler_discord
            if = {
                limit = { has_deposit = d_caretaker_free_settlements }
                create_pop = { species = owner }
                create_pop = { species = owner }
            }
        }
        # schedule event to study the destroyed Caretaker core
        root = {
            set_country_flag = caretaker_destoryed
            country_event = { id = caretaker_origin_event.4200 days = 3 }
        }
        # schedule Caretaker trying to take over hub worlds
        random_list = {
            33 = { country_event = { id = caretaker_origin_event.4100 days = 90 } }
            33 = { country_event = { id = caretaker_origin_event.4100 days = 120 } }
            33 = { country_event = { id = caretaker_origin_event.4100 days = 150 } }
        }
    }

    option = {
        name = caretaker_origin_event.4010.option.a
        hidden_effect = {
            add_resource = {
                unity = 5000
            }
        }
    }
    option = {
        name = caretaker_origin_event.4010.option.b
        trigger = {
            OR = {
                has_ethic = ethic_militarist
                has_ethic = ethic_fanatic_militarist
            }
        }
        hidden_effect = {
            add_resource = {
                unity = 5000
            }
        }
    }
}

### Caretaker armies win on initial assault : core planet
country_event = {
    id = caretaker_origin_event.4020
    is_triggered_only = yes
    title = caretaker_origin_event.4020.name
    desc = caretaker_origin_event.4020.desc
    picture = GFX_evt_organic_oppression
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROM = { is_country = event_target:caretaker_exterminatus_faction@root }
        FROMFROM = { has_planet_flag = caretaker_core_planet_take_over_attempt }
    }

    immediate = {
        FROMFROM = {
            remove_planet_flag = caretaker_core_planet_take_over_attempt
            set_planet_flag = caretaker_core_planet_take_over_success
            set_owner = this
			caretaker_core_clean_up = yes
            remove_deposit = d_caretaker_free_settlements
            remove_modifier = pm_caretaker_free_settler_discord
            # Caretaker starts purging pops on the planet it takes over
            every_owned_pop = {
                set_pop_flag = event_purge
                unemploy_pop = yes
            }
        }
        # schedule Caretaker trying to take over hub worlds
        random_list = {
            33 = { country_event = { id = caretaker_origin_event.4100 days = 90 } }
            33 = { country_event = { id = caretaker_origin_event.4100 days = 120 } }
            33 = { country_event = { id = caretaker_origin_event.4100 days = 150 } }
        }
    }

    option = {
        name = caretaker_origin_event.4020.option.a
    }
}

### Core world is taken back from the Caretaker
country_event = {
    id = caretaker_origin_event.4030
    is_triggered_only = yes
    title = caretaker_origin_event.4030.name
    desc = caretaker_origin_event.4030.desc
    picture = GFX_evt_victorious_army
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROMFROM = {
            controller = { is_country = event_target:caretaker_exterminatus_faction@root }
            has_planet_flag = caretaker_core_planet_take_over_success
        }
    }

    immediate = {
        event_target:caretaker_exterminatus_faction@root = {
            change_variable = {
                which = planets_under_occupation
                value = -1
            }
        }
        FROMFROM = {
            remove_planet_flag = caretaker_core_planet_take_over_success
            set_owner = ROOT
            every_owned_pop = {
				remove_pop_flag = event_purge
				unemploy_pop = yes
			}
            every_owned_pop = {
				remove_modifier = "pop_recently_conquered"
				add_modifier = {
					modifier = "pop_liberation_fever"
					days = 3600
				}
			}
        }
        # schedule event to study the destroyed Caretaker core
		root = {
            set_country_flag = caretaker_destoryed
            country_event = { id = caretaker_origin_event.4200 days = 3 }
        }
    }

    option = {
        name = caretaker_origin_event.4030.option.a
        hidden_effect = {
            add_resource = {
                unity = 5000
            }
        }
    }
}

### A planet occupied by the Caretaker is liberated by someone who isn't the previous host-country of the Caretaker
country_event = {
    id = caretaker_origin_event.4040
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        NOR = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_break_up
            has_country_flag = caretaker_experiment_scrapped
        }
													   
        FROMFROM = {
            controller = { is_country = event_target:caretaker_exterminatus_faction@root }
            OR = {
                has_planet_flag = caretaker_core_planet_take_over_success
                has_planet_flag = caretaker_hub_planet_take_over_success
            }
        }
    }

    immediate = {
        event_target:caretaker_exterminatus_faction@root = {
            change_variable = {
                which = planets_under_occupation
                value = -1
            }
        }
        FROMFROM = {
            remove_planet_flag = caretaker_core_planet_take_over_success
            set_owner = ROOT
            every_owned_pop = {
				remove_pop_flag = event_purge
				unemploy_pop = yes
			}
            every_owned_pop = {
				remove_modifier = "pop_recently_conquered"
				add_modifier = {
					modifier = "pop_liberation_fever"
					days = 1800
				}
			}
        }
    }
}

### Notification that brown matter is about to hit rotary air cooling device again
country_event = {
    id = caretaker_origin_event.4100
    is_triggered_only = yes
    title = caretaker_origin_event.4100.name
    desc = caretaker_origin_event.4100.desc
    picture = GFX_evt_ground_combat

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        any_owned_planet = { caretaker_presence_on_planet = yes }
    }

    immediate = {
        # schedule Caretaker attack on every owned planet that still has hub
        every_owned_planet = {
            limit = {
                NOR = {
                    has_planet_flag = caretaker_core_planet_take_over_failed
                    has_planet_flag = caretaker_core_planet_take_over_success
                }
                caretaker_presence_on_planet = yes
            }
            planet_event = { id = caretaker_origin_event.4101 days = 1 }
        }
        # begin looping event to monitor Caretaker faction planet occupation progress
        country_event = { id = caretaker_origin_event.4102 days = 30 }
    }

    option = {
        name = caretaker_origin_event.4100.option.a
    }
}

### Spawn robotic armies invading the planet hosting the Caretaker hubs
planet_event = {
    id = caretaker_origin_event.4101
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = owner
        owner = {
            has_origin = origin_caretaker
            has_country_flag = caretaker_experiment_scrapped
        }
        has_deposit = d_caretaker_hub
    }

    immediate = {
        # caretaker faction should still exist so we don't need to create a new one
        set_planet_flag = caretaker_hub_planet_take_over_attempt
        event_target:caretaker_exterminatus_faction@root = {
            change_variable = {
                which = planets_under_occupation
                value = 1
            }
        }
        # spawn armies : base armies
        if = {
            limit = { num_pops > 80 }
            while = {
                count = 12
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { num_pops > 40 }
            while = {
                count = 9
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { num_pops > 10 }
            while = {
                count = 6
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else = {
            while = {
                count = 3
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        # spawn armies : extra armies from monitor stations
        if = {
            limit = { has_building = building_monitor_station_3 }
            while = {
                count = 3
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { has_building = building_monitor_station_2 }
            while = {
                count = 2
                create_army = {
                    name = "NAME_CARETAKER_SMALL_ARMY"
                    owner = event_target:caretaker_exterminatus_faction@root
                    type = robotic_occupation_army
                }
            }
        }
        else_if = {
            limit = { has_building = building_monitor_station_1 }
            create_army = {
                name = "NAME_CARETAKER_SMALL_ARMY"
                owner = event_target:caretaker_exterminatus_faction@root
                type = robotic_occupation_army
            }
        }
    }
}

### Keep track on how many planets Caretaker has under occupation so that the faction can be destroyed when it's done for
# use previous host-country as scope for event to have access to correct @root in global event target
country_event = {
    id = caretaker_origin_event.4102
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        NOT = { has_country_flag = caretaker_destoryed }
    }

    immediate = {
        # switch to the Caretaker faction
        event_target:caretaker_exterminatus_faction@root = {
            if = {
                limit = {
                    check_variable = {
                        which = planets_under_occupation
                        value < 1
                    }
                }

                root = { set_country_flag = caretaker_destoryed }

                clear_global_event_target = caretaker_core_planet@root
                clear_global_event_target = caretaker_exterminatus_faction@root
                destroy_country = yes
            }
            else = {
                root = {
                    # loop event
                    country_event = { id = caretaker_origin_event.4102 days = 30 }
                }
            }
        }
    }
}

### Caretaker armies lose on initial assault : hub planet
country_event = {
    id = caretaker_origin_event.4110
    is_triggered_only = yes
    title = caretaker_origin_event.4110.name
    desc = caretaker_origin_event.4110.desc
    picture = GFX_evt_victorious_army
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROM = { is_country = event_target:caretaker_exterminatus_faction@root }
        FROMFROM = { has_planet_flag = caretaker_hub_planet_take_over_attempt }
    }

    immediate = {
        event_target:caretaker_exterminatus_faction@root = {
            change_variable = {
                which = planets_under_occupation
                value = -1
            }
        }
        FROMFROM = {
            remove_planet_flag = caretaker_hub_planet_take_over_attempt
            set_planet_flag = caretaker_hub_planet_take_over_failed
            caretaker_hub_clean_up = yes
			remove_modifier = pm_caretaker_free_settler_discord
            if = {
                limit = { has_deposit = d_caretaker_free_settlements }
                create_pop = { species = owner }
                create_pop = { species = owner }
            }
        }
    }

    option = {
        name = caretaker_origin_event.4110.option.a
    }
    option = {
        name = caretaker_origin_event.4110.option.b
        trigger = {		
            OR = {
                has_ethic = ethic_militarist
                has_ethic = ethic_fanatic_militarist
            }
        }
    }
}

### Caretaker armies win on initial assualt : hub planet
country_event = {
    id = caretaker_origin_event.4120
    is_triggered_only = yes
    title = caretaker_origin_event.4120.name
    desc = caretaker_origin_event.4120.desc
    picture = GFX_evt_organic_oppression
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROM = { is_country = event_target:caretaker_exterminatus_faction@root }
        FROMFROM = { has_planet_flag = caretaker_hub_planet_take_over_attempt }
    }

    immediate = {
        FROMFROM = {
            remove_planet_flag = caretaker_hub_planet_take_over_attempt
            set_planet_flag = caretaker_hub_planet_take_over_success
            caretaker_hub_clean_up = yes
            remove_deposit = d_caretaker_free_settlements
            remove_modifier = pm_caretaker_free_settler_discord
            # Caretaker starts purging pops on the planet it takes over
            every_owned_pop = {
                set_pop_flag = event_purge
                unemploy_pop = yes
            }
        }
    }

    option = {
        name = caretaker_origin_event.4120.option.a
    }
}

### Hub world is taken back from the Caretaker
country_event = {
    id = caretaker_origin_event.4130
    is_triggered_only = yes
    title = caretaker_origin_event.4130.name
    desc = caretaker_origin_event.4130.desc
    picture = GFX_evt_victorious_army
    location = FROMFROM

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_break_up
        has_country_flag = caretaker_experiment_scrapped
        FROMFROM = {
            controller = { is_country = event_target:caretaker_exterminatus_faction@root }
            has_planet_flag = caretaker_hub_planet_take_over_success
        }
    }

    immediate = {
        FROM = {
            change_variable = {
                which = planets_under_occupation
                value = -1
            }
        }
        FROMFROM = {
            remove_planet_flag = caretaker_hub_planet_take_over_success
            set_owner = ROOT
            every_owned_pop = {
				remove_pop_flag = event_purge
				unemploy_pop = yes
			}
            every_owned_pop = {
				remove_modifier = "pop_recently_conquered"
				add_modifier = {
					modifier = "pop_liberation_fever"
					days = 3600
				}
			}
        }
    }

    option = {
        name = caretaker_origin_event.4130.option.a
    }
}

### Create special project to study destroyed Caretaker Core - phase 1
country_event = {
    id = caretaker_origin_event.4200
    is_triggered_only = yes
    title = caretaker_origin_event.4200.name
    desc = caretaker_origin_event.4200.desc
    picture = GFX_evt_generator_powerup

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_destoryed
        has_country_flag = caretaker_experiment_scrapped
    }

    option = {
        name = caretaker_origin_event.4200.option.a
        custom_tooltip = caretaker_origin_event.4200.option.a.tooltip
        hidden_effect = {
            save_global_event_target_as = caretaker_in_search_for_awful_truth@root
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_EXTRACT_DATABANKS
                    location = this
                    owner = event_target:caretaker_in_search_for_awful_truth@root
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.4200.option.b
        custom_tooltip = caretaker_origin_event.4200.option.b.tooltip
        hidden_effect = {
            # give country-level unity production modifier and some influence
            add_modifier = {
                modifier = caretaker_destroyed_databanks
                days = -1
            }
            add_resource = {
                influence = 250
            }
        }
    }
}

### Create a special project to study destroyed Caretaker Core - phase 2
country_event = {
    id = caretaker_origin_event.4201
    is_triggered_only = yes
    title = caretaker_origin_event.4201.name
    desc = caretaker_origin_event.4201.desc
    picture = GFX_evt_sapient_AI

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_destoryed
        has_country_flag = caretaker_experiment_scrapped
    }

    option = {
        name = caretaker_origin_event.4201.option.a
        custom_tooltip = caretaker_origin_event.4201.option.a.tooltip
        hidden_effect = {
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_DECRYPT_DATABANKS
                    location = this
                    owner = event_target:caretaker_in_search_for_awful_truth@root
                }
            }
        }
    }
}

### Create special project to study destroyed Caretaker Core - phase 3
country_event = {
    id = caretaker_origin_event.4202
    is_triggered_only = yes
    title = caretaker_origin_event.4202.name
    desc = caretaker_origin_event.4202.desc
    picture = GFX_evt_sapient_AI

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_destoryed
        has_country_flag = caretaker_experiment_scrapped
    }

    option = {
        name = caretaker_origin_event.4202.option.a
        custom_tooltip = caretaker_origin_event.4202.option.a.tooltip
        hidden_effect = {
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_ANALYSE_DATABANKS
                    location = this
                    owner = event_target:caretaker_in_search_for_awful_truth@root
                }
            }
        }
    }
    option = {
        name = caretaker_origin_event.4202.option.b
        custom_tooltip = caretaker_origin_event.4202.option.b.tooltip
        hidden_effect = {
            # give country-level unity production modifier and some influence
            add_modifier = {
                modifier = caretaker_destroyed_databanks
                days = -1
            }
            add_resource = {
                influence = 250
            }
        }
    }
}

### The awful truth
country_event = {
    id = caretaker_origin_event.4203
    is_triggered_only = yes
    title = caretaker_origin_event.4203.name
    desc = caretaker_origin_event.4203.desc
    picture = GFX_evt_circuitry_modification

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_destoryed
        has_country_flag = caretaker_experiment_scrapped
    }

    immediate = {
        set_country_flag = caretaker_awful_truth_learned
        clear_global_event_target = caretaker_in_search_for_awful_truth@root
    }

    # biological ascension complete : can cure themselves
    option = {
        name = caretaker_origin_event.4203.option.a
        custom_tooltip = caretaker_origin_event.4203.option.a.tooltip
        trigger = { has_ascension_perk = ap_evolutionary_mastery }
        hidden_effect = {
            add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
            save_global_event_target_as = caretaker_searching_for_cure@root
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_BIO_ASCENSION_CURE
                    location = this
                    owner = event_target:caretaker_searching_for_cure@root
                }
            }
        }
    }
    # psionic ascension complete and has access to the shroud : can pray to 'Gods' for cure
    option = {
        name = caretaker_origin_event.4203.option.b
        custom_tooltip = caretaker_origin_event.4203.option.b.tooltip
        trigger = {
            has_ascension_perk = ap_transcendence
            has_country_flag = shroud_intro
        }
        hidden_effect = {
            add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
            save_global_event_target_as = caretaker_searching_for_cure@root
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_PSI_ASCENSION_CURE
                    location = this
                    owner = event_target:caretaker_searching_for_cure@root
                }
            }
        }
    }
    # psionic ascension without access to the shroud : launch a watcher event to issue special project later
    option = {
        name = caretaker_origin_event.4203.option.c
        custom_tooltip = caretaker_origin_event.4203.option.c.tooltip
        trigger = {
            has_ascension_perk = ap_transcendence
            has_country_flag = shroud_intro
        }
        hidden_effect = {
            add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
            country_event = { id = caretaker_origin_event.4204 days = 60 }
        }
    }
    # synthetic ascension with mind uploading project completed : doesn't need to do anything
    option = {
        name = caretaker_origin_event.4203.option.d
        custom_tooltip = caretaker_origin_event.4203.option.d.tooltip
        trigger = {
            has_ascension_perk = ap_synthetic_evolution
            has_country_flag = synthetic_empire
        }
        hidden_effect = {
            add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
        }
    }
    # synthetic ascension, but mind uploading project not completed : doesn't really need to do anything either
    option = {
        name = caretaker_origin_event.4203.option.e
        custom_tooltip = caretaker_origin_event.4203.option.e.tooltip
        trigger = {
            has_ascension_perk = ap_synthetic_evolution
            NOT = { has_country_flag = synthetic_empire }
        }
        hidden_effect = {
            add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
        }
    }
   # is not a fanatic purifier AND there is a Xenophile FE in the galaxy AND communications have been established : ask them for cure
    option = {
        name = caretaker_origin_event.4203.option.f
        custom_tooltip = caretaker_origin_event.4203.option.f.tooltip
        trigger = {
            NOT = { has_civic = civic_fanatic_purifiers }
            any_country = {
                is_fallen_empire_xenophile = yes
                has_communications = root
            }
        }
		  
		hidden_effect = {
            random_country = {
                limit = {
                    is_fallen_empire_xenophile = yes
                    has_communications = root
                }
                save_global_event_target_as = caretaker_xenophile_fe@root
            }
            ROOT = {
                add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
                country_event = { id = caretaker_origin_event.4320 days = 1 }
            }
        }
    }
    # is not a fanatic purifier AND there is a Xenophile FE in the galaxy AND communications have not been established : ask them for cure
    option = {
        name = caretaker_origin_event.4203.option.g
        custom_tooltip = caretaker_origin_event.4203.option.g.tooltip
        trigger = {
            NOT = { has_civic = civic_fanatic_purifiers }
            any_country = {
                is_fallen_empire_xenophile = yes
                NOT = { has_communications = root }
            }
        }
		hidden_effect = {
            random_country = {
                limit = {
                    is_fallen_empire_xenophile = yes
                    NOT = { has_communications = root }
                }
                save_global_event_target_as = caretaker_xenophile_fe@root
            }
            ROOT = {
                set_country_flag = caretaker_seeking_xenophile_fe
                country_event = { id = caretaker_origin_event.4322 days = 30 random = 30 }
                add_modifier = { modifier = caretaker_knows_awful_truth days = -1 }
            }
        }
    }
    # keep the infertility trait for much larger unity bonus
    option = {
        name = caretaker_origin_event.4203.option.h
        custom_tooltip = caretaker_origin_event.4203.option.h.tooltip
        hidden_effect = {
            add_modifier = { modifier = caretaker_fortitude days = -1 }
            add_resource = { influence = 250 }
        }
    }
}

### Gatekeeper event for psionic ascension cure (waiting for the empire to breach the shroud)
country_event = {
    id = caretaker_origin_event.4204
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_awful_truth_learned
        NOT = { has_country_flag = caretaker_delayed_psi_cure }
    }

    immediate = {
        # if the shroud is breached - issue the special project
        if = {
            limit = { has_country_flag = shroud_intro }
            set_country_flag = caretaker_delayed_psi_cure
            country_event = { id = caretaker_origin_event.4205 days = -1 }
        }
        # otherwise - wait longer
        else = {
            country_event = { id = caretaker_origin_event.4204 days = 60 }
        }
    }
}

### Late issuing of the special project to find cure to sterility in the shroud
country_event = {
    id = caretaker_origin_event.4205
    is_triggered_only = yes
    title = caretaker_origin_event.4205.name
    desc = caretaker_origin_event.4205.desc
    picture = GFX_evt_psionics

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_awful_truth_learned
        has_country_flag = shroud_intro
    }

    option = {
        name = caretaker_origin_event.4205.option.a
        hidden_effect = {
            save_global_event_target_as = caretaker_searching_for_cure@root
            capital_scope = {
                enable_special_project = {
                    name = CARETAKER_PSI_ASCENSION_CURE
                    location = this
                    owner = event_target:caretaker_searching_for_cure@root
                }
            }
        }
    }
}

### sterility cured : bio ascension
country_event = {
    id = caretaker_origin_event.4300
    is_triggered_only = yes
    title = caretaker_origin_event.4300.name
    desc = caretaker_origin_event.4300.desc
    picture = GFX_evt_circuitry_modification

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_awful_truth_learned
    }

    immediate = {
        country_event = { id = caretaker_origin_event.4330 days = 0 }
    }

    option = {
        name = caretaker_origin_event.4300.option.a
        custom_tooltip = caretaker_origin_event.4300.option.a
    }
}

### sterility cured : psi ascension
country_event = {
    id = caretaker_origin_event.4310
    is_triggered_only = yes
    title = caretaker_origin_event.4310.name
    desc = caretaker_origin_event.4310.desc
    picture = GFX_evt_psionics

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_awful_truth_learned
    }

    immediate = {
        country_event = { id = caretaker_origin_event.4330 days = 0 }
    }

    option = {
        name = caretaker_origin_event.4310.option.a
        custom_tooltip = caretaker_origin_event.4310.option.a
    }
}

### Contact Xenophile FE
country_event = {
    id = caretaker_origin_event.4320
    is_triggered_only = yes
    diplomatic = yes

    title = caretaker_origin_event.4320.name
    desc = caretaker_origin_event.4320.desc

    picture_event_data = {
        portrait = event_target:caretaker_xenophile_fe@root
        planet_background = event_target:caretaker_xenophile_fe@root
        graphical_culture = event_target:caretaker_xenophile_fe@root
        city_level = event_target:caretaker_xenophile_fe@root
        room = event_target:caretaker_xenophile_fe@root
    }

    option = {
        name = caretaker_origin_event.4320.option.a
        hidden_effect = {
            # call cure delivered event
            country_event = { id = caretaker_origin_event.4321 days = 180 }
        }
    }
}

### Xenophile FE delivers the cure
country_event = {
    id = caretaker_origin_event.4321
    is_triggered_only = yes
    diplomatic = yes

    title = caretaker_origin_event.4321.name
    desc = caretaker_origin_event.4321.desc

    picture_event_data = {
        portrait = event_target:caretaker_xenophile_fe@root
        planet_background = event_target:caretaker_xenophile_fe@root
        graphical_culture = event_target:caretaker_xenophile_fe@root
        city_level = event_target:caretaker_xenophile_fe@root
        room = event_target:caretaker_xenophile_fe@root
    }

    option = {
        name = caretaker_origin_event.4321.option.a
        custom_tooltip = caretaker_origin_event.4321.option.a.tooltip
        hidden_effect = {
            # remove sterility trait from pops
            country_event = { id = caretaker_origin_event.4330 days = 0 }
        }
    }

    after = {
        clear_global_event_target = caretaker_xenophile_fe@root
    }
}

### Xenophile FE establishes communications
country_event = {
    id = caretaker_origin_event.4322
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_seeking_xenophile_fe
    }

    immediate = {
        event_target:caretaker_xenophile_fe@root = {
            establish_communications_no_message = ROOT
        }
        ROOT = {
            country_event = { id = caretaker_origin_event.4323 days = 1 }
        }
    }
}

### Notification about the communications
country_event = {
    id = caretaker_origin_event.4323
    is_triggered_only = yes
    title = caretaker_origin_event.4323.name
    desc = caretaker_origin_event.4323.desc
    picture = GFX_evt_fallen_empire

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_seeking_xenophile_fe
    }

    option = {
        name = caretaker_origin_event.4323.option.a
        hidden_effect = {
            country_event = { id = caretaker_origin_event.4324 days = 0 }
        }
    }
}

### Contact from FE about cure
country_event = {
    id = caretaker_origin_event.4324
    is_triggered_only = yes
    diplomatic = yes

    title = caretaker_origin_event.4324.name
    desc = caretaker_origin_event.4324.desc

    picture_event_data = {
        portrait = event_target:caretaker_xenophile_fe@root
        planet_background = event_target:caretaker_xenophile_fe@root
        graphical_culture = event_target:caretaker_xenophile_fe@root
        city_level = event_target:caretaker_xenophile_fe@root
        room = event_target:caretaker_xenophile_fe@root
    }

    option = {
        name = caretaker_origin_event.4324.option.a
        hidden_effect = {
            # call cure delivered event
            country_event = { id = caretaker_origin_event.4321 days = 180 }
        }
    }
}

### Modify species : swap 'common sterility' trait for 'cured sterility' trait
country_event = {
    id = caretaker_origin_event.4330
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_origin = origin_caretaker
        has_country_flag = caretaker_awful_truth_learned
    }

    immediate = {
        # main species
        every_owned_pop = {
            limit = { is_same_species = root }
            modify_species = {
                remove_trait = trait_common_sterility
                add_trait = trait_sterility_cured
            }
            species = { save_event_target_as = sterility_cured_main_species }
        }
        change_dominant_species = { species = event_target:sterility_cured_main_species }
        # species from other caretaker empire if any exist
        while = {
            limit = {
                any_owned_pop = {
                    is_sapient = yes
                    is_being_purged = no
                    is_being_assimilated = no
                    has_trait = trait_common_sterility
                }
            }
            random_owned_pop = {
                limit = {
                    is_sapient = yes
                    is_being_purged = no
                    is_being_assimilated = no
                    species = { has_trait = trait_common_sterility }
                }
                modify_species = {
                    remove_trait = trait_common_sterility
                    add_trait = trait_sterility_cured
                }
            }
        }
    }
}
