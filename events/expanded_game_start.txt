############################
#
# Expanded Game Start Events
#
############################

namespace = gamestartexpanded

# Start-Up Events
country_event = {
	id = gamestartexpanded.1
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes
	
	immediate = {
		# Galactic Preserve (must be done after all countries have been created
		every_country = {
			limit = {
				OR = {
					has_origin = origin_preserve
				}
			}
			country_event = { id = gamestartexpanded.5 }
		}
		# Terraforming Candidates
		every_galaxy_planet = {
			limit = {
				has_modifier = terraforming_candidate
			}
			planet_event = { id = gamestartexpanded.4 days = 5 }
		}
		# Tidally Locked
		if = {
			limit = { has_global_flag = has_real_space_mod }
			every_galaxy_planet = {
				limit = {
					solar_system = {
						OR = {
							is_red_giant = yes
							is_yellow_giant = yes
							is_red_supergiant = yes
							is_yellow_supergiant = yes
							is_blue_supergiant = yes
						}
					}
				}
				remove_modifier = tidal_locked
			}
		}
		# No Chthonian Moons
		every_galaxy_planet = {
			limit = {
				has_modifier = chthonian_planet
				is_moon = yes
			}
			planet_event = { id = gamestartexpanded.7 days = 1 }
		}
		# Random Primitive Homeworld Names
		every_galaxy_planet = {
			limit = {
				NOT = { is_planet_class = pc_habitat }
				exists = owner
				owner = {
					OR = {
						is_country_type = primitive
						is_country_type = vbp_hive
						is_country_type = vbp_machine
					}
				}
			}
			planet_event = { id = gamestartexpanded.8 days =  1 }
		}
		every_galaxy_planet = {
			limit = {
				has_planet_flag = mars
				NOT = { has_modifier = terraforming_candidate }
			}
			add_modifier = {
				modifier = "terraforming_candidate"
				days = -1
			}
		}
	}
}

# More Game Start-Up
country_event = {
	id = gamestartexpanded.2
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Remnants get extra old colonies
		if = {
			limit = { has_origin = origin_remnants }
			country_event = { id = gamestartexpanded.10 }
		}
		# Lost Colony events
		if = {
			limit = {
				has_origin = origin_lost_colony
				NOT = { has_country_flag = human_2 }
			}
			country_event = { id = countryexpanded.150 }
		}
		# Paradise Lost
		if = {
			limit = {
				has_origin = origin_paradise_lost
			}
			give_technology = { tech = tech_powered_exoskeletons message = no }
			give_technology = { tech = tech_subdermal_stimulation message = no }
			capital_scope = {
				add_deposit = d_paradise_lost_organic_sanctuaries
				add_deposit = d_paradise_lost_industries
				add_deposit = d_paradise_lost_robot_blocker
				add_deposit = d_paradise_lost_reactor_blocker
				add_deposit = d_decrepit_dwellings
				add_deposit = d_decrepit_dwellings
				remove_deposit = d_failing_infrastructure
				remove_district = district_city
				remove_district = district_city
				remove_district = district_industrial
				remove_district = district_industrial
				remove_district = district_generator
				if = {
					limit = { owner = { is_lithoid_empire = yes } }
					remove_district = district_mining
				}
				else = {
					remove_district = district_farming
				}
				while = {
					count = 10
					random_owned_pop = {
						kill_pop = yes
					}
				}
			}
			every_owned_pop = { clear_pop_category = yes }
			capital_scope = { check_planet_employment = yes }
		}
		# Ship Graveyard
		if = {
			limit = { has_origin = origin_ship_graveyard }
			capital_scope = {
				add_deposit = d_ship_wreckage
				add_deposit = d_ship_graveyard_start
				remove_building = building_research_lab_1
				check_planet_employment = yes
			}
			create_fleet = {
				effect = {
					set_owner = PREV
					create_ship_design = {
						design = "NAME_Derelict"
					}
					create_ship = {
						name = random
						design = last_created_design
					}
					set_location = prev.capital_scope
				}
			}
			country_event = { id = countryexpanded.458 days = 3 random = 6 }
		}
		# Convergent Evolution
		if = {
			limit = { has_origin = origin_convergent_evolution }
			give_technology = { tech = tech_genome_mapping message = no }
			add_research_option = tech_epigenetic_triggers
			#add_tech_progress = { tech = tech_epigenetic_triggers progress = 0.5 }
			capital_scope = {
				set_planet_flag = upl_ongoing_planet
				random_list = {
					15 = {
						create_species = {
							name = random
							class = "PRE_MAM"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
					15 = {
						create_species = {
							name = random
							class = "PRE_REP"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
					15 = {
						create_species = {
							name = random
							class = "PRE_AVI"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
					15 = {
						create_species = {
							name = random
							class = "PRE_ART"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
					15 = {
						create_species = {
							name = random
							class = "PRE_MOL"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
					15 = {
						create_species = {
							name = random
							class = "PRE_FUN"
							portrait = random
							traits = {
								trait = random_presapient_trait
							}
							homeworld = this
							sapient = no
						}
					}
				}
				while = {
					limit = {
						count_owned_pop = {
							limit = { is_sapient = no }
							count < 6
						}
					}
					create_pop = { species = last_created_species }
				}
			}
		}
		# Galactic Cradle gets isolated systems
		if = {
			limit = { has_origin = origin_cradle }
			set_country_flag = encountered_first_wormhole
			add_seen_bypass_type = wormhole
			set_spawn_system_batch = begin
			capital_scope = {
				solar_system = {
					save_event_target_as = cradle_system
					set_star_flag = cradle_system_home
					every_neighbor_system = {
						set_star_flag = cradle_system_home_neighbor
					}
				}
			}
			# Spawn wormhole
			random_system = {
				limit = {
					has_natural_wormhole = no
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
					NOT = { has_star_flag = hostile_system }
					NOT = { has_star_flag = empire_cluster }
					NOT = {
						any_neighbor_system = { has_star_flag = empire_cluster }
					}
				}
				set_star_flag = cradle_exit
				event_target:cradle_system = {
					# done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = yes
						orbit_angle = 360
					}
					random_system_planet = {
						limit = {
							is_colony = no
							is_asteroid = no
							is_star = no
						}
						set_planet_flag = cradle_research_station_planet
						create_ambient_object = {
							type = "abandoned_research_station"
							location = this
						}
						last_created_ambient_object = {
							set_ambient_object_flag = cradle_research_station
						}
						create_ambient_object = {
							type = "medium_debris_01_object"
							location = this
						}
					}
				}
				spawn_natural_wormhole = {
					bypass_type = wormhole
					random_pos = yes
					orbit_angle = 360
				}
				link_wormholes = event_target:cradle_system
			}
			# spawn cluster systems
			event_target:cradle_system = {
				spawn_system = {
					min_distance = 10
					max_distance = 25
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = "cradle_init_2"
				}
				spawn_system = {
					min_distance = 10
					max_distance = 25
					min_orientation_angle = 114
					max_orientation_angle = 156
					initializer = "cradle_init_3"
				}
			}
			random_system = {
				limit = { has_star_flag = cradle_system_2 }
				spawn_system = {
					min_distance = 10
					max_distance = 25
					min_orientation_angle = 0
					max_orientation_angle = 40
					initializer = "cradle_init_1"
				}
				spawn_system = {
					min_distance = 10
					max_distance = 25
					min_orientation_angle = 245
					max_orientation_angle = 298
					initializer = "cradle_init_6"
				}
			}
			random_system = {
				limit = { has_star_flag = cradle_system_3 }
				spawn_system = {
					min_distance = 10
					max_distance = 25
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = "cradle_init_4"
				}
				spawn_system = {
					min_distance >= 10
					max_distance <= 25
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = cradle_init_5
				}
			}
			random_system = {
				limit = { has_star_flag = cradle_system_1 }
				save_global_event_target_as = cradle_system_1
			}
			random_system = {
				limit = { has_star_flag = cradle_system_2 }
				save_global_event_target_as = cradle_system_2
			}
			random_system = {
				limit = { has_star_flag = cradle_system_3 }
				save_global_event_target_as = cradle_system_3
			}
			random_system = {
				limit = { has_star_flag = cradle_system_4 }
				save_global_event_target_as = cradle_system_4
			}
			random_system = {
				limit = { has_star_flag = cradle_system_5 }
				save_global_event_target_as = cradle_system_5
			}
			random_system = {
				limit = { has_star_flag = cradle_system_6 }
				save_global_event_target_as = cradle_system_6
			}
			# clear all hyperlanes to and within the cluster
			every_system = {
				limit = {
					OR = {
						has_star_flag = cradle_system_home
						has_star_flag = cradle_system_1
						has_star_flag = cradle_system_2
						has_star_flag = cradle_system_3
						has_star_flag = cradle_system_4
						has_star_flag = cradle_system_5
						has_star_flag = cradle_system_6
					}
				}
				isolate_system = yes
			}
			# add hyperlanes
			event_target:cradle_system = {
				add_hyperlane = {
					from = event_target:cradle_system
					to = event_target:cradle_system_2
				}
				add_hyperlane = {
					from = event_target:cradle_system
					to = event_target:cradle_system_3
				}
				add_hyperlane = {
					from = event_target:cradle_system
					to = event_target:cradle_system_5
				}
				add_hyperlane = {
					from = event_target:cradle_system
					to = event_target:cradle_system_6
				}
			}
			event_target:cradle_system_2 = {
				add_hyperlane = {
					from = event_target:cradle_system_2
					to = event_target:cradle_system_1
				}
				add_hyperlane = {
					from = event_target:cradle_system_2
					to = event_target:cradle_system_4
				}
				add_hyperlane = {
					from = event_target:cradle_system_2
					to = event_target:cradle_system_6
				}
			}
			event_target:cradle_system_3 = {
				add_hyperlane = {
					from = event_target:cradle_system_3
					to = event_target:cradle_system_2
				}
				add_hyperlane = {
					from = event_target:cradle_system_3
					to = event_target:cradle_system_5
				}
			}
			set_spawn_system_batch = end
			country_event = { id = countryexpanded.411 days = 30 random = 60 }
			# in case systems get isolated that shouln't have
			if = {
				limit = {
					any_system = {
						NOR = {
							has_star_flag = cradle_system_home
							has_star_flag = cradle_system_1
							has_star_flag = cradle_system_2
							has_star_flag = cradle_system_3
							has_star_flag = cradle_system_4
							has_star_flag = cradle_system_5
							has_star_flag = cradle_system_6
						}
						NOT = {
							any_country = {
								prev = { has_access_fleet = prev }
							}
						}
					}
				}
				random_system = {
					limit = {
						NOR = {
							has_star_flag = cradle_system_home
							has_star_flag = cradle_system_1
							has_star_flag = cradle_system_2
							has_star_flag = cradle_system_3
							has_star_flag = cradle_system_4
							has_star_flag = cradle_system_5
							has_star_flag = cradle_system_6
						}
						NOT = {
							any_country = {
								prev = { has_access_fleet = prev }
							}
						}
					}
					event_target:cradle_system_2 = {
						# done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
						spawn_natural_wormhole = {
							bypass_type = wormhole
							random_pos = yes
							orbit_angle = 360
						}
					}
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = yes
						orbit_angle = 360
					}
					link_wormholes = event_target:cradle_system_2
				}
			}
		}
		# Wasteful races can get damaged ecosystem on homeworld
		if = {
			limit = {
				is_country_type = default
				any_owned_pop = {
					OR = {
						pop_has_trait = trait_wasteful
						pop_has_trait = trait_industrious
						pop_has_trait = trait_rapid_breeders
					}
				}
				NOR = {
					any_owned_pop = { pop_has_trait = trait_conservational }
					any_owned_pop = { pop_has_trait = trait_communal }
					any_owned_pop = { pop_has_trait = trait_agrarian }
					any_owned_pop = { pop_has_trait = trait_traditional }
					has_ethic = ethic_gestalt_consciousness
					has_valid_civic = civic_environmentalist
					has_valid_civic = civic_agrarian_idyll
					has_valid_civic = civic_agribusiness
					has_valid_civic = civic_hmo
					has_valid_civic = civic_biological_engineering
					has_origin = origin_natural_hunters
					has_origin = origin_life_seeded # perfect homeworld
					has_origin = origin_post_apocalyptic # already f*cked up
					has_origin = origin_remnants # planet already paved over
					has_origin = origin_shattered_ring # planet made of metal
					has_origin = origin_lost_colony # capital is a colony
					has_origin = origin_void_dwellers # already f*cked up
					has_origin = origin_lithoid # already f*cked it up
					has_origin = origin_doomsday # they got enough to deal with
					has_origin = origin_terraformer
					has_origin = origin_delicate_ecosystem # knows how not to f*ck up
					has_origin = origin_ecology # knows how not to f*ck up
					has_origin = origin_subterranean_evolution
					has_origin = origin_subterranean
					has_origin = origin_exploited_homeworld # they already got what's coming to them
					has_origin = origin_gpm_death_world
					has_origin = origin_gpm_precursor_world # been a sleep for a long time
					has_origin = origin_gpm_fallen_empire_colony # gaia world
					has_origin = origin_tree_dwellers # lives in harmony
					has_origin = origin_mariners # world flooded
					has_origin = origin_scavengers # world is already f*cked
					has_origin = origin_children_of_dunes # world is already f*cked
					has_origin = origin_postglacial
					has_origin = origin_ark # already f*cked up
					has_country_flag = human_2 # capital is a colony
				}
			}
			country_event = { id = gamestartexpanded.6 days = 1 random = 10 }
		}
		# Humans get extra ships if spawned by initializer
		if = {
			limit = {
				is_ai = yes
				OR = {
					has_country_flag = human_1
					has_country_flag = human_2
					NOT = { any_owned_ship = { is_ship_size = corvette } }
					NOT = { any_owned_ship = { is_ship_size = constructor } }
					NOT = { any_owned_ship = { is_ship_size = science } }
				}
				is_country_type = default
			}
			add_resource = {
				minerals = 100
				energy = 100
				food = 100
				alloys = 50
				consumer_goods = 50
				influence = 50
			}
			create_fleet = {
				effect = {
					set_owner = prev

					create_ship = {
						name = random
						random_existing_design = science
					}

					set_fleet_stance = evasive				
					#set_location = prev.capital_star
					set_location = prev.capital_scope.star
					
					owner = {
						create_leader = {
							class = scientist
							species = owner_main_species
							name = random
							skill = 2
						}
					}
					set_leader = last_created_leader
				}			
			}
				
			#constructor
			create_fleet = {
				effect = {
					set_owner = prev
					
					create_ship = {
						name = random
						random_existing_design = constructor
					}
					
					set_fleet_stance = evasive
					set_location = prev.capital_star
				}
			}
			
			#military
			create_fleet = {
				set_take_point = yes
				effect = {
					set_owner = prev
					
					while = {
						count = 2
						create_ship = {
							name = random
							random_existing_design = corvette
						}
					}
					
					set_location = prev.capital_star
				}
			}
			create_leader = {
				class = scientist
				species = owner_main_species
				name = random
				skill = 2
			}
			create_leader = {
				class = scientist
				species = owner_main_species
				name = random
				skill = 2
			}
			create_leader = {
				class = scientist
				species = owner_main_species
				name = random
				skill = 2
			}
			create_leader = {
				class = governor
				species = owner_main_species
				name = random
				skill = 2
			}
		}
		# Start CoM event chain
		if = {
			limit = {
				has_country_flag = human_1
				any_country = { has_country_flag = human_2 }
			}
			country_event = { id = countryexpanded.30 days = 30 random = 30 }
		}
		# Random country events
		if = {
			limit = {
				is_country_type = default
			}
			country_event = { id = gamestartexpanded.3 days = 1 random = 10 }
		}
	}
}

# random country events
country_event = {
	id = gamestartexpanded.3
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		random_list = {
			92 = {
			}
			5 = {
				# Observation Post
				modifier = {
					factor = 5
					has_origin = origin_ship_graveyard
				}
				country_event = { id = countryexpanded.320 days = 15 random = 360 }
			}
			3 = {
				# Panspermia
				country_event = { id = countryexpanded.300 days = 30 random = 720 }
			}
		}
	}
}

planet_event = {
	id = gamestartexpanded.4
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				OR = {
					AND = {
						is_planetary_diversity_active = no
						OR = {
							is_planet_class = pc_barren
							is_planet_class = pc_barren_cold
						}
					}
					has_modifier = scorched_world
					has_modifier = hot_barren_world
					has_planet_flag = hot_zone
					solar_system = {
						OR = {
							is_star_class = "sc_black_hole"
							is_star_class = "sc_neutron_star"
							is_star_class = "sc_pulsar"
							is_star_class = sc_o_super
							is_star_class = sc_o_hyper
							is_star_class = sc_b_super
							is_star_class = sc_a_super
							is_star_class = sc_f_super
							is_star_class = sc_g_super
							is_star_class = sc_k_super
							is_star_class = sc_m_super
							is_star_class = sc_m_hyper
							is_star_class = sc_nova_1
							is_star_class = sc_nova_2
							is_star_class = sc_collapsar
							is_star_class = sc_protostar
							is_star_class = sc_lbv_blue
							is_star_class = sc_lbv_green
							is_star_class = sc_lbv_red
							is_star_class = "sc_o"
							is_star_class = "sc_l"
							is_star_class = "sc_d"
							is_star_class = "sc_c_giant"
							is_star_class = "sc_s_giant"
							is_star_class = "sc_w_azure"
							is_star_class = "sc_w_red"
							is_star_class = "sc_w_green"
							is_star_class = "sc_w_purple"
							is_star_class = "sc_tt_red"
							is_star_class = "sc_tt_orange"
							is_star_class = "sc_tt_white"
							is_star_class = "sc_ae"
							is_star_class = "sc_p_purple"
							is_star_class = "sc_p_green"
							is_star_class = "sc_p_red"
							is_star_class = "sc_magnetar"
						}
					}
				}
			}
			remove_modifier = terraforming_candidate
		}
	}
}

# government set-up
country_event = {
	id = gamestartexpanded.5
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { has_origin = origin_preserve }
			# select aliens
			random_country = {
				limit = {
					OR = {
						is_country_type = default
						is_country_type = primitive
					}
					NOR = {
						has_country_flag = preserve_species_1@root
						has_country_flag = preserve_species_2@root
						has_country_flag = preserve_species_3@root
						has_country_flag = preserve_species_4@root
						has_origin = origin_void_dwellers
						has_origin = origin_shattered_ring
						is_hive_empire = yes
						is_machine_empire = yes
					}
				}
				set_country_flag = preserve_species_1@root
				owner_species = { save_event_target_as = preserve_species_1 }
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = default
						is_country_type = primitive
					}
					NOR = {
						has_country_flag = preserve_species_1@root
						has_country_flag = preserve_species_2@root
						has_country_flag = preserve_species_3@root
						has_country_flag = preserve_species_4@root
						has_origin = origin_void_dwellers
						has_origin = origin_shattered_ring
						is_hive_empire = yes
						is_machine_empire = yes
					}
				}
				set_country_flag = preserve_species_2@root
				owner_species = { save_event_target_as = preserve_species_2 }
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = default
						is_country_type = primitive
					}
					NOR = {
						has_country_flag = preserve_species_1@root
						has_country_flag = preserve_species_2@root
						has_country_flag = preserve_species_3@root
						has_country_flag = preserve_species_4@root
						has_origin = origin_void_dwellers
						has_origin = origin_shattered_ring
						is_hive_empire = yes
						is_machine_empire = yes
					}
				}
				set_country_flag = preserve_species_3@root
				owner_species = { save_event_target_as = preserve_species_3 }
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = default
						is_country_type = primitive
					}
					NOR = {
						has_country_flag = preserve_species_1@root
						has_country_flag = preserve_species_2@root
						has_country_flag = preserve_species_3@root
						has_country_flag = preserve_species_4@root
						has_origin = origin_void_dwellers
						has_origin = origin_shattered_ring
						is_hive_empire = yes
						is_machine_empire = yes
					}
				}
				set_country_flag = preserve_species_4@root
				owner_species = { save_event_target_as = preserve_species_4 }
			}
			random_galaxy_planet = {
				limit = {
					OR = {
						is_wet = yes
						is_dry = yes
						is_cold = yes
					}
					is_colony = no
				}
				save_event_target_as = preserve_species_5_planet
			}
			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				homeworld = event_target:preserve_species_5_planet
			}
			last_created_species = { save_event_target_as = preserve_species_5 }
			random_galaxy_planet = {
				limit = {
					OR = {
						is_wet = yes
						is_dry = yes
						is_cold = yes
					}
					is_colony = no
				}
				save_event_target_as = preserve_species_6_planet
			}
			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				homeworld = event_target:preserve_species_6_planet
			}
			last_created_species = { save_event_target_as = preserve_species_6 }
			# remove owner pops and add alien pops
			home_planet = {
				add_deposit = d_preserve_habitability
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_1
					}
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_2
					}
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_3
					}
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_4
					}
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_5
					}
				}
				while = {
					count = 4
					create_pop = {
						species = event_target:preserve_species_6
					}
				}
				while = {
					count = 24
					random_owned_pop = {
						limit = {
							species = { is_same_value = ROOT.owner_species }
						}
						kill_pop = yes
					}
				}
				check_planet_employment = yes
			}
			# Change leader species
			random_owned_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_owned_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_owned_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
			random_pool_leader = {
				limit = {
					species = { is_same_value = ROOT.owner_species }
				}
				random_list = {
					1 = { change_species = event_target:preserve_species_1 }
					1 = { change_species = event_target:preserve_species_2 }
					1 = { change_species = event_target:preserve_species_3 }
					1 = { change_species = event_target:preserve_species_4 }
					1 = { change_species = event_target:preserve_species_5 }
					1 = { change_species = event_target:preserve_species_6 }
				}
				set_name = random
			}
		}
	}
}
	
country_event = {
	id = gamestartexpanded.6
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		random_list = {
			80 = {
				# nothing
			}
			20 = {
				modifier = {
					factor = 0.5
					is_anti_corp = yes
				}
				modifier = {
					factor = 0.75
					has_ethic = ethic_fanatic_spiritualist
				}
				modifier = {
					factor = 0.85
					has_ethic = ethic_spiritualist
				}
				modifier = {
					factor = 0.75
					has_ethic = ethic_fanatic_pacifist
				}
				modifier = {
					factor = 0.85
					has_ethic = ethic_pacifist
				}
				modifier = {
					factor = 1.2
					has_country_flag = human_1
				}
				modifier = {
					factor = 1.2
					is_auth_corporate = yes
				}
				modifier = {
					factor = 1.2
					OR = {
						has_civic = civic_mining_guilds
						has_civic = civic_mining_company
					}
				}
				modifier = {
					factor = 1.2
					any_owned_pop = {
						AND = {
							pop_has_trait = trait_wasteful
							pop_has_trait = trait_industrious
						}
					}
				}
				set_country_flag = countryexpanded_20_set
				country_event = { id = countryexpanded.20 days = 60 random = 120 }
			}
		}
	}
}

# No Chthonian Moon
planet_event = {
	id = gamestartexpanded.7
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		remove_modifier = chthonian_planet
	}
}

# Random names for primitive worlds
planet_event = {
	id = gamestartexpanded.8
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_name = random
		if = {
			limit = { is_planet_class = pc_gaia }
			owner = { set_origin = origin_life_seeded }
		}
	}
}

# Start Up
event = {
	id = gamestartexpanded.9
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = expanded_events_active }
	}
	
	immediate = {
		set_global_flag = expanded_events_active
		# Set if game has planetary diversity
		if = {
			limit = {
				any_system = {
					any_system_planet = {
						is_planet_class = pc_steppe
					}
				}
			}
			set_global_flag = has_planetary_diversity
		}
		# Set if game has VB's Primitive Worlds
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = vbp_hive
						is_country_type = vbp_machine
					}
				}
			}
			set_global_flag = has_primitive_worlds
		}
		# Spawn more tomb worlds on larger galaxies
		if = {
			limit = {
				has_distar = yes
				count_system = { count > 750 }
			}
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "nuked_init_01" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "nuked_init_02" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "nuked_init_03" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
		}
		# Spawn more l-gates on large galaxies
		if = {
			limit = {
				has_distar = yes
				count_system = { count > 750 }
			}
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
		}
		if = {
			limit = {
				has_distar = yes
				count_system = { count > 950 }
			}
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
		}
		if = {
			limit = {
				has_distar = yes
				count_system = { count > 1450 }
			}
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
			random_system = {
				limit = {
					NOT = { exists = space_owner }
					NOT = {
						any_neighbor_system = { exists = space_owner }
					}
				}
				spawn_system = { initializer = "distantstars_init_00" }
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
		}
		### spawn some primitives###
		random_system = {
			limit = {
				NOT = { has_star_flag = primitive_system }
				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner 
						space_owner = {
							NOT = { is_country_type = fallen_empire }
							NOT = { is_country_type = awakened_fallen_empire }
							NOT = { is_country_type = default }
						}
					}
				}
			}
			spawn_system = { initializer = "special_init_02" }
		}
		add_extra_hyperlane_to_spawned_system_effect = yes
		random_system = {
			limit = {
				NOT = { has_star_flag = primitive_system }
				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner 
						space_owner = {
							NOT = { is_country_type = fallen_empire }
							NOT = { is_country_type = awakened_fallen_empire }
							NOT = { is_country_type = default }
						}
					}
				}
			}
			spawn_system = { initializer = "special_init_02" }
		}
		add_extra_hyperlane_to_spawned_system_effect = yes
		random_system = {
			limit = {
				NOT = { has_star_flag = primitive_system }
				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner 
						space_owner = {
							NOT = { is_country_type = fallen_empire }
							NOT = { is_country_type = awakened_fallen_empire }
							NOT = { is_country_type = default }
						}
					}
				}
			}
			spawn_system = { initializer = "special_init_02" }
		}
		add_extra_hyperlane_to_spawned_system_effect = yes
		# primitive near player
		random_system = {
			limit = {
				exists = space_owner
				space_owner = { is_ai = no }
			}
			random_system = {
				limit = {
					distance = {
						source = prev
						use_bypasses = no
						min_jumps = 6
						max_jumps = 24
					}
					NOT = { has_star_flag = primitive_system }
					OR = {
						NOT = { exists = space_owner }
						AND = {
							exists = space_owner 
							space_owner = {
								NOT = { is_country_type = fallen_empire }
								NOT = { is_country_type = awakened_fallen_empire }
								NOT = { is_country_type = default }
							}
						}
					}
				}
				spawn_system = { initializer = "special_init_02" }
			}
		}
		add_extra_hyperlane_to_spawned_system_effect = yes
	}
}

# Remnants spawning old colonies
country_event = {
	id = gamestartexpanded.10
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { has_origin = origin_remnants }
	
	immediate = {
		closest_system = {
			limit = {
				any_system_planet = {
					has_planet_flag = prescripted_ideal
					NOT = { has_planet_flag = colonial_remains@root }
				}
			}
			random_system_planet = {
				limit = {
					has_planet_flag = prescripted_ideal
				}
				set_planet_flag = colonial_remains@root
			}
		}
		closest_system = {
			limit = {
				any_system_planet = {
					has_planet_flag = prescripted_ideal
					NOT = { has_planet_flag = colonial_remains@root }
				}
			}
			random_system_planet = {
				limit = {
					has_planet_flag = prescripted_ideal
				}
				set_planet_flag = colonial_remains@root
			}
		}
		closest_system = {
			limit = {
				any_system_planet = {
					habitable_planet = yes
					habitability = { who = ROOT.owner_species value > 0.55 }
					has_owner = no
					is_surveyed = { who = root status = no }
					NOT = { has_planet_flag = prescripted_ideal }
				}
				NOT = {
					exists = space_owner
					has_star_flag = hostile_system
				}
			}
			min_steps = 1
			max_steps = 20
			random_system_planet = {
				limit = {
					habitable_planet = yes
					habitability = { who = ROOT.owner_species value > 0.55 }
					has_owner = no
					is_surveyed = { who = root status = no }
					NOT = { has_planet_flag = prescripted_ideal }
				}
				set_planet_flag = prescripted_ideal
				set_planet_flag = colonial_remains@root
			}
		}
		closest_system = {
			limit = {
				any_system_planet = {
					habitable_planet = yes
					habitability = { who = ROOT.owner_species value > 0.55 }
					has_owner = no
					is_surveyed = { who = root status = no }
					NOT = { has_planet_flag = prescripted_ideal }
				}
				NOT = {
					exists = space_owner
					has_star_flag = hostile_system
				}
			}
			min_steps = 1
			max_steps = 20
			random_system_planet = {
				limit = {
					habitable_planet = yes
					habitability = { who = ROOT.owner_species value > 0.55 }
					has_owner = no
					is_surveyed = { who = root status = no }
					NOT = { has_planet_flag = prescripted_ideal }
				}
				set_planet_flag = prescripted_ideal
				set_planet_flag = colonial_remains@root
			}
		}
	}
}