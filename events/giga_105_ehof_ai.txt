namespace = ehof_ai

@ai_system_cap_p1 = 1
@ai_system_cap_p2 = 3
@ai_system_cap_p3 = 6
@ai_system_cap_p4 = 10

# Generate a system
country_event = {
	id = ehof_ai.001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = yes
		NOR = {
			has_country_flag = ehof_is_upgrading
			has_country_flag = ehof_ai_recently_used
		}
		resource_income_compare = { resource = influence value > 1 }
		resource_income_compare = { resource = minerals value > 10 }
		resource_income_compare = { resource = alloys value > 10 }
		OR = {
			AND = {
				NOT = { has_country_flag = ehof_ai_system_p1_cap }
				check_variable = { which = ehof_phase value = 1 }
				resource_income_compare = { resource = energy value >= 30 }
			}
			AND = {
				NOT = { has_country_flag = ehof_ai_system_p2_cap }
				check_variable = { which = ehof_phase value = 2 }
				resource_income_compare = { resource = energy value >= 25 }
			}
			AND = {
				NOT = { has_country_flag = ehof_ai_system_p3_cap }
				check_variable = { which = ehof_phase value = 3 }
				resource_income_compare = { resource = sr_dark_matter value >= 1 }
			}
			AND = {
				NOT = { has_country_flag = ehof_ai_system_p4_cap }
				check_variable = { which = ehof_phase value = 4 }
				resource_income_compare = { resource = sr_dark_matter value >= 1 }
			}
		}
	}

	immediate = {
		set_timed_country_flag = { flag = ehof_ai_recently_used days = 360 }

		if = {
			limit = { NOT = { has_country_flag = ehof_ai_started_rc } }
			set_country_flag = ehof_ai_started_rc
			# Start reality code chain
			enable_special_project = {
				name = "INVESTIGATE_ENIGMATIC_PATTERN"
				location = root.capital_scope
				owner = root
			}
		}

		# Expenses
		if = {
			limit = { check_variable = { which = ehof_phase value = 1 } }
			change_variable = { which = ehof_ai_system_cap value = 1 }
			if = { limit = { check_variable = { which = ehof_ai_system_cap value >= @ai_system_cap_p1 } } set_country_flag = ehof_ai_system_p1_cap }	# Check cap
			add_monthly_resource_mult = { resource = alloys value = -1 min = -200 max = -200 }															# Construction/Science Ship Cost
			add_monthly_resource_mult = { resource = energy value = -1 min = @ehof_target_p1 max = @ehof_target_neg_p1 }					# Firing Cost
			add_monthly_resource_mult = { resource = influence value = -1 min = -150 max = -150 }														# System influence Cost
		}
		else_if = {
			limit = { check_variable = { which = ehof_phase value = 2 } }
			change_variable = { which = ehof_ai_system_cap value = 1 }
			if = { limit = { check_variable = { which = ehof_ai_system_cap value >= @ai_system_cap_p2 } } set_country_flag = ehof_ai_system_p2_cap }	# Check cap
			add_monthly_resource_mult = { resource = alloys value = -1 min = -200 max = -200 }															# Construction/Science Ship Cost
			add_monthly_resource_mult = { resource = energy value = -1 min = @ehof_target_p2 max = @ehof_target_neg_p2 }					# Firing Cost
			add_monthly_resource_mult = { resource = influence value = -1 min = -120 max = -120 }														# System influence Cost
		}
		else_if = {
			limit = { check_variable = { which = ehof_phase value = 3 } }
			change_variable = { which = ehof_ai_system_cap value = 1 }
			if = { limit = { check_variable = { which = ehof_ai_system_cap value >= @ai_system_cap_p3 } } set_country_flag = ehof_ai_system_p3_cap }	# Check cap
			add_monthly_resource_mult = { resource = alloys value = -1 min = -200 max = -200 }															# Construction/Science Ship Cost
			add_monthly_resource_mult = { resource = sr_dark_matter value = -1 min = @ehof_target_p3 max = @ehof_target_neg_p3 }			# Firing Cost
			add_monthly_resource_mult = { resource = influence value = -1 min = -90 max = -90 }															# System influence Cost
		}
		else_if = {
			limit = { check_variable = { which = ehof_phase value = 4 } }
			change_variable = { which = ehof_ai_system_cap value = 1 }
			if = { limit = { check_variable = { which = ehof_ai_system_cap value >= @ai_system_cap_p4 } } set_country_flag = ehof_ai_system_p4_cap }	# Check cap
			add_monthly_resource_mult = { resource = alloys value = -1 min = -200 max = -200 }															# Construction/Science Ship Cost
			add_monthly_resource_mult = { resource = sr_dark_matter value = -1 min = @ehof_target_p4 max = @ehof_target_neg_p4 }			# Firing Cost
			add_monthly_resource_mult = { resource = influence value = -1 min = -60 max = -60 }															# System influence Cost
		}

		# Generate the system
		country_event = { id = ehof_systems.000 }
		set_country_flag = ehof_ai_system_ready
	}
}

# Populate all systems created by this AI
country_event = {
	id = ehof_ai.002
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = yes
		has_country_flag = ehof_ai_system_ready
		NOT = { has_country_flag = ehof_is_upgrading }
	}

	immediate = {
		remove_country_flag = ehof_ai_system_ready
		every_system = {
			limit = {
				has_star_flag = ehof_system_created_by_@root
				cohesive_system = yes
				NOT = { exists = starbase }
			}

			# Visited via ehof
			set_star_flag = empire_has_visited_anyone
			set_star_flag = empire_has_visited@root
			every_system_planet = { set_surveyed = { surveyed = yes surveyor = root } }
			create_starbase = { size = starbase_outpost owner = root }

			if = {
				limit = {
					any_system_planet = {
						OR = {
							has_planet_flag = code_world1@root.owner
							has_planet_flag = code_world2@root.owner
							has_planet_flag = code_world3@root.owner
							has_planet_flag = code_world4@root.owner
							has_planet_flag = code_world5@root.owner
							has_planet_flag = code_world6@root.owner
							has_planet_flag = code_world7@root.owner
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = root
						create_ship = {
							name = random
							random_existing_design = science
						}
						set_location = prev.star
					}
				}
			}

			# Create mining stations
			every_system_planet = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = { owner = root }
				root = { add_monthly_resource_mult = { resource = minerals value = -1 min = -100 max = -100 } }
			}

			# Create research stations
			every_system_planet = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = { owner = root }
				root = { add_monthly_resource_mult = { resource = minerals value = -1 min = -100 max = -100 } }
			}
		}
	}
}

# If doesn't have at least 1 scienceship with a scientist in cluster, spawn one
country_event = {
	id = ehof_ai.003
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		ehof_default_country = yes
		is_ai = yes
		has_country_flag = ehof_started_reality_code
		NOR = {
			has_country_flag = ehof_code_7_complete
			has_country_flag = ehof_ai_has_ship_in_cluster
		}
		NOT = {
			any_system_within_border = {
				cohesive_system = yes
				any_fleet_in_system = {
					is_ship_class = shipclass_science_ship
					exists = leader
				}
			}
		}
	}

	immediate = {
		set_timed_country_flag = { flag = ehof_ai_has_ship_in_cluster days = 180 }
		random_system_within_border = {
			limit = { cohesive_system = yes }
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = random
						random_existing_design = science
					}
					set_location = prev.star
				}
			}
		}
	}
}

# delete science ships if more than 1 in cluster
country_event = {
	id = ehof_ai.004
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		ehof_default_country = yes
		is_ai = yes
		has_country_flag = ehof_started_reality_code
		count_owned_ship = {
			limit = {
				is_ship_class = shipclass_science_ship
				exists = solar_system
				solar_system = { cohesive_system = yes }
			}
			count > 1
		}
	}

	immediate = {
		while = {
			limit = {
				count_owned_ship = {
					limit = {
						is_ship_class = shipclass_science_ship
						exists = solar_system
						solar_system = { cohesive_system = yes }
					}
					count > 1
				}
			}
			random_owned_ship = {
				limit = {
					is_ship_class = shipclass_science_ship
					exists = solar_system
					solar_system = { cohesive_system = yes }
				}
				fleet = {
					if = {
						limit = { exists = leader }
						leader = { unassign_leader = this }
					}
				}
				delete_ship = this
			}
		}
	}
}