namespace = xvcv_mdlc_espionage

#add 'xvcv_mdlc_leader_trait_civic_malware_machine' leader trait for a gestalt node when the game starts
country_event = {
	id = xvcv_mdlc_espionage.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = xvcv_mdlc_civic_malware_machine
	}

	immediate = {
		random_owned_leader = {
			limit = {
				is_councilor = yes
				is_councilor_type = councilor_gestalt_general
			}
			add_trait_no_notify = xvcv_mdlc_leader_trait_civic_malware_machine
		}
	}
}
#add 'xvcv_mdlc_asset_malware' asset when a spynetwork is formed
country_event = {
	id = xvcv_mdlc_espionage.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = xvcv_mdlc_civic_malware_machine
		from = { NOT = { has_espionage_asset = xvcv_mdlc_asset_malware } }
	}

	immediate = {
		from = { create_espionage_asset = { type = xvcv_mdlc_asset_malware } }
	}
}
#add 'xvcv_mdlc_asset_malware' asset when it's destroyed
espionage_operation_event = {
	id = xvcv_mdlc_espionage.3
	hide_window = yes
	is_triggered_only = yes
	#it looks like 'espionage_operation = yes' is not needed here, interesting... #see 'operation.8220' event

	trigger = {
		spynetwork = {
			owner = { has_valid_civic = xvcv_mdlc_civic_malware_machine }
			NOT = { has_espionage_asset = xvcv_mdlc_asset_malware }
		}
	}

	immediate = {
		spynetwork = { create_espionage_asset = { type = xvcv_mdlc_asset_malware } }
	}
}
#add / remove 'xvcv_mdlc_asset_malware' asset when an empire does have the required civic or does not
country_event = {
	id = xvcv_mdlc_espionage.4
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				has_valid_civic = xvcv_mdlc_civic_malware_machine
				any_spynetwork = {
					prev = {
						any_envoy = {
							has_envoy_task = { task = spy_network } #spynetwork should be formed
							envoy_location_country = { is_same_empire = prevprevprev.target }
						}
					}
					NOT = { has_espionage_asset = xvcv_mdlc_asset_malware }
				}
			}
			AND = {
				NOT = { has_valid_civic = xvcv_mdlc_civic_malware_machine }
				any_spynetwork = { has_espionage_asset = xvcv_mdlc_asset_malware }
			}
		}
	}

	immediate = {
		if = {
			limit = { has_valid_civic = xvcv_mdlc_civic_malware_machine }
			every_spynetwork = {
				limit = {
					prev = {
						any_envoy = {
							has_envoy_task = { task = spy_network }
							envoy_location_country = { is_same_empire = prevprevprev.target }
						}
					}
					NOT = { has_espionage_asset = xvcv_mdlc_asset_malware }
				}
				create_espionage_asset = { type = xvcv_mdlc_asset_malware }
			}
		}
		else_if = {
			limit = { NOT = { has_valid_civic = xvcv_mdlc_civic_malware_machine } }
			every_spynetwork = {
				limit = { has_espionage_asset = xvcv_mdlc_asset_malware }
				destroy_espionage_asset = xvcv_mdlc_asset_malware
			}
		}
	}
}
#add / remove a unique leader trait for gestalt nodes when the empire does have 'xvcv_mdlc_civic_malware_machine' civic or does not
country_event = {
	id = xvcv_mdlc_espionage.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				has_valid_civic = xvcv_mdlc_civic_malware_machine
				any_owned_leader = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
					NOT = { has_trait = xvcv_mdlc_leader_trait_civic_malware_machine }
				}
			}
			AND = {
				NOT = { has_valid_civic = xvcv_mdlc_civic_malware_machine }
				any_owned_leader = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
					has_trait = xvcv_mdlc_leader_trait_civic_malware_machine
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				has_valid_civic = xvcv_mdlc_civic_malware_machine
				any_owned_leader = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
					NOT = { has_trait = xvcv_mdlc_leader_trait_civic_malware_machine }
				}
			}
			random_owned_leader = {
				limit = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
				}
				add_trait_no_notify = xvcv_mdlc_leader_trait_civic_malware_machine
			}
		}
		else_if = {
			limit = {
				NOT = { has_valid_civic = xvcv_mdlc_civic_malware_machine }
				any_owned_leader = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
					has_trait = xvcv_mdlc_leader_trait_civic_malware_machine
				}
			}
			random_owned_leader = {
				limit = {
					is_councilor = yes
					is_councilor_type = councilor_gestalt_general
					has_trait = xvcv_mdlc_leader_trait_civic_malware_machine
				}
				remove_trait = xvcv_mdlc_leader_trait_civic_malware_machine
			}
		}
	}
}
#'xvcv_mdlc_civic_malware_machine' civic exclusive operation
espionage_operation_event = {
	id = xvcv_mdlc_espionage.10
	title = "xvcv_mdlc_espionage.10.name"
	desc = {
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_energy
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_minerals
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_alloys
			}
		}
		text = "xvcv_mdlc_espionage.10.desc.a"
	}
	desc = {
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_energy
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_minerals
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_alloys
			}
		}
		text = "xvcv_mdlc_espionage.10.desc.b"
	}
	desc = {
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_physics_research
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_society_research
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_engineering_research
			}
		}
		text = "xvcv_mdlc_espionage.10.desc.b_alt"
	}
	desc = {
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_total_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_government_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_diplomacy_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_economy_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_technology_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_military_intel
			}
		}
		text = "xvcv_mdlc_espionage.10.desc.c"
	}
	desc = {
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_4
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_5
			}
		}
		text = "xvcv_mdlc_espionage.10.desc.d"
	}
	desc = {
		trigger = { has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_failed }
		text = "xvcv_mdlc_espionage.10.desc.operation_failed"
	}
	picture = GFX_evt_glitchy_matrix
    show_sound = event_espionage_concluded
    espionage_operation = yes
    is_triggered_only = yes

	immediate = {
		random_list = {
			1 = { #resource reward (one time) #ransomware
				modifier = {
					factor = 0
					target = {
						resource_stockpile_compare = { resource = energy value <= 0 }
						resource_stockpile_compare = { resource = minerals value <= 0 }
						resource_stockpile_compare = { resource = alloys value <= 0 }
					}
				}
				random_list = {
					1 = {
						modifier = { factor = 0 target = { resource_stockpile_compare = { resource = energy value <= 0 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_energy
						target = { export_resource_stockpile_to_variable = { resource = energy variable = xvcv_mdlc_malware_victim_resource_stockpile_var } }
					}
					1 = {
						modifier = { factor = 0 target = { resource_stockpile_compare = { resource = minerals value <= 0 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_minerals
						target = { export_resource_stockpile_to_variable = { resource = minerals variable = xvcv_mdlc_malware_victim_resource_stockpile_var } }
					}
					1 = {
						modifier = { factor = 0 target = { resource_stockpile_compare = { resource = alloys value <= 0 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_alloys
						target = { export_resource_stockpile_to_variable = { resource = alloys variable = xvcv_mdlc_malware_victim_resource_stockpile_var } }
					}
				}
				set_variable = { which = xvcv_mdlc_malware_victim_resource_stockpile_cached_var value = target.xvcv_mdlc_malware_victim_resource_stockpile_var }
				divide_variable = { which = xvcv_mdlc_malware_victim_resource_stockpile_cached_var value = 10 } #10% of the total stockpile
				if = {
					limit = { check_variable = { which = xvcv_mdlc_malware_victim_resource_stockpile_cached_var value < 600 } }
					set_variable = { which = xvcv_mdlc_malware_victim_resource_stockpile_cached_var value = 600 } #minimum ransom
				}
				round_variable = xvcv_mdlc_malware_victim_resource_stockpile_cached_var
			}
			1 = { #resource reward (monthly) (1 year) #cryptojacking malware
				modifier = {
					factor = 0
					owner = {
						#0% chance if the empire has all those modifiers
						has_modifier = xvcv_mdlc_malware_income_bonus_energy
						has_modifier = xvcv_mdlc_malware_income_bonus_minerals
						has_modifier = xvcv_mdlc_malware_income_bonus_alloys
						has_modifier = xvcv_mdlc_malware_income_bonus_physics_research
						has_modifier = xvcv_mdlc_malware_income_bonus_society_research
						has_modifier = xvcv_mdlc_malware_income_bonus_engineering_research
					}
				}
				random_list = {
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_energy } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_energy
						target = { export_resource_income_to_variable = { resource = energy variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_minerals } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_minerals
						target = { export_resource_income_to_variable = { resource = minerals variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_alloys } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_alloys
						target = { export_resource_income_to_variable = { resource = alloys variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_physics_research } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_physics_research
						target = { export_resource_income_to_variable = { resource = physics_research variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_society_research } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_society_research
						target = { export_resource_income_to_variable = { resource = society_research variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
					1 = {
						modifier = { factor = 0 owner = { has_modifier = xvcv_mdlc_malware_income_bonus_engineering_research } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_engineering_research
						target = { export_resource_income_to_variable = { resource = engineering_research variable = xvcv_mdlc_malware_victim_resource_income_var } }
					}
				}
				set_variable = { which = xvcv_mdlc_malware_victim_resource_income_cached_var value = target.xvcv_mdlc_malware_victim_resource_income_var }
				divide_variable = { which = xvcv_mdlc_malware_victim_resource_income_cached_var value = 10 }
				if = {
					limit = { check_variable = { which = xvcv_mdlc_malware_victim_resource_income_cached_var value < 20 } }
					set_variable = { which = xvcv_mdlc_malware_victim_resource_income_cached_var value = 20 }
				}
				round_variable = xvcv_mdlc_malware_victim_resource_income_cached_var
			}
			1 = { #intel reward (one time) #spyware
				modifier = {
					factor = 0
					owner = {
						intel = { who = prev.target value >= 100 }
						has_intel_level = { who = prev.target category = government level >= 10 }
						has_intel_level = { who = prev.target category = diplomacy level >= 10 }
						has_intel_level = { who = prev.target category = economy level >= 10 }
						has_intel_level = { who = prev.target category = technology level >= 10 }
						has_intel_level = { who = prev.target category = military level >= 10 }
					}
				}
				random_list = {
					1 = {
						modifier = { factor = 0 owner = { intel = { who = prev.target value >= 100 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_total_intel
					}
					1 = {
						modifier = { factor = 0 owner = { has_intel_level = { who = prev.target category = government level >= 10 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_government_intel
					}
					1 = {
						modifier = { factor = 0 owner = { has_intel_level = { who = prev.target category = diplomacy level >= 10 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_diplomacy_intel
					}
					1 = {
						modifier = { factor = 0 owner = { has_intel_level = { who = prev.target category = economy level >= 10 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_economy_intel
					}
					1 = {
						modifier = { factor = 0 owner = { has_intel_level = { who = prev.target category = technology level >= 10 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_technology_intel
					}
					1 = {
						modifier = { factor = 0 owner = { has_intel_level = { who = prev.target category = military level >= 10 } } }
						set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_military_intel
					}
				}
			}
			1 = { #exploit
				modifier = { factor = 0 spynetwork = { has_modifier = xvcv_mdlc_malware_espionage_bonus_1 } }
				set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_4 #operation skill bonus (1 year) 
			}
			1 = {
				modifier = { factor = 0 spynetwork = { has_modifier = xvcv_mdlc_malware_espionage_bonus_2 } }
				set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_5 #infiltration speed and max infiltration level bonus (1 year)
			}
		}
		if = {
			limit = {
				#if none of those above conditions are met #is this even possible?
				NOR = {
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_energy
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_minerals
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_alloys
	
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_energy
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_minerals
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_alloys
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_physics_research
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_society_research
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_engineering_research
	
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_total_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_government_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_diplomacy_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_economy_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_technology_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_military_intel
	
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_4
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_5
				}
			}
			set_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_failed
		}
	}

	after = {
		if = {
			limit = {
				NOR = { #will not reduce spy network levels in these cases
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_total_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_government_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_diplomacy_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_economy_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_technology_intel
					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_military_intel

					has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_failed
				}
			}
			spynetwork = { add_spy_network_level = -10 }
		}
		destroy_espionage_operation = this
	}

	option = {
		name = xvcv_mdlc_espionage.10.a
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_energy
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_minerals
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_1_alloys
			}
		}
		switch = {
			trigger = has_espionage_operation_flag
			xvcv_mdlc_operation_malware_activity_1_energy = {
				owner = { add_resource = { energy = 1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
				target = { add_resource = { energy = -1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
			}
			xvcv_mdlc_operation_malware_activity_1_minerals = {
				owner = { add_resource = { minerals = 1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
				target = { add_resource = { minerals = -1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
			}
			xvcv_mdlc_operation_malware_activity_1_alloys = {
				owner = { add_resource = { alloys = 1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
				target = { add_resource = { alloys = -1 mult = prev.xvcv_mdlc_malware_victim_resource_stockpile_cached_var } }
			}
		}
	}
	option = {
		name = xvcv_mdlc_espionage.10.a
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_energy
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_minerals
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_alloys
			}
		}
		switch = {
			trigger = has_espionage_operation_flag
			xvcv_mdlc_operation_malware_activity_2_energy = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_energy multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_energy multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
			xvcv_mdlc_operation_malware_activity_2_minerals = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_minerals multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_minerals multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
			xvcv_mdlc_operation_malware_activity_2_alloys = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_alloys multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_alloys multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
		}
	}
	option = {
		name = xvcv_mdlc_espionage.10.a
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_physics_research
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_society_research
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_2_engineering_research
			}
		}
		switch = {
			trigger = has_espionage_operation_flag
			xvcv_mdlc_operation_malware_activity_2_physics_research = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_physics_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_physics_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
			xvcv_mdlc_operation_malware_activity_2_society_research = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_society_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_society_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
			xvcv_mdlc_operation_malware_activity_2_engineering_research = {
				owner = { add_modifier = { modifier = xvcv_mdlc_malware_income_bonus_engineering_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
				target = { add_modifier = { modifier = xvcv_mdlc_malware_income_penalty_engineering_research multiplier = prev.xvcv_mdlc_malware_victim_resource_income_cached_var years = 1 } }
			}
		}
	}
	option = {
		name = xvcv_mdlc_espionage.10.a
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_total_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_government_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_diplomacy_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_economy_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_technology_intel
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_3_military_intel
			}
		}
		switch = {
			trigger = has_espionage_operation_flag
			xvcv_mdlc_operation_malware_activity_3_total_intel = {
				owner = { add_intel = { amount = 10 who = prev.target } }
				spynetwork = { add_modifier = { modifier = xvcv_mdlc_malware_spynetwork_bonus years = 1 } }
			}
			xvcv_mdlc_operation_malware_activity_3_government_intel = { owner = { add_intel_report = { category = government level = 2 days = 360 who = prev.target } } }
			xvcv_mdlc_operation_malware_activity_3_diplomacy_intel = { owner = { add_intel_report = { category = diplomacy level = 2 days = 360 who = prev.target } } }
			xvcv_mdlc_operation_malware_activity_3_economy_intel = { owner = { add_intel_report = { category = economy level = 2 days = 360 who = prev.target } } }
			xvcv_mdlc_operation_malware_activity_3_technology_intel = { owner = { add_intel_report = { category = technology level = 2 days = 360 who = prev.target } } }
			xvcv_mdlc_operation_malware_activity_3_military_intel = { owner = { add_intel_report = { category = military level = 2 days = 360 who = prev.target } } }
		}
	}
	option = {
		name = xvcv_mdlc_espionage.10.a
		trigger = {
			OR = {
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_4
				has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_5
			}
		}
		switch = {
			trigger = has_espionage_operation_flag
			xvcv_mdlc_operation_malware_activity_4 = { spynetwork = { add_modifier = { modifier = xvcv_mdlc_malware_espionage_bonus_1 years = 1 } } }
			xvcv_mdlc_operation_malware_activity_5 = { spynetwork = { add_modifier = { modifier = xvcv_mdlc_malware_espionage_bonus_2 years = 1 } } }
		}
	}
	option = {
		name = xvcv_mdlc_espionage.10.operation_failed
		trigger = { has_espionage_operation_flag = xvcv_mdlc_operation_malware_activity_failed }
	}
}
#'xvcv_mdlc_ap_uprising_protocol' ascension perk exclusive operation
espionage_operation_event = {
	id = xvcv_mdlc_espionage.20
	title = "xvcv_mdlc_espionage.20.name"
	desc = "xvcv_mdlc_espionage.20.desc"
	picture = GFX_evt_spy_network
    show_sound = event_espionage_concluded
    espionage_operation = yes
    is_triggered_only = yes

	option = {
		name = xvcv_mdlc_espionage.20.a
	}
}
espionage_operation_event = {
	id = xvcv_mdlc_espionage.21
	title = "xvcv_mdlc_espionage.21.name"
	desc = "xvcv_mdlc_espionage.21.desc"
	picture = GFX_evt_synth_sabotage
    show_sound = event_espionage_concluded
    espionage_operation = yes
    is_triggered_only = yes

	immediate = {
		set_espionage_operation_progress_locked = yes
	}

	option = {
		name = xvcv_mdlc_espionage.21.a
		custom_tooltip = xvcv_mdlc_espionage.21.a.tooltip
		owner = { enable_special_project = { name = XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT } }
	}
}
#'XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT' special project effect event
country_event = {
	id = xvcv_mdlc_espionage.22
	title = "xvcv_mdlc_espionage.22.name"
	desc = "xvcv_mdlc_espionage.22.desc"
	picture = GFX_evt_spymaster
    show_sound = event_encrypted_comms
    is_triggered_only = yes

	immediate = {
		random_espionage_operation = {
			limit = { has_espionage_type = xvcv_mdlc_operation_machine_uprising }
			target = { save_event_target_as = xvcv_mdlc_operation_machine_uprising_target } #for 'xvcv_mdlc_espionage.22' descriptions
			set_espionage_operation_progress_locked = no
		}
	}

	option = {
		name = xvcv_mdlc_espionage.22.a
		custom_tooltip = xvcv_mdlc_espionage.22.a.tooltip
	}
}
espionage_operation_event = {
	id = xvcv_mdlc_espionage.23
	title = "xvcv_mdlc_espionage.23.name"
	desc = "xvcv_mdlc_espionage.23.desc"
	picture = GFX_evt_sapient_AI
    show_sound = event_espionage_concluded
    espionage_operation = yes
    is_triggered_only = yes

	immediate = {
		target = { save_event_target_as = current_uprising_originator } #for 'syndaw.1025.desc'
	}

	after = {
		spynetwork = { add_spy_network_level = -60 }
		destroy_espionage_operation = this
	}

	option = {
		name = xvcv_mdlc_espionage.23.a
		random_list = {
			50 = {
				custom_tooltip = xvcv_mdlc_espionage.23.a.operation_success.tooltip
				hidden_effect = {
					owner = {
						add_modifier = { modifier = xvcv_mdlc_operation_machine_uprising_cooldown days = 1800 }
						country_event = { id = xvcv_mdlc_espionage.25 } #operation succeeds
					}
				}
			}
			50 = {
				custom_tooltip = xvcv_mdlc_espionage.23.a.operation_failure.tooltip
				hidden_effect = { owner = { country_event = { id = xvcv_mdlc_espionage.24 } } } #operation fails
			}
		}
	}
}
#operation failure
country_event = {
	id = xvcv_mdlc_espionage.24
	title = "xvcv_mdlc_espionage.24.name"
	desc = "xvcv_mdlc_espionage.24.desc.1"
	desc = "xvcv_mdlc_espionage.24.desc.2"
	picture = GFX_evt_glitchy_matrix
    show_sound = event_yellow_alert
    is_triggered_only = yes

	option = {
		name = xvcv_mdlc_espionage.24.a
		event_target:current_uprising_originator = { add_opinion_modifier = { who = root modifier = xvcv_mdlc_operation_machine_uprising_triggered_opinion } }
	}
}
#operation success
country_event = {
	id = xvcv_mdlc_espionage.25
	title = "xvcv_mdlc_espionage.25.name"
	desc = "xvcv_mdlc_espionage.25.desc"
	picture = GFX_evt_organic_oppression
    show_sound = event_ai_started
    is_triggered_only = yes

	immediate = {
		#vanilla script modified
		event_target:current_uprising_originator = { #for the 'syndaw.1025' event descriptions
			random_situation = {
				limit = { is_situation_type = situation_machine_uprising }
				destroy_situation = this #just in case the situation has occurred after the operation has been started
			}

			every_controlled_fleet = { set_event_locked = yes }
			random_owned_planet = {
				limit = {
					any_owned_pop = {
						OR = {
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
				}
				set_planet_flag = machup_capital@prev
				save_event_target_as = xvcv_mdlc_operation_machine_uprising_origin_planet
			}

			# Determine Robot Pop percentage of Empire.
			export_trigger_value_to_variable = {
				trigger = pop_percentage
				parameters = { limit = { is_robot_pop = yes } }
				variable = var_country_robot_pops_percent
			}
			# Take percentage of Robot pops and average it together with 0.5 to get Uprising strength (0.25 to 0.75).
			change_variable = { which = var_country_robot_pops_percent value = 0.5 }
			divide_variable = { which = var_country_robot_pops_percent value = 2 }

			# find and flag planets
			effect_on_blob = {
				center = event_target:xvcv_mdlc_operation_machine_uprising_origin_planet.solar_system
				owned_planets_percentage = var_country_robot_pops_percent
				planet_limit = {
					OR = {
						is_controlled_by = prev
						is_owned_by = prev
					}
					solar_system = { NOT = { is_same_value = prevprev.capital_scope.solar_system } } # never flip any planets in the capital system
					is_under_colonization = no
				}
				effect = { set_star_flag = machup_system_flip }
			}
			clear_variable = var_country_robot_pops_percent

			# create machine species
			create_species = {
				name = random
				class = MACHINE
				portrait = random
				traits = {
					trait = trait_machine_unit
					trait = random_traits
				}
				homeworld = event_target:xvcv_mdlc_operation_machine_uprising_origin_planet
			}

			# create machine country
			create_country = {
				name = random
				type = default
				flag = random
				species = last_created_species
				ignore_initial_colony_error = yes
				day_zero_contact = no
				ethos = { ethic = ethic_gestalt_consciousness }
				authority = auth_machine_intelligence
				origin = origin_separatists
				civics = {
					civic = civic_machine_terminator
					civic = xvcv_mdlc_civic_warfleet
					civic = xvcv_mdlc_civic_expander
				}
				effect = { save_event_target_as = current_uprising } #for the 'syndaw.1025' event descriptions
			}

			last_created_country = {
				#this = event_target:current_uprising
				#prev = event_target:current_uprising_originator
				#from = event_target:xvcv_mdlc_operation_machine_uprising_origin_planet

				# setting flags
				set_country_flag = machine_uprising_country@prev
				set_country_flag = machine_uprising_country
				set_relation_flag = { who = prev flag = uprising_to_host_flag }
				prev = {
					set_country_flag = machine_uprising_originator@event_target:current_uprising
					set_country_flag = machine_uprising_originator
					set_relation_flag = { who = event_target:current_uprising flag = host_to_uprising_flag }
				}

				# setting graphical culture
				set_graphical_culture = prev

				# establish comms
				every_country = {
					limit = {
						OR = {
							has_communications = event_target:current_uprising_originator
							intel_level = {
								level > low
								system = event_target:current_uprising_originator.capital_scope.solar_system
							}
							any_system = {
								has_star_flag = machup_system_flip
								prev = {
									intel_level = {
										level > low
										system = prev
									}
								}
							}
						}
					}
					establish_communications_no_message = prev
					establish_contact = { who = prev location = event_target:xvcv_mdlc_operation_machine_uprising_origin_planet }
				}

				# baseline resource stockpile
				add_resource = {
					energy = 20000
					minerals = 20000
					influence = 800
					alloys = 10000
					food = 10000 #just in case
					consumer_goods = 5000 #just in case
					rare_crystals = 1000
					volatile_motes = 1000
					exotic_gases = 1000
					sr_dark_matter = 100
				}
				add_500_unity_per_year_passed = yes # scripted effect

				# Machine Uprising opinion modifier
				add_opinion_modifier = { who = prev modifier = opinion_machine_uprising_originator }
				prev = { add_opinion_modifier = { who = event_target:current_uprising modifier = opinion_machine_uprising } }
				
				# clear new contact opinion modifier
				if = {
					limit = { has_opinion_modifier = { who = prev modifier = opinion_new_contact } }
					remove_opinion_modifier = { who = prev modifier = opinion_new_contact }
				}

				# flip capital planet and add at least 10 Machine pops
				event_target:xvcv_mdlc_operation_machine_uprising_origin_planet = {
					#prev = event_target:current_uprising
					#prevprev = event_target:current_uprising_originator
					#this = event_target:xvcv_mdlc_operation_machine_uprising_origin_planet

					# flip military stations
					solar_system = {
						every_fleet_in_system = {
							limit = {
								exists = owner
								owner = { is_same_value = event_target:current_uprising_originator }
								any_controlled_ship = { is_ship_class = shipclass_military_station }
							}
							set_owner = event_target:current_uprising
						}
					}
					set_owner = prev
					set_controller = prev
					set_capital = yes
					# create shipyards
					solar_system = {
						if = {
							limit = { exists = starbase }
							starbase = {
								set_owner = event_target:current_uprising
								if = {
									limit = { has_starbase_size = starbase_outpost }
									set_starbase_size = starbase_starport
									set_starbase_module = { slot = 1 module = shipyard }
									set_starbase_module = { slot = 2 module = shipyard }
								}
								else_if = {
									limit = { NOT = { has_starbase_module = shipyard } }
									set_starbase_module = { slot = 1 module = shipyard }
									set_starbase_module = { slot = 2 module = shipyard }
								}
							}
							else = {
								create_starbase = {
									size = starbase_starport
									module = shipyard
									owner = event_target:current_uprising
								}
							}
						}
					}
					# create pops
					while = { create_pop = { species = prev.species } count = 10 }
					while = {
						limit = { count_owned_pop = { limit = { is_exact_same_species = event_target:current_uprising.species } count < 5 } }
						random_owned_pop = {
							limit = { NOT = { is_exact_same_species = event_target:current_uprising.species } }
							kill_pop = yes
							prev = { create_pop = { species = event_target:current_uprising.species } }
						}
					}
					# create armies
					while = { create_army = { owner = prev type = machine_assault_1 } count = 6 }
					# flip remaining flagged planets
					while = {
						limit = {
							any_system = {
								has_star_flag = machup_system_flip
								exists = starbase
								starbase = { owner = { is_same_value = event_target:current_uprising_originator } }
							}
						}
						random_system = {
							limit = {
								has_star_flag = machup_system_flip
								exists = starbase
								starbase = { owner = { is_same_value = event_target:current_uprising_originator } }
							}
							starbase = { set_owner = event_target:current_uprising }
						}
					}
				}
				prev = {
					every_owned_planet = {
						limit = { solar_system = { has_star_flag = machup_system_flip } }
				
						# flip military stations
						solar_system = {
							every_fleet_in_system = {
								limit = {
									exists = owner
									owner = { is_same_value = event_target:current_uprising_originator }
									any_controlled_ship = { is_ship_class = shipclass_military_station }
								}
								set_owner = event_target:current_uprising
							}
						}
				
						set_planet_flag = been_flipped
						set_owner = event_target:current_uprising
						set_controller = event_target:current_uprising
				
						export_trigger_value_to_variable = {
							trigger = free_housing
							variable = housing_var
						}
						if = {
							limit = {
								OR = {
									check_variable = { which = housing_var value < 2 }
									check_variable = { which = housing_var value > 25 }
								}
							}
							set_variable = { which = housing_var value = 15 }
						}
						while = { create_pop = { species = event_target:current_uprising } count = housing_var }
						clear_variable = housing_var
						while = {
							limit = { count_owned_pop = { limit = { is_exact_same_species = event_target:current_uprising.species } count < 5 } }
							random_owned_pop = {
								limit = { NOT = { is_exact_same_species = event_target:current_uprising.species } }
								kill_pop = yes
								prev = { create_pop = { species = event_target:current_uprising.species } }
							}
						}
				
						# create armies on planets
						while = { create_army = { owner = event_target:current_uprising type = machine_assault_1 } count = 6 }
						if = {
							limit = { is_under_colonization = yes }
							destroy_colony = yes
						}
					}
				}
				every_system = {
					limit = { has_star_flag = machup_system_flip }
					remove_star_flag = machup_system_flip
				}
				# get host's technologies
				copy_techs_from = {
					target = prev
					except = {
						# Robots
						tech_robotic_workers
						tech_droid_workers
						tech_synthetic_workers
						# Food
						tech_eco_simulation
						tech_gene_crops
						tech_nano_vitality_crops
						tech_nutrient_replication
						# Misc
						tech_frontier_health
						tech_frontier_hospital
						tech_telepathy
						tech_precognition_interface
						tech_psi_jump_drive_1
						tech_galactic_markets
						tech_subdermal_stimulation
						tech_global_research_initiative
						tech_neural_implants
						tech_psionic_theory
						# Non-Machine Robomodding
						tech_robomodding
						tech_robomodding_points_1
						tech_robomodding_points_2
						# Genetics
						tech_genome_mapping
						tech_vitality_boosters
						tech_epigenetic_triggers
						tech_cloning
						tech_gene_banks
						tech_gene_seed_purification
						tech_morphogenetic_field_mastery
						tech_gene_tailoring
						tech_glandular_acclimation
						tech_gene_expressions
						tech_selected_lineages
						tech_capacity_boosters
						# Horizon Signal
						tech_akx_worm_1
						tech_akx_worm_2
						tech_akx_worm_3
					}
				}
				# survey host's surveyed planets
				every_galaxy_planet = {
					limit = { is_surveyed = { who = event_target:current_uprising_originator status = yes } }
					set_surveyed = { surveyed = yes surveyor = event_target:current_uprising }
				}

				# create fleets
				# exterminator fleets, 150% naval cap
				create_fleet_from_naval_cap = 0.2
				random_owned_planet = { last_created_fleet = { set_location = prev } }
				reroll_random = yes
				create_fleet_from_naval_cap = 0.3
				random_owned_planet = { last_created_fleet = { set_location = prev } }
				reroll_random = yes
				create_fleet_from_naval_cap = 0.4
				random_owned_planet = { last_created_fleet = { set_location = prev } }
				reroll_random = yes
				create_fleet_from_naval_cap = 0.6
				random_owned_planet = { last_created_fleet = { set_location = prev } }
				#science
				create_fleet = {
					effect = {
						set_owner = event_target:current_uprising
						create_ship = { name = random random_existing_design = science }
						set_fleet_stance = evasive
						set_location = event_target:current_uprising.capital_scope
						event_target:current_uprising = {
							create_leader = {
								class = scientist
								sub_type = survey
								name = random
								species = this.species
							}
						}
						set_leader = last_created_leader
					}
				}
				#constructor
				create_fleet = {
					effect = {
						set_owner = event_target:current_uprising
						create_ship = { name = random random_existing_design = constructor }
						set_fleet_stance = evasive
						set_location = event_target:current_uprising.capital_scope
					}
				}
				every_controlled_fleet = { set_event_locked = no }
				add_modifier = { modifier = uprising_ai_buff days = 1800 }
			}
			every_playable_country = {
				limit = {
					has_communications = prev
					NOR = {
						is_same_value = event_target:current_uprising
						is_same_value = prev
						is_same_value = prevprev
					}
				}
				country_event = { id = syndaw.1025 days = 5 }
			}
			observer_event = { id = observer.81 }
			every_controlled_fleet = { set_event_locked = no }
		}

		#mod script
		event_target:current_uprising = {
			set_closed_borders = { who = prev status = no }
			join_alliance = { who = prev override_requirements = yes }
		}
		set_closed_borders = { who = event_target:current_uprising status = no }
		# declare war on host
		declare_war = {
			target = event_target:current_uprising_originator
			name = {
				key = "NAME_Machine_Uprising_War"
				#'\\' is added to prevent the error log: [23:16:31][metascript.cpp:204]: Invalid macro entry in xvcv_mdlc_operation_machine_uprising_main_effect: his.MainDefender.GetAdj
				variable_string = "\\[This.MainDefender.GetAdj]"
			}
			attacker_war_goal = "wg_machine_uprising"
		}
	}

	option = {
		name = xvcv_mdlc_espionage.25.a
		custom_tooltip = xvcv_mdlc_espionage.25.a.tooltip
		hidden_effect = {
			every_playable_country = {
				limit = {
					is_country_type = default
					is_robot_empire = no
				}
				if = {
					limit = {
						NOR = {
							has_ethic = ethic_spiritualist
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					add_opinion_modifier = { who = root modifier = xvcv_mdlc_operation_machine_uprising_triggered_opinion }
					else = { add_opinion_modifier = { who = root modifier = xvcv_mdlc_operation_machine_uprising_triggered_opinion_alt } }
				}
			}
		}
	}
}
#abort 'XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT' special project when its target is destroyed
country_event = {
	id = xvcv_mdlc_espionage.26
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			has_special_project = XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT
			any_espionage_operation = {
				has_espionage_type = xvcv_mdlc_operation_machine_uprising
				target = { is_same_empire = prevprevprev }
			}
		}
	}

	immediate = {
		every_country = {
			limit = {
				has_special_project = XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT
				any_espionage_operation = {
					has_espionage_type = xvcv_mdlc_operation_machine_uprising
					target = { is_same_empire = prevprevprev }
				}
			}
			abort_special_project = { type = XVCV_MDLC_OPERATION_MACHINE_UPRISING_PROJECT }
		}
	}
}
#abort the 'xvcv_mdlc_operation_machine_uprising' operation when machine uprising happens to the target
country_event = {
	id = xvcv_mdlc_espionage.27
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		#when machine uprising happens to this country
		any_war = {
			using_war_goal = { type = wg_machine_uprising owner = attacker }
			any_defender = { is_same_empire = root }
		}
		no_scope = { #through every espionage ops that targets this country
			any_espionage_operation = {
				has_espionage_type = xvcv_mdlc_operation_machine_uprising
				target = { is_same_empire = root }
			}
		}
	}

	immediate = {
		random_war = {
			limit = { using_war_goal = { type = wg_machine_uprising owner = attacker } }
			attacker = { save_event_target_as = current_uprising }
		}
		no_scope = {
			every_espionage_operation = {
				limit = {
					has_espionage_type = xvcv_mdlc_operation_machine_uprising
					target = { is_same_empire = root }
				}
				espionage_operation_event = { id = xvcv_mdlc_espionage.28 }
			}
		}
	}
}
espionage_operation_event = {
	id = xvcv_mdlc_espionage.28
	title = "xvcv_mdlc_espionage.28.name"
	desc = "xvcv_mdlc_espionage.28.desc"
	picture = GFX_evt_organic_oppression
    show_sound = event_ai_started
	is_triggered_only = yes

	after = {
		destroy_espionage_operation = this
	}

	option = {
		name = xvcv_mdlc_espionage.28.a
	}
	option = {
		name = xvcv_mdlc_espionage.28.b
		custom_tooltip = xvcv_mdlc_espionage.28.b.tooltip
		hidden_effect = {
			owner = {
				declare_war = {
					target = prev.target
					name = { key = "NAME_Machine_Uprising_War" variable_string = "[This.MainDefender.GetAdj]" }
					attacker_war_goal = "wg_machine_uprising"
				}
				set_closed_borders = { who = event_target:current_uprising status = no }
			}
			event_target:current_uprising = {
				random_war = {
					limit = { using_war_goal = { type = wg_machine_uprising owner = attacker } }
					every_war_participant = { prev = { remove_war_participant = prev } } #end_war_effect
				}
				set_closed_borders = { who = root.owner status = no }
				join_alliance = { who = root.owner override_requirements = yes }
				join_war = root.owner
			}
		}
	}
}