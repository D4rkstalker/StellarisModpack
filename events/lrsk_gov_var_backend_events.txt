# Government Variety Pack
# Events - Backend
# Author: littleraskol

# These events serve some general utility function.

namespace = lrsk_government_variety_pack_backend

# Adds a flag denoting this mod is in use, starts up mod-added origins.
event = {
	id = lrsk_government_variety_pack_backend.1
	hide_window = yes
	is_triggered_only = yes
	
	#trigger = { NOT = { has_global_flag = lrsk_government_variety_pack_mod_active } } 
	
	immediate = {
		set_global_flag = lrsk_government_variety_pack_mod_active
		set_global_flag = lrsk_government_variety_pack_live_version # Uncomment on release
		
		## Origins Setup

		# Fed start fix for GVP govs
		every_playable_country = {
			limit = {
				NOT = { has_global_flag = lrsk_federation_start_fix_mod_active } # In case I make a whole mod of this
				is_gestalt = no # probably unneeded but eh
				has_federation = yes # This is real JIC shit
				OR = {
					has_origin = origin_common_ground
					has_origin = origin_hegemon
				}
				is_authoritarian = no
				is_egalitarian = no
				lrsk_has_any_gvp_gov = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.4 }
		}

		# Galactic Backdoor
		every_playable_country = {
			limit = { has_origin = lrsk_gov_var_origin_galactic_backdoor }
			country_event = { id = lrsk_gov_var_galactic_backdoor.1 }
		}
		
		# Shroud-Touched
		every_playable_country = {
			limit = { has_origin = lrsk_gov_var_origin_shroud_touched }
			country_event = { id = lrsk_gov_var_shroud_touched.1 }
		}
		
		# For Discovery / Tradeways / Grand Alliance
		every_playable_country = {
			limit = { OR = { 
				has_origin = lrsk_gov_var_origin_for_discovery
				has_origin = lrsk_gov_var_origin_for_discovery_mi
				has_origin = lrsk_gov_var_origin_tradeways
				has_origin = lrsk_gov_var_origin_tradeways_mc
				has_origin = lrsk_gov_var_origin_grand_alliance
			} }
			country_event = { id = lrsk_gov_var_new_fed_starts.1 }
		}

		# Enhanced base game explainers
		every_playable_country = {
			limit = { 
				NOT = { has_global_flag = lrsk_gvp_enhanced_civics_off }
				lrsk_has_enhanced_valid_civic = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.101 days = 1 }
		}

		### Diagnostic checks
		#every_playable_country = {
		#	limit = { lrsk_has_any_gvp_gov = yes }
		#	country_event = { id = lrsk_government_variety_pack_backend.2001 days = 3 }
		#}
		#every_playable_country = {
		#	limit = { lrsk_has_any_gvp_civic = yes }
		#	country_event = { id = lrsk_government_variety_pack_backend.2002 days = 3 }
		#}
	}
}

# Fix for other mods possibly removing deposits. Should avoid the need for compatibility patches, etc.
# Every event that adds a starting planetary feature to the capital should call this to run after 2 days.
country_event = {
	id = lrsk_government_variety_pack_backend.2
	is_triggered_only = yes
	hide_window = yes

	# Structurally, this trigger is set up to facilitate adding "origin + flag" blocks. May be logically redundant but better safe than sorry...
	# Flags referred to here may not be used elsewhere but are pre-emptively checked in case I ever decide to add deposit-removing events, etc.
	trigger = {
		OR = {
			AND = {
				has_origin = lrsk_gov_var_origin_shroud_touched
				NOT = { has_country_flag = lrsk_gov_var_shroud_touched_lost_otherworld_pockets }
			}
			# Add other checks as needed...
		}
	}

	immediate = {
		# Most of these will check on capitals, since that's the most likely place for mod-added features.
		capital_scope = {
			switch = {
				trigger = has_planet_flag
				# Restore Otherworld Pockets if removed
				lrsk_gov_var_shroud_touched_capital = {
					IF = { limit = { NOT = { has_deposit = d_lrsk_gov_var_shroud_pockets } }
						add_deposit = d_lrsk_gov_var_shroud_pockets
					}
				}
				# Add other planet flags as needed...
			}
		}
	}
}

# Make sure that for origins that spawn new nearby empires, unlikely to be boxed in completely
country_event = {
	id = lrsk_government_variety_pack_backend.3
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			has_origin = lrsk_gov_var_origin_for_discovery
			has_origin = lrsk_gov_var_origin_for_discovery_mi
			has_origin = lrsk_gov_var_origin_tradeways
			has_origin = lrsk_gov_var_origin_tradeways_mc
			has_origin = lrsk_gov_var_origin_grand_alliance
			#has_origin = lrsk_gov_var_origin_uplift 			# very unlikely but eh
			#has_origin = lrsk_gov_var_origin_sublight_empire
			#has_origin = lrsk_gov_var_origin_sublight_commonwealth
			#has_origin = lrsk_gov_var_origin_other
		}
	}
	
	immediate = {
		if = {
			limit = {
				capital_scope = {
					solar_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			if = { limit = { exists = event_target:lrsk_hyperlane_system_1 }
				event_target:lrsk_hyperlane_system_1 = {
					if = { limit = { NOT = { any_neighbor_system = { NOT = { exists = owner } } } }
						if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_1
									type = euclidean
									min_distance >= 1
									max_distance <= 25
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
								NOT = { exists = owner }
							} }
							random_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_1
										type = euclidean
										min_distance >= 1
										max_distance <= 25
									}
									NOT = { has_hyperlane_to = this }
									NOT = { exists = owner }
								}
								save_event_target_as = lrsk_hyperlane_system_2
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
							}
						}
						else_if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_1
									type = euclidean
									min_distance > 25
									max_distance <= 50
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
								NOT = { exists = owner }
							} }
							random_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_1
										type = euclidean
										min_distance > 25
										max_distance <= 50
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
									NOT = { exists = owner }
								}
								save_event_target_as = lrsk_hyperlane_system_2
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
							}
						}					
					}
				}
			}
			if = { limit = { exists = event_target:lrsk_hyperlane_system_2 }
				event_target:lrsk_hyperlane_system_2 = {
					if = { limit = { NOT = { any_neighbor_system = { NOT = { exists = owner } } } }
						if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_2
									type = euclidean
									min_distance >= 1
									max_distance <= 25
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_2 }
								NOT = { exists = owner }
							} }
							random_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_2
										type = euclidean
										min_distance >= 1
										max_distance <= 25
									}
									NOT = { has_hyperlane_to = this }
									NOT = { exists = owner }
								}
								save_event_target_as = lrsk_hyperlane_system_3
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
							}
						}
					}
				}					
			}
		}
	}
}

# Catches problem with base game fed starts checking for base game governments...
country_event = {
	id = lrsk_government_variety_pack_backend.4
	#title = lrsk_government_variety_pack_backend.4.name
	#desc = lrsk_government_variety_pack_backend.4.desc
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { has_global_flag = lrsk_federation_start_fix_mod_active } # In case I make a whole mod of this
		is_gestalt = no # probably unneeded but eh
		has_federation = yes # This is real JIC shit
		OR = {
			has_origin = origin_common_ground
			has_origin = origin_hegemon
		}
		is_authoritarian = no
		is_egalitarian = no
		lrsk_has_any_gvp_gov = yes
	}

	immediate = {
		# Dunno if we can reach this point without one of these being true but...
		IF = {
			limit = { OR = {
				is_pacifist = yes
				is_materialist = yes
				is_spiritualist = yes
				is_militarist = yes
			} }
			federation = { every_member = {
				limit = {
					OR = {
						has_origin = origin_common_ground_npc
						has_origin = origin_hegemon_npc
					}
					NOT = { has_country_flag = lrsk_fed_npc_fixed }
				}

				random_list = {
					1 = { 
						modifier = {
							factor = 0
							root = { is_pacifist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_pacifist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_pacifist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_pacifist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_pacifist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_pacifist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
					1 = { 
						modifier = {
							factor = 0
							root = { is_spiritualist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_spiritualist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_spiritualist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_spiritualist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_spiritualist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_spiritualist
								country_add_ethic = ethic_authoritarian
							}
						}
						country_add_ethic = ethic_xenophile
						country_add_ethic = ethic_fanatic_spiritualist
					}
					1 = { 					 
						modifier = {
							factor = 0
							root = { is_militarist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_militarist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_militarist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_militarist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_militarist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_militarist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
					1 = { 					 
						modifier = {
							factor = 0
							root = { is_materialist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_materialist }
						}
						
						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_materialist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_materialist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_materialist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_materialist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
				}

				change_government = {
					authority = random
					civics = random
				}
				set_name = random

				set_country_flag = lrsk_fed_npc_fixed
			} }
		}
	}
}

# Explainers
country_event = {
	id = lrsk_government_variety_pack_backend.101
	title = lrsk_government_variety_pack_backend.101.name
	desc = lrsk_government_variety_pack_backend.101.desc
	picture = GFX_evt_lrsk_gvp_explain_enhanced_civics
	is_triggered_only = yes
	location = this.capital_scope

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_enhanced_civics_off }
		lrsk_has_enhanced_valid_civic = yes
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.milcorp
		trigger = { OR = {
			has_valid_civic = civic_naval_contractors
			has_valid_civic = civic_private_military_companies
		} }
		hidden_effect = {
			set_country_flag = lrsk_explainer_milcorp
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.media
		trigger = { has_valid_civic = civic_media_conglomerate }
		hidden_effect = {
			set_country_flag = lrsk_explainer_media
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.prosp
		trigger = { has_valid_civic = civic_private_prospectors }
		hidden_effect = {
			set_country_flag = lrsk_explainer_prosp
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.indent
		trigger = { has_valid_civic = civic_indentured_assets }
		hidden_effect = {
			set_country_flag = lrsk_explainer_indent
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.end
	}
}
country_event = {
	id = lrsk_government_variety_pack_backend.102
	title = lrsk_government_variety_pack_backend.102.name
	picture = GFX_evt_lrsk_gvp_explain_enhanced_civics
	is_triggered_only = yes
	location = this.capital_scope

	desc = {
		trigger = {
			hidden:root = {
				switch = {
					trigger = has_country_flag
					lrsk_explainer_milcorp = { text = lrsk_government_variety_pack_backend.102.milcorp }
					lrsk_explainer_media = { text = lrsk_government_variety_pack_backend.102.media }
					lrsk_explainer_prosp = { text = lrsk_government_variety_pack_backend.102.prosp }
					lrsk_explainer_indent = { text = lrsk_government_variety_pack_backend.102.indent }
					default = { text = lrsk_government_variety_pack_backend.101.error }
				}
			}
		}
	}

	option = { 
		name = OK
		hidden_effect = {
			switch = {
				trigger = has_country_flag
				lrsk_explainer_milcorp = { remove_country_flag = lrsk_explainer_milcorp }
				lrsk_explainer_media = { remove_country_flag = lrsk_explainer_media }
				lrsk_explainer_prosp = { remove_country_flag = lrsk_explainer_prosp }
				lrsk_explainer_indent = { remove_country_flag = lrsk_explainer_indent }
			}
			country_event = { id = lrsk_government_variety_pack_backend.101 }
		}
	}
	
}

# Diagnostic: General test event mostly to test when events can be called.
country_event = {
	id = lrsk_government_variety_pack_backend.2000
	title = lrsk_government_variety_pack_backend.2000.name
	desc = lrsk_government_variety_pack_backend.2000.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}

# Diagnostic: Check to see if player has GVP govtype
country_event = {
	id = lrsk_government_variety_pack_backend.2001
	title = lrsk_government_variety_pack_backend.2001.name
	desc = lrsk_government_variety_pack_backend.2001.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}

# Diagnostic: Check to see if player has GVP civic
country_event = {
	id = lrsk_government_variety_pack_backend.2002
	title = lrsk_government_variety_pack_backend.2002.name
	desc = lrsk_government_variety_pack_backend.2002.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}