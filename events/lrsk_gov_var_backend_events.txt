# Government Variety Pack
# Events - Backend
# Author: littleraskol

# These events serve some general utility function.

namespace = lrsk_government_variety_pack_backend

# Adds a flag denoting this mod is in use, starts up mod-added origins.
event = {
	id = lrsk_government_variety_pack_backend.1
	hide_window = yes
	is_triggered_only = yes
	
	#trigger = { NOT = { has_global_flag = lrsk_government_variety_pack_mod_active } } 
	
	immediate = {
		set_global_flag = lrsk_government_variety_pack_mod_active
		set_global_flag = lrsk_government_variety_pack_live_version # Uncomment on release

		## Starting Civics setup

		# Shapers/Artificers/Essentialists
		every_playable_country = {
			limit = {
				lrsk_has_gvp_techideology_valid_civic = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.5 }
		}
		
		## Origins Setup

		# Fed start fix for GVP govs
		every_playable_country = {
			limit = {
				NOT = { has_global_flag = lrsk_federation_start_fix_mod_active } # In case I make a whole mod of this
				is_gestalt = no # probably unneeded but eh
				has_federation = yes # This is real JIC shit
				OR = {
					has_origin = origin_common_ground
					has_origin = origin_hegemon
				}
				is_authoritarian = no
				is_egalitarian = no
				lrsk_has_any_gvp_gov = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.4 }
		}

		# Galactic Backdoor
		every_playable_country = {
			limit = { has_origin = lrsk_gov_var_origin_galactic_backdoor }
			country_event = { id = lrsk_gov_var_galactic_backdoor.1 }
		}
		
		# Shroud-Touched
		every_playable_country = {
			limit = { has_origin = lrsk_gov_var_origin_shroud_touched }
			country_event = { id = lrsk_gov_var_shroud_touched.1 }
		}
		
		# For Discovery / Tradeways / Grand Alliance / Convended by Providence
		every_playable_country = {
			limit = { OR = { 
				has_origin = lrsk_gov_var_origin_for_discovery
				has_origin = lrsk_gov_var_origin_for_discovery_mi
				has_origin = lrsk_gov_var_origin_tradeways
				has_origin = lrsk_gov_var_origin_tradeways_mc
				has_origin = lrsk_gov_var_origin_grand_alliance
				has_origin = lrsk_gvp_origin_convened_providence
			} }
			country_event = { id = lrsk_gov_var_new_fed_starts.1 }
		}
		
		# Uplift
		every_playable_country = {
			limit = { has_origin = lrsk_gov_var_origin_uplift }
			country_event = { id = lrsk_gov_var_uplift.1 }
		}
		
		## Sublight Empire/Commonwealth
		#every_playable_country = {
		#	limit = {
		#		lrsk_gov_var_has_sublight_overlord_origin = yes
		#	}
		#	country_event = { id = lrsk_gov_var_sublight_origins.1 }
		#}

		## Escape routes for possible boxed-in starts

		## Find escape routes for human players first
		#every_playable_country = {
		#	limit = {
		#		lrsk_gvp_has_boxed_in_origin = yes
		#		lrsk_has_gvp_npc_origin = no
		#	}
		#	country_event = { id = lrsk_government_variety_pack_backend.3 }
		#}
		#
		## Find escape routes for AI players last
		#every_playable_country = {
		#	limit = {
		#		lrsk_gvp_has_boxed_in_origin = yes
		#		lrsk_has_gvp_npc_origin = yes
		#	}
		#	country_event = { id = lrsk_government_variety_pack_backend.3 }
		#}

		## Escape routes for possible boxed-in starts

		# Extreme cludge alert: explicitly mark initially owned systems...
		every_country = {
			if = { limit = { exists = capital_scope }
				capital_scope.solar_system = {
					lrsk_mark_owned_system = yes
				}
			}
			every_system_within_border = {
				lrsk_mark_owned_system = yes
			}
		}

		# Find escape routes for human players first
		every_playable_country = {
			limit = {
				is_ai = no
				lrsk_gvp_has_boxed_in_origin = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.3 }
		}

		# Find escape routes for AI players last
		every_playable_country = {
			limit = {
				is_ai = yes
				lrsk_gvp_has_boxed_in_origin = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.3 }
		}

		## Explainers if not called elsewhere

		# Colonial Chartering
		every_playable_country = {
			limit = { has_valid_civic = lrsk_gov_var_civic_mc_chart_corp_board }
			country_event = { id = lrsk_gov_var_chartered.101 days = 2}
		}

		# Imperial Economy
		every_playable_country = {
			limit = {
				is_ai = no
				has_valid_civic = lrsk_gov_var_civic_imperial_economy
			}
			country_event = { id = lrsk_gov_var_impecon.101 days = 2}
		}

		# Colonial Fiefs
		every_playable_country = {
			limit = {
				is_ai = no
				has_valid_civic = lrsk_gov_var_civic_colonial_fiefs
			}
			country_event = { id = lrsk_gov_var_colfief.101 days = 2}
		}

		# Enhanced base game explainers
		every_playable_country = {
			limit = {
				is_ai = no
				NOT = { has_global_flag = lrsk_gvp_enhanced_civics_off }
				lrsk_has_enhanced_valid_civic = yes
			}
			country_event = { id = lrsk_government_variety_pack_backend.101 days = 1 }
		}

		### Diagnostic checks
		#every_playable_country = {
		#	limit = { lrsk_has_any_gvp_gov = yes }
		#	country_event = { id = lrsk_government_variety_pack_backend.2001 days = 3 }
		#}
		#every_playable_country = {
		#	limit = { lrsk_has_any_gvp_civic = yes }
		#	country_event = { id = lrsk_government_variety_pack_backend.2002 days = 3 }
		#}
	}
}

# Fix for other mods possibly removing deposits. Should avoid the need for compatibility patches, etc.
# Every event that adds a starting planetary feature to the capital should call this to run after 2 days.
country_event = {
	id = lrsk_government_variety_pack_backend.2
	is_triggered_only = yes
	hide_window = yes

	# Structurally, this trigger is set up to facilitate adding "origin + flag" blocks. May be logically redundant but better safe than sorry...
	# Flags referred to here may not be used elsewhere but are pre-emptively checked in case I ever decide to add deposit-removing events, etc.
	trigger = {
		OR = {
			AND = {
				has_origin = lrsk_gov_var_origin_shroud_touched
				NOT = { has_country_flag = lrsk_gov_var_shroud_touched_lost_otherworld_pockets }
			}
			# Add other checks as needed...
		}
	}

	immediate = {
		# Most of these will check on capitals, since that's the most likely place for mod-added features.
		capital_scope = {
			switch = {
				trigger = has_planet_flag
				# Restore Otherworld Pockets if removed
				lrsk_gov_var_shroud_touched_capital = {
					IF = { limit = { NOT = { has_deposit = d_lrsk_gov_var_shroud_pockets } }
						add_deposit = d_lrsk_gov_var_shroud_pockets
					}
				}
				# Add other planet flags as needed...
			}
		}
	}
}

# Make sure that for origins that spawn new nearby empires, unlikely to be boxed in completely
country_event = {
	id = lrsk_government_variety_pack_backend.3
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		lrsk_gvp_has_boxed_in_origin = yes
	}
	
	immediate = { capital_scope.solar_system = {
		if = {
			limit = { NOT = { any_neighbor_system = { lrsk_can_be_my_hyperlane_escape_route = yes } } }
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 35
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
				}
				closest_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 35
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
					lrsk_mark_escape_route = yes
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 35
							max_distance <= 70
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
				}
				closest_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 35
							max_distance <= 70
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
					lrsk_mark_escape_route = yes
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 70
							max_distance <= 100
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
				}
				closest_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 70
							max_distance <= 100
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
					lrsk_mark_escape_route = yes
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
				}
				closest_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
					lrsk_mark_escape_route = yes
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 4000
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
				}
				closest_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 4000
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						lrsk_can_be_my_hyperlane_escape_route = yes
					}
					save_event_target_as = lrsk_hyperlane_system_1
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
					lrsk_mark_escape_route = yes
				}
			}
			if = { limit = { exists = event_target:lrsk_hyperlane_system_1 }
				log = "[event_target:lrsk_hyperlane_system_1.GetName] is the first escape route system."
				event_target:lrsk_hyperlane_system_1 = {
					if = { limit = { NOT = { any_neighbor_system = { lrsk_can_be_my_hyperlane_escape_route = yes } } }
						if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_1
									type = euclidean
									min_distance >= 1
									max_distance <= 30
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
								lrsk_can_be_my_hyperlane_escape_route = yes
							} }
							closest_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_1
										type = euclidean
										min_distance >= 1
										max_distance <= 30
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								}
								save_event_target_as = lrsk_hyperlane_system_2
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
								lrsk_mark_escape_route = yes
							}
						}
						else_if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_1
									type = euclidean
									min_distance > 30
									max_distance <= 60
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
								lrsk_can_be_my_hyperlane_escape_route = yes
							} }
							closest_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_1
										type = euclidean
										min_distance > 30
										max_distance <= 60
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								}
								save_event_target_as = lrsk_hyperlane_system_2
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
								lrsk_mark_escape_route = yes
							}
						}
						else_if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_1
									type = euclidean
									min_distance > 50
									max_distance <= 5000
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
								lrsk_can_be_my_hyperlane_escape_route = yes
							} }
							closest_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_1
										type = euclidean
										min_distance > 50
										max_distance <= 5000
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								}
								save_event_target_as = lrsk_hyperlane_system_2
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_1
								}
								lrsk_mark_escape_route = yes
							}
						}
					}
					else = { every_neighbor_system = { limit = { lrsk_can_be_my_hyperlane_escape_route = yes }
						if = { limit = { NOT = { any_neighbor_system = { lrsk_can_be_my_hyperlane_escape_route = yes } } }
							save_event_target_as = lrsk_hyperlane_system_4
							if = {
								limit = { any_system = {
									distance = {
										source = event_target:lrsk_hyperlane_system_4
										type = euclidean
										min_distance >= 1
										max_distance <= 25
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								} }
								closest_system = {
									limit = { 
										distance = {
											source = event_target:lrsk_hyperlane_system_4
											type = euclidean
											min_distance >= 1
											max_distance <= 25
										}
										NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
										lrsk_can_be_my_hyperlane_escape_route = yes
									}
									save_event_target_as = lrsk_hyperlane_system_2
									add_hyperlane = {
										from = this
										to = event_target:lrsk_hyperlane_system_4
									}
									lrsk_mark_escape_route = yes
								}
							}
							else_if = {
								limit = { any_system = {
									distance = {
										source = event_target:lrsk_hyperlane_system_4
										type = euclidean
										min_distance > 25
										max_distance <= 50
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								} }
								closest_system = {
									limit = { 
										distance = {
											source = event_target:lrsk_hyperlane_system_4
											type = euclidean
											min_distance > 25
											max_distance <= 50
										}
										NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
										lrsk_can_be_my_hyperlane_escape_route = yes
									}
									save_event_target_as = lrsk_hyperlane_system_2
									add_hyperlane = {
										from = this
										to = event_target:lrsk_hyperlane_system_4
									}
									lrsk_mark_escape_route = yes
								}
							}
							else_if = {
								limit = { any_system = {
									distance = {
										source = event_target:lrsk_hyperlane_system_4
										type = euclidean
										min_distance > 50
										max_distance <= 5000
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								} }
								closest_system = {
									limit = { 
										distance = {
											source = event_target:lrsk_hyperlane_system_4
											type = euclidean
											min_distance > 50
											max_distance <= 5000
										}
										NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_4 }
										lrsk_can_be_my_hyperlane_escape_route = yes
									}
									save_event_target_as = lrsk_hyperlane_system_2
									add_hyperlane = {
										from = this
										to = event_target:lrsk_hyperlane_system_4
									}
									lrsk_mark_escape_route = yes
								}
							}
						}
						else = { every_neighbor_system = {
							limit = { lrsk_can_be_my_hyperlane_escape_route = yes }
							lrsk_mark_escape_route = yes	
						} }
						lrsk_mark_escape_route = yes				
					} }
				}
			}
			if = {
				limit = { exists = event_target:lrsk_hyperlane_system_2 }
				log = "[event_target:lrsk_hyperlane_system_2.GetName] is the second escape route system."
				event_target:lrsk_hyperlane_system_2 = {
					if = { limit = { NOT = { any_neighbor_system = { lrsk_can_be_my_hyperlane_escape_route = yes } } }
						if = {
							limit = { any_system = {
								distance = {
									source = event_target:lrsk_hyperlane_system_2
									type = euclidean
									min_distance >= 1
									max_distance <= 75
								}
								NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_2 }
								lrsk_can_be_my_hyperlane_escape_route = yes
							} }
							closest_system = {
								limit = { 
									distance = {
										source = event_target:lrsk_hyperlane_system_2
										type = euclidean
										min_distance >= 1
										max_distance <= 75
									}
									NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_2 }
									lrsk_can_be_my_hyperlane_escape_route = yes
								}
								add_hyperlane = {
									from = this
									to = event_target:lrsk_hyperlane_system_2
								}
								lrsk_mark_escape_route = yes
							}
						}
						lrsk_mark_hyperlane_escape_routes = yes
					}
				}					
			}
		}
		else = { every_neighbor_system = { limit = { lrsk_can_be_my_hyperlane_escape_route = yes }
			if = { limit = { NOT = { any_neighbor_system = { lrsk_can_be_my_hyperlane_escape_route = yes } } }
				save_event_target_as = lrsk_hyperlane_system_1
				if = {
					limit = { any_system = {
						distance = {
							source = event_target:lrsk_hyperlane_system_1
							type = euclidean
							min_distance >= 1
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
						lrsk_can_be_my_hyperlane_escape_route = yes
					} }
					closest_system = {
						limit = { 
							distance = {
								source = event_target:lrsk_hyperlane_system_1
								type = euclidean
								min_distance >= 1
								max_distance <= 25
							}
							NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
							lrsk_can_be_my_hyperlane_escape_route = yes
						}
						save_event_target_as = lrsk_hyperlane_system_2
						add_hyperlane = {
							from = this
							to = event_target:lrsk_hyperlane_system_1
						}
						lrsk_mark_escape_route = yes
					}
				}
				else_if = {
					limit = { any_system = {
						distance = {
							source = event_target:lrsk_hyperlane_system_1
							type = euclidean
							min_distance > 25
							max_distance <= 50
						}
						NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
						lrsk_can_be_my_hyperlane_escape_route = yes
					} }
					closest_system = {
						limit = { 
							distance = {
								source = event_target:lrsk_hyperlane_system_1
								type = euclidean
								min_distance > 25
								max_distance <= 50
							}
							NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
							lrsk_can_be_my_hyperlane_escape_route = yes
						}
						save_event_target_as = lrsk_hyperlane_system_2
						add_hyperlane = {
							from = this
							to = event_target:lrsk_hyperlane_system_1
						}
						lrsk_mark_escape_route = yes
					}
				}
				else_if = {
					limit = { any_system = {
						distance = {
							source = event_target:lrsk_hyperlane_system_1
							type = euclidean
							min_distance > 50
							max_distance <= 5000
						}
						NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
						lrsk_can_be_my_hyperlane_escape_route = yes
					} }
					closest_system = {
						limit = { 
							distance = {
								source = event_target:lrsk_hyperlane_system_1
								type = euclidean
								min_distance > 50
								max_distance <= 5000
							}
							NOT = { has_hyperlane_to = event_target:lrsk_hyperlane_system_1 }
							lrsk_can_be_my_hyperlane_escape_route = yes
						}
						save_event_target_as = lrsk_hyperlane_system_2
						add_hyperlane = {
							from = this
							to = event_target:lrsk_hyperlane_system_1
						}
						lrsk_mark_escape_route = yes
					}
				}
			}
			else = { every_neighbor_system = {
				limit = { lrsk_can_be_my_hyperlane_escape_route = yes }
				lrsk_mark_escape_route = yes	
			} }
			lrsk_mark_escape_route = yes				
		} }
	} }
}

# Catches problem with base game fed starts checking for base game governments...
country_event = {
	id = lrsk_government_variety_pack_backend.4
	#title = lrsk_government_variety_pack_backend.4.name
	#desc = lrsk_government_variety_pack_backend.4.desc
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { has_global_flag = lrsk_federation_start_fix_mod_active } # In case I make a whole mod of this
		is_gestalt = no # probably unneeded but eh
		has_federation = yes # This is real JIC shit
		OR = {
			has_origin = origin_common_ground
			has_origin = origin_hegemon
		}
		is_authoritarian = no
		is_egalitarian = no
		lrsk_has_any_gvp_gov = yes
	}

	immediate = {
		# Dunno if we can reach this point without one of these being true but...
		IF = {
			limit = { OR = {
				is_pacifist = yes
				is_materialist = yes
				is_spiritualist = yes
				is_militarist = yes
			} }
			federation = { every_member = {
				limit = {
					OR = {
						has_origin = origin_common_ground_npc
						has_origin = origin_hegemon_npc
					}
					NOT = { has_country_flag = lrsk_fed_npc_fixed }
				}

				random_list = {
					1 = { 
						modifier = {
							factor = 0
							root = { is_pacifist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_pacifist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_pacifist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_pacifist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_pacifist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_pacifist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
					1 = { 
						modifier = {
							factor = 0
							root = { is_spiritualist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_spiritualist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_spiritualist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_spiritualist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_spiritualist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_spiritualist
								country_add_ethic = ethic_authoritarian
							}
						}
						country_add_ethic = ethic_xenophile
						country_add_ethic = ethic_fanatic_spiritualist
					}
					1 = { 					 
						modifier = {
							factor = 0
							root = { is_militarist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_militarist }
						}

						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_militarist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_militarist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_militarist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_militarist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
					1 = { 					 
						modifier = {
							factor = 0
							root = { is_materialist = no }
						}
						modifier = {
							factor = 2
							root = { has_ethic = ethic_fanatic_materialist }
						}
						
						lrsk_remove_all_ethics = yes
						random_list = {
							2 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_fanatic_materialist
							}
							2 = {
								country_add_ethic = ethic_fanatic_xenophile
								country_add_ethic = ethic_materialist
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_materialist
								country_add_ethic = ethic_egalitarian
							}
							1 = {
								country_add_ethic = ethic_xenophile
								country_add_ethic = ethic_materialist
								country_add_ethic = ethic_authoritarian
							}
						}
					}
				}

				change_government = {
					authority = random
					civics = random
				}
				set_name = random

				set_country_flag = lrsk_fed_npc_fixed
			} }
		}
	}
}

# Add the required starting tech for Shapers/Artificers/Mechanists
country_event = {
	id = lrsk_government_variety_pack_backend.5
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		lrsk_has_gvp_techideology_valid_civic = yes
	}

	immediate = {
		switch = {
			trigger = has_valid_civic
			lrsk_adv_civ_civic_shapers = { give_technology = { message = no tech = tech_eco_simulation } }
			lrsk_adv_civ_civic_artificers = { give_technology = { message = no tech = tech_powered_exoskeletons } }
			lrsk_adv_civ_civic_artificers = { give_technology = { message = no tech = tech_robotic_workers } }
			lrsk_adv_civ_civic_essentialists = { give_technology = { message = no tech = tech_fusion_power } }
		}
	}
}

# Explainers
country_event = {
	id = lrsk_government_variety_pack_backend.101
	title = lrsk_government_variety_pack_backend.101.name
	desc = lrsk_government_variety_pack_backend.101.desc
	picture = GFX_evt_lrsk_gvp_explain_enhanced_civics
	is_triggered_only = yes
	location = this.capital_scope

	trigger = {
		NOT = { has_global_flag = lrsk_gvp_enhanced_civics_off }
		lrsk_has_enhanced_valid_civic = yes
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.milcorp
		trigger = { OR = {
			has_valid_civic = civic_naval_contractors
			has_valid_civic = civic_private_military_companies
		} }
		hidden_effect = {
			set_country_flag = lrsk_explainer_milcorp
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.media
		trigger = { has_valid_civic = civic_media_conglomerate }
		hidden_effect = {
			set_country_flag = lrsk_explainer_media
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.prosp
		trigger = { has_valid_civic = civic_private_prospectors }
		hidden_effect = {
			set_country_flag = lrsk_explainer_prosp
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.indent
		trigger = { has_valid_civic = civic_indentured_assets }
		hidden_effect = {
			set_country_flag = lrsk_explainer_indent
			country_event = { id = lrsk_government_variety_pack_backend.102 }
		}
	}

	option = { 
		name = lrsk_government_variety_pack_backend.101.end
	}
}
country_event = {
	id = lrsk_government_variety_pack_backend.102
	title = lrsk_government_variety_pack_backend.102.name
	picture = GFX_evt_lrsk_gvp_explain_enhanced_civics
	is_triggered_only = yes
	location = this.capital_scope

	desc = {
		trigger = {
			hidden:root = {
				switch = {
					trigger = has_country_flag
					lrsk_explainer_milcorp = { text = lrsk_government_variety_pack_backend.102.milcorp }
					lrsk_explainer_media = { text = lrsk_government_variety_pack_backend.102.media }
					lrsk_explainer_prosp = { text = lrsk_government_variety_pack_backend.102.prosp }
					lrsk_explainer_indent = { text = lrsk_government_variety_pack_backend.102.indent }
					default = { text = lrsk_government_variety_pack_backend.101.error }
				}
			}
		}
	}

	option = { 
		name = OK
		hidden_effect = {
			switch = {
				trigger = has_country_flag
				lrsk_explainer_milcorp = { remove_country_flag = lrsk_explainer_milcorp }
				lrsk_explainer_media = { remove_country_flag = lrsk_explainer_media }
				lrsk_explainer_prosp = { remove_country_flag = lrsk_explainer_prosp }
				lrsk_explainer_indent = { remove_country_flag = lrsk_explainer_indent }
			}
			country_event = { id = lrsk_government_variety_pack_backend.101 }
		}
	}
	
}

## Civic Cleanup Tasks

# Utilitarian Planning: Remove work plan if no unemployment
planet_event = {
	id = lrsk_government_variety_pack_backend.1000
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_modifier = lrsk_gvp_statmod_work_plan
	}

	immediate = {
		IF = {
			limit  = {			
				count_owned_pop = {
					limit = { is_unemployed = yes  }
					count < 1
				}
			}
			remove_modifier = lrsk_gvp_statmod_work_plan
		}
		ELSE = {
			planet_event = {
				id = lrsk_government_variety_pack_backend.1000
				days = 30
			}
		}
	}
}

# Royal Absolutism: Special effects
# TBD: Make a diplomatic or "paragon leader" framed event? 
country_event = {
	id = lrsk_government_variety_pack_backend.1002
	title = lrsk_government_variety_pack_backend.1002.name
	desc = lrsk_government_variety_pack_backend.1002.desc
	picture = GFX_evt_arguing_senate
	is_triggered_only = yes

	trigger = {
		has_valid_civic = lrsk_gov_var_civic_royal_absolutism
	}

	immediate = {
		# Calculate factors
		
		set_variable = { which = lrsk_num_rj_applicable_planets value = 0 }
		every_owned_planet = {
			limit = {
				is_capital = no
				num_pops > 2
				NOT = { has_building = building_colony_shelter }
			}
			root = { change_variable = { which = lrsk_num_rj_applicable_planets value = 1 } }
		}

		set_variable = { which = lrsk_num_rj_empire_pops value = 0 }
		every_owned_pop = {
			limit = {
				is_enslaved = no
			}
			root = { change_variable = { which = lrsk_num_rj_empire_pops value = 1 } }
		}

		set_variable = { which = lrsk_ruler_level value = 0 }
		set_variable = { which = lrsk_ruler_level_factor value = 1 }
		export_trigger_value_to_variable = {
			trigger = get_councilor_level
			parameters = {
				type = councilor_ruler_imperial
			}
			variable = lrsk_ruler_level
		}
		# The idea is that every ruler level reduces the cost of something by 10%
		WHILE = {
			limit = {
				check_variable = { which = lrsk_ruler_level value > 1 }
				check_variable = { which = lrsk_ruler_level_factor value > 0.1 }
			}
			
			subtract_variable = { which = lrsk_ruler_level_factor value = 0.1 }
			subtract_variable = { which = lrsk_ruler_level value = 1 }
		}
	}

	option = {
		name = lrsk_government_variety_pack_backend.1002.a
		custom_tooltip = lrsk_government_variety_pack_backend.1002.a.tooltip
		
		add_monthly_resource_mult = {
			resource = influence
			value = 50
			min = 125
			max = 300
		}
		
		add_monthly_resource_mult = {
			resource = unity
			value = 5
			min = 200
			max = 1000
		}
	}
	
	option = {
		name = lrsk_government_variety_pack_backend.1002.b
		custom_tooltip = lrsk_government_variety_pack_backend.1002.b.tooltip

		trigger = {
			any_owned_planet = {
				is_capital = no
				num_pops > 2
				NOT = { has_building = building_colony_shelter }
			}
		}

		allow = {
			resource_stockpile_compare = {
				resource = consumer_goods
				value > 300
				mult = lrsk_num_rj_applicable_planets
			}
		}

		add_resource = {
			consumer_goods = -300
			mult = lrsk_num_rj_applicable_planets
		}

		hidden_effect = {
			add_modifier = {
				modifier = lrsk_gvp_empire_new_aristos
				days = 1800
			}
			capital_scope = {
				add_modifier = {
					modifier = lrsk_gvp_statmod_pleased_new_aristos
					days = 1800
				}
			}
			every_owned_planet = {
				limit = {
					is_capital = no
					num_pops > 2
					NOT = { has_building = building_colony_shelter }
				}
				add_modifier = {
					modifier = lrsk_gvp_statmod_resent_new_aristos
					days = 1800
				}
			}
		}
	}
	
	option = {
		name = lrsk_government_variety_pack_backend.1002.c
		custom_tooltip = lrsk_government_variety_pack_backend.1002.c.tooltip

		trigger = {
			any_owned_pop = {
				is_enslaved = no	# Almost certainly true but eh
			}
		}

		allow = {
			resource_stockpile_compare = {
				resource = energy
				value > 20
				mult = lrsk_num_rj_empire_pops
			}
		}

		add_resource = {
			energy = -20
			mult = lrsk_num_rj_empire_pops
		}

		hidden_effect = {
			add_modifier = {
				modifier = lrsk_gvp_empire_estates_general
				days = 1800
			}
			capital_scope = {
				add_modifier = {
					modifier = lrsk_gvp_statmod_estates_session
					days = 1800
				}
			}
		}
	}
	
	option = {
		name = lrsk_government_variety_pack_backend.1002.d
		custom_tooltip = lrsk_government_variety_pack_backend.1002.d.tooltip

		trigger = {
			is_at_war = no
			NOT  = { any_owned_planet = { planet_crime >= 30 } }
			NOT  = { any_owned_planet = { planet_stability <= 40 } }
		}

		allow = {
			has_resource = {
				amount >= 200
				type = influence
			}
		}
		add_resource = { influence = -200 }

		hidden_effect = {
			add_modifier = {
				modifier = lrsk_gvp_empire_national_peril
				days = 1800
			}
		}
	}
	
	option = {
		name = lrsk_government_variety_pack_backend.1002.e
		custom_tooltip = lrsk_government_variety_pack_backend.1002.e.tooltip

		trigger = { OR = {
			is_at_war = yes
			any_owned_planet = { planet_crime >= 30 }
			any_owned_planet = { planet_stability <= 40 }
		} }

		allow = {
			has_resource = {
				amount >= 100
				type = influence
			}
		}
		add_resource = { influence = -100 }

		hidden_effect = {
			add_modifier = {
				modifier = lrsk_gvp_empire_national_peril
				days = 1800
			}
		}
	}

	option = {
		name = lrsk_government_variety_pack_backend.1002.f
		custom_tooltip = lrsk_government_variety_pack_backend.1002.f.tooltip

		trigger = { ruler = { NOR = {
			has_trait = leader_trait_reformer
			has_trait = leader_trait_reformer_2
			has_trait = leader_trait_reformer_3
		} } }

		allow = {
			resource_stockpile_compare = {
				resource = influence
				value > 300
				mult = lrsk_ruler_level_factor
			}
		}

		add_resource = {
			influence = -300
			mult = lrsk_ruler_level_factor
		}

		hidden_effect = {
			reset_policy_cooldowns = yes
		}
	}

	#TBD: Option like the previous, but it is half cost and only for rulers with Reformer.
	option = {
		name = lrsk_government_variety_pack_backend.1002.f
		custom_tooltip = lrsk_government_variety_pack_backend.1002.f.tooltip

		trigger = { ruler = { OR = {
			has_trait = leader_trait_reformer
			has_trait = leader_trait_reformer_2
			has_trait = leader_trait_reformer_3
		} } }

		allow = {
			resource_stockpile_compare = {
				resource = influence
				value > 150
				mult = lrsk_ruler_level_factor
			}
		}

		add_resource = {
			influence = -150
			mult = lrsk_ruler_level_factor
		}

		hidden_effect = {
			reset_policy_cooldowns = yes
		}
	}

	#option = {
	#	name = lrsk_government_variety_pack_backend.1002.h
	#	custom_tooltip = lrsk_government_variety_pack_backend.1002.h.tooltip
	#
	#	trigger = { ruler = { NOR = {
	#		has_trait = leader_trait_reformer
	#		has_trait = leader_trait_reformer_2
	#		has_trait = leader_trait_reformer_3
	#	} } }
	#
	#	allow = {
	#		resource_stockpile_compare = {
	#			resource = influence
	#			value > 750
	#			mult = lrsk_ruler_level_factor
	#		}
	#		resource_stockpile_compare = {
	#			resource = unity
	#			value > 750
	#			mult = lrsk_ruler_level_factor
	#		}
	#	}
	#
	#	add_resource = {
	#		influence = -750
	#		mult = lrsk_ruler_level_factor
	#	}
	#
	#	add_resource = {
	#		unity = -750
	#		mult = lrsk_ruler_level_factor
	#	}
	#
	#	hidden_effect = {
	#		reset_policy_cooldowns = yes
	#		set_government_cooldown = no
	#	}
	#}
	#
	##TBD: Option like the previous, but it is 2/3 cost and only for rulers with Reformer.
	#option = {
	#	name = lrsk_government_variety_pack_backend.1002.h
	#	custom_tooltip = lrsk_government_variety_pack_backend.1002.h.tooltip
	#
	#	trigger = { ruler = { OR = {
	#		has_trait = leader_trait_reformer
	#		has_trait = leader_trait_reformer_2
	#		has_trait = leader_trait_reformer_3
	#	} } }
	#
	#	allow = {
	#		resource_stockpile_compare = {
	#			resource = influence
	#			value > 500
	#			mult = lrsk_ruler_level_factor
	#		}
	#		resource_stockpile_compare = {
	#			resource = unity
	#			value > 500
	#			mult = lrsk_ruler_level_factor
	#		}
	#	}
	#
	#	add_resource = {
	#		influence = -500
	#		mult = lrsk_ruler_level_factor
	#	}
	#
	#	add_resource = {
	#		unity = -500
	#		mult = lrsk_ruler_level_factor
	#	}
	#
	#	hidden_effect = {
	#		reset_policy_cooldowns = yes
	#		set_government_cooldown = no
	#	}
	#}
}

#Royal Absolutism Councilor: Monthly event that feeds exp to an heir, if an heir exists.
country_event = {
	id = lrsk_government_variety_pack_backend.1003
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_councilor = { COUNCILOR = "lrsk_gvp_royal_absolutism_councilor" }
		OR = {
			any_owned_leader = { is_heir = yes }
			any_pool_leader = { is_heir = yes }
		}
	}

	immediate = {
		set_variable = { which = lrsk_ra_councilor_lvl_factor value = 0 }
		export_trigger_value_to_variable = {
			trigger = get_councilor_level
			parameters = {
				type = lrsk_gvp_royal_absolutism_councilor
			}
			variable = lrsk_ra_councilor_lvl_factor
		}
		multiply_variable = { which = lrsk_ra_councilor_lvl_factor value = 0.05 }

		random_owned_leader = {
			limit = { is_heir = yes }
			add_experience = root.lrsk_ra_councilor_lvl_factor
			root = { 
				set_timed_country_flag = {
					flag = lrsk_tmp_found_ra_heir
					days = 3
				} 
			}
		}

		IF = { limit = { NOT = { has_country_flag = lrsk_tmp_found_ra_heir } }	
			random_pool_leader = {
				limit = { is_heir = yes }
				add_experience = root.lrsk_ra_councilor_lvl_factor
			}
		}
	}	
}

# Diagnostic: General test event mostly to test when events can be called.
country_event = {
	id = lrsk_government_variety_pack_backend.2000
	title = lrsk_government_variety_pack_backend.2000.name
	desc = lrsk_government_variety_pack_backend.2000.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}

# Diagnostic: Check to see if player has GVP govtype
country_event = {
	id = lrsk_government_variety_pack_backend.2001
	title = lrsk_government_variety_pack_backend.2001.name
	desc = lrsk_government_variety_pack_backend.2001.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}

# Diagnostic: Check to see if player has GVP civic
country_event = {
	id = lrsk_government_variety_pack_backend.2002
	title = lrsk_government_variety_pack_backend.2002.name
	desc = lrsk_government_variety_pack_backend.2002.desc
	picture = GFX_evt_surreal_visions
	is_triggered_only = yes

	option = { name = OK }
}

# Diagnostic: Find and replace invalid civics, or give human player influence to reform
country_event = {
	id = lrsk_government_variety_pack_backend.2003
	title = lrsk_government_variety_pack_backend.2003.name
	desc = lrsk_government_variety_pack_backend.2003.desc
	picture = GFX_evt_announcement
	is_triggered_only = yes

	trigger = {
		lrsk_has_gvp_possible_invalidated_civic = yes
		NOT = { has_country_flag = lrsk_fixed_invalid_civics_v55 } # Update this for every version.
	}

	immediate = {
		IF = { limit = { is_ai = yes }
			change_government = { civics = random }
		}
		ELSE = {
			set_government_cooldown = no
			country_event = { id = lrsk_government_variety_pack_backend.20031 days = 30 }
		}
		set_country_flag = lrsk_fixed_invalid_civics_v55
	}

	option = { name = OK }
}
country_event = {
	id = lrsk_government_variety_pack_backend.20031
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		add_resource = { influence = 250 }
	}
}
# This just calls 2003 for the scopeless on_single_player_save_game_load on action
event = {
	id = lrsk_government_variety_pack_backend.20032
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		any_country = {
			lrsk_has_gvp_possible_invalidated_civic = yes
			NOT = { has_country_flag = lrsk_fixed_invalid_civics_v55 } # Update this for every version.
		}
	}

	immediate = {
		every_country = {
			limit = {
				lrsk_has_gvp_possible_invalidated_civic = yes
				NOT = { has_country_flag = lrsk_fixed_invalid_civics_v55 } # Update this for every version.
			}
			country_event = { id = lrsk_government_variety_pack_backend.2003 days = 1 }
		}
	}
}

# Diagnostic: Remove/replace deprecated civics (removes duplicates/redundancy)
# Remove/deactivate after next save-breaking Stellaris update
event = {
	id = lrsk_government_variety_pack_backend.2004
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = { OR = {
			has_civic = lrsk_gov_var_civic_republicanism_oli
			has_civic = lrsk_gov_var_civic_chivalry_aristo
		} }
	}

	immediate = {
		every_country = {
			limit = { OR = {
				has_civic = lrsk_gov_var_civic_republicanism_oli
				has_civic = lrsk_gov_var_civic_chivalry_aristo
			} }

			IF = { limit = { has_civic = lrsk_gov_var_civic_republicanism_oli }
				force_remove_civic = lrsk_gov_var_civic_republicanism_oli
				force_add_civic = lrsk_gov_var_civic_republicanism
			}

			IF = { limit = { has_civic = lrsk_gov_var_civic_chivalry_aristo }
				force_remove_civic = lrsk_gov_var_civic_chivalry_aristo
				force_add_civic = lrsk_gov_var_civic_chivalry
			}
		}
	}
}