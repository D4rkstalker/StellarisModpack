namespace = lclusterplus

# Spawn L-Cluster (advanced start)
country_event = {
	id = lclusterplus.1
	hide_window = yes

	is_triggered_only = yes
	fire_only_once = yes
	
	trigger = {
		AND = {
			has_origin = origin_lclusterplus_gatebuilders_advanced
			NOT = { has_global_flag = l_cluster_origin }
		}
	}

	immediate = {
		set_global_flag = l_cluster_origin
		set_spawn_system_batch = begin
		# batch-processes the spawn_system effects between "begin" and "end",
		# so caches are recalculated only once rather than for every system spawned
		# can also be used when removing and adding hyperlanes
		no_scope = {
			# makes system positions originate from galactic core
			spawn_system = {
				min_distance >= 550
				max_distance <= 560
				min_orientation_angle = 44
				max_orientation_angle = 46
				initializer = lclusterplusadvanced_init_01
				hyperlane = no
				effect = {
					save_global_event_target_as = lcluster1
				}
			}
			event_target:lcluster1 = {
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = lclusterplusadvanced_init_02
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster2
					}
				}
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 114
					max_orientation_angle = 156
					initializer = lclusterplusadvanced_init_03
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster3
					}
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 340
					max_orientation_angle = 20
					initializer = lclusterplusadvanced_init_01b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster1b
					}
				}
			}
			event_target:lcluster2 = {
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 0
					max_orientation_angle = 40
					initializer = lclusterplusadvanced_init_02b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster2b
					}
				}
			}
			event_target:lcluster3 = {
				spawn_system = {
					min_distance >= 20
					max_distance <= 30
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = lclusterplusadvanced_init_04
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster4
					}
				}
				spawn_system = {
					min_distance >= 10
					max_distance <= 50
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = lclusterplusadvanced_init_03b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster3b
					}
				}
			}
			event_target:lcluster4 = {
				spawn_system = {
					min_distance >= 5
					max_distance <= 10
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = lclusterplusadvanced_init_05
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster5
					}
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 20
					max_orientation_angle = 160
					initializer = lclusterplusadvanced_init_04b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster4b
					}
				}
			}
		}

		event_target:lcluster5 = {
			add_hyperlane = {
				from = event_target:lcluster5
				to = event_target:lcluster4
			}
		}
		event_target:lcluster4 = {
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster2
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster4b
			}
		}
		event_target:lcluster3 = {
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster3b
			}
		}
		event_target:lcluster2 = {
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster2b
			}
		}

		event_target:lcluster1 = {
			add_hyperlane = {
				from = event_target:lcluster1
				to = event_target:lcluster1b
			}
		}
		event_target:lcluster1b = {
			add_hyperlane = {
				from = event_target:lcluster1b
				to = event_target:lcluster2b
			}
		}
		set_spawn_system_batch = end
		country_event = { id = lclusterplus.6 days = -1 }
	}
}

# Special project completed (overwrite)
country_event = {
	id = lclusterplus.2
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_global_flag = l_cluster_origin }
			set_global_flag = l_cluster_opened
			# add_relic = r_nanite_artifact (will be fully implemented in the next update)
			
			# Activate Terminal Egress L-Gate
			event_target:lcluster1 = {
				random_system_megastructure = {
					limit = { NOT = { is_megastructure_type = matter_decompressor_ruined } }
					activate_gateway = this
					set_megastructure_flag = lgate_activated
				}
			}
			every_megastructure = {
				limit = {
					is_megastructure_type = lgate_base
				}
				activate_gateway = this
			}
			set_global_flag = lgates_activated_globally
			
			every_playable_country = {
				if = {
					limit = { is_researching_technology = tech_lgate_activation }
					give_technology = {
						tech = tech_lgate_activation
						message = no
					}
				}
			}
			country_event = { id = lclusterplus.10 }
		}
		else = {
			country_event = { id = distar.10950 }
		}
	}
}

# Allow all nanite worlds to be terraformed
country_event = {
    id = lclusterplus.3
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        every_galaxy_planet = {
			limit = { is_planet_class = pc_gray_goo }
			add_modifier = {
				modifier = "terraforming_candidate"
				days = -1
			}
		}
    }
}

# Nanite relic activated
country_event = {
    id = lclusterplus.4
    hide_window = yes
    is_triggered_only = yes
    
    immediate = {
        if = {
			limit = { NOT = { has_global_flag = lgates_activated_globally } }
			set_global_flag = lgates_activated_globally
			remove_global_flag = lgates_deactivated_globally
		}
		else = {
			set_global_flag = lgates_deactivated_globally
			remove_global_flag = lgates_activated_globally
		}
    }
}

# Move home system (advanced start)
country_event = {
	id = lclusterplus.6
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	
	immediate = {
		random_system = {
			limit = {				
				has_star_flag = lcluster4
			}
			save_event_target_as = lclusterplus_home_system
			
			random_system_planet = {
				limit = {
					has_planet_flag = start_lclusterplus_gatebuilders
				}
				save_event_target_as = lclusterplus_home_planet
			}
			random_system_planet = {
				limit = {
					has_planet_flag = start_gatebuilders_mining_station1
				}
				save_event_target_as = start_gatebuilders_mining_station_target1
			}
			random_system_planet = {
				limit = {
					has_planet_flag = start_gatebuilders_mining_station2
				}
				save_event_target_as = start_gatebuilders_mining_station_target2
			}
		}

		capital_scope = {
			save_event_target_as = lclusterplus_previous_home_planet
			solar_system = {
				save_event_target_as = lclusterplus_previous_home_system
			}
			if = {
				limit = { exists = sector }
				sector = {
					leader = {
						unassign_leader = this
						save_event_target_as = lclusterplus_sector_gov
					}
				}
			}
			else = {
				root = {
					random_owned_leader = {
						limit = { leader_class = governor }
						save_event_target_as = lclusterplus_sector_gov
					}
				}
			}
		}
		
		# Spaceport setup
		if = {
			limit = {
				is_gestalt = yes
			}
			event_target:lclusterplus_home_system = {
				create_starbase = {
					size = "starbase_starport"
					module = "shipyard"
					module = "solar_panel_network"
					building = "crew_quarters"
					owner = root
				}
			}
		}
		else = {
			event_target:lclusterplus_home_system = {
				create_starbase = {
					size = "starbase_starport"
					module = "shipyard"
					module = "trading_hub"
					building = "crew_quarters"
					owner = root
				}
			}
		}
		
		event_target:start_gatebuilders_mining_station_target1 = {
			create_mining_station = {
				owner = root
			}
		}
		
		event_target:start_gatebuilders_mining_station_target2 = {
			create_mining_station = {
				owner = root
			}
		}

		# Ring World setup
		event_target:lclusterplus_home_planet = {
			set_owner = root
			set_controller = root
			set_capital = yes
			set_sector_capital = yes
			sector = { assign_leader = event_target:lclusterplus_sector_gov }
			if = {
				limit = { has_planet_flag = start_lclusterplus_gatebuilders }

				set_planet_size = 10

				set_name = "NAME_Habitable_Section_A"

				clear_deposits = yes
				remove_all_buildings = yes
				remove_all_districts = yes

				add_deposit = d_arcane_generator

				add_deposit = d_decrepit_tunnels_1
				add_deposit = d_decrepit_tunnels_2
				# add_deposit = d_decrepit_tunnels_3

				if = {
					limit = {
						owner = {
							is_lithoid_empire = yes
							NOT = { has_civic = civic_hive_devouring_swarm }
						}
					}
					while = {
						count = 4
						add_deposit = d_hibernating_lithoids
					}
				}

				if = {
					limit = {
						owner = {
							is_lithoid_empire = yes
							has_civic = civic_hive_devouring_swarm
						}
					}
					while = {
						count = 2
						add_deposit = d_hibernating_lithoids
					}
				}

				if = {
					limit = {
						owner = {
							is_lithoid_empire = yes
							is_hive_empire = yes
						}
					}
					remove_district = district_rw_city
					remove_district = district_rw_farming
					add_district = district_rw_hive
					add_district = district_rw_generator
				}

				if = {
					limit = { owner = { is_regular_empire = yes } }

					add_district = district_rw_city
					add_district = district_rw_farming
					add_district = district_rw_industrial

					add_building = building_capital
					add_building = building_bureaucratic_1
					add_building = building_research_lab_1
					
					add_deposit = d_segment_rubble_4

					add_building = building_commercial_zone
				}

				if = {
					limit = { owner = { is_hive_empire = yes } }

					add_district = district_rw_hive
					add_district = district_rw_generator
					add_district = district_rw_farming
					add_district = district_rw_industrial

					add_building = building_hive_capital
					add_building = building_hive_node
					add_building = building_research_lab_1
					add_building = building_spawning_pool
					add_building = building_hive_warren
					
					add_deposit = d_segment_rubble_1
					add_deposit = d_segment_rubble_4
				}

				# Replace capital building for machine empires
				if = {
					limit = { owner = { is_machine_empire = yes } }

					add_district = district_rw_nexus
					add_district = district_rw_generator
					add_district = district_rw_industrial

					add_building = building_machine_capital
					add_building = building_machine_assembly_plant
					add_building = building_uplink_node
					add_building = building_research_lab_1
					
					add_deposit = d_segment_rubble_4

					# Assimilators
					if = {
						limit = { owner = { has_civic = civic_machine_assimilator } }

						add_district = district_rw_farming

						add_deposit = d_segment_rubble_1
						add_deposit = d_segment_rubble_2
					}

					# Servitors
					if = {
						limit = { owner = { has_civic = civic_machine_servitor } }

						add_building = building_organic_sanctuary

						add_district = district_rw_farming

						add_deposit = d_segment_rubble_1
						add_deposit = d_segment_rubble_2
					}
				}

				while = { count = 6
					create_pop = { species = owner_main_species }
				}

				owner = {
					add_resource = { energy = 500 }
					add_resource = { minerals = 500 }
					add_resource = { alloys = 500 }
					if = {
						limit = { is_machine_empire = no }
						add_resource = { food = 500 }
					}
					if = {
						limit = { is_gestalt = no }
						add_resource = { consumer_goods = 500 }
					}

					give_technology = { tech = "tech_mine_volatile_motes" message = no }
					give_technology = { tech = "tech_mine_exotic_gases" message = no }
					give_technology = { tech = "tech_mine_rare_crystals" message = no }
				}
			}
		}
		
		if = {
			limit = {
				owner = { is_machine_empire = no }
			}
			every_owned_pop = {
				modify_species = {
					species = this
					ideal_planet_class = pc_ringworld_habitable
				}
				species = { save_event_target_as = target_species }
			}
			root = {
				change_dominant_species = { species = event_target:target_species change_all = yes }
			}
		}
		
		event_target:lclusterplus_home_system = {
			set_star_flag = empire_cluster
			set_star_flag = empire_home_system
			
			random_system_planet = {
				limit = {
					is_star = yes
				}
				save_event_target_as = lclusterplus_home_system_loc
			}
		}
		
		every_owned_fleet = {
			limit = {
				any_owned_ship = {
					OR = {
						is_ship_size = corvette
						is_ship_size = constructor
						is_ship_size = science
					}
				}
			}
			set_location = event_target:lclusterplus_home_system_loc
		}
		
		event_target:lclusterplus_previous_home_planet = {
			# move pops
			every_owned_pop = {
				resettle_pop = {
					pop = this
					planet = event_target:lclusterplus_home_planet
				}
				unemploy_pop = yes
			}
			remove_planet = yes
		}
		event_target:lclusterplus_home_planet = {
			every_owned_pop = {
				unemploy_pop = yes
				clear_pop_category = yes
			}
			check_planet_employment = yes
		}

		event_target:lclusterplus_previous_home_system = {
			every_fleet_in_system = {
				delete_fleet = this
			}
			set_name = random
			random_system_planet = {
				limit = {
					is_star = yes
				}
				set_name = solar_system
			}
			
			remove_star_flag = sol
			remove_star_flag = deneb_system
			remove_star_flag = empire_home_system
			remove_star_flag = empire_cluster
			
			every_neighbor_system = {
				remove_star_flag = empire_cluster
				every_neighbor_system = { remove_star_flag = empire_cluster }
			}
		}

		owner_species = {
			set_species_homeworld = event_target:lclusterplus_home_planet
		}
		every_owned_pop_species = {
            set_species_homeworld = event_target:lclusterplus_home_planet
        }

		country_event = { id = lclusterplus.3 days = 1 }
	}
}

# L-Gate chain start
country_event = {
	id = lclusterplus.7
	title = "lclusterplus.7.name"
	desc = "lclusterplus.7.desc"
	picture = GFX_evt_lgate_deactivated
	show_sound = event_radio_chatter
	location = FROM

	is_triggered_only = yes

	trigger = {
		NOR = {
			has_country_flag = encountered_first_lgate
			has_event_chain = "l_cluster_chain"
		}
		FROM = {
			has_star_flag = lcluster1
		}
		OR = {
			has_origin = origin_lclusterplus_gatebuilders
			has_origin = origin_lclusterplus_gatebuilders_advanced
		}
	}

	immediate = {
		FROM = { save_event_target_as = gateway_system }
		set_country_flag = encountered_first_lgate
	}

	option = {
		name = INTRIGUING
		start_lcluster_chain = yes
	}
}

# Spawn L-Cluster (regular start)
country_event = {
	id = lclusterplus.8
	hide_window = yes

	is_triggered_only = yes
	fire_only_once = yes
	
	trigger = {
		AND = {
			has_origin = origin_lclusterplus_gatebuilders
			NOT = { has_global_flag = l_cluster_origin }
		}
	}

	immediate = {
		set_global_flag = l_cluster_origin
		set_spawn_system_batch = begin
		no_scope = {
			# makes system positions originate from galactic core
			spawn_system = {
				min_distance >= 550
				max_distance <= 560
				min_orientation_angle = 44
				max_orientation_angle = 46
				initializer = lclusterplus_init_01
				hyperlane = no
			}
			random_system = {
				limit = { has_star_flag = lcluster1 }
				save_global_event_target_as = lcluster1
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = lclusterplus_init_02
				}
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 114
					max_orientation_angle = 156
					initializer = lclusterplus_init_03
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 340
					max_orientation_angle = 20
					initializer = lclusterplus_init_01b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster2 }
				save_global_event_target_as = lcluster2
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 0
					max_orientation_angle = 40
					initializer = lclusterplus_init_02b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster3 }
				save_global_event_target_as = lcluster3
				spawn_system = {
					min_distance >= 20
					max_distance <= 30
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = lclusterplus_init_04
				}
				spawn_system = {
					min_distance >= 10
					max_distance <= 50
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = lclusterplus_init_03b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster4 }
				save_global_event_target_as = lcluster4
				spawn_system = {
					min_distance >= 5
					max_distance <= 10
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = lclusterplus_init_05
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 20
					max_orientation_angle = 160
					initializer = lclusterplus_init_04b
				}
			}
		}

		random_system = {
			limit = { has_star_flag = lcluster5 }
			save_global_event_target_as = lcluster5
		}
		random_system = {
			limit = { has_star_flag = lcluster1b }
			save_global_event_target_as = lcluster1b
		}
		random_system = {
			limit = { has_star_flag = lcluster2b }
			save_global_event_target_as = lcluster2b
		}
		random_system = {
			limit = { has_star_flag = lcluster3b }
			save_global_event_target_as = lcluster3b
		}
		random_system = {
			limit = { has_star_flag = lcluster4b }
			save_global_event_target_as = lcluster4b
		}

		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = { has_star_flag = lcluster }
			isolate_system = yes
		}

		# add hyperlanes
		event_target:lcluster5 = {
			add_hyperlane = {
				from = event_target:lcluster5
				to = event_target:lcluster4
			}
		}
		event_target:lcluster4 = {
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster2
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster4b
			}
		}
		event_target:lcluster3 = {
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster3b
			}
		}
		event_target:lcluster2 = {
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster2b
			}
		}

		event_target:lcluster1 = {
			add_hyperlane = {
				from = event_target:lcluster1
				to = event_target:lcluster1b
			}
		}
		event_target:lcluster1b = {
			add_hyperlane = {
				from = event_target:lcluster1b
				to = event_target:lcluster2b
			}
		}
		set_spawn_system_batch = end
		country_event = { id = lclusterplus.9 days = -1 }
	}
}

# Move home system (regular start)
country_event = {
	id = lclusterplus.9
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	
	immediate = {
		random_system = {
			limit = {				
				has_star_flag = lcluster4
			}
			save_event_target_as = lclusterplus_home_system
			
			random_system_planet = {
				limit = {
					has_planet_flag = start_lclusterplus_gatebuilders
				}
				save_event_target_as = lclusterplus_home_planet
			}
			random_system_planet = {
				limit = {
					has_planet_flag = start_gatebuilders_mining_station1
				}
				save_event_target_as = start_gatebuilders_mining_station_target1
			}
		}

		capital_scope = {
			save_event_target_as = lclusterplus_previous_home_planet
			solar_system = {
				save_event_target_as = lclusterplus_previous_home_system
			}
			if = {
				limit = { exists = sector }
				sector = {
					leader = {
						unassign_leader = this
						save_event_target_as = lclusterplus_sector_gov
					}
				}
			}
			else = {
				root = {
					random_owned_leader = {
						limit = { leader_class = governor }
						save_event_target_as = lclusterplus_sector_gov
					}
				}
			}
		}
		
		# Spaceport setup
		if = {
			limit = {
				is_gestalt = yes
			}
			event_target:lclusterplus_home_system = {
				create_starbase = {
					size = "starbase_starport"
					module = "shipyard"
					module = "solar_panel_network"
					building = "crew_quarters"
					owner = root
				}
			}
		}
		else = {
			event_target:lclusterplus_home_system = {
				create_starbase = {
					size = "starbase_starport"
					module = "shipyard"
					module = "trading_hub"
					building = "crew_quarters"
					owner = root
				}
			}
		}
		
		event_target:start_gatebuilders_mining_station_target1 = {
			create_mining_station = {
				owner = root
			}
		}

		# Planet setup
		event_target:lclusterplus_home_planet = {
			set_owner = root
			set_controller = root
			set_capital = yes
			set_sector_capital = yes
			sector = { assign_leader = event_target:lclusterplus_sector_gov }
			
			set_name = random
			
			generate_start_buildings_and_districts = yes
		}
		
		if = {
			limit = {
				owner = { is_machine_empire = no }
			}
			every_owned_pop = {
				modify_species = {
					species = this
					ideal_planet_class = pc_nuked
				}
				species = { save_event_target_as = target_species }
			}
			root = {
				change_dominant_species = { species = event_target:target_species change_all = yes }
			}
		}
		
		event_target:lclusterplus_home_system = {
			random_system_planet = {
				limit = {
					is_star = yes
				}
				save_event_target_as = lclusterplus_home_system_loc
			}
		}
		
		every_owned_fleet = {
			limit = {
				any_owned_ship = {
					OR = {
						is_ship_size = corvette
						is_ship_size = constructor
						is_ship_size = science
					}
				}
			}
			set_location = event_target:lclusterplus_home_system_loc
		}
		
		event_target:lclusterplus_previous_home_planet = {
			# move pops
			every_owned_pop = {
				resettle_pop = {
					pop = this
					planet = event_target:lclusterplus_home_planet
				}
				unemploy_pop = yes
			}
			remove_planet = yes
		}
		event_target:lclusterplus_home_planet = {
			every_owned_pop = {
				unemploy_pop = yes
				clear_pop_category = yes
			}
			check_planet_employment = yes
		}

		event_target:lclusterplus_previous_home_system = {
			set_name = random
			random_system_planet = {
				limit = {
					is_star = yes
				}
				set_name = solar_system
			}
			
			remove_star_flag = sol
			remove_star_flag = deneb_system
		}

		event_target:lclusterplus_previous_home_system = {
			every_fleet_in_system = {
				delete_fleet = this
			}
		}

		owner_species = { 
			set_species_homeworld = event_target:lclusterplus_home_planet
		}
		every_owned_pop_species = {
            set_species_homeworld = event_target:lclusterplus_home_planet
        }

		country_event = { id = lclusterplus.3 days = -1 }
	}
}

# L-Cluster Opened
country_event = {
	id = lclusterplus.10
	is_triggered_only = yes
	title = "lclusterplus.10.name"
	desc = {
		text = "lclusterplus.10.desc.a"
		trigger = {
			NOR = {
				has_origin = origin_lclusterplus_gatebuilders
				has_origin = origin_lclusterplus_gatebuilders_advanced
			}
		}
	}
	desc = {
		text = "lclusterplus.10.desc.b"
		trigger = {
			OR = {
				has_origin = origin_lclusterplus_gatebuilders
				has_origin = origin_lclusterplus_gatebuilders_advanced
			}
		}
	}
	picture = GFX_evt_lgate_activated
	show_sound = event_mystic_reveal
	location = event_target:candidate_gateway
	
	immediate = {
		every_playable_country = {
			limit = {
				OR = {
					has_origin = origin_lclusterplus_gatebuilders
					has_origin = origin_lclusterplus_gatebuilders_advanced
				}
				NOT = { is_same_value = root }
			}
			country_event = { id = lclusterplus.11 }
		}
		every_playable_country = {
			limit = {
				has_special_project = LCLUSTER_PROJECT_OVERWRITE
				NOT = { is_same_value = root }
			}
			country_event = { id = lclusterplus.12 }
		}
		every_playable_country = {
			limit = {
				NOR = {
					has_event_chain = l_cluster_chain
					has_special_project = LCLUSTER_PROJECT_OVERWRITE
					is_same_value = root
				}
			}
			country_event = { id = lclusterplus.13}
		}
		every_playable_country = {
			limit = {
				NOR = {
					has_special_project = LCLUSTER_PROJECT_OVERWRITE
					is_same_value = root
				}
				has_event_chain = l_cluster_chain
			}
			country_event = { id = lclusterplus.12 }
		}
		observer_event = { id = observer.62 }
	}

	option = {
		trigger = {
			NOR = {
				has_origin = origin_lclusterplus_gatebuilders
				has_origin = origin_lclusterplus_gatebuilders_advanced
			}
		}
		name = "lclusterplus.10.a"
	}
	option = {
		trigger = {
			OR = {
				has_origin = origin_lclusterplus_gatebuilders
				has_origin = origin_lclusterplus_gatebuilders_advanced
			}
		}
		name = "lclusterplus.10.b"
	}
}

# Inform the Gatebuilders of the L-Cluster being open
country_event = {
	id = lclusterplus.11
	is_triggered_only = yes
	title = "lclusterplus.11.name"
	desc = "lclusterplus.11.desc"
	picture = GFX_evt_lgate_activated
	show_sound = event_mystic_reveal
	
	immediate = {
		if = {
			limit = {
				has_special_project = LCLUSTER_PROJECT_OVERWRITE
			}
			abort_special_project = { type = LCLUSTER_PROJECT_OVERWRITE }
		}
		else = {
			limit = {
				has_event_chain = l_cluster_chain
			}
			liquidate_clues = yes
			end_event_chain = "l_cluster_chain"
		}
	}

	option = {
		name = "lclusterplus.11.a"
	}
}

# Inform other empires of the L-Cluster being open (has project or event chain)
country_event = {
	id = lclusterplus.12
	is_triggered_only = yes
	title = "lclusterplus.11.name"
	desc = "lclusterplus.12.desc"
	picture = GFX_evt_lgate_activated
	show_sound = event_mystic_reveal
	
	immediate = {
		if = {
			limit = {
				has_special_project = LCLUSTER_PROJECT_OVERWRITE
			}
			abort_special_project = { type = LCLUSTER_PROJECT_OVERWRITE }
		}
		else = {
			limit = {
				has_event_chain = l_cluster_chain
			}
			liquidate_clues = yes
			end_event_chain = "l_cluster_chain"
		}
	}

	option = {
		name = "lclusterplus.12.a"
	}
}

# Inform other empires of the L-Cluster being open (has nothing)
country_event = {
	id = lclusterplus.13
	is_triggered_only = yes
	title = "lclusterplus.11.name"
	desc = "lclusterplus.13.desc"
	picture = GFX_evt_lgate_activated
	show_sound = event_mystic_reveal

	option = {
		name = "lclusterplus.13.a"
	}
}

# Living metal fix
country_event = {
	id = lclusterplus.14
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			has_technology = tech_mine_living_metal
			has_tech_option = tech_mine_living_metal
		}
		FROM = {
			has_star_flag = lcluster4b
		}
		has_origin = origin_lclusterplus_gatebuilders_advanced
	}

	immediate = {
		add_research_option = tech_mine_living_metal
	}
}