#######################
# BLACK HOLE CREATION #
#######################

namespace = bugged_black_hole

system_event = {
	id = bugged_black_hole.1
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_star_class = sc_black_hole
	}
}

##########################
# THE KEY TO IMMORTALITY #
##########################

namespace = bugged_immortal_ruler

country_event = {
	id = bugged_immortal_ruler.1
	title = "Immortal Ruler"
	picture = GFX_evt_alien_propaganda
	show_sound = event_celebration
	desc = edict_bugged_immortal_ruler_desc
	is_triggered_only = yes

	trigger = {
		is_ai = no
		exists = ruler
	}

	immediate = {
		ruler = { set_immortal = yes }
		set_country_flag = flag_immortal_ruler
	}
	
	option = {
		name = "bugged_immortal_ruler.1.yes"
		custom_tooltip = "bugged_immortal_ruler.1.tooltip"
	}
}

#####################
# INTERVENTIONALIST #
#####################

namespace = bugged_interventionalist

#Cry for help
country_event = {
	id = bugged_interventionalist.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_war_leader = yes
		from = {
			any_attacker = { is_same_value = root }
			any_defender = {
				is_war_leader = yes
			}
		}
	}

	immediate = {
		save_event_target_as = attacking_country
		from = {
			random_defender = {
				limit = {
					is_war_leader = yes
				}
				save_event_target_as = victim_country
			}
		}
		every_country = {
			limit = {
				has_communications = root
				is_bugged_interventionalist = yes
			}
			country_event = { id = bugged_interventionalist.2 days = 10 }
		}
	}
}

# Interventionalist Requested (Interventionalist Notification)
country_event = {
	id = bugged_interventionalist.2
	title = "bugged_interventionalist.2.name"
	desc = "bugged_interventionalist.2.desc"
	picture = GFX_evt_fleet_from_surface
	show_sound = event_announcement

	is_triggered_only = yes

	option = { # Answer Call For Help
		name = bugged_interventionalist.2.a
		ai_chance = {
			factor = 20
			modifier = {
				factor = 6
				opinion_level = {
					who = event_target:victim_country
					level >= good
				}
			}
		}
		event_target:victim_country = {
			add_opinion_modifier = {
				who = root
				modifier = bugged_interventionalist_supported
			}
		}
		custom_tooltip = bugged_interventionalist.2.a.tooltip
		hidden_effect = {
			join_war_on_side = {
				war = fromfrom
				side = defenders
			}
			# every_playable_country = {
			# 	limit = {
			# 		NOT = {
			# 			is_same_value = root
			# 			is_same_value = event_target:victim_country
			# 			is_war_participant = {
			# 				war = fromfrom
			# 				side = attackers
			# 			}
			# 		}
			# 	}
			# 	add_opinion_modifier = {
			# 		who = root
			# 		modifier = opinion_emperor_supported_member
			# 	}
			# }
			event_target:victim_country = {
				country_event = { id = bugged_interventionalist.10 }
			}
			event_target:attacking_country = {
				country_event = { id = bugged_interventionalist.20 }
			}
		}
	}
	option = { # Ignore Call For Help (You're A Dick)
		name = bugged_interventionalist.2.b
		ai_chance = {
			factor = 20
			modifier = {
				factor = 60
				opinion_level = {
					who = event_target:victim_country
					level <= poor
				}
			}
		}
		event_target:victim_country = {
			add_opinion_modifier = {
				who = root
				modifier = bugged_interventionalist_abandoned
			}
		}
		hidden_effect = {
			# every_playable_country = {
			# 	limit = {
			# 		NOT = {
			# 			is_same_value = root
			# 			is_same_value = event_target:victim_country
			# 			is_war_participant = {
			# 				war = fromfrom
			# 				side = attackers
			# 			}
			# 		}
			# 	}
			# 	add_opinion_modifier = {
			# 		who = root
			# 		modifier = opinion_emperor_abandoned_member
			# 	}
			# }
			event_target:victim_country = {
				country_event = { id = bugged_interventionalist.30 }
			}
		}
	}
}

#Interventionalist Joins War (Defender Notification)
country_event = {
	id = bugged_interventionalist.10
	title = "bugged_interventionalist.10.name"
	desc = "bugged_interventionalist.10.desc"
	picture = GFX_evt_federation_fleet
	show_sound = event_announcement

	is_triggered_only = yes

	option = {
		name = bugged_interventionalist.10.a
		custom_tooltip = bugged_interventionalist.10.a.tooltip
	}
}

#Interventionalist Joins War (Attacker Notification)
country_event = {
	id = bugged_interventionalist.20
	title = "bugged_interventionalist.20.name"
	desc = "bugged_interventionalist.20.desc"
	picture = GFX_evt_federation_fleet
	show_sound = event_announcement

	is_triggered_only = yes

	option = {
		name = bugged_interventionalist.20.a
		custom_tooltip = bugged_interventionalist.20.a.tooltip
	}
}

#Interventionalist Refuses To Help ( Defender Notification (They're A Dick) )
country_event = {
	id = bugged_interventionalist.30
	title = "bugged_interventionalist.30.name"
	desc = "bugged_interventionalist.30.desc"
	picture = GFX_evt_undertaker
	show_sound = event_announcement

	is_triggered_only = yes

	option = {
		name = bugged_interventionalist.30.a
	}

}

###########################
# MILITARIST GOVERNMENTAL #
###########################

namespace = bugged_militarist_governmental_unity
country_event = {
	id = bugged_militarist_governmental_unity.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			has_valid_civic = civic_bugged_ordered_stratocracy
			has_valid_civic = civic_bugged_warlord
			has_valid_civic = civic_bugged_war_council
			has_valid_civic = civic_citizen_service
		}
	}

	immediate = {
		export_trigger_value_to_variable = {
			trigger = used_naval_capacity_integer
			variable = bugged_militarist_governmental_variable
		}
		recalculate_militarist_governmental_modifier = yes
	}
}

############
# WAR CULT #
############

namespace = bugged_war_cult_war_start

country_event = {
	id = bugged_war_cult_war_start.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { is_bugged_war_cult = yes }
	}

	immediate = {
		remove_country_flag = bugged_war_cult_lost_flag
		remove_modifier = bugged_war_cult_lost
		remove_country_flag = bugged_war_cult_status_quo_flag
		remove_modifier = bugged_war_cult_status_quo
	}
}

namespace = bugged_war_cult_war_ended
#War Ended - We Won
country_event = {
	id = bugged_war_cult_war_ended.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { is_bugged_war_cult = yes }
	}

	immediate = {
		remove_country_flag = bugged_war_cult_lost_flag
		remove_modifier = bugged_war_cult_lost
		remove_country_flag = bugged_war_cult_status_quo_flag
		remove_modifier = bugged_war_cult_status_quo
		add_modifier = {
			modifier = bugged_war_cult_won
			years = 7
		}
		set_timed_country_flag = {
			flag = bugged_war_cult_won_flag
			years = 7
		}
	}
}
#War Ended - We Lost
country_event = {
	id = bugged_war_cult_war_ended.2
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = {
			is_bugged_war_cult = yes
			NOT = {
				has_country_flag = bugged_war_cult_won_flag
			}
		}
	}

	immediate = {
		add_modifier = {
			modifier = bugged_war_cult_lost
			years = 7
		}
		set_timed_country_flag = {
			flag = bugged_war_cult_lost_flag
			years = 7
		}
	}
}
#War Ended - Status Quo
country_event = {
	id = bugged_war_cult_war_ended.3
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { is_bugged_war_cult = yes }
	}
	immediate = {
		country_event = {
			id = bugged_war_cult_war_ended.4
			days = 1
		}
	}
}
#War Ended - Status Quo
country_event = {
	id = bugged_war_cult_war_ended.4
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = {
			is_bugged_war_cult = yes
			NOR = {
				has_country_flag = bugged_war_cult_won_flag
				has_country_flag = bugged_war_cult_lost_flag
			}
		}
	}

	immediate = {
		remove_country_flag = bugged_war_cult_lost_flag
		remove_modifier = bugged_war_cult_lost
		add_modifier = {
			modifier = bugged_war_cult_status_quo
			years = 7
		}
		set_timed_country_flag = {
			flag = bugged_war_cult_status_quo_flag
			years = 7
		}
	}
}

##############################
# GRAVITY CULT SHIP MODIFIER #
##############################

namespace = bugged_gravity_cult_modifier

# country_event = {
# 	id = bugged_gravity_cult_modifier.1
# 	hide_window = yes
    
#     is_triggered_only = yes

# 	trigger = {
# 		owner = {
# 			is_bugged_gravity_cult = yes
# 		}
# 		solar_system = { is_star_class = sc_black_hole }
# 	}
# 	immediate = {
# 		every_owned_fleet = {
# 			add_modifier = {
# 				modifier = bugged_black_hole_fleet
# 			}
# 		}
# 	}
# }

# country_event = {
# 	id = bugged_gravity_cult_modifier.2
# 	hide_window = yes
    
#     is_triggered_only = yes

# 	trigger = {
# 		owner = {
# 			is_bugged_gravity_cult = yes
# 		}
# 		solar_system = { NOT = { is_star_class = sc_black_hole } }
# 	}
# 	immediate = {
# 		every_owned_fleet = {
# 			remove_modifier = bugged_black_hole_fleet
# 		}
# 	}
# }


fleet_event = {
	id = bugged_gravity_cult_modifier.1
	hide_window = yes
	
	is_triggered_only = yes
  
	trigger = {
	  from = { is_star_class = sc_black_hole }
	  	owner = {
			is_bugged_gravity_cult = yes
		}
	}
  
	immediate = {
	  set_fleet_flag = bugged_black_hole_fleet_active
	 	every_owned_ship = {
			add_modifier = {
		  		modifier = bugged_black_hole_fleet
			}
 		}
	}
}

fleet_event = {
	id = bugged_gravity_cult_modifier.2
	hide_window = yes
	
	is_triggered_only = yes
  
	trigger = {
	  from = { NOT = { is_star_class = sc_black_hole } }
	  	owner = {
			is_bugged_gravity_cult = yes
		}
	}
  
	immediate = {
	  set_fleet_flag = bugged_black_hole_fleet_active
	 	every_owned_ship = {
			remove_modifier = bugged_black_hole_fleet
 		}
	}
}

namespace = bugged_elitist_governmental

country_event = {
    id = bugged_elitist_governmental.1
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        is_bugged_governmental_elitist = yes
    }

    immediate = {
        every_owned_leader = {
            add_trait_no_notify = leader_trait_bugged_highborn
        }

        every_pool_leader = {
            add_trait_no_notify = leader_trait_bugged_highborn
        }
    }
}


#####################################
# PLURALIST GOVERNMENTAL PASSIVE XP #
#####################################

namespace = bugged_pluralist_governmental

country_event = {
	id = bugged_pluralist_governmental.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_bugged_governmental_pluralist = yes
	}

	immediate = {
		every_owned_leader = {
			# Finds number of month required to level up, based on
			# both current leader level and maximum leader level
			# Level 1 to 5 with a maximum level of 5 takes 64 years
			# Level 1 to 5 with a maximum of level of 10 takes 24 years
			export_trigger_value_to_variable = {
				trigger = has_skill
				variable = current_skill_level
			}
			if = {
				limit = { is_ruler = yes }
				export_modifier_to_variable = {
					modifier = ruler_skill_levels
					variable = max_skill_level
				}
			}
			else_if = {
				limit = { leader_class = admiral }
				export_modifier_to_variable = {
					modifier = admiral_skill_levels
					variable = max_skill_level
				}
			}
			else_if = {
				limit = { leader_class = general }
				export_modifier_to_variable = {
					modifier = general_skill_levels
					variable = max_skill_level
				}
			}
			else_if = {
				limit = { leader_class = scientist }
				export_modifier_to_variable = {
					modifier = scientist_skill_levels
					variable = max_skill_level
				}
			}
			else_if = {
				limit = { leader_class = governor }
				export_modifier_to_variable = {
					modifier = governor_skill_levels
					variable = max_skill_level
				}
			}
			export_modifier_to_variable = {
				modifier = leader_skill_levels
				variable = overall_skill_level
			}
			change_variable = {
				which = max_skill_level
				value = overall_skill_level
			}
			change_variable = {
				which = max_skill_level
				value = 6
			}
			subtract_variable = {
				which = max_skill_level
				value = current_skill_level
			}
			set_variable = {
				which = time_for_level_up
				value = 50
			}
			divide_variable = {
				which = time_for_level_up
				value = max_skill_level
			}
			multiply_variable = {
				which = time_for_level_up
				value = 12
			}
			ceiling_variable = time_for_level_up # How many months it should take to level up
			set_variable = {
				which = exp_for_level
				value = 0
			}
			set_variable = {
				which = working_number
				value = current_skill_level
			}
			change_variable = {
				which = working_number
				value = 1
			}
			multiply_variable = {
				which = working_number
				value = current_skill_level
			}
			divide_variable = {
				which = working_number # Triangular number BY GOD WHY IS THIS NOT JUST SOMETHING WE CAN CALL AUTOMATICALLY
				value = 2
			}
			multiply_variable = {
				which = working_number
				value = 75 
			}
			multiply_variable = {
				which = current_skill_level
				value = 125
			}
			change_variable = {
				which = exp_for_level
				value = working_number
			}
			change_variable = {
				which = exp_for_level
				value = current_skill_level
			}
			divide_variable = {
				which = exp_for_level # Amount of skill required to be given each month for it to take time_for_level_up months to get level up
				value = time_for_level_up
			}
			clear_variable = overall_skill_level
			clear_variable = current_skill_level
			clear_variable = max_skill_level
			clear_variable = time_for_level_up
			clear_variable = working_number
			random_list = { # Very Simplified Normal Distribution because fuck me I guess
				1 = {
					set_variable = {
						which = normal_variance
						value = -0.2
					}
				}
				3 = {
					set_variable = {
						which = normal_variance
						value = -0.15
					}
				}
				5 = {
					set_variable = {
						which = normal_variance
						value = -0.1
					}
				}
				7 = {
					set_variable = {
						which = normal_variance
						value = -0.05
					}
				}
				10 = {
					set_variable = {
						which = normal_variance
						value = 0
					}
				}
				7 = {
					set_variable = {
						which = normal_variance
						value = 0.05
					}
				}
				5 = {
					set_variable = {
						which = normal_variance
						value = 0.1
					}
				}
				3 = {
					set_variable = {
						which = normal_variance
						value = 0.15
					}
				}
				1 = {
					set_variable = {
						which = normal_variance
						value = 0.2
					}
				}
			}
			subtract_variable = {
				which = exp_for_level
				value = normal_variance
			}
			multiply_variable = {
				which = exp_for_level
				value = 0.3
			}
			add_experience = exp_for_level
			clear_variable = exp_for_level
			clear_variable = normal_variance
		}
	}

}


namespace = bugged_pacifist_governmental

country_event = {
	id = bugged_pacifist_governmental.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_bugged_governmental_pacifist = yes
	}

	immediate = {
		export_trigger_value_to_variable = {
			trigger = count_starbase_sizes
			parameters = { starbase_size = starbase_starport }
			variable = bugged_starbase_value
		}
		export_trigger_value_to_variable = {
			trigger = count_starbase_sizes
			parameters = { starbase_size = starbase_starhold }
			variable = bugged_starbase_value_2
		}
		multiply_variable = {
			which = bugged_starbase_value_2
			value = 2
		}
		change_variable = {
			which = bugged_starbase_value
			value = bugged_starbase_value_2
		}
		export_trigger_value_to_variable = {
			trigger = count_starbase_sizes
			parameters = { starbase_size = starbase_starfortress }
			variable = bugged_starbase_value_2
		}
		multiply_variable = {
			which = bugged_starbase_value_2
			value = 3
		}
		change_variable = {
			which = bugged_starbase_value
			value = bugged_starbase_value_2
		}
		export_trigger_value_to_variable = {
			trigger = count_starbase_sizes
			parameters = { starbase_size = starbase_citadel }
			variable = bugged_starbase_value_2
		}
		multiply_variable = {
			which = bugged_starbase_value_2
			value = 4
		}
		change_variable = {
			which = bugged_starbase_value
			value = bugged_starbase_value_2
		}
		clear_variable = bugged_starbase_value_2
		if = {
			limit = {
				check_variable = {
					which = bugged_starbase_value
					value = 0
				}
			}
			remove_modifier = bugged_pacifist_governmental
		}
		else = {
			remove_modifier = bugged_pacifist_governmental
			add_modifier = {
  	  			modifier = bugged_pacifist_governmental
				multiplier = bugged_starbase_value
			}
		}
		clear_variable = bugged_starbase_value
	}
}

#############
# TERRAFORM #
#############

namespace = bugged_ecocentric_governmental

planet_event = {
	id = bugged_ecocentric_governmental.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		AND = {
			exists = from
			from = { is_bugged_governmental_ecocentric = yes }
			NOT = { has_planet_flag = bugged_terraforming_fervor_done }
		}
	}

	immediate = {
		set_planet_flag = bugged_terraforming_fervor_done
		from = {
			country_event = {
				days = 0
				id = bugged_ecocentric_governmental.2
			}
		}
	}
}

country_event = {
	id = bugged_ecocentric_governmental.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_bugged_governmental_ecocentric = yes
	}

	immediate = {
		change_variable = {
			which = bugged_terraforming_fervor_variable
			value = 1
		}
		recalculate_terraforming_fervor_modifier = yes
	}
}

###########
# Vassals #
###########

namespace = bugged_megacorp_vassal

# Convert sectors released as subjects by megacorps into democratic
country_event = {
	id = bugged_megacorp_vassal.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_authority = auth_bugged_corporate_democratic
		from = { has_authority = auth_bugged_corporate_democratic }
	}
	
	immediate = {
		bugged_set_merchant_government_effect_democratic = yes
	}
}

# Convert sectors released as subjects by megacorps into dictatorial
country_event = {
	id = bugged_megacorp_vassal.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_authority = auth_bugged_corporate_imperial
		from = { has_authority = auth_bugged_corporate_imperial }
	}

	immediate = {
		bugged_set_merchant_government_effect_imperial = yes
	}
}

###############
# Spy Machine #
###############

namespace = bugged_spy_machine_event

country_event = {
	id = bugged_spy_machine_event.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_bugged_machine_automated_surveillance_network
		# any_spynetwork = {
		# 	has_spynetwork_value >= 1
		# }
	}

	immediate = {
		every_spynetwork = {
			limit = {
				is_spynetwork_level >= 50
				NOT = {
					this = {
						check_variable = {
							which = bugged_spy_networked
							value = 1
						}
					}
				}
			}
			this = {
				change_variable = {
					which = bugged_spy_networked
					value = 1
				}
			}
			root = {
				change_variable = {
					which = bugged_machine_spy_network_variable
					value = 1
				}
			}
		}
		every_spynetwork = {
			limit = {
				is_spynetwork_level <= 49
				NOT = {
					this = {
						check_variable = {
							which = bugged_spy_networked
							value = 0
						}
					}
				}
			}
			this = {
				change_variable = {
					which = bugged_spy_networked
					value = -1
				}
			}
			root = {
				change_variable = {
					which = bugged_machine_spy_network_variable
					value = -1
				}
			}
		}
		recalculate_machine_spy_network_modifier = yes
	}
}

namespace = bugged_hive_growth_civic

planet_event = {
	id = bugged_hive_growth_civic.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { has_valid_civic = civic_bugged_hive_multiparous_connection }
	}

	immediate = {
		from = {
			add_resource = {
				unity = 3
				mult = trigger:num_pops
			}
		}
		this = {
			random_list = {
				85 = {
					#nothing
				}
				15 = {
					create_pop = {
						species = fromfrom.species
						ethos = random
					}
				}
			}
		}
	}
}

namespace = bugged_inquisitive_catalog

country_event = {
	id = bugged_inquisitive_catalog.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { has_valid_civic = civic_bugged_machine_researcher }
	}

	immediate = {
		add_monthly_resource_mult = {
			resource = unity
			value = 1
			min = 0
			max = 999999999999
		}
	}
}

namespace = bugged_primitive_criminals

planet_event = {
	id = bugged_primitive_criminals.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = { is_criminal_syndicate = yes }
		this = { owner = { is_primitive = yes } }
	}

	immediate = {
		add_deposit = d_bugged_criminal_underworld
	}
}

planet_event = {
	id = bugged_primitive_criminals.2
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = { is_criminal_syndicate = yes }
		this = { owner = { is_primitive = yes } }
	}

	immediate = {
		remove_deposit = d_bugged_criminal_underworld
	}

}

namespace = bugged_evangelism_unity

leader_event = {
	id = bugged_evangelism_unity.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		exists = owner
		owner = {
			is_bugged_evangelism = yes
		}
	}

	immediate = {
		owner = {
			export_trigger_value_to_variable = {
				trigger = num_envoys_to_galcom
				variable = bugged_evangelism_modifier_var
			}
			recalculate_evangelism_modifier = yes
		}
	}
}

namespace = bugged_paragon

# Democracy Cooldown Election for Direct Democratic and Group Firm
country_event = {
	id = bugged_paragon.501
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				OR = {
					has_authority = auth_bugged_direct_democratic
					has_authority = auth_bugged_corporate_democratic
				}
				ruler = {
					NOT = {
						has_leader_flag = ruler_at_election_start
					}
				}
			}
			set_government_cooldown = no
			reset_policy_cooldowns = yes
		}
	}
}

#
namespace = bugged_peaceful_traders

country_event = {
	id = bugged_peaceful_traders.1
	hide_window = yes

	is_triggered_only = yes

	# trigger = {
	# 	NOT = { has_country_flag = spawning_renowned_leader }
	# 	exists = owner
	# 	has_paragon_dlc = yes
	# 	is_bugged_peaceful_traders = yes
	# 	FROM = {
	# 		leader_class = governor
	# 	}
	# }

	# immediate = {
    #     every_owned_leader = {
    #         add_trait_no_notify = leader_trait_trade_focus
    #     }

    #     every_pool_leader = {
    #         add_trait_no_notify = leader_trait_trade_focus
    #     }
    # }
	trigger = {
		exists = owner
		is_bugged_peaceful_traders = yes
		host_has_dlc = "Galactic Paragons"
		FROM = { leader_class = governor }
	}

	immediate = {
		FROM = {
			add_trait_no_notify = leader_trait_trade_focus
		}
	}
}

country_event = {
	id = bugged_peaceful_traders.2
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		exists = owner
		is_bugged_peaceful_traders = yes
		host_has_dlc = "Galactic Paragons"
		FROM = { leader_class = governor }
	}

	immediate = {
		FROM = {
			add_trait_no_notify = leader_trait_trade_focus
		}
	}
}


namespace = bugged_materialist_gov
country_event = { # Technocracy Civic Giving Traits / FROM = Leader
	id = bugged_materialist_gov.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = spawning_renowned_leader }
		exists = owner
		is_country_type = default
		is_bugged_governmental_materialist = yes
		NOT = {
			has_valid_civic = civic_technocracy
		}
		FROM = { leader_class = scientist }
	}

	immediate = {
		FROM = {
			random_list = {
				10 = { add_trait_no_notify = leader_trait_expertise_materials }
				10 = { add_trait_no_notify = leader_trait_expertise_propulsion }
				10 = { add_trait_no_notify = leader_trait_expertise_voidcraft }
				10 = { add_trait_no_notify = leader_trait_expertise_industry }
				10 = { add_trait_no_notify = leader_trait_expertise_field_manipulation }
				10 = { add_trait_no_notify = leader_trait_expertise_particles }
				10 = { add_trait_no_notify = leader_trait_expertise_computing }
				10 = { add_trait_no_notify = leader_trait_expertise_new_worlds }
				10 = { add_trait_no_notify = leader_trait_expertise_statecraft }
				10 = { add_trait_no_notify = leader_trait_expertise_biology }
				10 = { add_trait_no_notify = leader_trait_expertise_military_theory }
				1 = {
					modifier = {
						add = 4
						root = {
							any_system_within_border = {
								any_archaeological_site = {
									is_site_completed = yes
								}
							}
						}
					}
					add_trait_no_notify = leader_trait_expertise_archaeostudies
				}
				1 = {
					modifier = {
						add = 4
						root = { has_technology = tech_psionic_theory }
					}
					add_trait_no_notify = leader_trait_expertise_psionics
				}
			}
		}
	}
}