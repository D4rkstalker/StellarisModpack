namespace = dyson_testing
#debugevents

#create an ambient object
planet_event = {
	id = dyson_testing.1
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		create_ambient_object = {
			type = "dyson_station_02"
			entity_offset_height = { min = -0 max = -40 }
			location = this
		}
		last_created_ambient_object = { 
			set_location = {
				target = fromfrom.planet
				distance = 30
				angle = random
			}
			set_ambient_object_flag = dyson_swarm_object
		}
	}
}

#placeholder event
planet_event = {
	id = dyson_testing.2
	title = dyson_testing.2.title
	desc = dyson_testing.2.desc
	location = ROOT
	
	is_triggered_only = yes
	
	option = {
		name = dyson_testing.2.a
	}
}

#spawn the ruined dyson swarm next to capital
country_event = {
	id = dyson_testing.3
	title = dyson_testing.3.title
	desc = dyson_testing.3.desc
	
	is_triggered_only = yes
	
	option = {
		name = dyson_testing.3.a
		owner.capital_scope.solar_system = {
			spawn_system = {
				min_distance >= 20
				max_distance <= 35
				initializer = "ruined_dyson_swarm"
			}
		}
	}
}

#clear all deposits and reset the scan
planet_event = {
	id = dyson_testing.4
	title = dyson_testing.4.title
	desc = dyson_testing.4.desc
	
	is_triggered_only = yes
	
	immediate = {
		clear_deposits = yes
		remove_planet_flag = dyson_init_decison_yes
	}
	
	option = {
		name = dyson_testing.2.a
	}
}

#remove all ambient objects related to dyson swarms
country_event = {
	id = dyson_testing.5
	title = dyson_testing.5.title
	desc = dyson_testing.5.desc
	
	is_triggered_only = yes
	
	immediate = {
		every_planet = {
			limit = {
				is_planet_class = pc_dyson_swarm
			}
			solar_system = {
				every_system_ambient_object = {
					limit = {
						has_ambient_object_flag = dyson_swarm_object
					}
					destroy_ambient_object = this
				}
			}
		}
	}
	
	option = {
		name = OK
	}
}

