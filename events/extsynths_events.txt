namespace = extsynths

# This flag facilitates automatic compatching for other mods.
# Anytime the code needs to check whether this mod is active, the event can just check for the flag.
# If the flag is not set, that means the player is not using this mod, and therefore the connected effect is not triggered.
# If the flag is set, that means the player is using this mod, and therefore the connected effect is triggered.
# This way, any other mod can be written with the code containing IF alternative effects for players both with and 
# without this mod, sparing the author from the need to create separate versions of the same mod.


planet_event = {
	id = extsynths.4000
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		from = {
			has_technology = tech_robotic_workers
		}
	}

	immediate = {
		if = {
			limit = {
				from = {
					has_technology = tech_robotic_workers
					NOT = {
						is_mechanical_empire = yes
					}
				}
			}
			create_built_robot_species_extsynth_bot = yes
			fromfrom = {
				if = {
					limit = {
						is_species_class = ROBOT
					}
					change_species = last_created_species
				}	
			}
		}
	}
}

event = {
	id = extsynths.4001
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		any_country = {
			any_owned_pop = {
				species = {
					is_species_class = ROBOT
				}
			}
		}
	}
	
	immediate = {
		every_country = {
			limit = {
				any_owned_pop = {
					species = {
						is_species_class = ROBOT
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_species_class = ROBOT
				}
				species = {
					save_event_target_as = extsynths_name
				}
			}
			create_species = {
				#is_mod = yes
				name = event_target:extsynths_name
				namelist = event_target:extsynths_name
				plural = event_target:extsynths_name
				class = "EXTSYNTH_BOT3"
				portrait = 2dsynth_01
				#homeworld = this
				traits = event_target:extsynths_name
				traits = {
					trait = "trait_mechanical"
				}
				effect = {
					save_event_target_as = new_robotic_species
				}
			}
			every_owned_pop = {
				limit = {
					species = {
						is_species_class = ROBOT
					}
				}
				change_species = event_target:new_robotic_species
			}
		}	
	}
}

event = {
	id = extsynths.4002
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		any_country = {
			has_ascension_perk = ap_synthetic_evolution
            has_country_flag = synthetic_empire
            OR = {
                has_ascension_perk = ap_evolutionary_mastery
                has_ascension_perk = ap_engineered_evolution
            }
		}
	}
	
	immediate = {
		every_country = {
			limit = {
				has_ascension_perk = ap_synthetic_evolution
                has_country_flag = synthetic_empire
                OR = {
                    has_ascension_perk = ap_evolutionary_mastery
                    has_ascension_perk = ap_engineered_evolution
					has_ascension_perk = ap_transcendence
                }
			}
            if = {
                limit = {
                    has_ascension_perk = ap_engineered_evolution
                    NOT = {
                        has_ascension_perk = ap_evolutionary_mastery
                    }
                    NOT = {
                        has_modifier = extsynths_bio_modifier
                    }
                }
                add_modifier = {
                    modifier = extsynths_bio_modifier
                    days = -1
                }
            }
            if = {
                limit = {
                    AND = {
                        has_ascension_perk = ap_engineered_evolution
                        has_ascension_perk = ap_evolutionary_mastery
                    }
                    NOT = {
                        has_modifier = extsynths_bio2_modifier
                    }
                }
                add_modifier = {
                    modifier = extsynths_bio2_modifier
                    days = -1
                }
                remove_modifier = extsynths_bio_modifier
            }
			if = {
                limit = {
                    has_ascension_perk = ap_transcendence
                    NOT = {
                        has_modifier = extsynths_psi_modifier
                    }
                }
                add_modifier = {
                    modifier = extsynths_psi_modifier
                    days = -1
                }
            }
			if = {
				limit = {
					NOT = {
						has_modifier = extsynths_ascended_modifier
					}
				}
#				add_modifier = {
#					modifier = extsynths_ascended_modifier
#					days = -1
#				}
			}
		}	
	}
}

event = {
	id = extsynths.1
	hide_window = yes
	is_triggered_only = yes
	
	
	
	immediate = {
		set_global_flag = extended_synths_on
		every_country = {
			limit = { 
				is_species_class = EXTSYNTH_BIO
				NOT = {
					has_country_flag = extsynths_game_started_country
				}
			}
			country_event = { id = extsynths.10001 }
			
		}
		every_country = {
			limit = { 
				is_species_class = MACHINE
				NOT = {
					has_country_flag = extsynths_game_started_country
				}
			}
			set_country_flag = extsynths_game_started_country
			country_event = { id = extsynths.10002 }
		}
		every_country = {
			limit = { 
				is_species_class = ROBOT
				NOT = {
					has_country_flag = extsynths_game_started_country
				}
			}
			country_event = { id = extsynths.10000 }
		}
		every_country = {
			limit = { 
				NOR = {
					is_species_class = MACHINE
					is_species_class = EXTSYNTH_DLC
					is_species_class = EXTSYNTH_BIO
					is_species_class = ROBOT
				}
				NOT = {
					has_country_flag = extsynths_game_started_country
				}
			}
			country_event = { id = extsynths.1111 }
#			country_event = { id = extsynths.1112 }
		}
	}
}

### Hidden Cleanup event for non-humanoid mechanists starting with vanilla robots. Disabled for people with Synthetic DLC as they will already use specific portraits.
country_event = {
	id = extsynths.1111 
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		NOT = {
			has_country_flag = extsynths_game_started_country
		}
	}
	
	
	immediate = {
		set_country_flag = extsynths_game_started_country
		create_species = {
			name = "NAME_Robot"
			plural = "NAME_Robots"
			class = EXTSYNTH_BOT3
			namelist = AI
			portrait = "2dsynth_01"
			traits = {
				trait = "trait_mechanical"
			}
			
			effect = {
				save_event_target_as = new_robotic_species
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_2dsynth_01 = yes }
					}			
					change_species_portrait = 2dsynth_012
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_mammaliansynth = yes }
					}			
					change_species_portrait = mammaliansynth2
				}
			}		
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_reptiliansynth = yes }
					}			
					change_species_portrait = reptiliansynth2
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_aviansynth = yes }
					}			
					change_species_portrait = aviansynth2
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_arthropoidsynth = yes }
					}			
					change_species_portrait = arthropoidsynth2
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_synthetic_robot_01 = yes }
					}			
					change_species_portrait = synthetic_robot_012
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_mammaliansynth = yes }
					}			
					change_species_portrait = mammaliansynth2
				}
			}
			effect = {
				if = {
					limit = {
						prev = { use_robot_portrait_sd_pla_robot = yes }
					}			
					change_species_portrait = sd_pla_robot2
				}
			}
		}
		every_owned_pop = {
			limit = { is_species_class = ROBOT }
			change_species = event_target:new_robotic_species
			
		}	
	}
}
### Hidden Cleanup event for non-humanoid mechanists starting with vanilla robots. Disabled for people with Synthetic DLC as they will already use specific portraits.
country_event = {
	id = extsynths.1112 
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = fallen_empire
		always = no
	}
	
	immediate = {
			create_species = {
				name = "NAME_Synthetic"
				plural = "NAME_Synthetics"
				class = EXTSYNTH_BOT3
				namelist = this
				portrait = "2dsynth_01"
				traits = {
					trait = "trait_mechanical"
					trait = "trait_robot_luxurious"
					trait = "trait_robot_domestic_protocols"
				}
				
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_2dsynth_01 = yes }
						}			
						change_species_portrait = 2dsynth_01
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_mammaliansynth = yes }
						}			
						change_species_portrait = mammaliansynth
					}
				}		
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_reptiliansynth = yes }
						}			
						change_species_portrait = reptiliansynth
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_aviansynth = yes }
						}			
						change_species_portrait = aviansynth
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_arthropoidsynth = yes }
						}			
						change_species_portrait = arthropoidsynth
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_synthetic_robot_01 = yes }
						}			
						change_species_portrait = synthetic_robot_01
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_mammaliansynth = yes }
						}			
						change_species_portrait = mammaliansynth
					}
				}
				effect = {
					if = {
						limit = {
							prev = { use_robot_portrait_sd_pla_robot = yes }
						}			
						change_species_portrait = sd_pla_robot
					}
				}
				effect = {
					save_event_target_as = new_robotic_species
				}
			}
		every_owned_pop = {
			limit = { is_species_class = ROBOT }
			change_species = event_target:new_robotic_species
			root = {
				set_country_flag = extsynths_game_started_country
			}
		}
	}
}

# The Synthetic Age - Vanilla description No effect

country_event = {
	id = extsynths.2
	title = "utopia.2551.name"
	desc = {
		text = "utopia.2551.desc"
		trigger = {
			NOT = {
				has_ascension_perk = ap_transcendence
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_spiritualist
			}
		}
	}
	desc = {
		text = "extsynths.2.desc"
		trigger = {
			has_ascension_perk = ap_transcendence
			OR = {
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_spiritualist
			}
		}
	}
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	is_triggered_only = yes
	
	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
		custom_tooltip = extsynth.2.tooltip
		hidden_effect = {
			if = { limit = { is_ai = yes
					host_has_dlc = "Synthetic Dawn Story Pack" } 
					 country_event = { id = extsynths.30005 }		 #AI doesn't choose if Synthetic Dawn is on 
				break = yes
			}
			if = { limit = { is_ai = yes
					NOT = { host_has_dlc = "Synthetic Dawn Story Pack" } } 
					country_event = { id = extsynths.2001 }
			}
			if = { limit = { is_ai = no } 
				country_event = { id = extsynths.2001 }
			}
		}
	}
}

country_event = {
	id = extsynths.10
	title = "extsynths.10.name"
	desc = "extsynths.10.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_default
	is_triggered_only = yes
	
	trigger = {
		last_increased_tech = "tech_robomodding"
		NOT = {
			has_country_flag = extsynths_event_10
			is_species_class = EXTSYNTH_BIO
		}
	}

	immediate = {
		set_country_flag = extsynths_event_10
	}
	
	
	option = {
		name = "EXCELLENT"
	}
}

country_event = {
	id = extsynths.11
	title = "extsynths.11.name"
	desc = "extsynths.11.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_default
	is_triggered_only = yes
	
	trigger = {
		always = no
		last_increased_tech = "tech_droid_workers"
		NOT = {		
			has_country_flag = extsynths_event_11
			is_species_class = EXTSYNTH_BIO
		}
	}
	immediate = {
		set_country_flag = extsynths_event_11
	}	
	option = {
		name = "EXCELLENT"
		custom_tooltip = extsynths.newoutfit.tooltip
	}
}

country_event = {
	id = extsynths.12
	title = "extsynths.11.name"
	desc = "extsynths.12.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_default
	is_triggered_only = yes

	trigger = {
		always = no
		last_increased_tech = "tech_synthetic_workers"
		NOT = {
			has_country_flag = extsynths_event_12
			is_species_class = EXTSYNTH_BIO
		}
	}
	immediate = {
		set_country_flag = extsynths_event_12
	}	
	option = {
		name = "EXCELLENT"
		custom_tooltip = extsynths.newoutfit.tooltip
	}
}

event = {
	id = extsynths.13
	hide_window = yes

	trigger = {
		always = no
		any_country = {
			NOT = {
				has_country_flag = extsynths_event_13
				has_country_flag = limbo_country
			}
			has_technology = tech_robomodding
			has_technology = tech_synthetic_workers
			has_country_flag = synthetic_age
			any_owned_pop = {
				is_being_purged = no
			}
		}
	}
	
	immediate = {
		every_country = {
			limit = {
				NOR = {
					has_country_flag = extsynths_event_13
					has_country_flag = limbo_country
				}
				has_technology = tech_robomodding
				has_technology = tech_synthetic_workers
				has_country_flag = synthetic_age
				any_owned_pop = {
					is_being_purged = no
				}			
			}
			country_event = { id = extsynths.14 }
		}
	}	
}

country_event = {
	id = extsynths.14
	title = "extsynths.13.name"
	desc = "extsynths.13.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_default
	is_triggered_only = yes
	trigger = {
		always = no
		NOT = {
			has_country_flag = extsynths_event_13
		}
	}
	
	immediate = {
		set_country_flag = extsynths_event_13
	}	
	option = {
		name = "GOOD"
		custom_tooltip = extsynths.limbo.tooltip
	}
}
###ONE-TIME MODIFICATION COST DISCOUNT USED###
country_event = {
	id = extsynths.15
	title = "extsynths.15.name"
	desc = "extsynths.15.desc"
	picture = GFX_evt_circuitry_modification
	show_sound = event_default
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = extsynths_event_15
		}
		has_modifier = extsynths_modding_modifier
		from = {
			OR = {
				is_species_class = EXTSYNTH
				is_species_class = MACHINE
			}
		}
	}
	
	immediate = {
		set_country_flag = extsynths_event_15
		remove_modifier = extsynths_modding_modifier
	}	
	option = {
		name = GOOD
		custom_tooltip = extsynths.15.tooltip
	}
}

###ONE-TIME MODIFICATION COST USED ON OTHER SPECIES###
country_event = {
	id = extsynths.16
	title = "extsynths.16.name"
	desc = "extsynths.16.desc"
	picture = GFX_evt_genetic_modification
	show_sound = event_default
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = extsynths_event_15
		}
		has_modifier = extsynths_modding_modifier
		from = {
			NOR = {
				is_species_class = EXTSYNTH
				is_species_class = MACHINE
			}
		}
	}
	
	immediate = {
		set_country_flag = extsynths_event_15
		remove_modifier = extsynths_modding_modifier
	}	
	option = {
		name = OK
		custom_tooltip = extsynths.15.tooltip
	}
}

# The Synthetic Age - Decide which form for new species

country_event = {
	id = extsynths.2001
	title = "utopia.2551.name"
	desc = "extsynths.2001.desc"	
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	is_triggered_only = yes

	option = {
		name = "extsynths.2.a"
			trigger = { OR = { is_ai = no
					is_humanoid_class = yes } } 
			set_country_flag = extsynths_option_1
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.b"
			trigger = { OR = { is_ai = no
					is_mammal_class = yes } } 
			set_country_flag = extsynths_option_2
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.c"
			trigger = { OR = { is_ai = no
					is_reptilian_class = yes } } 
			set_country_flag = extsynths_option_3
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.d"
			trigger = { OR = { is_ai = no
					is_avian_class = yes } } 
			set_country_flag = extsynths_option_4
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.e"
			trigger = { OR = { is_ai = no
					is_arthropoid_class = yes } }
			set_country_flag = extsynths_option_5
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.f"
			trigger = { OR = { is_ai = no
					is_molluscoid_class = yes } }
			set_country_flag = extsynths_option_6
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.g"
			trigger = { OR = { is_ai = no
					is_fungoid_class = yes } }
			set_country_flag = extsynths_option_7
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.h"
			trigger = { OR = { is_ai = no
					is_plantoid_class = yes } }
			set_country_flag = extsynths_option_8
			country_event = { id = extsynths.30001 } 
	}
	
	option = {
		name = "extsynths.2.syn"
			trigger = { OR = { is_ai = no
					is_reptilian_class = yes } }
			set_country_flag = extsynths_option_27
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.derg"
			trigger = { OR = { is_ai = no
					is_reptilian_class = yes } }
			set_country_flag = extsynths_option_28
			country_event = { id = extsynths.30001 } 
	}
    option = {
		name = "extsynths.2.r"		#No change - maintain portrait
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_16
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.s"		#More choices
			trigger = { OR = { is_ai = no
					 is_virtual_class = yes
					 is_celestial_class = yes } } 
			country_event = { id = extsynths.2002 } 
	}
}


country_event = {
	id = extsynths.2002
	title = "utopia.2551.name"
	desc = "extsynths.2001.desc"	
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	is_triggered_only = yes


			### 	ADDITIONAL CHOICES - If player wants to use robot/droid bodies  	### 
	option = {
		name = "extsynths.2.i"
			trigger = { OR = { is_ai = no
					is_virtual_class = yes } }
			set_country_flag = extsynths_option_9
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.l"
			trigger = { OR = { is_ai = no
					 is_celestial_class = yes } }
			set_country_flag = extsynths_option_10
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.syn"	
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_27
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.derg"
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_28
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.o"		#Robot Arthropoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_13
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.p"		#Android Arthropoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_14
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.q"		#Ai Consciousness
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_15
			country_event = { id = extsynths.30001 } 
	}
	
	option = {
		name = "extsynths.2.s"		#Backtrack
			trigger = { is_ai = no } 
			country_event = { id = extsynths.2001 } 
	}
	option = {
		name = "extsynths.2.t"		#Synthetic Dawn options
			trigger = { is_ai = no
			host_has_dlc = "Synthetic Dawn Story Pack" } 
			country_event = { id = extsynths.2003 } 
	}
}

country_event = {
	id = extsynths.2003
	title = "utopia.2551.name"
	desc = "extsynths.2001.desc"	
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	is_triggered_only = yes


			### 	ADDITIONAL CHOICES - Synthetic Dawn Portraits 	### 
	option = {
		name = "extsynths.2.u" 		#Humanoid
			trigger = { is_ai = no }
			set_country_flag = extsynths_option_17
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.v"		#Mammal
			trigger = { is_ai = no }
			set_country_flag = extsynths_option_18
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.w"		#Reptilian
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_19
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.x" 		#Avian
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_20
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.y"		#Arthropoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_21
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.z"		#Molluscoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_22
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.yz"		#Fungoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_23
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.xz"		#Plantoid
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_24
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.lit"		#lithoid
			trigger = { 
				is_ai = no
				has_lithoids = yes
			} 
			set_country_flag = extsynths_option_26
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.xxz"		#Terminator
			trigger = { is_ai = no } 
			set_country_flag = extsynths_option_25
			country_event = { id = extsynths.30001 } 
	}
	option = {
		name = "extsynths.2.s"		#Backtrack
			trigger = { is_ai = no } 
			country_event = { id = extsynths.2001 } 
	}
}

# The Synthetic Age
country_event = {
	id = extsynths.30001 
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = synthetic_empire
		give_technology = { tech = tech_bio_reactor message = no }
		set_policy = { 
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = no
		}
		set_policy = { 
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth
			option = synth_full_rights_extsynth
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth_machinedlc
			option = synth_full_rights_extsynth
			cooldown = no
		}
		add_modifier = {
			modifier = extsynths_modding_modifier
			days = -1
		}
		country_event = { id = action.56 }
        if = {
            limit = {
                has_ascension_perk = ap_engineered_evolution
                NOT = {
                    has_ascension_perk = ap_evolutionary_mastery
                }
                NOT = {
                    has_modifier = extsynths_bio_modifier
                }
            }
            add_modifier = {
                modifier = extsynths_bio_modifier
                days = -1
            }
        }
        if = {
            limit = {
                AND = {
                    has_ascension_perk = ap_engineered_evolution
                    has_ascension_perk = ap_evolutionary_mastery
                }
                NOT = {
                    has_modifier = extsynths_bio2_modifier
                }
            }
            add_modifier = {
                modifier = extsynths_bio2_modifier
                days = -1
            }
            remove_modifier = extsynths_bio_modifier
        }
		if = {
			limit = {
				has_ascension_perk = ap_transcendence
				NOT = {
					has_modifier = extsynths_psi_modifier
				}
			}
			add_modifier = {
				modifier = extsynths_psi_modifier
				days = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_modifier = extsynths_ascended_modifier
				}
			}
#			add_modifier = {
#				modifier = extsynths_ascended_modifier
#				days = -1
#			}
		}
		random_owned_planet = {
			limit = {
				is_homeworld = yes
			}
			save_event_target_as = new_species_homeworld
		}
		if = {
			limit = {
				species = {
					has_trait = "trait_psionic"
				}
#				AND = {
#					has_ascension_perk = ap_mind_over_matter
#					has_ascension_perk = ap_transcendence
#				}	
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "EXTSYNTH"
				portrait = this
				homeworld = event_target:new_species_homeworld
				traits = {
					trait = "trait_mechanical"
					trait = "trait_extsynth_synthetic"
					trait = "trait_psionic"
				}
				
				effect = {
					if = { limit = { prev = { has_country_flag = extsynths_option_1 } }
						change_species_characteristics = { portrait = "humansynth" }
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_2 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_3 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_4 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_5 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_6 } }
							change_species_characteristics = { portrait = "molluscoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_7 } }
							change_species_characteristics = { portrait = "fungoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_8 } }
							change_species_characteristics = { portrait = "plantoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_9 } }
							change_species_characteristics = { portrait = "holofrixigram" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_10 } }
							change_species_characteristics = { portrait = "zeriphensynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_11 } }
							change_species_characteristics = { portrait = "humrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_12 } }
							change_species_characteristics = { portrait = "humroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_13 } }
							change_species_characteristics = { portrait = "anthrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_14 } }
							change_species_characteristics = { portrait = "anthroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_15 } }
							change_species_characteristics = { portrait = "humaicon" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_17 } }
							change_species_characteristics = { portrait = "2dsynth_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_18 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_19 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_20 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_21 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_22 } }
							change_species_characteristics = { portrait = "synthetic_robot_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_23 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_24 } }
							change_species_characteristics = { portrait = "sd_pla_robot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_25 } }
							change_species_characteristics = { portrait = "syntherminator" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_26 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_27 } }
						change_species_characteristics = { portrait = "2dsynth_01" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_28 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					save_event_target_as = new_robotic_species							  
				}
			}
		}
		if = {
			limit = {
				species = {
					has_trait = "trait_latent_psionic"
				}
#					has_ascension_perk = ap_mind_over_matter
#					NOT = {
#						has_ascension_perk = ap_transcendence
#					}
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "EXTSYNTH"
				portrait = this
				homeworld = event_target:new_species_homeworld
				traits = {
					trait = "trait_mechanical"
					trait = "trait_extsynth_synthetic"
					trait = "trait_latent_psionic"
				}
				
				effect = {
					if = { limit = { prev = { has_country_flag = extsynths_option_1 } }
						change_species_characteristics = { portrait = "humansynth" }
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_2 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_3 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_4 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_5 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_6 } }
							change_species_characteristics = { portrait = "molluscoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_7 } }
							change_species_characteristics = { portrait = "fungoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_8 } }
							change_species_characteristics = { portrait = "plantoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_9 } }
							change_species_characteristics = { portrait = "holofrixigram" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_10 } }
							change_species_characteristics = { portrait = "zeriphensynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_11 } }
							change_species_characteristics = { portrait = "humrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_12 } }
							change_species_characteristics = { portrait = "humroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_13 } }
							change_species_characteristics = { portrait = "anthrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_14 } }
							change_species_characteristics = { portrait = "anthroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_15 } }
							change_species_characteristics = { portrait = "humaicon" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_17 } }
							change_species_characteristics = { portrait = "2dsynth_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_18 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_19 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_20 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_21 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_22 } }
							change_species_characteristics = { portrait = "synthetic_robot_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_23 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_24 } }
							change_species_characteristics = { portrait = "sd_pla_robot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_25 } }
							change_species_characteristics = { portrait = "syntherminator" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_26 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_27 } }
						change_species_characteristics = { portrait = "2dsynth_01" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_28 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					save_event_target_as = new_robotic_species							  
				}
			}
		}
		if = {
			limit = {
				species = {
					NOR = {
						has_trait = "trait_latent_psionic"
						has_trait = "trait_psionic"
					}
				}
#				NOT = {
#					has_ascension_perk = ap_mind_over_matter
#					has_ascension_perk = ap_transcendence
#				}	
			}
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "EXTSYNTH"
				portrait = this
				homeworld = event_target:new_species_homeworld
				traits = {
					trait = "trait_mechanical"
					trait = "trait_extsynth_synthetic"
				}
				
				effect = {
					if = { limit = { prev = { has_country_flag = extsynths_option_1 } }
						change_species_characteristics = { portrait = "humansynth" }
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_2 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_3 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_4 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_5 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_6 } }
							change_species_characteristics = { portrait = "molluscoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_7 } }
							change_species_characteristics = { portrait = "fungoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_8 } }
							change_species_characteristics = { portrait = "plantoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_9 } }
							change_species_characteristics = { portrait = "holofrixigram" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_10 } }
							change_species_characteristics = { portrait = "zeriphensynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_11 } }
							change_species_characteristics = { portrait = "humrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_12 } }
							change_species_characteristics = { portrait = "humroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_13 } }
							change_species_characteristics = { portrait = "anthrobot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_14 } }
							change_species_characteristics = { portrait = "anthroid" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_15 } }
							change_species_characteristics = { portrait = "humaicon" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_17 } }
							change_species_characteristics = { portrait = "2dsynth_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_18 } }
                            change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_19 } }
							change_species_characteristics = { portrait = "reptiliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_20 } }
							change_species_characteristics = { portrait = "aviansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_21 } }
							change_species_characteristics = { portrait = "arthropoidsynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_22 } }
							change_species_characteristics = { portrait = "synthetic_robot_01" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_23 } }
							change_species_characteristics = { portrait = "mammaliansynth" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_24 } }
							change_species_characteristics = { portrait = "sd_pla_robot" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_25 } }
							change_species_characteristics = { portrait = "syntherminator" } 
						 }
					if = { limit = { prev = { has_country_flag = extsynths_option_26 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_27 } }
						change_species_characteristics = { portrait = "2dsynth_01" } 
						}
					if = { limit = { prev = { has_country_flag = extsynths_option_28 } }
						change_species_characteristics = { portrait = "dragon_robot" } 
						}
					save_event_target_as = new_robotic_species							  
				}
                
			}
		}
        
        set_built_species = event_target:new_robotic_species
        
		every_owned_pop = {
			limit = {
				species = {
                    OR = {
                        has_trait = trait_cybernetic
                        has_trait = trait_mechanical
                    }
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		
		every_owned_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		
		observer_event = { id = observer.4 }
		every_country = {
			limit = { 
				is_ai = no 
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					is_mechanical_empire = no
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					is_mechanical_empire = no
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					is_mechanical_empire = no
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		ROOT = {
			set_country_flag = synthetic_age
			remove_country_flag = extsynths_option_1
			remove_country_flag = extsynths_option_2
			remove_country_flag = extsynths_option_3
			remove_country_flag = extsynths_option_4
			remove_country_flag = extsynths_option_5
			remove_country_flag = extsynths_option_6
			remove_country_flag = extsynths_option_7
			remove_country_flag = extsynths_option_8
			remove_country_flag = extsynths_option_9
			remove_country_flag = extsynths_option_10
			remove_country_flag = extsynths_option_11
			remove_country_flag = extsynths_option_12
			remove_country_flag = extsynths_option_13
			remove_country_flag = extsynths_option_14
			remove_country_flag = extsynths_option_15
			remove_country_flag = extsynths_option_16
			remove_country_flag = extsynths_option_17
			remove_country_flag = extsynths_option_18
			remove_country_flag = extsynths_option_19
			remove_country_flag = extsynths_option_20
			remove_country_flag = extsynths_option_21
			remove_country_flag = extsynths_option_22
			remove_country_flag = extsynths_option_23
			remove_country_flag = extsynths_option_24	
			remove_country_flag = extsynths_option_25
			remove_country_flag = extsynths_option_26
			remove_country_flag = extsynths_option_27
			remove_country_flag = extsynths_option_28
		}
	}
}


###AI version###
# The Synthetic Age
country_event = {
	id = extsynths.30005
	title = "utopia.2551.name"
	desc = "utopia.2551.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = synthetic_empire	
		give_technology = { tech = tech_bio_reactor message = no }
		set_policy = { 
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = no
		}
		set_policy = { 
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth
			option = synth_full_rights_extsynth
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth_machinedlc
			option = synth_full_rights_extsynth
			cooldown = no
		}
		add_modifier = {
			modifier = extsynths_modding_modifier
			days = -1
		}
		if = {
			limit = {
				NOT = {
					has_modifier = extsynths_ascended_modifier
				}
			}
#			add_modifier = {
#				modifier = extsynths_ascended_modifier
#				days = -1
#			}
		}
		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "EXTSYNTH"
			portrait = "2dsynth_01"
			traits = {
				trait = "trait_mechanical"
				trait = "trait_extsynth_synthetic"
			}
			
			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "2dsynth_01" } } }
							MAM = { prev = { change_species_characteristics = { portrait = "mammaliansynth" } } }
							REP = { prev = { change_species_characteristics = { portrait = "reptiliansynth" } } }
							AVI = { prev = { change_species_characteristics = { portrait = "aviansynth" } } }
							ART = { prev = { change_species_characteristics = { portrait = "arthropoidsynth" } } }
							MOL = { prev = { change_species_characteristics = { portrait = "synthetic_robot_01" } } }
							FUN = { prev = { change_species_characteristics = { portrait = "mammaliansynth" } } }
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							LITHOID = { prev = { change_species_characteristics = { portrait = "dragon_robot" } } }
						}
					}
				}

				rename_species = {
					prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
				
				save_event_target_as = new_robotic_species
			}
		}
		
		set_built_species = event_target:new_robotic_species
		
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_cybernetic 
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		
		every_owned_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		
		observer_event = { id = observer.4 }
		every_country = {
			limit = { 
				is_ai = no 
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
	}
	
	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
	}
}

### Fix event for other mod that turn organic ppl to synthetic, and synthetic are classifed as Robotic###
country_event = {
	id = extsynths.10000
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_species_class = ROBOT
		any_owned_pop = {
			species = {
				has_trait = trait_mechanical
			}
		}
		NOT = {
			has_country_flag = extsynths_game_started_country
		}
	}
	
	immediate = {
		set_country_flag = extsynths_game_started_country
		give_technology = { tech = tech_bio_reactor message = no }
		if = {
			limit = {
				has_country_flag = limbo_country
			}
			give_technology = { tech = tech_administrative_ai 	message = no }
			give_technology = { tech = tech_sapient_ai 	message = no }
			give_technology = { tech = tech_combat_computers_1 	message = no }
			give_technology = { tech = tech_combat_computers_2 	message = no }
			give_technology = { tech = tech_combat_computers_3 	message = no }
			give_technology = { tech = tech_self_aware_logic 	message = no }
			give_technology = { tech = tech_powered_exoskeletons 	message = no }
			give_technology = { tech = tech_robotic_workers 	message = no }
			give_technology = { tech = tech_robomodding 	message = no }
			give_technology = { tech = tech_droid_workers 	message = no } 
			give_technology = { tech = tech_synthetic_workers 	message = no } 
			give_technology = { tech = tech_synthetic_leaders 	message = no } 
			give_technology = { tech = tech_synthetic_thought_patterns 	message = no } 
		}
		set_policy = { 
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = no
		}
		set_policy = { 
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth
			option = synth_full_rights_extsynth
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth_machinedlc
			option = synth_full_rights_extsynth
			cooldown = no
		}
		add_modifier = {
			modifier = extsynths_modding_modifier
			days = -1
		}
		if = {
			limit = {
				NOT = {
					has_modifier = extsynths_ascended_modifier
				}
			}
#			add_modifier = {
#				modifier = extsynths_ascended_modifier
#				days = -1
#			}
		}
		create_species = {
			#is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "EXTSYNTH"
			portrait = this
			homeworld = this
			traits = this
			traits = {
				trait = "trait_mechanical"
				trait = "trait_extsynth_synthetic"
			}
			effect = {
				if = {
					limit = {
						prev = { has_country_flag = limbo_country }
					}			
					change_species_portrait = synth_fun8
				}
			}
			effect = {
		#		rename_species = {
		#			prompt_country = prev #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
		#			name_list = robots_test #TODO[DE] Make sure this points to a release-quality list
		#		}
				save_event_target_as = new_robotic_species
			}
		}
		
#		set_built_species = event_target:new_robotic_species
		
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_mechanical 
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_mechanical
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		
		every_owned_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { 
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		ROOT = {
			set_country_flag = synthetic_age
			create_built_robot_species_extsynth_bot2 = yes
		}
	} #closing immediate
}

### Hidden Game Start Event for Synthetic starting race, if player picks it.
country_event = {
	id = extsynths.10001
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_species_class = EXTSYNTH_BIO
		NOT = {
			has_country_flag = extsynths_game_started_country
		}
	}
	
	immediate = { 
		set_country_flag = extsynths_game_started_country
		
		set_country_flag = synthetic_empire	
		add_modifier = {
			modifier = extsynths_modifier
			days = -1
		}
		add_modifier = {
			modifier = extsynths_modding_modifier
			days = -1
		}
		if = {
			limit = {
				NOT = {
					has_modifier = extsynths_ascended_modifier
				}
			}
#			add_modifier = {
#				modifier = extsynths_ascended_modifier
#				days = -1
#			}
		}
		set_policy = { 
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = no
		}
		set_policy = { 
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth
			option = synth_full_rights_extsynth
			cooldown = no
		}
		set_policy = { 
			policy = synth_right_extsynth_machinedlc
			option = synth_full_rights_extsynth
			cooldown = no
		}
		give_technology = { tech = tech_bio_reactor message = no }
		give_technology = { tech = tech_administrative_ai 	message = no }
		give_technology = { tech = tech_sapient_ai 	message = no }
		give_technology = { tech = tech_combat_computers_1 	message = no }
		give_technology = { tech = tech_combat_computers_2 	message = no }
		give_technology = { tech = tech_combat_computers_3 	message = no }
		give_technology = { tech = tech_self_aware_logic 	message = no }
		give_technology = { tech = tech_powered_exoskeletons 	message = no }
		give_technology = { tech = tech_robotic_workers 	message = no }
		give_technology = { tech = tech_robomodding 	message = no }
		give_technology = { tech = tech_droid_workers 	message = no } 
		give_technology = { tech = tech_synthetic_workers 	message = no } 
		give_technology = { tech = tech_synthetic_leaders 	message = no } 
		give_technology = { tech = tech_synthetic_thought_patterns 	message = no } 
		random_owned_planet = {
			limit = {
				is_homeworld = yes
			}
			save_event_target_as = new_species_homeworld
		}
		create_species = {
			#is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "EXTSYNTH"
			portrait = this
			homeworld = event_target:new_species_homeworld
			traits = {
				trait = "trait_mechanical"
				trait = "trait_extsynth_synthetic"
			}

			effect = {
				save_event_target_as = new_robotic_species
			}
		}
		every_owned_pop = {
            limit = {
                OR = {
                    species_portrait = 2dsynth_01
                    species_portrait = mammaliansynth
			        species_portrait = reptiliansynth
			        species_portrait = aviansynth
			        species_portrait = arthropoidsynth
			        species_portrait = synthetic_robot_01
			        species_portrait = mammaliansynth
			        species_portrait = sd_pla_robot
                    species_portrait = 2dsynth_012
                    species_portrait = mammaliansynth2
			        species_portrait = reptiliansynth2
			        species_portrait = aviansynth2
			        species_portrait = arthropoidsynth2
			        species_portrait = synthetic_robot_012
			        species_portrait = mammaliansynth2
			        species_portrait = sd_pla_robot2
					species_portrait = dragon_robot
                    species_portrait = 2dsynth_01
			        species_portrait = anthrobot
			        species_portrait = anthroid
			        species_portrait = humrobot
			        species_portrait = humroid
			        species_portrait = humansynth
			        species_portrait = mammaliansynth
			        species_portrait = reptiliansynth
			        species_portrait = aviansynth
			        species_portrait = arthropoidsynth
			        species_portrait = molluscoidsynth
			        species_portrait = fungoidsynth
			        species_portrait = plantoidsynth
			        species_portrait = holofrixigram
			        species_portrait = zeriphensynth
			        species_portrait = humaicon
			        species_portrait = syntherminator
			        species_portrait = dragon_robot
			        species_portrait = 2dsynth_01
                }
            }
			change_species = event_target:new_robotic_species
		}
		
		set_built_species = event_target:new_robotic_species
		
		every_owned_ship = {
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		
		every_owned_leader = {
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
			if = {
				limit = {
					has_skill < 3
				}
				set_skill = 3
			}
		}
		every_pool_leader = {
			limit = { 
				species = {
                    OR = {
                        species_portrait = 2dsynth_01
                        species_portrait = mammaliansynth
                        species_portrait = reptiliansynth
                        species_portrait = aviansynth
                        species_portrait = arthropoidsynth
                        species_portrait = synthetic_robot_01
                        species_portrait = mammaliansynth
                        species_portrait = sd_pla_robot
                        species_portrait = 2dsynth_012
                        species_portrait = mammaliansynth2
                        species_portrait = reptiliansynth2
                        species_portrait = aviansynth2
                        species_portrait = arthropoidsynth2
                        species_portrait = synthetic_robot_012
                        species_portrait = mammaliansynth2
                        species_portrait = sd_pla_robot2
						species_portrait = dragon_robot
                        species_portrait = 2dsynth_01
                        species_portrait = anthrobot
                        species_portrait = anthroid
                        species_portrait = humrobot
                        species_portrait = humroid
                        species_portrait = humansynth
                        species_portrait = mammaliansynth
                        species_portrait = reptiliansynth
                        species_portrait = aviansynth
                        species_portrait = arthropoidsynth
                        species_portrait = molluscoidsynth
                        species_portrait = fungoidsynth
                        species_portrait = plantoidsynth
                        species_portrait = holofrixigram
                        species_portrait = zeriphensynth
                        species_portrait = humaicon
                        species_portrait = syntherminator
						species_portrait = dragon_robot
						species_portrait = 2dsynth_01
                    }
                }
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
#				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			set_skill = 3
			limit = {
#				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}

		set_country_flag = synthetic_age
	} #closing immediate
}


### Hidden Game Start Event for Machine starting race, if player picks it. (workaround to fix 0 growth issue)
country_event = {
	id = extsynths.10002
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		always = no #Disable for 2.7
		is_species_class = MACHINE
		NOT = {
			has_country_flag = extsynths_game_started_country
		}
	}
	
	immediate = {
		set_country_flag = extsynths_game_started_country

		random_owned_planet = {
			limit = {
				is_homeworld = yes
			}
			save_event_target_as = new_species_homeworld
		}
		
		create_species = {
			name = this
			namelist = this
			plural = this
			class = EXTSYNTH_DLC
			portrait = this
			homeworld = event_target:new_species_homeworld
			traits = this

			effect = {
				save_event_target_as = new_robotic_species
			}
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		set_built_species = event_target:new_robotic_species
		
		every_owned_pop = {
			limit = {
				is_species_class = MACHINE
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = { is_ship_class = shipclass_colonizer }
			change_species = event_target:new_robotic_species
		}
		

		every_owned_leader = { 
			limit = {
				species = {
					is_species_class = MACHINE
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = event_target:new_robotic_species
		}
		every_pool_leader = { 
			limit = {
				species = {
					is_species_class = MACHINE
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = event_target:new_robotic_species
		}
		
	} #closing immediate
}


# A Cybernetic Revolution

country_event = {
	id = extsynths.11000
	title = "utopia.2501.name"
	desc = "utopia.2501.desc"
	picture = GFX_evt_cybernetics
	show_sound = event_the_flesh_is_weak
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = flesh_weakened
		random_owned_pop = {
			limit = { is_same_species = root }
			create_cybernetic_species_mod_extsynth = yes
		}
		change_dominant_species = { species = last_created }
		
		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod_extsynth = yes
			}
		}
		
		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod_extsynth = yes
			}
		}
		
		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				create_cybernetic_species_mod_extsynth = yes
			}
		}
		
		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
		  					has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				create_cybernetic_species_mod_extsynth = yes
			}
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = trait_cybernetic
	  					has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			create_cybernetic_species_mod_extsynth = yes
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
		
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		observer_event = { id = observer.55 }
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2505 days = 5 }
		}
	}
	
	option = {
		name = "utopia.2501.a"
		custom_tooltip = CYBORG_ASSIMILATION_CITIZENSHIP_ENABLED
		if = {
			limit = {
					root = { is_species_class = DRG }
					root = { species_portrait = dragon_normal }
			}
			country_event = { id = utopiaDRG.0003 }
		}
	}
}
###Ascended Synth shouldn't have obvious organic flaw traits
event = {
	id = extsynths.15000
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			OR = {
				any_owned_leader = {
					species = {
						has_trait = trait_extsynth_synthetic
					}
					OR = {
						has_trait = leader_trait_resilient
						has_trait = leader_trait_substance_abuser
						has_trait = leader_trait_arrested_development
						has_trait = leader_trait_paranoid
						has_trait = leader_trait_custom_AI_assistant
						has_trait = leader_trait_traumatized
						has_trait = leader_trait_maimed
					}
				}
				any_pool_leader = {
					species = {
						has_trait = trait_extsynth_synthetic
					}
					OR = {
						has_trait = leader_trait_resilient
						has_trait = leader_trait_substance_abuser
						has_trait = leader_trait_arrested_development
						has_trait = leader_trait_paranoid
						has_trait = leader_trait_custom_AI_assistant
						has_trait = leader_trait_traumatized
						has_trait = leader_trait_maimed
					}
				}
			}
		}
	}
	immediate = {
		every_playable_country = {
			limit = {
				OR = {
					any_owned_leader = {
						species = {
							has_trait = trait_extsynth_synthetic
						}
						OR = {
							has_trait = leader_trait_resilient
							has_trait = leader_trait_substance_abuser
							has_trait = leader_trait_arrested_development
							has_trait = leader_trait_paranoid
							has_trait = leader_trait_custom_AI_assistant
							has_trait = leader_trait_traumatized
							has_trait = leader_trait_maimed
						}
					}
					any_pool_leader = {
						species = {
							has_trait = trait_extsynth_synthetic
						}
						OR = {
							has_trait = leader_trait_resilient
							has_trait = leader_trait_substance_abuser
							has_trait = leader_trait_arrested_development
							has_trait = leader_trait_paranoid
							has_trait = leader_trait_custom_AI_assistant
							has_trait = leader_trait_traumatized
							has_trait = leader_trait_maimed
						}
					}
				}
			}
			country_event = { id = extsynths.15001 }
		}
	}
}

country_event = {
	id = extsynths.15001
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			any_owned_leader = {
				species = {
					has_trait = trait_extsynth_synthetic
				}
				OR = {
					has_trait = leader_trait_resilient
					has_trait = leader_trait_substance_abuser
					has_trait = leader_trait_arrested_development
					has_trait = leader_trait_paranoid
					has_trait = leader_trait_custom_AI_assistant
					has_trait = leader_trait_traumatized
					has_trait = leader_trait_maimed
				}
			}
			any_pool_leader = {
				species = {
					has_trait = trait_extsynth_synthetic
				}
				OR = {
					has_trait = leader_trait_resilient
					has_trait = leader_trait_substance_abuser
					has_trait = leader_trait_arrested_development
					has_trait = leader_trait_paranoid
					has_trait = leader_trait_custom_AI_assistant
					has_trait = leader_trait_traumatized
					has_trait = leader_trait_maimed
				}
			}
		}
	}
	
	immediate = {
		every_owned_leader = {
			limit = {
				species = {
					has_trait = trait_extsynth_synthetic
				}
				OR = {
					has_trait = leader_trait_resilient
					has_trait = leader_trait_substance_abuser
					has_trait = leader_trait_arrested_development
					has_trait = leader_trait_paranoid
					has_trait = leader_trait_custom_AI_assistant
					has_trait = leader_trait_traumatized
					has_trait = leader_trait_maimed
				}
			}
			switch = {
				trigger = has_trait
				leader_trait_resilient = {
					remove_trait = leader_trait_resilient
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_substance_abuser = {
					remove_trait = leader_trait_substance_abuser
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_arrested_development = {
					remove_trait = leader_trait_arrested_development
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_paranoid = {
					remove_trait = leader_trait_paranoid
					if = {
						limit = {
							leader_class = scientist
						}
						effect_extsynth_leader_trait_tweaks_scientist = yes
					}
				}
				leader_trait_custom_AI_assistant = {
					remove_trait = leader_trait_custom_AI_assistant
					add_trait = leader_trait_sapient_AI_assistant
				}
				leader_trait_traumatized = {
					remove_trait = leader_trait_traumatized

				}
				leader_trait_maimed = {
					remove_trait = leader_trait_maimed

				}
			}
		}
		every_pool_leader = {
			limit = {
				species = {
					has_trait = trait_extsynth_synthetic
				}
				OR = {
					has_trait = leader_trait_resilient
					has_trait = leader_trait_substance_abuser
					has_trait = leader_trait_arrested_development
					has_trait = leader_trait_paranoid
					has_trait = leader_trait_custom_AI_assistant
					has_trait = leader_trait_traumatized
					has_trait = leader_trait_maimed
				}
			}
			switch = {
				trigger = has_trait
				leader_trait_resilient = {
					remove_trait = leader_trait_resilient
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_substance_abuser = {
					remove_trait = leader_trait_substance_abuser
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_arrested_development = {
					remove_trait = leader_trait_arrested_development
					effect_extsynth_leader_trait_tweaks = yes
				}
				leader_trait_paranoid = {
					remove_trait = leader_trait_paranoid
					if = {
						limit = {
							leader_class = scientist
						}
						effect_extsynth_leader_trait_tweaks_scientist = yes
					}
				}
				leader_trait_custom_AI_assistant = {
					remove_trait = leader_trait_custom_AI_assistant
					add_trait = leader_trait_sapient_AI_assistant
				}
				leader_trait_traumatized = {
					remove_trait = leader_trait_traumatized

				}
				leader_trait_maimed = {
					remove_trait = leader_trait_maimed

				}
			}
		}
	}
}
###Synth leader skill starts at 3
country_event = {
	id = extsynths.15002
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		from = {
			species = {
				has_trait = trait_extsynth_synthetic
			}
			has_skill < 3
		}
	}
	
	immediate = {
		from = {
			if = {
				limit = {
					has_skill < 3
					species = {
						has_trait = trait_extsynth_synthetic
					}
					
				}
				set_skill = 3
			}
		}
	}
}