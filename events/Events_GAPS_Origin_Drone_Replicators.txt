namespace = Events_GAPS_Drone_Replicators

country_event = {
	id = Events_GAPS_Drone_Replicators.1
	title = Events_GAPS_Drone_Replicators.1.name
	desc = Events_GAPS_Drone_Replicators.1.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	trigger = {
		owner = { has_origin = Origin_GAPS_Drone_Replicators }
		OR = {
			last_increased_tech = Tech_GAPS_Drone_Replication_1
			last_increased_tech = Tech_GAPS_Drone_Replication_2
			last_increased_tech = Tech_GAPS_Drone_Replication_3
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators.First_Choice"
		custom_tooltip = "Events_GAPS_Drone_Replicators.First_Choice.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_First_Choice
			change_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 }
			if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 2 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 3 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn
			}
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_First_Choice }
		}
		ai_chance = {
			factor = 20
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators.Second_Choice"
		custom_tooltip = "Events_GAPS_Drone_Replicators.Second_Choice.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Second_Choice
			change_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 }
			if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 2 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 3 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn
			}
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Second_Choice }
		}
		ai_chance = {
			factor = 20
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators.Third_Choice"
		custom_tooltip = "Events_GAPS_Drone_Replicators.Third_Choice.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Third_Choice
			change_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 }
			if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 1 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 2 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn
			}
			else_if = { 
				limit = { check_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 3 } }
				set_country_flag = CountryFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn
			}
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Third_Choice }
		}
		ai_chance = {
			factor = 20
		}
	}
}
#on game start country
country_event = {
	id = Events_GAPS_Drone_Replicators.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		this = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		set_variable = { which = "GAPS_Times__Tech_GAPS_Drone_Replication__Was_Researched" value = 0 }
		give_technology = { tech = Tech_GAPS_Drone_Replication_1 message = no }
		add_research_option = tech_mining_drone_weapon_1
		create_replicated_drone_country = yes
		every_owned_planet = {
			limit = { is_capital = yes } 
			planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 5 }
			solar_system = { set_star_flag = GAPS_drone_system }
			create_fleet = { 
				name = "NAME_Ancient_Mining_Drone"
				effect = {
					set_owner = event_target:Global_Target_GAPS_replicated_drone_country
					create_ship = {
						name = ""
						design = "NAME_Ancient_Mining_Drone"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Mining_Drone"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Mining_Drone"
					}
					set_location = prev
					set_fleet_stance = passive
					queue_actions = {
						repeat = {
							wait = {
								duration = 999
								random = 10
							}
						}
					}
				}
			}
		}
	}
}

#on colonized
# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
ship_event = {
	id = Events_GAPS_Drone_Replicators.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		From = { planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 25 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 55 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone days = 115 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone days = 2155 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Garden_Drone days = 25 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Warden_Drone days = 355 } }
	}
}
#SPAWN MINING DRONES
planet_event = {
	id = Events_GAPS_Drone_Replicators.31
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 30 }
		if = { 
			limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count > 0 } } }
			create_replicated_drone_country = yes
			set_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 0 }
			solar_system = {
				set_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 0 }
				if = { 
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 1 } } }
					set_variable = { which = GAPS_Number_Of_Drone_Modules value = 1 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 2 } } }
					set_variable = { which = GAPS_Number_Of_Drone_Modules value = 2 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 3 } } }
					set_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 3 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 4 } } }
					set_variable = { which = GAPS_Number_Of_Drone_Modules value = 4 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 5 } } }
					set_variable = { which = GAPS_Number_Of_Drone_Modules value = 5 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 6 } } }
					set_variable = { which = GAPS_Number_Of_Drone_Modules value = 6 }
				}
				if = {
					limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Manufactory_System_Bonus } any_system_within_border = { has_star_flag = manufactory_system } }
					change_variable = { which = GAPS_Number_Of_Drone_Modules value = 2 }
				}
				every_system_planet = { 
					limit = { 
						has_deposit_for = shipclass_mining_station 
						NOR = { 
							has_deposit = d_trade_value_1 
							has_deposit = d_trade_value_2 
							has_deposit = d_trade_value_3 
							has_deposit = d_trade_value_4
							has_deposit = d_trade_value_5
							has_deposit = d_trade_value_6
							has_deposit = d_trade_value_7 
							has_deposit = d_trade_value_8
							has_deposit = d_trade_value_9
							has_deposit = d_trade_value_10
						}
					}
					solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 1 } }
				}
				if = { 
					limit = { OR = { has_star_flag = wenkwort_system has_star_flag = manufactory_system } }
					change_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 10 }
				}
				set_variable = { which = "GAPS_Max_Mining_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
				multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 4 }
				multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
				if = { 
					limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn } any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
					if = { 
						limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Mining_Drones" value < GAPS_Max_Mining_Drones_To_Spawn } } }
						every_fleet_in_system = {
							limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
							solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
						}
					}
				}
				else_if = {
					limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn } }
					create_fleet = { 
						name = "NAME_Ancient_Mining_Drone"
						effect = {
							set_owner = event_target:Global_Target_GAPS_replicated_drone_country
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
							set_location = root
							set_fleet_stance = aggressive
							queue_actions = {
								repeat = {
									wait = {
										duration = 999
										random = 10
									}
								}
							}
						}
					}
					solar_system = { set_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
				}
				#COMBAT DRONES
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Combat_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 60 } }
					set_variable = { which = "GAPS_Max_Combat_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 2 }
					multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					if = { 
						limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn } any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Combat_Drones" value < GAPS_Max_Combat_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Ancient_Combat_Drone"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } }
							}
						}
					}
				}
				#DESTROYER DRONES
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone days = 120 } }
					set_variable = { which = "GAPS_Max_Destroyer_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Destroyer_Drones_To_Spawn value = 1 }
					multiply_variable = { which = GAPS_Max_Destroyer_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					if = { 
						limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn } any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Destroyer_Drones" value < GAPS_Max_Destroyer_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Ancient_Destroyer"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Destroyer_Drones" value = 1 } }
							}
						}
					}
				}
				#Home_Base DRONES
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone days = 2160 } }
					set_variable = { which = "GAPS_Max_Home_Base_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 1 }
					change_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					divide_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 10 }
					if = { 
						limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn } any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value < GAPS_Max_Home_Base_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Drone_Home_Base"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value = 1 } }
							}
						}
					}
				}
				#WENKWORT WARDEN DRONES 
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone days = 2160 } }
					set_variable = { which = "GAPS_Max_Home_Base_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 1 }
					change_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					divide_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 10 }
					if = { 
						limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn } any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value < GAPS_Max_Home_Base_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Drone_Home_Base"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value = 1 } }
							}
						}
					}
				}
				#WENKWORT WARDEN DRONES 
				if = {
					limit = { owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn has_country_flag = wenkwort_custodian } any_system_within_border = { has_star_flag = wenkwort_system } }
					if = { 
						limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Garden_Drone } } }
						root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Garden_Drone days = 30 } }
						set_variable = { which = "GAPS_Max_Garden_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
						multiply_variable = { which = GAPS_Max_Garden_Drones_To_Spawn value = 8 }
						multiply_variable = { which = GAPS_Max_Garden_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
						if = { 
							limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
							if = { 
								limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Garden_Drones" value < GAPS_Max_Garden_Drones_To_Spawn } } }
								every_fleet_in_system = {
									limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
									create_ship = {
										name = ""
										design = "NAME_Gardener_Drone"
									}
									solar_system = { change_variable = { which = "GAPS_Number_Of_Garden_Drones" value = 1 } }
								}
							}
						}
					}
					if = { 
						limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Warden_Drone } } }
						root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Warden_Drone days = 360 } }
						set_variable = { which = "GAPS_Max_Warden_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
						multiply_variable = { which = GAPS_Max_Warden_Drones_To_Spawn value = 0.5 }
						multiply_variable = { which = GAPS_Max_Warden_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
						if = { 
							limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
							if = { 
								limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Warden_Drones" value < GAPS_Max_Warden_Drones_To_Spawn } } }
								every_fleet_in_system = {
									limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
									create_ship = {
										name = ""
										design = "NAME_Wenkwort_Enforcer"
									}
									solar_system = { change_variable = { which = "GAPS_Number_Of_Warden_Drones" value = 1 } }
								}
							}
						}
					}
				}
			}
		}
		#SPAWN DRONES IN ADJACENT SYSTEMS
		if = {
			limit = { solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Drone_Replication_Nexus } }
			solar_system = { 
				every_neighbor_system = { 
					ignore_hyperlanes = yes				
					if = { 
						limit = { 
							OR = {
								NOT = { exists = starbase }
								AND = {
									prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 0 } }
								}
							}
						}
						if = { 
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn } }
							set_star_flag = StarFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn
						}
						if = { 
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn } }
							set_star_flag = StarFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn
						}
						if = { 
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn } }
							set_star_flag = StarFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn
						}
						if = { 
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn } }
							set_star_flag = StarFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn
						}
						if = { 
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 1 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 1 }
						}
						else_if = {
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 2 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 2 }
						}
						else_if = {
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 3 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 3 }
						}
						else_if = {
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 4 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 4 }
						}
						else_if = {
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 5 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 5 }
						}
						else_if = {
							limit = { prev.starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 6 } } }
							set_variable = { which = GAPS_Number_Of_Drone_Modules value = 6 }
						}
						if = {
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Manufactory_System_Bonus } any_system_within_border = { has_star_flag = manufactory_system } }
							change_variable = { which = GAPS_Number_Of_Drone_Modules value = 2 }
						}
						if = {
							limit = { prev.owner = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn has_country_flag = wenkwort_custodian any_system_within_border = { has_star_flag = wenkwort_system } } }
							set_star_flag = Star_Flag_GAPS_Can_Spawn_Wenkwort_Drones
						}
						every_system_planet = {
							limit = { is_primary_star = yes }
							planet_event = { id = Events_GAPS_Drone_Replicators.41 days = 30 }
						}
					}
				}
			} 
		}
	}
}
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
#ancient_corvette
#MINING DRONE DIES
country_event = {
	id = Events_GAPS_Drone_Replicators.32
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = Country_Type_GAPS_replicated_drone
		#FROMFROM = { is_ship_size = ancient_mining_drone }
	}

	immediate = {
		if = {
			limit = { FROMFROM = { is_ship_size = ancient_mining_drone } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = ancient_corvette } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = ancient_destroyer } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Destroyer_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = homebase } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = wenkwort_drone } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Garden_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = wenkwort_enforcer } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Warden_Drones" value = 1 } } }
		}
	}
}

	
#SPAWN ADJACENT SYSTEM DRONES
planet_event = {
	id = Events_GAPS_Drone_Replicators.41
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system = { check_variable = { which = GAPS_Number_Of_Drone_Modules value > 0 } }
	}
	immediate = {
		create_replicated_drone_country = yes
		solar_system = {
			set_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 0 }
			every_system_planet = { 
				limit = { 
					has_deposit_for = shipclass_mining_station 
					NOR = { 
						has_deposit = d_trade_value_1 
						has_deposit = d_trade_value_2 
						has_deposit = d_trade_value_3 
						has_deposit = d_trade_value_4
						has_deposit = d_trade_value_5
						has_deposit = d_trade_value_6
						has_deposit = d_trade_value_7 
						has_deposit = d_trade_value_8
						has_deposit = d_trade_value_9
						has_deposit = d_trade_value_10
					}
				}
				solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 1 } }
			}
			if = { 
				limit = { OR = { has_star_flag = wenkwort_system has_star_flag = manufactory_system } }
				change_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 10 }
			}
			set_variable = { which = "GAPS_Max_Mining_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
			multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 4 }
			multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
			if = { 
				limit = { has_star_flag = StarFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
				if = { 
					limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Mining_Drones" value < GAPS_Max_Mining_Drones_To_Spawn } } }
					every_fleet_in_system = {
						limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Drone"
						}
						solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
					}
				}
			}
			else_if = {
				limit = { has_star_flag = StarFlag_GAPS_Drone_Replicators_Mining_Drones_Can_Spawn }
				create_fleet = { 
					name = "NAME_Ancient_Mining_Drone"
					effect = {
						set_owner = event_target:Global_Target_GAPS_replicated_drone_country
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Drone"
						}
						set_location = root
						set_fleet_stance = aggressive
						queue_actions = {
							repeat = {
								wait = {
									duration = 999
									random = 10
								}
							}
						}
					}
				}
				solar_system = { set_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
			}
			#COMBAT DRONES
			if = { 
				limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Combat_Drone } } }
				root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 60 } }
				set_variable = { which = "GAPS_Max_Combat_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
				multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 2 }
				multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
				if = {
					limit = { has_star_flag = StarFlag_GAPS_Drone_Replicators_Combat_Drones_Can_Spawn any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
					if = { 
						limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Combat_Drones" value < GAPS_Max_Combat_Drones_To_Spawn } } }
						every_fleet_in_system = {
							limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
							create_ship = {
								name = ""
								design = "NAME_Ancient_Combat_Drone"
							}
							solar_system = { change_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } }
						}
					}
				}
			}
			#DESTROYER DRONES
			if = { 
				limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone } } }
				root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone days = 120 } }
				set_variable = { which = "GAPS_Max_Destroyer_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
				multiply_variable = { which = GAPS_Max_Destroyer_Drones_To_Spawn value = 1 }
				multiply_variable = { which = GAPS_Max_Destroyer_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
				if = { 
					limit = { has_star_flag = StarFlag_GAPS_Drone_Replicators_Destroyer_Drones_Can_Spawn any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
					if = { 
						limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Destroyer_Drones" value < GAPS_Max_Destroyer_Drones_To_Spawn } } }
						every_fleet_in_system = {
							limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
							create_ship = {
								name = ""
								design = "NAME_Ancient_Destroyer"
							}
							solar_system = { change_variable = { which = "GAPS_Number_Of_Destroyer_Drones" value = 1 } }
						}
					}
				}
			}
			#Home_Base DRONES
			if = { 
				limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone } } }
				root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Home_Base_Drone days = 2160 } }
				set_variable = { which = "GAPS_Max_Home_Base_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
				multiply_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 1 }
				change_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
				divide_variable = { which = GAPS_Max_Home_Base_Drones_To_Spawn value = 10 }
				if = { 
					limit = { has_star_flag = StarFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
					if = { 
						limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value < GAPS_Max_Home_Base_Drones_To_Spawn } } }
						every_fleet_in_system = {
							limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
							create_ship = {
								name = ""
								design = "NAME_Drone_Home_Base"
							}
							solar_system = { change_variable = { which = "GAPS_Number_Of_Home_Base_Drones" value = 1 } }
						}
					}
				}
			}
			#WENKWORT WARDEN DRONES 
			if = {
				limit = { has_star_flag = Star_Flag_GAPS_Can_Spawn_Wenkwort_Drones }
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Garden_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Garden_Drone days = 30 } }
					set_variable = { which = "GAPS_Max_Garden_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Garden_Drones_To_Spawn value = 8 }
					multiply_variable = { which = GAPS_Max_Garden_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					if = { 
						limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Garden_Drones" value < GAPS_Max_Garden_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Gardener_Drone"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Garden_Drones" value = 1 } }
							}
						}
					}
				}
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Warden_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Warden_Drone days = 360 } }
					set_variable = { which = "GAPS_Max_Warden_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Warden_Drones_To_Spawn value = 0.5 }
					multiply_variable = { which = GAPS_Max_Warden_Drones_To_Spawn value = GAPS_Number_Of_Drone_Modules }
					if = {
						limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Warden_Drones" value < GAPS_Max_Warden_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Wenkwort_Enforcer"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Warden_Drones" value = 1 } }
							}
						}
					}
				}
			}
			set_variable = { which = "GAPS_Number_Of_Drone_Modules" value = 0 }
		}
	}
}



#This = Federation leader
#From = Joining member
#on_join_federation = 
country_event = {
	id = Events_GAPS_Drone_Replicators.51
	hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		federation = {
			any_member = { 
				has_origin = Origin_GAPS_Drone_Replicators
			}
		}
	}

	immediate = {
		federation = {
			every_member = {
				limit = { not = { has_origin = Origin_GAPS_Drone_Replicators } }
				event_target:Global_Target_GAPS_replicated_drone_country = {
					set_faction_hostility = {
						set_hostile = no
					#	set_neutral = yes
						set_friendly = yes
						target = prev
					}
				}
			}
		}
	}
}

#This = Federation leader
#From = Leaving member
#on_leave_federation = 
country_event = {
	id = Events_GAPS_Drone_Replicators.52
	hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		federation = {
			any_member = { 
				has_origin = Origin_GAPS_Drone_Replicators
			}
		}
	}

	immediate = {
		federation = {
			if = {
				limit = {
					any_member = { 
						has_origin = Origin_GAPS_Drone_Replicators
					}
				}
			}
			else = {
				every_member = {
					limit = { not = { has_origin = Origin_GAPS_Drone_Replicators } }
					event_target:Global_Target_GAPS_replicated_drone_country = {
						set_faction_hostility = {
							set_hostile = yes
							set_neutral = no
							set_friendly = no
							target = prev
						}
					}
				}
			}
		}
	}
}
# This = subject
# From = subject's overlord
#on_becoming_subject = 
country_event = {
	id = Events_GAPS_Drone_Replicators.53
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			From = { has_origin = Origin_GAPS_Drone_Replicators	}
			This = { has_origin = Origin_GAPS_Drone_Replicators	}
		}
	}

	immediate = {
		if = {
			limit = { This = { has_origin = Origin_GAPS_Drone_Replicators	} }
			This = {
				save_event_target_as = Target_Country_GAPS_Drone_Replicators
			}
			From = {
				save_event_target_as = Target_Country_GAPS_Drone_Replicators_Ally
				country_event = { id = Events_GAPS_Drone_Replicators.54 days = 30 }
			}
		}
		if = {
			limit = { From = { has_origin = Origin_GAPS_Drone_Replicators	} }
			From = {
				save_event_target_as = Target_Country_GAPS_Drone_Replicators
			}
			This = {
				save_event_target_as = Target_Country_GAPS_Drone_Replicators_Ally
				country_event = { id = Events_GAPS_Drone_Replicators.54 days = 1 }
			}
		}
		
	}
}
# checking for no logner being overlord/subject of drone replicators. might cause issue if there are multiple replicator countries.
country_event = {
	id = Events_GAPS_Drone_Replicators.54
	hide_window = yes
	is_triggered_only = yes


	immediate = {
		if = {
			limit = {
				event_target:Target_Country_GAPS_Drone_Replicators = {
					is_overlord_to = event_target:Target_Country_GAPS_Drone_Replicators_Ally
				}
			}
			event_target:Global_Target_GAPS_replicated_drone_country = {
				set_faction_hostility = {
					set_hostile = no
				#	set_neutral = yes
					set_friendly = yes
					target = event_target:Target_Country_GAPS_Drone_Replicators_Ally
				}
			}
			event_target:Target_Country_GAPS_Drone_Replicators = { save_event_target_as = Target_Country_GAPS_Drone_Replicators }
			event_target:Target_Country_GAPS_Drone_Replicators_Ally = { save_event_target_as = Target_Country_GAPS_Drone_Replicators_Ally }
			event_target:Target_Country_GAPS_Drone_Replicators_Ally = { country_event = { id = Events_GAPS_Drone_Replicators.54 days = 1 } }
		}
		else_if = {
			limit = {
				event_target:Target_Country_GAPS_Drone_Replicators_Ally = {
					is_overlord_to = event_target:Target_Country_GAPS_Drone_Replicators
				}
			}
			event_target:Global_Target_GAPS_replicated_drone_country = {
				set_faction_hostility = {
					set_hostile = no
				#	set_neutral = yes
					set_friendly = yes
					target = event_target:Target_Country_GAPS_Drone_Replicators_Ally
				}
			}
			event_target:Target_Country_GAPS_Drone_Replicators = { save_event_target_as = Target_Country_GAPS_Drone_Replicators }
			event_target:Target_Country_GAPS_Drone_Replicators_Ally = { save_event_target_as = Target_Country_GAPS_Drone_Replicators_Ally }
			event_target:Target_Country_GAPS_Drone_Replicators_Ally = { country_event = { id = Events_GAPS_Drone_Replicators.54 days = 1 } }
		}
		else = {
			event_target:Global_Target_GAPS_replicated_drone_country = {
				set_faction_hostility = {
					set_hostile = yes
				#	set_neutral = yes
					set_friendly = no
					target = event_target:Target_Country_GAPS_Drone_Replicators_Ally
				}
			}
		}
	}
}
#on complete special projects
country_event = {
	id = Events_GAPS_Drone_Replicators.71
	title = Events_GAPS_Drone_Replicators.71.name
	desc = Events_GAPS_Drone_Replicators.71.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		begin_event_chain = {
			event_chain = "Event_Chain_GAPS_Drone_Trail"
			target = root
		}
		every_system = {		
			limit = { 
				OR = { 
					#has_star_flag = GAPS_drone_system 
					has_star_flag = drone_system_4 
					has_star_flag = manufactory_system 
					has_star_flag = drone_system_1 
					has_star_flag = drone_system_2 
					has_star_flag = drone_destroyer_system 
					has_star_flag = drone_system_3 
					has_star_flag = drone_home_system 
				} 
			}
			random_system_planet = { limit = { is_primary_star = yes } save_event_target_as = Target_Planet_GAPS_Home_Star }
			enable_special_project = { name = Special_Project_GAPS_Drone_System_Location owner = root location = event_target:Target_Planet_GAPS_Home_Star }
			add_planet_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Drone_System days = -1 }
		}
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.72
	title = Events_GAPS_Drone_Replicators.72.name
	desc = Events_GAPS_Drone_Replicators.72.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		begin_event_chain = {
			event_chain = "Event_Chain_GAPS_Drone_Trail"
			target = root
		}
		every_system = {		
			limit = { 
				OR = { 
					#has_star_flag = GAPS_drone_system 
					has_star_flag = drone_system_4 
					has_star_flag = manufactory_system 
					has_star_flag = drone_system_1 
					has_star_flag = drone_system_2 
					has_star_flag = drone_destroyer_system 
					has_star_flag = drone_system_3 
					has_star_flag = drone_home_system 
					has_star_flag = wenkwort_system
				} 
			}
			random_system_planet = { 
				limit = { is_primary_star = yes } 
				save_event_target_as = Target_Planet_GAPS_Home_Star 
				if = {
					limit = { not = { has_modifier = Planet_Modifier_GAPS_Is_A_Drone_System } }
					add_modifier = { Planet_Modifier_GAPS_Is_A_Drone_System days = -1 } 
				}
				if = {
					limit = { not = { has_modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System } solar_system = { OR = { has_star_flag = drone_home_system has_star_flag = wenkwort_system has_star_flag = manufactory_system } } }
					add_modifier = { Planet_Modifier_GAPS_Is_A_Special_Drone_System days = -1 } 
				}
			}
			enable_special_project = { name = Special_Project_GAPS_Drone_System_Location owner = root location = event_target:Target_Planet_GAPS_Home_Star }
			add_planet_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Drone_System days = -1 }

		}
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.72
	id = Events_GAPS_Drone_Replicators.72
	title = Events_GAPS_Drone_Replicators.72.name
	desc = Events_GAPS_Drone_Replicators.72.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = CountryFlag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.73
	id = Events_GAPS_Drone_Replicators.73
	title = Events_GAPS_Drone_Replicators.73.name
	desc = Events_GAPS_Drone_Replicators.73.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = CountryFlag_GAPS_Drone_Replicators_Manufactory_System_Bonus
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.74
	id = Events_GAPS_Drone_Replicators.74
	title = Events_GAPS_Drone_Replicators.74.name
	desc = Events_GAPS_Drone_Replicators.74.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = CountryFlag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn
	}
}