namespace = Events_GAPS_Drone_Replicators

country_event = {
	id = Events_GAPS_Drone_Replicators.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = Origin_GAPS_Drone_Replicators
	}
	immediate = {
		set_country_flag = Country_Flag_GAPS_I_am_Drone_Replicators
		set_variable = { which = "Country_Variable_GAPS_Drone_Strength" value = 0 }
		set_variable = { which = "Country_Variable_GAPS_Empire_Drone_Cap_Bonus" value = 0 }
		give_technology = { tech = Tech_GAPS_Drone_Replication message = no }
		add_research_option = tech_mining_drone_weapon_1
		country_event = { id = Events_GAPS_Drone_Replicators.2 days = 2 }
		country_event = { id = Events_GAPS_Drone_Replicators.12 days = 1 }
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.12
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		save_event_target_as = GaPS_DRone_EVent_Target
		if = {
			limit = { NOT = { has_event_chain = Event_Chain_GAPS_Drone_System_Location } }
			begin_event_chain = {
				event_chain = "Event_Chain_GAPS_Drone_System_Location"
				target = root
			}
		}
		if = {
			limit = { NOT = { has_event_chain = Event_Chain_GAPS_Special_Drone_System_Location } }
			begin_event_chain = {
				event_chain = "Event_Chain_GAPS_Special_Drone_System_Location"
				target = root
			}
		}
		every_system = {
			limit = {
				OR = {
					any_ship_in_system = { owner = { is_country_type = drone } }
					has_star_flag = wenkwort_system
					has_star_flag = manufactory_system
					has_star_flag = drone_home_system
				}
			}
			random_system_planet = {
				limit = { is_primary_star = yes }
				save_event_target_as = Target_Planet_GAPS_Home_Star
				create_fleet = {
					name = "Scry Sensor"
					settings = {
						can_upgrade = no
						can_disband = no
						can_change_composition = no
						can_change_leader = no
						uses_naval_capacity = no
						spawn_debris = no
					}
				}
				last_created_fleet = {
					set_owner = root
					create_ship = {
						name = "Scry Sensor"
						design = "NAME_DS47"
					}
					set_location = event_target:Target_Planet_GAPS_Home_Star
					set_event_locked = yes
					hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.2 days = 0 } }
				}
			}
			if = {
				limit = { OR = { has_star_flag = wenkwort_system  } }
				enable_special_project = { name = Special_Project_GAPS_Study_Wenkwort_Defenses owner = root location = event_target:Target_Planet_GAPS_Home_Star }
				set_star_flag = Star_Flag_GAPS_Is_A_Special_Drone_System
				event_target:Target_Planet_GAPS_Home_Star = { add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System days = -1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Drone_Projects" value = 1 } set_country_flag = CountryFlag_Used_Edict_GAPS_Study_Wenkwort_Defenses }
			}
			else_if = {
				limit = { OR = { has_star_flag = drone_home_system  } }
				enable_special_project = { name = Special_Project_GAPS_Study_Ore_Grinder owner = root location = event_target:Target_Planet_GAPS_Home_Star }
				set_star_flag = Star_Flag_GAPS_Is_A_Special_Drone_System
				event_target:Target_Planet_GAPS_Home_Star = { add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System days = -1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Drone_Projects" value = 1 } set_country_flag = CountryFlag_Used_Edict_GAPS_Study_Ore_Grinder }
			}
			else_if = {
				limit = { OR = { has_star_flag = manufactory_system  } }
				enable_special_project = { name = Special_Project_GAPS_Study_Manufactory owner = root location = event_target:Target_Planet_GAPS_Home_Star }
				set_star_flag = Star_Flag_GAPS_Is_A_Special_Drone_System
				event_target:Target_Planet_GAPS_Home_Star = { add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System days = -1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Drone_Projects" value = 1 } set_country_flag = CountryFlag_Used_Edict_GAPS_Study_Manufactory }
			}
			else = {
				enable_special_project = { name = Special_Project_GAPS_Drone_System_Location owner = root location = event_target:Target_Planet_GAPS_Home_Star }
				set_star_flag = Star_Flag_GAPS_Is_A_Drone_System
				event_target:Target_Planet_GAPS_Home_Star = { add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Drone_System days = -1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Normal_Drone_Systems" value = 1 } }
			}
		}
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = Origin_GAPS_Drone_Replicators
	}
	immediate = {
		every_system_within_border = {
			limit = {
				exists = starbase
				starbase = {
					OR = {
						has_starbase_building = Starbase_Building_GAPS_Ancient_Mining_Drone_Station
						has_starbase_building = Starbase_Building_GAPS_Ancient_Corvette_Station
						has_starbase_building = Starbase_Building_GAPS_Ancient_Destroyer_Station
						has_starbase_building = Starbase_Building_GAPS_Grinder_Station
					}
				}
			}
			random_system_planet = {
				limit = { is_primary_star = yes }
				planet_event = { id = Events_GAPS_Drone_Replicators.21 days = 1 }
			}
		}
	}
}
#spawn drones
planet_event = {
	id = Events_GAPS_Drone_Replicators.21
	hide_window = yes
	is_triggered_only = yes

	trigger = {
	}
	immediate = {
		solar_system.owner = { save_event_target_as = Country_Target_GAPS_Drone_Replicators }
		Scripted_Planet_Effect_GAPS_Base_Drones_To_Spawn = yes
		if = {
			limit = { any_country = { has_country_flag = Country_Flag_GAPS_Replicated_Drones@root.solar_system.owner } }
			every_country = {
				limit = { has_country_flag = Country_Flag_GAPS_Replicated_Drones@root.solar_system.owner }
				save_event_target_as = Event_Target_GAPS_Replicated_Drones
			}
		}
		else = {
			Create_GAPS_Replicated_Drones_Country = yes
			last_created_country = {
				set_country_flag = Country_Flag_GAPS_Replicated_Drones@root.solar_system.owner
			}
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Mining_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Drones" value < System_Variable_GAPS_Max_Mining_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Ancient_Mining_Drone_Station }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Mining_Drone days = 30 }
			Scripted_Planet_Effect_GAPS_Spawn_Mining_Drone = yes
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Combat_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Combat_Drones" value < System_Variable_GAPS_Max_Combat_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Ancient_Corvette_Station }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 60 }
			Scripted_Planet_Effect_GAPS_Spawn_Combat_Drone = yes
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Destroyer_Drones" value < System_Variable_GAPS_Max_Destroyer_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Ancient_Destroyer_Station }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Destroyer_Drone days = 120 }
			Scripted_Planet_Effect_GAPS_Spawn_Destroyer_Drone = yes
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Gardener_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Gardener_Drones" value < System_Variable_GAPS_Max_Gardener_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Ancient_Destroyer_Station }
				solar_system.owner = { has_country_flag = Country_Flag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Gardener_Drone days = 30 }
			Scripted_Planet_Effect_GAPS_Spawn_Gardener_Drone = yes
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Grinder_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Grinder_Drones" value < System_Variable_GAPS_Max_Grinder_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Grinder_Station }
				solar_system.owner = { has_country_flag = Country_Flag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Grinder_Drone days = 2160 }
			Scripted_Planet_Effect_GAPS_Spawn_Grinder_Drone = yes
		}
		if = {
			limit = {
				NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Warden_Drone }
				solar_system = { check_variable = { which = "System_Variable_GAPS_Number_Of_Warden_Drones" value < System_Variable_GAPS_Max_Warden_Drones_To_Spawn } }
				solar_system.starbase = { has_starbase_building = Starbase_Building_GAPS_Grinder_Station }
				solar_system.owner = { has_country_flag = Country_Flag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn }
			}
			set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Warden_Drone days = 360 }
			Scripted_Planet_Effect_GAPS_Spawn_Warden_Drone = yes
		}
	}
}

#CHECKING ALLLIES
country_event = {
	id = Events_GAPS_Drone_Replicators.22
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = Origin_GAPS_Drone_Replicators
	}

	immediate = {
		if = {
			limit = { any_country = { has_country_flag = Country_Flag_GAPS_Replicated_Drones@root } }
			every_country = {
				limit = { has_country_flag = Country_Flag_GAPS_Replicated_Drones@root }
				save_event_target_as = Country_Target_GAPS_Replicated_Drones
			}
			every_country = {
				limit = {
					OR = {
						has_defensive_pact = root
						is_overlord_to = root
						has_non_aggression_pact = root
						is_in_federation_with = root
						has_overlord = root
					}
				}
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:Country_Target_GAPS_Replicated_Drones
				}
				set_country_flag = Country_Flag_GAPS_Ally_With_Void_Callers@root
			}
			every_country = {
				limit = {
					has_country_flag = Country_Flag_GAPS_Ally_With_Void_Callers@root
					NOR = {
						has_defensive_pact = root
						is_overlord_to = root
						has_non_aggression_pact = root
						is_in_federation_with = root
						has_overlord = root
					}
				}
				set_faction_hostility = {
					set_hostile = yes
					#set_neutral = no
					set_friendly = no
					target = event_target:Country_Target_GAPS_Replicated_Drones
				}
			}
		}
	}
}
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
#SHIP DIES
country_event = {
	id = Events_GAPS_Drone_Replicators.23
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = Country_Type_GAPS_replicated_drone
	}

	immediate = {
		if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Mining_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Combat_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Combat_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Destroyer_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Destroyer_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Grinder_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Grinder_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Warden_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Warden_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { has_ship_flag = Ship_Flag_GAPS_Gardener_Drone_To_Upgrade } }
			FromFrom = { solar_system = { subtract_variable = { which = "System_Variable_GAPS_Number_Of_Gardener_Drones" value = 1 } } }
		}
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.70
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		subtract_variable = { which = "Country_Variable_GAPS_Drone_Projects" value = 1 }
		if = { 
			limit = { check_variable = { which = "Country_Variable_GAPS_Drone_Projects" value < 1 } }
			end_event_chain = "Event_Chain_GAPS_Special_Drone_System_Location"
		}
	}
}

country_event = {
	id = Events_GAPS_Drone_Replicators.71
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		subtract_variable = { which = "Country_Variable_GAPS_Normal_Drone_Systems" value = 1 }
		if = { 
			limit = { check_variable = { which = "Country_Variable_GAPS_Normal_Drone_Systems" value < 1 } }
			end_event_chain = "Event_Chain_GAPS_Drone_System_Location"
		}
	}
}
#on complete special projects
country_event = {
	id = Events_GAPS_Drone_Replicators.72
	title = Events_GAPS_Drone_Replicators.72.name
	desc = Events_GAPS_Drone_Replicators.72.desc
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		begin_event_chain = {
			event_chain = "Event_Chain_GAPS_Drone_Trail"
			target = root
		}
		every_system = {
			limit = {
				OR = {
					#has_star_flag = GAPS_drone_system
					has_star_flag = drone_system_4
					has_star_flag = manufactory_system
					has_star_flag = drone_system_1
					has_star_flag = drone_system_2
					has_star_flag = drone_destroyer_system
					has_star_flag = drone_system_3
					has_star_flag = drone_home_system
					has_star_flag = wenkwort_system
				}
			}
			random_system_planet = {
				limit = { is_primary_star = yes }
				save_event_target_as = Target_Planet_GAPS_Home_Star
				if = {
					limit = { not = { has_modifier = Planet_Modifier_GAPS_Is_A_Drone_System } }
					add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Drone_System days = -1 }
				}
				if = {
					limit = { not = { has_modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System } solar_system = { OR = { has_star_flag = drone_home_system has_star_flag = wenkwort_system has_star_flag = manufactory_system } } }
					add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Special_Drone_System days = -1 }
				}
			}
			enable_special_project = { name = Special_Project_GAPS_Drone_System_Location owner = root location = event_target:Target_Planet_GAPS_Home_Star }
			add_modifier = { modifier = Planet_Modifier_GAPS_Is_A_Drone_System days = -1 }

		}
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.72
	id = Events_GAPS_Drone_Replicators.72
	title = Events_GAPS_Drone_Replicators.72.name
	desc = Events_GAPS_Drone_Replicators.72.desc
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = Country_Flag_GAPS_Drone_Replicators_Ore_Grinder_Drones_Can_Spawn
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.73
	id = Events_GAPS_Drone_Replicators.73
	title = Events_GAPS_Drone_Replicators.73.name
	desc = Events_GAPS_Drone_Replicators.73.desc
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = Country_Flag_GAPS_Drone_Replicators_Manufactory_System_Bonus
		change_variable = { which = "Country_Variable_GAPS_Drone_Strength" value = 5 }
	}
}
country_event = {
	id = Events_GAPS_Drone_Replicators.74
	id = Events_GAPS_Drone_Replicators.74
	title = Events_GAPS_Drone_Replicators.74.name
	desc = Events_GAPS_Drone_Replicators.74.desc
	picture = GFX_evt_unidentified_ship
	#show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	immediate = {
		set_country_flag = Country_Flag_GAPS_Drone_Replicators_Wenkwort_Drones_Can_Spawn
	}
}
