namespace = ehof_systems

@resource_rare_cost			= 10	# Cost per 1. 10 = 10 x standard resource worth.
@resource_strategic_cost	= 3		# Cost per 1. 3 = 3 x standard resource worth.
@deposit_multiplier			= 9		# The total amount of materials a system should have. Lower = more materials per system.
@strategic_fraction			= 4		# The amount of total resources that should be strategic resources. 4 = 1/4, 5 = 1/5, etc.
@rare_system_multiplier		= 4.00
@urmazin_system_multiplier	= 3.00
@quest_system_multiplier	= 2.00
@standard_system_multiplier	= 1.00

# Generate System
country_event = {
	id = ehof_systems.000
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# If has Phase 3, can roll rare system
		if = {
			limit = { check_variable = { which = ehof_phase value >= 3 } }
			set_global_flag = ehof_can_roll_advanced
		}

		# Set current system creator
		if = {
			limit = { exists = event_target:current_system_creator }
			clear_global_event_target = current_system_creator
		}
		save_global_event_target_as = current_system_creator

		# Bought Bountiful system
		if = {
			limit = { has_country_flag = ehof_next_system_rare }
			set_global_flag = ehof_r_rare_system
		}

		if = {
			limit = { NOT = { has_country_flag = has_ehof_cluster } }
			set_country_flag = has_ehof_cluster
			random_list = {
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_10_taken }
					set_global_flag = ehof_10_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 10 max_orientation_angle = 15 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_30_taken }
					set_global_flag = ehof_30_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 30 max_orientation_angle = 35 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_50_taken }
					set_global_flag = ehof_50_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 50 max_orientation_angle = 55 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_70_taken }
					set_global_flag = ehof_70_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 70 max_orientation_angle = 75 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_90_taken }
					set_global_flag = ehof_90_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 90 max_orientation_angle = 95 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_110_taken }
					set_global_flag = ehof_110_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 110 max_orientation_angle = 115 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_130_taken }
					set_global_flag = ehof_130_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 130 max_orientation_angle = 135 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_150_taken }
					set_global_flag = ehof_150_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 150 max_orientation_angle = 155 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_170_taken }
					set_global_flag = ehof_170_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 170 max_orientation_angle = 175 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_190_taken }
					set_global_flag = ehof_190_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 190 max_orientation_angle = 195 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_210_taken }
					set_global_flag = ehof_210_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 210 max_orientation_angle = 215 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_230_taken }
					set_global_flag = ehof_230_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 230 max_orientation_angle = 235 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_250_taken }
					set_global_flag = ehof_250_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 250 max_orientation_angle = 255 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_270_taken }
					set_global_flag = ehof_270_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 270 max_orientation_angle = 275 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_290_taken }
					set_global_flag = ehof_290_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 290 max_orientation_angle = 295 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_310_taken }
					set_global_flag = ehof_310_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 310 max_orientation_angle = 315 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_330_taken }
					set_global_flag = ehof_330_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 330 max_orientation_angle = 335 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
				1 = {
					modifier = { factor = 0 has_global_flag = ehof_350_taken }
					set_global_flag = ehof_350_taken
					if = {		limit = { galaxy_size = huge }   no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = large }  no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 465 max_distance <= 475 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = medium } no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 440 max_distance <= 450 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = small }  no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 340 max_distance <= 350 hyperlane = no initializer = "basic_init_01" } } }
					else_if = {	limit = { galaxy_size = tiny }   no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 240 max_distance <= 250 hyperlane = no initializer = "basic_init_01" } } }
					else = {									 no_scope = { spawn_system = { min_orientation_angle = 350 max_orientation_angle = 355 min_distance >= 520 max_distance <= 530 hyperlane = no initializer = "basic_init_01" } } }
				}
			}
		}
		else = {

			log = "Going to search for source system"

			# Select system to use a source for spawn_system
			if = {
				limit = {
					any_system = {
						has_star_flag = ehof_system_created_by_@root
						NOT = {
							any_system = {
								cohesive_system = no
								distance = {
									source = prev
									type = euclidean
									max_distance <= 35
								}
							}
						}
						any_system = {
							cohesive_system = no
							distance = {
								source = prev
								type = euclidean
								max_distance <= 100
							}
						}
						count_system = {
							limit = {
								cohesive_system = yes
								distance = {
									source = prev
									type = euclidean
									max_distance <= 25
								}
							}
							count <= 6
						}
					}
				}
				random_system = {
					limit = {
						has_star_flag = ehof_system_created_by_@root
						NOT = {
							any_system = {
								cohesive_system = no
								distance = {
									source = prev
									type = euclidean
									max_distance <= 35
								}
							}
						}
						any_system = {
							cohesive_system = no
							distance = {
								source = prev
								type = euclidean
								max_distance <= 100
							}
						}
						count_system = {
							limit = {
								cohesive_system = yes
								distance = {
									source = prev
									type = euclidean
									max_distance <= 25
								}
							}
							count <= 6
						}
					}
					save_event_target_as = cohesive_source
					log = "Found source system (Not too far, not too close, less than 6 around it)"
				}
			}
			else_if = {
				limit = {
					any_system = {
						has_star_flag = ehof_system_created_by_@root
						NOT = {
							any_system = {
								cohesive_system = no
								distance = {
									source = prev
									type = euclidean
									max_distance <= 35
								}
							}
						}
						any_system = {
							cohesive_system = no
							distance = {
								source = prev
								type = euclidean
								max_distance <= 100
							}
						}
					}
				}
				random_system = {
					limit = {
						has_star_flag = ehof_system_created_by_@root
						NOT = {
							any_system = {
								cohesive_system = no
								distance = {
									source = prev
									type = euclidean
									max_distance <= 35
								}
							}
						}
						any_system = {
							cohesive_system = no
							distance = {
								source = prev
								type = euclidean
								max_distance <= 100
							}
						}
					}
					save_event_target_as = cohesive_source
					log = "Found source system (Not too far, not too close)"
				}
			}
			else = {
				random_system = {
					limit = { has_star_flag = ehof_system_created_by_@root }
					save_event_target_as = cohesive_source
					log = "Found source system (No requirements)"
				}
			}

			event_target:cohesive_source = {
				if = {
					limit = { root = { has_country_flag = ehof_create_sc_birch } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "giga_black_hole_core_initializer" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_quasar } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "giga_black_hole_quasar_initializer" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_f } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_f" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_f" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_f" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_f" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_f" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_f" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_g } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_g" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_g" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_g" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_g" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_g" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_g" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_k } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_k" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_k" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_k" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_k" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_k" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_k" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_m } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_m" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_m" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_m" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_m" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_m" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_m" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_d } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_d" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_d" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_d" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_d" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_d" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_d" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_t } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_t" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_t" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_t" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_t" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_t" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_t" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_b } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_b" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_b" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_b" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_b" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_b" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_b" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_a } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_a" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_a" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_a" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_a" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_a" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_a" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_o } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_o" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_o" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_o" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_o" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_o" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_o" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_p_purple } }
					random_list = {
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_purple" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_green" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_red" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_lbv_blue } }
					random_list = {
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_blue" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_red" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_green" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_tt_red } }
					random_list = {
						3 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_orange" } }
						3 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_red" } }
						3 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_white" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_orange_2" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_red_2" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_white_2" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_w_azure } }
					random_list = {
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_azure" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_green" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_purple" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_red" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_m_giant } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_m_giant" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_m_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_m_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_m_giant" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_m_giant" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_m_giant" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_k_giant } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_k_giant" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_k_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_k_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_k_giant" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_k_giant" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_k_giant" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_g_giant } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_g_giant" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_g_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_g_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_g_giant" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_g_giant" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_g_giant" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_o_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_o_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_o_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_o_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_o_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_o_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_o_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_b_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_b_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_b_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_b_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_b_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_b_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_b_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_a_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_a_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_a_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_a_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_a_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_a_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_a_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_f_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_f_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_f_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_f_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_f_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_f_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_f_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_g_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_g_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_g_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_g_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_g_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_g_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_g_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_k_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_k_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_k_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_k_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_k_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_k_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_k_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_m_super } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_m_super" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_m_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_m_super" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_m_super" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_m_super" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_m_super" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_o_hyper } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_o_hyper" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_m_hyper } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_m_hyper" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_neutron } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_08" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_pulsar } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_09" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_blackhole } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_01" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_microquasar_1 } }
					random_list = {
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_microquasar_1" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_microquasar_2" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_collapsar } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_collapsar" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_magnetar } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_magnetar" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_protostar } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_protostar" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_ae } }
					spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_ae" }
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_s_giant } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_s_giant" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_s_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_s_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_s_giant" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_s_giant" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_s_giant" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_c_giant } }
					random_list = {
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01_sc_c_giant" } }
						20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02_sc_c_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03_sc_c_giant" } }
						10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04_sc_c_giant" } }
						6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05_sc_c_giant" } }
						4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06_sc_c_giant" } }
					}
				}
				else_if = {
					limit = { root = { has_country_flag = ehof_create_sc_nova_1 } }
					random_list = {
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_nova_1" } }
						1 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_nova_2" } }
					}
				}
				else = {
					random_list = {
						90 = {
							if = {
								limit = { root = { has_country_flag = ehof_spawn_reality_code } }
								random_list = {
									20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01" } }
									20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02" } }
									10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03" } }
									10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04" } }
									6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05" } }
									4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06" } }
									6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "binary_init_01" } }
									4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "binary_init_02" } }
									3  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_01" } }
									3  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_02" } }

									# Real Space}
									2  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "dark_init_01" } }
									6  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_03" } }
									3  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_04" } }
									3  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "paired_init_01" } }
								}
								log = "Spawning Reality Code system"
							}
							else = {
								random_list = {
									20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_01" } }
									20 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_02" } }
									10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_03" } }
									10 = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_04" } }
									6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_05" } }
									4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "basic_init_06" } }
									6  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "binary_init_01" } }
									4  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "binary_init_02" } }
									3  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_01" } }
									3  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_02" } }
									2  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "asteroid_init_01" } }
									2  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_01" } }
									2  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_02" } }	# Primitives
									2  = { spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "special_init_08" } }

									# Real Space
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_ae" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_collapsar" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_blue" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_green" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_lbv_red" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_m_hyper" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_magnetar" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_microquasar_1" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_microquasar_2" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_nova_1" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_nova_2" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_o_hyper" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_green" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_purple" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_p_red" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_protostar" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_orange" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_orange_2" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_red" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_red_2" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_white" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_tt_white_2" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_azure" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_green" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_purple" } }
									1  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "rs_sc_w_red" } }
									2  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "dark_init_01" } }
									6  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_03" } }
									3  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "trinary_init_04" } }
									3  = { modifier = { factor = 0 NOT = { has_global_flag = has_real_space_mod } } spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "paired_init_01" } }
								}
								log = "Spawning cohesive system"
							}
						}

						# Common
						7 = {
							modifier = {
								factor = 0
								OR = {
									has_global_flag = ehof_r_rare_system
									root = {
										OR = {
											has_country_flag = ehof_spawn_reality_code
											is_ai = yes
										}
									}
									AND = {
										any_system = { has_star_flag = ehof_unique_system_1 }
										any_system = { has_star_flag = ehof_unique_system_4 }
									}
								}
							}
							random_list = {
								1 = {
									modifier = { factor = 0 any_system = { has_star_flag = ehof_unique_system_1 } }
									spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "cohesive_systems_1" }
								}
								1 = {
									modifier = { factor = 0 any_system = { has_star_flag = ehof_unique_system_4 } }
									spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "cohesive_systems_4" }
								}
							}
							log = "Spawning pre-defined cohesive system"
						}

						# Rare
						3 = {
							modifier = {
								factor = 0
								OR = {
									has_global_flag = ehof_r_rare_system
									root = {
										OR = {
											has_country_flag = ehof_spawn_reality_code
											check_variable = { which = ehof_phase value < 3 }
											is_ai = yes
										}
									}
									AND = {
										any_system = { has_star_flag = ehof_unique_system_2 }
										any_system = { has_star_flag = ehof_unique_system_3 }
									}
								}
							}
							random_list = {
								1 = {
									modifier = { factor = 0 any_system = { has_star_flag = ehof_unique_system_2 } }
									spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "cohesive_systems_2" }
								}
								1 = {
									modifier = { factor = 0 any_system = { has_star_flag = ehof_unique_system_3 } }
									spawn_system = { min_distance >= 25 max_distance <= 30 hyperlane = no initializer = "cohesive_systems_3" }
								}
							}
							log = "Spawning pre-defined rare cohesive system"
						}
					}
				}
			}
		}

		country_event = { id = ehof_systems.001 }	# Generate Flags
		country_event = { id = ehof_systems.002 }	# Generate Weather
		country_event = { id = ehof_systems.003 }	# Generate Leviathans
		country_event = { id = ehof_systems.004 }	# Generate Megastructures
		country_event = { id = ehof_systems.006 }	# Generate Deposits
		country_event = { id = ehof_systems.007 }	# Generate Hostiles

		last_created_system = {
			log = "Scoping to last_created_system"

			# Create PGate
			if = {
				limit = { NOT = { root = { has_country_flag = first_ehof_system_spawned } } }
				root = {
					set_country_flag = first_ehof_system_spawned
					set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } # delay leviathans
				}
				create_starbase = { size = starbase_outpost owner = root }
				if = {
					limit = { any_megastructure = { is_megastructure_type = ehof_pgate_gateway } }
					spawn_megastructure = {
						type = "ehof_pgate_gateway"
						orbit_angle = 110
						orbit_distance = 35
						owner = root
					}
				}
				else = {
					spawn_megastructure = {
						type = "ehof_pgate_unknown"
						orbit_angle = 110
						orbit_distance = 35
						owner = root
					}
				}
			}

			if = {
				limit = { root = { has_country_flag = first_ehof_system_spawned } }

				# Generate Hyperlane
				random_list = {
					70 = { while = { count = 1 ehof_generate_hyperlane = yes } }
					30 = { while = { count = 2 ehof_generate_hyperlane = yes } }
				}

				# Red Toxic World
				random_list = {
					90 = { modifier = { add = -20	solar_system = { rare_system = yes } } }
					10 = {
						modifier = { add = 20		solar_system = { rare_system = yes } }
						modifier = {
							factor = 0
							OR = {
								has_global_flag = ehof_red_toxic_exists
								root = { is_ai = yes }
								NOT = {
									any_system_planet = {
										is_star = no
										is_asteroid = no
										giga_habitable_structure = no
										is_planet_habitable = no
										has_anomaly = no
										NOT = { exists = archaeological_site }
									}
								}
							}
						}
						set_global_flag = ehof_red_toxic_exists
						random_system_planet = {
							limit = {
								is_star = no
								is_asteroid = no
								giga_habitable_structure = no
								is_planet_habitable = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_red_toxic
							add_anomaly = { category = intoxicated_world_category }
						}
					}
				}

				# Reality Code
				if = {
					limit = {
						root = { has_country_flag = ehof_spawn_reality_code }
						OR = {
							root = { has_country_flag = ehof_code_star_world }
							AND = {
								root = {
									OR = {
										has_country_flag = ehof_code_toxic_world
										has_country_flag = ehof_code_broken_world
										has_country_flag = ehof_code_frozen_world
										has_country_flag = ehof_code_molten_world
										has_country_flag = ehof_code_gas_giant_world
									}
								}
								any_system_planet = {
									is_asteroid = no
									is_star = no
									has_anomaly = no
									NOT = { exists = archaeological_site }
								}
							}
						}
					}
					if = {
						limit = { root = { has_country_flag = ehof_code_toxic_world } }
						random_system_planet = {
							limit = {
								is_asteroid = no
								is_star = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_toxic
							prev = { set_star_flag = quest_system }
							root = {
								set_country_flag = ehof_started_reality_code
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_toxic_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code1_digsite
							}
							else = { add_anomaly = { category = code_1_cat } }
							set_planet_flag = code_world1@root
						}
					}
					else_if = {
						limit = { root = { has_country_flag = ehof_code_broken_world } }
						random_system_planet = {
							limit = {
								is_asteroid = no
								is_star = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_broken
							prev = { set_star_flag = quest_system }
							root = {
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_broken_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code2_digsite
							}
							else = { add_anomaly = { category = code_2_cat } }
							set_planet_flag = code_world2@root
						}
					}
					else_if = {
						limit = { root = { has_country_flag = ehof_code_frozen_world } }
						random_system_planet = {
							limit = {
								is_asteroid = no
								is_star = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_frozen
							prev = { set_star_flag = quest_system }
							root = {
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_frozen_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code3_digsite
							}
							else = { add_anomaly = { category = code_3_cat } }
							set_planet_flag = code_world3@root
						}
					}
					else_if = {
						limit = { root = { has_country_flag = ehof_code_molten_world } }
						random_system_planet = {
							limit = {
								is_asteroid = no
								is_star = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_molten
							prev = { set_star_flag = quest_system }
							root = {
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_molten_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code4_digsite
							}
							else = { add_anomaly = { category = code_4_cat } }
							set_planet_flag = code_world4@root
						}
					}
					else_if = {
						limit = { root = { has_country_flag = ehof_code_gas_giant_world } }
						random_system_planet = {
							limit = {
								is_asteroid = no
								is_star = no
								has_anomaly = no
								NOT = { exists = archaeological_site }
							}
							change_pc = pc_gas_giant
							prev = { set_star_flag = quest_system }
							root = {
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_gas_giant_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code5_digsite
							}
							else = { add_anomaly = { category = code_5_cat } }
							set_planet_flag = code_world5@root
						}
					}
					else_if = {
						limit = { root = { has_country_flag = ehof_code_star_world } }
						star = {
							prev = { set_star_flag = quest_system }
							root = {
								if = {
									limit = { is_ai = yes }
									set_country_flag = ehof_ai_system_ready
								}
								remove_country_flag = ehof_spawn_reality_code
								remove_country_flag = ehof_code_star_world
							}
							if = {
								limit = { root = { is_ai = yes } }
								create_archaeological_site = code6_digsite
							}
							else = { add_anomaly = { category = code_6_cat } }
							set_planet_flag = code_world6@root
						}
					}
				}
			}
		}

		# Have been given the bought bountiful system
		if = {
			limit = { has_country_flag = ehof_next_system_rare }
			remove_country_flag = ehof_next_system_rare
			remove_global_flag = ehof_r_rare_system
		}
		country_event = { id = ehof_systems.005 }	# Generate System Color
	}
}

# Generate Flags
country_event = {
	id = ehof_systems.001
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		last_created_system = {
			set_star_flag = pd_system_spawned_from_event	# PD planets will spawn
			# Cannot use QSO/NDB on ehof cluster
			every_system_planet = {
				set_planet_flag = cant_build_here
				set_planet_flag = cant_target_this_planet

				# GPM will spawn planet modifiers with this flag
				if = {
					limit = {
						NOR = {
							has_deposit = d_dark_matter_deposit_1
							has_deposit = d_dark_matter_deposit_2
							has_deposit = d_dark_matter_deposit_3
							has_deposit = d_dark_matter_deposit_4
							has_deposit = d_dark_matter_deposit_5
							has_deposit = d_negative_mass_deposit_1
							has_deposit = d_negative_mass_deposit_2
							has_deposit = d_negative_mass_deposit_3
							has_deposit = d_negative_mass_deposit_4
							has_deposit = d_negative_mass_deposit_5
						}
					}
					set_planet_flag = is_event_spawned_planet
				}
			}

			# Compound Systems
			if = {
				limit = { has_global_flag = ehof_spawning_compound }
				set_star_flag = compound_cluster
				set_star_flag = ehof_compound_system
				set_star_flag = quest_system

				# Change planet classes
				every_system_planet = {
					limit = { is_star = no }
					change_pc = pc_ehof_planet
				}

				if = {		limit = { NOT = { exists = event_target:ehof_compound_system_1  } } set_star_flag = ehof_compound_system_1  save_global_event_target_as = ehof_compound_system_1 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_2  } } set_star_flag = ehof_compound_system_2  save_global_event_target_as = ehof_compound_system_2 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_3  } } set_star_flag = ehof_compound_system_3  save_global_event_target_as = ehof_compound_system_3 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_4  } } set_star_flag = ehof_compound_system_4  save_global_event_target_as = ehof_compound_system_4 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_5  } } set_star_flag = ehof_compound_system_5  save_global_event_target_as = ehof_compound_system_5 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_6  } } set_star_flag = ehof_compound_system_6  save_global_event_target_as = ehof_compound_system_6 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_7  } } set_star_flag = ehof_compound_system_7  save_global_event_target_as = ehof_compound_system_7 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_8  } } set_star_flag = ehof_compound_system_8  save_global_event_target_as = ehof_compound_system_8 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_9  } } set_star_flag = ehof_compound_system_9  save_global_event_target_as = ehof_compound_system_9 }
				else_if = {	limit = { NOT = { exists = event_target:ehof_compound_system_10 } } set_star_flag = ehof_compound_system_10 save_global_event_target_as = ehof_compound_system_10 }
			}

			# Everchanging
			else_if = {
				limit = { has_star_flag = everchanging_system }
				set_star_flag = ehof_system_created_by_@root
				random_system_planet = {
					limit = { is_planet_class = pc_ehof_cplanet }
					set_planet_flag = code_world7@root
				}
				set_star_flag = cohesive_system
				set_star_flag = quest_system
			}

			# Cohesive Systems
			else = {
				set_star_flag = cohesive_system
				set_star_flag = ehof_system_created_by_@root

				if = {
					limit = { has_global_flag = ehof_r_rare_system }
					set_star_flag = rare_system
				}

				if = {
					limit = { has_global_flag = ehof_can_roll_advanced }
					remove_global_flag = ehof_can_roll_advanced
					random_list = {
						92 = {}
						8 = {
							modifier = {
								factor = 3
								root = { is_ai = yes }
							}
							set_star_flag = rare_system
						}
					}
				}
			}
		}
	}
}

# Generate Weather
country_event = {
	id = ehof_systems.002
	is_triggered_only = yes
	hide_window = yes

	trigger = { has_country_flag = first_ehof_system_spawned }

	immediate = {
		last_created_system = {
			if = {
				limit = {
					everchanging_system = no
					annihilator_system = no
					compound_cluster = no
				}
				random_list = {
					80 = {}
					15 = { create_nebula_1 = yes }
					15 = { create_nebula_2 = yes }
					15 = { create_nebula_3 = yes }
					15 = { create_nebula_4 = yes }
					10 = { create_rare_nebula_1 = yes }
					10 = { create_rare_nebula_2 = yes }
					10 = { create_turbulent_nebula_1 = yes }
					10 = { create_turbulent_nebula_2 = yes }
					5 = {
						set_star_flag = storm_system
						star = {
							create_ambient_object = {
								type = "space_storm_1"
								location = this
							}
							last_created_ambient_object = {
								set_ambient_object_flag = space_storm_object
								set_location = {
									target = prev
									distance = 0
									angle = random
								}
							}
						}
						add_modifier = { modifier = space_storm }
					}
					5 = {
						set_star_flag = storm_system
						star = {
							create_ambient_object = {
								type = "space_storm_2"
								location = this
							}
							last_created_ambient_object = {
								set_location = {
									target = prev
									distance = 0
									angle = random
								}
							}
						}
						add_modifier = { modifier = space_storm }
					}
					5 = {
						set_star_flag = storm_system
						star = {
							create_ambient_object = {
								type = "psi_storm_1"
								location = this
							}
							last_created_ambient_object = {
								set_location = {
									target = prev
									distance = 0
									angle = random
								}
							}
						}
						add_modifier = { modifier = space_storm }
					}
				}
			}
		}
	}
}

# on_fleet_destroyed_victim (check if leviathan has been defeated)
# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = ehof_systems.008
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				is_country_type = guardian_dragon
				is_country_type = guardian_sphere
				is_country_type = guardian_wraith
				is_country_type = guardian_horror
				is_country_type = guardian_fortress
				is_country_type = guardian_stellarite
				is_country_type = guardian_dreadnought
			}
		}
	}

	immediate = {
		from = { save_event_target_as = ehof_check_leviathan_death }
		country_event = { id = ehof_systems.009 days = 2 }
	}
}

country_event = {
	id = ehof_systems.009
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:ehof_check_leviathan_death
		event_target:ehof_check_leviathan_death = { num_fleets < 1 }
	}

	immediate = {
		event_target:ehof_check_leviathan_death = {
			if = {
				limit = {
					is_country_type = guardian_dragon
					NOT = { has_country_flag = rubricator_dragon_country }
				}
				set_global_flag = leviathan_slain_ether_dragon
			}
			else_if = { limit = { is_country_type = guardian_sphere }		set_global_flag = leviathan_slain_sphere }
			else_if = { limit = { is_country_type = guardian_wraith }		set_global_flag = leviathan_slain_wraith }
			else_if = { limit = { is_country_type = guardian_horror }		set_global_flag = leviathan_slain_horror }
			else_if = { limit = { is_country_type = guardian_fortress }		set_global_flag = leviathan_slain_fortress }
			else_if = { limit = { is_country_type = guardian_stellarite }	set_global_flag = leviathan_slain_stellarite }
			else_if = { limit = { is_country_type = guardian_dreadnought }	set_global_flag = leviathan_slain_dreadnought }
		}
	}
}

# Generate Leviathans
country_event = {
	id = ehof_systems.003
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { has_country_flag = ehof_spawn_reality_code }
		has_country_flag = first_ehof_system_spawned
		has_leviathans = yes
		is_ai = no
		NOT = { has_country_flag = ehof_recently_spawned_guardian }
		NAND = {
			has_global_flag = leviathan_slain_dreadnought
			has_global_flag = leviathan_slain_ether_dragon
			has_global_flag = leviathan_slain_fortress
			has_global_flag = leviathan_slain_horror
			has_global_flag = leviathan_slain_sphere
			has_global_flag = leviathan_slain_stellarite
			has_global_flag = leviathan_slain_wraith
		}
	}

	immediate = {
		random = {
			chance = 20
			last_created_system = {
				if = {
					limit = {
						everchanging_system = no
						annihilator_system = no
						compound_cluster = no
					}
					# Guardians
					if = { limit = { any_country = { is_country_type = guardian_dragon NOT = { has_country_flag = rubricator_dragon_country } } }	remove_global_flag = ehof_can_spawn_guardian_dragon }			else = { set_global_flag = ehof_can_spawn_guardian_dragon }
					if = { limit = { any_country = { is_country_type = guardian_sphere } }															remove_global_flag = ehof_can_spawn_guardian_sphere }			else = { set_global_flag = ehof_can_spawn_guardian_sphere }
					if = { limit = { any_country = { is_country_type = guardian_wraith } }															remove_global_flag = ehof_can_spawn_guardian_wraith }			else = { set_global_flag = ehof_can_spawn_guardian_wraith }
					if = { limit = { any_country = { is_country_type = guardian_horror } }															remove_global_flag = ehof_can_spawn_guardian_horror }			else = { set_global_flag = ehof_can_spawn_guardian_horror }
					if = { limit = { any_country = { is_country_type = guardian_fortress } }														remove_global_flag = ehof_can_spawn_guardian_fortress }			else = { set_global_flag = ehof_can_spawn_guardian_fortress }
					if = { limit = { any_country = { is_country_type = guardian_stellarite } }														remove_global_flag = ehof_can_spawn_guardian_stellarite }		else = { set_global_flag = ehof_can_spawn_guardian_stellarite }
					if = { limit = { any_country = { is_country_type = guardian_dreadnought } }														remove_global_flag = ehof_can_spawn_guardian_dreadnought }		else = { set_global_flag = ehof_can_spawn_guardian_dreadnought }
					if = {
						limit = {
							OR = {
								AND = {
									has_global_flag = ehof_can_spawn_guardian_dragon
									NOT = { has_global_flag = leviathan_slain_ether_dragon }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_sphere
									NOT = { has_global_flag = leviathan_slain_sphere }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_wraith
									NOT = { has_global_flag = leviathan_slain_wraith }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_horror
									NOT = { has_global_flag = leviathan_slain_horror }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_fortress
									NOT = { has_global_flag = leviathan_slain_fortress }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_stellarite
									NOT = { has_global_flag = leviathan_slain_stellarite }
								}
								AND = {
									has_global_flag = ehof_can_spawn_guardian_dreadnought
									NOT = { has_global_flag = leviathan_slain_dreadnought }
								}
							}
						}
						random_list = {
							#####################################################################################
							### Ether Drake #####################################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										blackhole_system = yes
										is_star_class_sc_neutron_star = yes
										is_star_class_sc_pulsar = yes
										NOT = { has_global_flag = ehof_can_spawn_guardian_dragon }
										NOT = {
											any_system_planet = {
												planet_size >= 5
												is_star = no
												is_moon = no
												is_asteroid = no
											}
										}
										num_planets_in_system < 3
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_dragon_system
								set_star_flag = guardian
								set_star_flag = hostile_system
								random_system_planet = {
									limit = {
										planet_size >= 5
										is_star = no
										is_moon = no
										is_asteroid = no
									}
									change_pc = pc_barren
									clear_deposits = yes
									set_name = "NAME_Dragons_Hoard"
									set_planet_flag = hoard_planet
									save_global_event_target_as = guardian_dragon_planet
									prevent_anomaly = yes
									set_deposit = d_guardian_dragon_hoard

									create_country = {
										name = "NAME_Voidwyrm"
										type = guardian_dragon
										flag = {
											icon = {
												category = "zoological"
												file = "flag_zoological_5.dds"
											}
											background= {
												category = "backgrounds"
												file = "00_solid.dds"
											}
											colors={
												"red"
												"red"
												"null"
												"null"
											}
										}
									}
									last_created_country = {
										save_global_event_target_as = guardian_dragon_country
										set_country_flag = dragon_country
									}

									create_fleet = {
										name = "NAME_Ether_Drake"
										settings = {
											spawn_debris = no
											is_boss = yes
										}
										effect = {
											set_owner = event_target:guardian_dragon_country
											create_ship = {
												name = "NAME_Avice"
												design = "NAME_Grand_Dragon"
											}
											set_fleet_flag = dragon_fleet
											set_location = event_target:guardian_dragon_planet
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 500
											queue_actions = {
												repeat = {
													find_closest_planet = {
														trigger = {
															id = giga_dragon.home.1
															is_star = yes
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 random = 20 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dragon.home.2
															is_star = no
															NOT = { is_same_value = event_target:guardian_dragon_planet }
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 random = 20 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dragon.home.3
															is_same_value = event_target:guardian_dragon_planet
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 random = 20 }
														}
													}
												}
											}
										}
									}
								}
							}
							#####################################################################################
							### Technosphere ####################################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										blackhole_system = no
										NOT = { has_global_flag = ehof_can_spawn_guardian_sphere }
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_technosphere_system
								set_star_flag = guardian
								set_star_flag = hostile_system
								set_name = "NAME_Gargantua"

								star = {
									prevent_anomaly = yes
									clear_deposits = yes
									create_country = {
										name = "NAME_Infinity_Machine"
										type = guardian_sphere
										flag = {
											icon = {
												category = "zoological"
												file = "flag_zoological_5.dds"
											}
											background = {
												category = "backgrounds"
												file = "00_solid.dds"
											}
											colors={
												"red"
												"red"
												"null"
												"null"
											}
										}
									}
									last_created_country = {
										save_global_event_target_as = guardian_technosphere_country
										if = {
											limit = { NOT = { has_modifier = technosphere_power } }
											add_modifier = { modifier = technosphere_power days = -1 }
										}
										set_graphical_culture = techno
										create_fleet = {
											name = "NAME_The_Infinity_Machine"
											settings = {
												spawn_debris = no
												is_boss = yes
											}
											effect = {
												set_owner = event_target:guardian_technosphere_country
												create_ship = {
													name = "NAME_I_O"
													design = "NAME_Infinity_Machine"
												}
												set_fleet_flag = technosphere_fleet
												set_location = {
													target = prevprev
													distance = 80
													angle = 220
												}
												set_fleet_stance = passive
												set_aggro_range_measure_from = self
												set_aggro_range = 100
												save_global_event_target_as = technosphere_ship
												}
										}
									}
								}
							}
							#####################################################################################
							### Wraith ##########################################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										is_star_class_sc_pulsar = no
										NOT = { has_global_flag = ehof_can_spawn_guardian_wraith }
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_wraith_system
								set_star_flag = guardian
								set_star_flag = hostile_system

								star = {
									save_event_target_as = wraith_star
									create_country = {
										name = "NAME_Wraith"
										type = guardian_wraith
										flag = {
											icon = {
												category = "zoological"
												file = "flag_zoological_5.dds"
											}
											background= {
												category = "backgrounds"
												file = "00_solid.dds"
											}
											colors={
												"red"
												"red"
												"null"
												"null"
											}
										}
									}
									last_created_country = {
										set_country_flag = wraith_country
										save_global_event_target_as = wraith_country
										create_fleet = {
											name = "NAME_Specter"
											settings = {
												spawn_debris = no
												is_boss = yes
											}
											effect = {
												set_owner = event_target:wraith_country
												random_list = {
													33 = {
														create_ship = {
															name = "NAME_Wraith_650THz"
															design = "NAME_Spectral_Wraith_650THz"
															effect = {
																set_ship_flag = wraith_ship
																set_ship_flag = wraith_freq_blue
															}
														}
													}
													33 = {
														create_ship = {
															name = "NAME_Wraith_450THz"
															design = "NAME_Spectral_Wraith_450THz"
															effect = {
																set_ship_flag = wraith_ship
																set_ship_flag = wraith_freq_red
															}
														}
													}
													33 = {
														create_ship = {
															name = "NAME_Wraith_520THz"
															design = "NAME_Spectral_Wraith_520THz"
															effect = {
																set_ship_flag = wraith_ship
																set_ship_flag = wraith_freq_yellow
															}
														}
													}
												}
												save_global_event_target_as = wraith_fleet
												set_fleet_flag = wraith_fleet
												set_location = event_target:wraith_star
												set_fleet_stance = aggressive
												set_aggro_range_measure_from = self
												set_aggro_range = 20
												queue_actions = {
													repeat = {
														find_closest_system = {
															trigger = {
																id = giga_wraith.1.trigger.1
																NOR = {
																	exists = space_owner
																	any_fleet_in_system = { is_same_value = event_target:wraith_fleet }
																	has_star_flag = guardians_wraith_visited
																}
															}
															found_system = {
																move_to = this
																find_closest_planet = {
																	trigger = {
																		id = giga_wraith.1.trigger.2
																		is_star = yes
																	}
																	found_planet = {
																		move_to = this
																		wait = { duration = 10 }
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									root = { country_event = { id = leviathans.2012 } }
								}
							}
							#####################################################################################
							### Dimensional Horror ##############################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										blackhole_system = no
										NOT = { has_global_flag = ehof_can_spawn_guardian_horror }
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_horror_system
								set_star_flag = guardian
								set_star_flag = hostile_system
							}
							#####################################################################################
							### Enigmatic Fortress ##############################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									NOT = { has_global_flag = ehof_can_spawn_guardian_fortress }
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_fortress_system
								set_star_flag = guardian
								set_star_flag = hostile_system

								star = {
									create_country = {
										name = "NAME_Enigmatic_Fortress"
										type = guardian_fortress
										flag = {
											icon = {
												category = "zoological"
												file = "flag_zoological_5.dds"
											}
											background = {
												category = "backgrounds"
												file = "00_solid.dds"
											}
											colors = {
												"red"
												"red"
												"null"
												"null"
											}
										}
										effect = {
											save_global_event_target_as = fortress_country
											set_country_flag = fortress_country
											if = {
												limit = { NOT = { has_modifier = enigmatic_power } }
												add_modifier = { modifier = enigmatic_power days = -1 }
											}
										}
									}
									create_fleet = {
										name = "NAME_Enigmatic_Fortress"
										settings = {
											spawn_debris = no
											is_boss = yes
										}
										effect = {
											set_owner = event_target:fortress_country
											while = {
												count = 1 #just to show-case that formation will tile
												create_ship = {
													name = ""
													design = "NAME_Ancient_Vault"
													graphical_culture = "ancient"

													effect = {
														set_ship_flag = fortress_vault
														set_disable_at_health = 0.05
														save_global_event_target_as = fortress_vault_core
													}
												}
												create_ship = { name = "" design = "NAME_Ancient_Guardian" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Guardian" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Guardian" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Guardian" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Defender" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Defender" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Defender" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Defender" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
												create_ship = { name = "" design = "NAME_Ancient_Sentinel" graphical_culture = "ancient" }
											}
											set_fleet_formation = {
												position = { x = 13.0	y = -7.0	} #17
												position = { x = 11.5	y = -13.0	} #16
												position = { x = 0.0	y = -15.5	} #15
												position = { x = 13.0	y = 7.0		} #14
												position = { x = -11.8	y = -4.0	} #13
												position = { x = -15.8	y = 6.5		} #12
												position = { x = -10.0	y = 8.5		} #11
												position = { x = -1.6	y = 15.0	} #10
												position = { x = 14.0	y = -3.0	} #9
												position = { x = 1.3	y = -11.0	} #8
												position = { x = -10.5	y = 1.0		} #7
												position = { x = 3.0	y = 8.0		} #6
												position = { x = -4.3	y = -7.0	} #5
												position = { x = 8.0	y = 9.0		} #4
												position = { x = -4.0	y = 7.3		} #3
												position = { x = 7.5	y = -10.5	} #2
												position = { x = 0.0	y = 0.0		} #1
											}
											set_formation_scale = 0.5
											set_location = {
												target = PREV
												distance = 25
												angle = 150
											}
											set_fleet_flag = fortress_fleet
											save_global_event_target_as = fortress_fleet
										}
									}
								}
							}
							#####################################################################################
							### Stellarite Devourer #############################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										NOT = { has_global_flag = ehof_can_spawn_guardian_stellarite }
										ehof_category_dwarves = no
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_stellarite_system
								set_star_flag = guardian
								set_star_flag = hostile_system

								star = { change_planet_size = -5 }
							}
							#####################################################################################
							### Automated Dreadnought ###########################################################
							#####################################################################################
							1 = {
								modifier = {
									factor = 0
									OR = {
										NOT = { has_global_flag = ehof_can_spawn_guardian_dreadnought }
										num_planets_in_system < 8
									}
								}
								root = { set_timed_country_flag = { flag = ehof_recently_spawned_guardian years = 5 } }
								set_star_flag = guardians_dreadnought_system
								set_star_flag = guardian
								set_star_flag = hostile_system

								while = {
									count = 7
									random_system_planet = {
										limit = {
											NOR = {
												is_star = yes
												has_planet_flag = patrol_2
												has_planet_flag = patrol_3
												has_planet_flag = patrol_4
												has_planet_flag = patrol_5
												has_planet_flag = patrol_6
												has_planet_flag = patrol_7
												has_planet_flag = patrol_8
											}
										}
										if = {		limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_2 } } } } set_planet_flag = patrol_2 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_3 } } } } set_planet_flag = patrol_3 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_4 } } } } set_planet_flag = patrol_4 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_5 } } } } set_planet_flag = patrol_5 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_6 } } } } set_planet_flag = patrol_6 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_7 } } } } set_planet_flag = patrol_7 }
										else_if = {	limit = { solar_system = { NOT = { any_system_planet = { has_planet_flag = patrol_8 } } } } set_planet_flag = patrol_8 }
									}
								}

								star = {
									set_planet_flag = patrol_1
									save_event_target_as = dreadnought_sun
									create_country = {
										name = "NAME_Automated_Dreadnought"
										type = guardian_dreadnought
										flag = {
											icon = {
												category = "spherical"
												file = "flag_spherical_6.dds"
											}
											background = {
												category = "backgrounds"
												file = "00_solid.dds"
											}
											colors={
												"red"
												"red"
												"null"
												"null"
											}
										}
									}
									last_created_country = {
										if = {
											limit = { NOT = { has_modifier = dreadnought_power } }
											add_modifier = { modifier = dreadnought_power days = -1 }
										}
										save_global_event_target_as = automated_dreadnought_country
										set_country_flag = automated_dreadnought_country
									}
									create_fleet = {
										name = "NAME_Automated_Dreadnought"
										settings = {
											spawn_debris = no
											is_boss = yes
										}
										effect = {
											set_owner = event_target:automated_dreadnought_country
											save_global_event_target_as = automated_dreadnought
											create_ship = {
												name = "NAME_JuukTidir"
												design = "NAME_Relic"
												graphical_culture = "npf_01_dirty"
											}
											set_location = {
												target = event_target:dreadnought_sun
												distance = 0
												angle = random
											}
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = return_point
											set_aggro_range = 350

											queue_actions = {
												repeat = {
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.1
															has_planet_flag = patrol_1
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.2
															has_planet_flag = patrol_2
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.3
															has_planet_flag = patrol_3
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.4
															has_planet_flag = patrol_4
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.5
															has_planet_flag = patrol_5
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.6
															has_planet_flag = patrol_6
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.7
															has_planet_flag = patrol_7
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
													find_closest_planet = {
														trigger = {
															id = giga_dreadnought.patrol.8
															has_planet_flag = patrol_8
														}
														found_planet = {
															move_to = this
															orbit_planet = this
															wait = { duration = 30 }
														}
													}
												}
											}
										}
									}
								}
							}
							#####################################################################################
						}
					}
				}
			}
		}
	}
}

# Generate Megastructures
country_event = {
	id = ehof_systems.004
	is_triggered_only = yes
	hide_window = yes
	trigger = { NOT = { has_country_flag = ehof_spawn_reality_code } }

	immediate = {
		last_created_system = {
			random_list = {
				97 = {}
				3 = {
					modifier = { factor = 8 rare_system = yes }
					modifier = { factor = 0 urmazin_system = yes }
					modifier = { factor = 0 quest_system = yes }
					modifier = { factor = 0 compound_cluster = yes }
					random_list = {

						######################################################################################################################################
						########################################################### GIGASTRUCTURES ###########################################################
						######################################################################################################################################
						############################################## Kugelblitz Containment Silo
						5 = {
							modifier = { factor = 0 has_global_flag = kugel_disabled }
							modifier = {
								factor = 0
								NOT = { any_system_planet = { is_planet_habitable = no	is_star = no } }
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = kugelblitz_0
												is_megastructure_type = kugelblitz_1
												is_megastructure_type = kugelblitz_2
												is_megastructure_type = kugelblitz_restored
												is_megastructure_type = kugelblitz_ruined
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_kugelblitz_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { is_planet_habitable = no	is_star = no }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_kugelblitz
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "kugelblitz_ruined" coords_from = event_target:spawn_giga_ruined_kugelblitz }
						}
						############################################## Engineering Test Site
						5 = {
							modifier = { factor = 0 has_global_flag = megabase_disabled }
							modifier = {
								factor = 0
								OR = {
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									NOT = { any_system_planet = { OR = { is_planet_class = pc_machine is_planet_class = pc_broken is_planet_class = pc_shattered } } }
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = macro_test_site_0
												is_megastructure_type = macro_test_site_1
												is_megastructure_type = macro_test_site_1_dismantle
												is_megastructure_type = macro_test_site_restored
												is_megastructure_type = macro_test_site_ruined
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_engineering_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { OR = { is_planet_class = pc_machine is_planet_class = pc_broken is_planet_class = pc_shattered } }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_engineering
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "macro_test_site_ruined" coords_from = event_target:spawn_giga_ruined_engineering }
						}
						############################################## Neutronium Gigaforge
						5 = {
							modifier = { factor = 0 has_global_flag = gigaforge_disabled }
							modifier = {
								factor = 0
								OR = {
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									NOT = { any_system_planet = { OR = { is_planet_class = pc_neutron_star is_planet_class = pc_pulsar } } }
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = neutronium_gigaforge_restored
												is_megastructure_type = neutronium_gigaforge_ruined
												is_megastructure_type = neutronium_gigaforge_0
												is_megastructure_type = neutronium_gigaforge_1
												is_megastructure_type = neutronium_gigaforge_2
												is_megastructure_type = neutronium_gigaforge_3
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_neutroniumgigaforge_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { OR = { is_planet_class = pc_neutron_star is_planet_class = pc_pulsar } }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_neutroniumgigaforge
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "neutronium_gigaforge_ruined" coords_from = event_target:spawn_giga_ruined_neutroniumgigaforge }
						}
						############################################## Particle Accelerator
						5 = {
							modifier = { factor = 0 has_global_flag = accelerator_disabled }
							modifier = {
								factor = 0
								OR = {
									is_star_class = sc_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = particle_accelerator_restored
												is_megastructure_type = particle_accelerator_ruined
												is_megastructure_type = particle_accelerator_0
												is_megastructure_type = particle_accelerator_1
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_accelerator_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { is_star = yes }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_accelerator
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "particle_accelerator_ruined" coords_from = event_target:spawn_giga_ruined_accelerator }
						}
						############################################## Massive Zoo
						5 = {
							modifier = { factor = 0 has_global_flag = orbital_artificial_eco_disabled }
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = orbital_artificial_eco_0
												is_megastructure_type = orbital_artificial_eco_1
												is_megastructure_type = orbital_artificial_eco_1_dismantle
												is_megastructure_type = orbital_artificial_eco_restored
												is_megastructure_type = orbital_artificial_eco_ruined
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_ecosystem_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { is_star = no }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_massive_zoo
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "orbital_artificial_eco_ruined" coords_from = event_target:spawn_giga_ruined_massive_zoo }
						}
						############################################## Yggdrasil Orchid
						5 = {
							modifier = { factor = 0 has_global_flag = orchid_disabled }
							modifier = {
								factor = 0
								NOT = { any_system_planet = { is_planet_class = pc_gas_giant } }
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = yggdrasil_orchid_0
												is_megastructure_type = yggdrasil_orchid_1
												is_megastructure_type = yggdrasil_orchid_2
												is_megastructure_type = yggdrasil_orchid_3
												is_megastructure_type = yggdrasil_orchid_restored
												is_megastructure_type = yggdrasil_orchid_ruined
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_orchid_system
							giga_field_system_debris = yes

							random_system_planet = {
								limit = { is_planet_class = pc_gas_giant }
								set_planet_flag = has_giga
								set_planet_flag = has_megastructure
								save_event_target_as = spawn_giga_ruined_yggdrasil_orchid
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "yggdrasil_orchid_ruined" coords_from = event_target:spawn_giga_ruined_yggdrasil_orchid }
						}
						############################################## Ringworld
						5 = {
							modifier = {
								factor = 0
								OR = {
									is_trinary = yes
									is_binary = yes
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = ring_world_ruined
												is_megastructure_type = ring_world_restored
												is_megastructure_type = ring_world_1
												is_megastructure_type = ring_world_2
												is_megastructure_type = ring_world_2_intermediate
												is_megastructure_type = ring_world_3_intermediate
												is_megastructure_type = ring_world_titanic_ruined
												is_megastructure_type = ring_world_titanic_restored
												is_megastructure_type = ringworld_titanic_0
												is_megastructure_type = ringworld_titanic_1
												is_megastructure_type = ringworld_titanic_2
												is_megastructure_type = ring_world_behemoth_ruined
												is_megastructure_type = ring_world_behemoth_restored
												is_megastructure_type = ringworld_behemoth_0
												is_megastructure_type = ringworld_behemoth_1
												is_megastructure_type = ringworld_behemoth_2
												is_megastructure_type = ring_world_gargantuan_ruined
												is_megastructure_type = ring_world_gargantuan_restored
												is_megastructure_type = ringworld_gargantuan_0
												is_megastructure_type = ringworld_gargantuan_1
												is_megastructure_type = ringworld_gargantuan_2
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_ring_system
							star = {
								set_planet_size = 25
								trigger_megastructure_icon = yes
								set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
								set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
								giga_field_debris = yes
								if = {
									limit = { has_distar = yes }
									random = {
										chance = 50
										add_anomaly =  { category = DISTAR_CLONE_CAT }
									}
								}
							}
							giga_remove_system_planets = yes
							giga_field_system_debris = yes
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 0		orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 90	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 180	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 270	orbit_distance = 45 }
						}
						############################################## Titanic Ringworld
						5 = {
							modifier = {
								factor = 0
								OR = {
									is_trinary = yes
									is_binary = yes
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = ring_world_titanic_ruined
												is_megastructure_type = ring_world_titanic_restored
												is_megastructure_type = ringworld_titanic_0
												is_megastructure_type = ringworld_titanic_1
												is_megastructure_type = ringworld_titanic_2
												is_megastructure_type = ring_world_behemoth_ruined
												is_megastructure_type = ring_world_behemoth_restored
												is_megastructure_type = ringworld_behemoth_0
												is_megastructure_type = ringworld_behemoth_1
												is_megastructure_type = ringworld_behemoth_2
												is_megastructure_type = ring_world_gargantuan_ruined
												is_megastructure_type = ring_world_gargantuan_restored
												is_megastructure_type = ringworld_gargantuan_0
												is_megastructure_type = ringworld_gargantuan_1
												is_megastructure_type = ringworld_gargantuan_2
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_ring_system
							set_star_flag = ruined_titanic_ring_system
							set_star_flag = ring_world_built_one
							star = {
								set_planet_size = 25
								trigger_megastructure_icon = yes
								set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
								set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
								giga_field_debris = yes
								if = {
									limit = { has_distar = yes }
									random = {
										chance = 50
										add_anomaly =  { category = DISTAR_CLONE_CAT }
									}
								}
							}
							giga_remove_system_planets = yes
							giga_field_system_debris = yes
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 0		orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 90	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 180	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 270	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 0		orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 90	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 180	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 270	orbit_distance = 90 }
							while = { count = 4 giga_field_system_debris = yes }
						}
						############################################## Behemoth Ringworld
						5 = {
							modifier = {
								factor = 0
								OR = {
									is_trinary = yes
									is_binary = yes
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = ring_world_behemoth_ruined
												is_megastructure_type = ring_world_behemoth_restored
												is_megastructure_type = ringworld_behemoth_0
												is_megastructure_type = ringworld_behemoth_1
												is_megastructure_type = ringworld_behemoth_2
												is_megastructure_type = ring_world_gargantuan_ruined
												is_megastructure_type = ring_world_gargantuan_restored
												is_megastructure_type = ringworld_gargantuan_0
												is_megastructure_type = ringworld_gargantuan_1
												is_megastructure_type = ringworld_gargantuan_2
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_ring_system
							set_star_flag = ruined_behemoth_ring_system
							set_star_flag = ring_world_built_one
							set_star_flag = ring_world_built_two
							star = {
								set_planet_size = 25
								trigger_megastructure_icon = yes
								set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
								set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
								giga_field_debris = yes
								if = {
									limit = { has_distar = yes }
									random = {
										chance = 50
										add_anomaly =  { category = DISTAR_CLONE_CAT }
									}
								}
							}
							giga_remove_system_planets = yes
							giga_field_system_debris = yes
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 0		orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 90	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 180	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 270	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 0		orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 90	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 180	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 270	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 0		orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 90	orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 180	orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 270	orbit_distance = 134 }
							while = { count = 7 giga_field_system_debris = yes }
						}
						############################################## Gargantuan Ringworld
						5 = {
							modifier = {
								factor = 0
								OR = {
									is_trinary = yes
									is_binary = yes
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = ring_world_gargantuan_ruined
												is_megastructure_type = ring_world_gargantuan_restored
												is_megastructure_type = ringworld_gargantuan_0
												is_megastructure_type = ringworld_gargantuan_1
												is_megastructure_type = ringworld_gargantuan_2
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_ring_system
							set_star_flag = ruined_gargantuan_ring_system
							set_star_flag = ring_world_built_one
							set_star_flag = ring_world_built_two
							set_star_flag = ring_world_built_three
							star = {
								set_planet_size = 25
								trigger_megastructure_icon = yes
								set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
								set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
								giga_field_debris = yes
								if = {
									limit = { has_distar = yes }
									random = {
										chance = 50
										add_anomaly =  { category = DISTAR_CLONE_CAT }
									}
								}
							}
							giga_remove_system_planets = yes
							giga_field_system_debris = yes
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 0		orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 90	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 180	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_ruined"				orbit_angle = 270	orbit_distance = 45 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 0		orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 90	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 180	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_titanic_ruined"		orbit_angle = 270	orbit_distance = 90 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 0		orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 90	orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 180	orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_behemoth_ruined"		orbit_angle = 270	orbit_distance = 134 }
							spawn_megastructure = { type = "ring_world_gargantuan_ruined"	orbit_angle = 0		orbit_distance = 179 }
							spawn_megastructure = { type = "ring_world_gargantuan_ruined"	orbit_angle = 90	orbit_distance = 179 }
							spawn_megastructure = { type = "ring_world_gargantuan_ruined"	orbit_angle = 180	orbit_distance = 179 }
							spawn_megastructure = { type = "ring_world_gargantuan_ruined"	orbit_angle = 270	orbit_distance = 179 }
							while = { count = 10 giga_field_system_debris = yes }
						}
						######################################################################################################################################
						######################################################################################################################################
						######################################################################################################################################
						############################################## Dyson_sphere
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Utopia" } }
							modifier = {
								factor = 0
								OR = {
									is_binary = yes
									is_trinary = yes
									is_star_class = sc_black_hole
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_neutron_star
									is_star_class = sc_pulsar
									star = {
										planet_size > 35
										planet_size < 50
									}
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = dyson_sphere_0
												is_megastructure_type = dyson_sphere_0_b_star
												is_megastructure_type = dyson_sphere_0_m_giant_star
												is_megastructure_type = dyson_sphere_0_a_star
												is_megastructure_type = dyson_sphere_0_f_star
												is_megastructure_type = dyson_sphere_0_g_star
												is_megastructure_type = dyson_sphere_0_k_star
												is_megastructure_type = dyson_sphere_0_m_star
												is_megastructure_type = dyson_sphere_1
												is_megastructure_type = dyson_sphere_1_b_star
												is_megastructure_type = dyson_sphere_1_m_giant_star
												is_megastructure_type = dyson_sphere_1_a_star
												is_megastructure_type = dyson_sphere_1_f_star
												is_megastructure_type = dyson_sphere_1_g_star
												is_megastructure_type = dyson_sphere_1_k_star
												is_megastructure_type = dyson_sphere_1_m_star
												is_megastructure_type = dyson_sphere_2
												is_megastructure_type = dyson_sphere_2_b_star
												is_megastructure_type = dyson_sphere_2_m_giant_star
												is_megastructure_type = dyson_sphere_2_a_star
												is_megastructure_type = dyson_sphere_2_f_star
												is_megastructure_type = dyson_sphere_2_g_star
												is_megastructure_type = dyson_sphere_2_k_star
												is_megastructure_type = dyson_sphere_2_m_star
												is_megastructure_type = dyson_sphere_3
												is_megastructure_type = dyson_sphere_3_b_star
												is_megastructure_type = dyson_sphere_3_m_giant_star
												is_megastructure_type = dyson_sphere_3_a_star
												is_megastructure_type = dyson_sphere_3_f_star
												is_megastructure_type = dyson_sphere_3_g_star
												is_megastructure_type = dyson_sphere_3_k_star
												is_megastructure_type = dyson_sphere_3_m_star
												is_megastructure_type = dyson_sphere_4
												is_megastructure_type = dyson_sphere_4_b_star
												is_megastructure_type = dyson_sphere_4_m_giant_star
												is_megastructure_type = dyson_sphere_4_a_star
												is_megastructure_type = dyson_sphere_4_f_star
												is_megastructure_type = dyson_sphere_4_g_star
												is_megastructure_type = dyson_sphere_4_k_star
												is_megastructure_type = dyson_sphere_4_m_star
												is_megastructure_type = dyson_sphere_5
												is_megastructure_type = dyson_sphere_5_b_star
												is_megastructure_type = dyson_sphere_5_m_giant_star
												is_megastructure_type = dyson_sphere_5_a_star
												is_megastructure_type = dyson_sphere_5_f_star
												is_megastructure_type = dyson_sphere_5_g_star
												is_megastructure_type = dyson_sphere_5_k_star
												is_megastructure_type = dyson_sphere_5_m_star
												is_megastructure_type = dyson_sphere_ruined
												is_megastructure_type = dyson_sphere_ruined_b_star
												is_megastructure_type = dyson_sphere_ruined_m_giant_star
												is_megastructure_type = dyson_sphere_ruined_a_star
												is_megastructure_type = dyson_sphere_ruined_f_star
												is_megastructure_type = dyson_sphere_ruined_g_star
												is_megastructure_type = dyson_sphere_ruined_k_star
												is_megastructure_type = dyson_sphere_ruined_m_star
												is_megastructure_type = dyson_sphere_restored
												is_megastructure_type = dyson_sphere_restored_b_star
												is_megastructure_type = dyson_sphere_restored_m_giant_star
												is_megastructure_type = dyson_sphere_restored_a_star
												is_megastructure_type = dyson_sphere_restored_f_star
												is_megastructure_type = dyson_sphere_restored_g_star
												is_megastructure_type = dyson_sphere_restored_k_star
												is_megastructure_type = dyson_sphere_restored_m_star
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_dyson_system
							if = {
								limit = { urmazin_system = no }
								every_system_planet = {
									limit = { is_planet_habitable = yes }
									change_pc = "rl_unhabitable_planets"
								}
							}
							giga_field_system_debris = yes
							star = { trigger_megastructure_icon = yes }
							if = {
								limit = { has_global_flag = giga_dyson_scaling }
								if = {		limit = { star = { is_planet_class = pc_b_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_b_star"			owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_m_giant_star } }	spawn_megastructure = { type = "dyson_sphere_ruined_m_giant_star"	owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_a_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_a_star"			owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_f_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_f_star"			owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_g_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_g_star"			owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_k_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_k_star"			owner = from } }
								else_if = {	limit = { star = { is_planet_class = pc_m_star } }			spawn_megastructure = { type = "dyson_sphere_ruined_m_star"			owner = from } }
								else = {																spawn_megastructure = { type = "dyson_sphere_ruined"				owner = from } }
							}
						}
						############################################## Mega Shipyard
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Federations" } }
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = mega_shipyard_ruined
												is_megastructure_type = mega_shipyard_restored
												is_megastructure_type = mega_shipyard_0
												is_megastructure_type = mega_shipyard_1
												is_megastructure_type = mega_shipyard_2
												is_megastructure_type = mega_shipyard_3
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_mega_shipyard_system
							giga_field_system_debris = yes
							star = { trigger_megastructure_icon = yes }
							spawn_megastructure = { type = "mega_shipyard_ruined" }
						}
						############################################## Matter Decompressor
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Megacorp" } }
							modifier = {
								factor = 0
								NOR = {
									is_star_class = sc_ehof_black_hole
									is_star_class = sc_black_hole
								}
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = matter_decompressor_ruined
												is_megastructure_type = matter_decompressor_restored
												is_megastructure_type = matter_decompressor_0
												is_megastructure_type = matter_decompressor_1
												is_megastructure_type = matter_decompressor_2
												is_megastructure_type = matter_decompressor_3
												is_megastructure_type = matter_decompressor_4
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_matter_decompressor_system
							giga_field_system_debris = yes
							star = { trigger_megastructure_icon = yes }
							spawn_megastructure = { type = "matter_decompressor_ruined" }
						}
						############################################## Science Nexus
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Utopia" } }
							modifier = {
								factor = 0
								NOT = { any_system_planet = { is_planet_habitable = no	is_moon = no	is_asteroid = no	is_star = no } }
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = think_tank_ruined
												is_megastructure_type = think_tank_restored
												is_megastructure_type = think_tank_0
												is_megastructure_type = think_tank_1
												is_megastructure_type = think_tank_2
												is_megastructure_type = think_tank_3
												is_megastructure_type = think_tank_4
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_nexus_system
							giga_field_system_debris = yes
							random_system_planet = {
								limit = {
									is_planet_habitable = no
									is_moon = no
									is_asteroid = no
									is_star = no
								}
								save_event_target_as = science_nexus_target
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "think_tank_ruined" coords_from = event_target:science_nexus_target }
						}
						############################################## Sentry Array
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Utopia" } }
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = spy_orb_ruined
												is_megastructure_type = spy_orb_restored
												is_megastructure_type = spy_orb_0
												is_megastructure_type = spy_orb_1
												is_megastructure_type = spy_orb_2
												is_megastructure_type = spy_orb_3
												is_megastructure_type = spy_orb_4
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_sentry_system
							giga_field_system_debris = yes
							random_system_planet = {
								save_event_target_as = sentry_array_target
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "spy_orb_ruined" coords_from = event_target:sentry_array_target }
						}
						############################################## Strategic Coordination Center
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Megacorp" } }
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = strategic_coordination_center_ruined
												is_megastructure_type = strategic_coordination_center_restored
												is_megastructure_type = strategic_coordination_center_0
												is_megastructure_type = strategic_coordination_center_1
												is_megastructure_type = strategic_coordination_center_2
												is_megastructure_type = strategic_coordination_center_3
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_strategic_coordination_center_system
							giga_field_system_debris = yes
							random_system_planet = {
								save_event_target_as = coordination_target
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "strategic_coordination_center_ruined" coords_from = event_target:coordination_target }
						}
						############################################## Mega Art Installation
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Megacorp" } }
							modifier = {
								factor = 0
								NOT = { any_system_planet = { is_planet_habitable = yes } }
							}
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = mega_art_installation_ruined
												is_megastructure_type = mega_art_installation_restored
												is_megastructure_type = mega_art_installation_restored_2
												is_megastructure_type = mega_art_installation_0
												is_megastructure_type = mega_art_installation_1
												is_megastructure_type = mega_art_installation_2
												is_megastructure_type = mega_art_installation_3
												is_megastructure_type = mega_art_installation_4
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_mega_art_installation_system
							giga_field_system_debris = yes
							random_system_planet = {
								limit = { is_planet_habitable = yes }
								save_event_target_as = mega_art_installation_target
								giga_field_debris = yes
								trigger_megastructure_icon = yes
							}
							spawn_megastructure = { type = "mega_art_installation_ruined" coords_from = event_target:mega_art_installation_target }
						}
						############################################## Interstellar Assembly
						5 = {
							modifier = { factor = 0 NOT = { host_has_dlc = "Megacorp" } }
							modifier = {
								factor = 0.1
								root = {
									count_owned_megastructure = {
										limit = {
											OR = {
												is_megastructure_type = interstellar_assembly_ruined
												is_megastructure_type = interstellar_assembly_restored
												is_megastructure_type = interstellar_assembly_0
												is_megastructure_type = interstellar_assembly_1
												is_megastructure_type = interstellar_assembly_2
												is_megastructure_type = interstellar_assembly_3
												is_megastructure_type = interstellar_assembly_4
											}
										}
										count > 0
									}
								}
							}
							set_star_flag = ruined_interstellar_assembly_system
							giga_field_system_debris = yes
							star = { trigger_megastructure_icon = yes }
							spawn_megastructure = { type = "interstellar_assembly_ruined" }
						}
					}
				}
			}
		}
	}
}

# Generate System Color
country_event = {
	id = ehof_systems.005
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		last_created_system = {
			save_event_target_as = ehof_color_system_name
			if = {
				limit = {
					OR = {
						has_star_flag = quest_system
						urmazin_system = yes
					}
					compound_cluster = no
				}
				set_name = "ehof_quest_name"
				every_system_planet = {
					limit = { is_primary_star = yes }
					save_event_target_as = ehof_color_star_name
					set_name = "ehof_quest_star_name"
				}
			}
			else_if = {
				limit = {
					OR = {
						is_star_class = sc_birch
						is_star_class = sc_quasar
						compound_cluster = yes
					}
				}
				set_name = "ehof_core_name"
				every_system_planet = {
					limit = { is_primary_star = yes }
					save_event_target_as = ehof_color_star_name
					if = {
						limit = { is_planet_class = pc_birch }
						random_list = {
							1 = { set_name = "Corey's Gut" }
							1 = { set_name = "Time's Agony" }
							1 = { set_name = "Undying Fury" }
							1 = { set_name = "Eternal Horizon" }
							1 = { set_name = "Sagittrevorius A" }
							1 = { set_name = "Pouchkinn's Vortex" }
							1 = { set_name = "The End" }
							1 = { set_name = "Voluptia" }
							1 = { set_name = "Powehi" }
							1 = { set_name = "Centaurus A" }
							1 = { set_name = "Cygnus X-1" }
							1 = { set_name = "Sagittarius A*" }
							1 = { set_name = "TON 618" }
							1 = { set_name = "Steve" }
							1 = { set_name = "Steeve" }
							1 = { set_name = "Sbeve" }
							1 = { set_name = "Twissell" }
							1 = { set_name = "Anulus" }
							1 = { set_name = "Aria" }
							1 = { set_name = "Nero" }
							1 = { set_name = "Temporal Itch" }
							1 = { set_name = "Stellar Beholder" }
							1 = { set_name = "Grim Reaper" }
							1 = { set_name = "dQw4w9WgXcQ" }
							1 = { set_name = "Shatterer of Behemoths" }
							1 = { set_name = "Grand Gargantua" }
							1 = { set_name = "111001" }
							1 = { set_name = "Great Mother" }
							1 = { set_name = "Placeholder black hole, real one is being renovated, apologies for the inconvenience" }
							1 = { set_name = "Despacito" }
						}
					}
					else = { set_name = "ehof_core_star_name" }
				}
			}
			else_if = {
				limit = { rare_system = yes }
				set_name = "ehof_rare_name"
				every_system_planet = {
					limit = { is_primary_star = yes }
					save_event_target_as = ehof_color_star_name
					set_name = "ehof_rare_star_name"
				}
			}
			else = {
				set_name = "ehof_standard_name"
				every_system_planet = {
					limit = { is_primary_star = yes }
					save_event_target_as = ehof_color_star_name
					set_name = "ehof_standard_star_name"
				}
			}
		}
	}
}

# Generate Deposits
country_event = {
	id = ehof_systems.006
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		last_created_system = {
			if = {
				limit = { has_global_flag = ehof_spawning_compound }
				set_global_flag = compound_count_darkmatter
				every_system_planet = {
					clear_deposits = yes
					ehof_add_dark_matter_deposit = yes
				}
				remove_global_flag = compound_count_darkmatter
			}
			else = {
				every_system_planet = {
					limit = { NOT = { has_planet_flag = hoard_planet } }
					clear_deposits = yes
					if = {		limit = { planet_size = 1   } prev = { change_variable = { which = resources_total value = 1 } } }
					else_if = {	limit = { planet_size = 2   } prev = { change_variable = { which = resources_total value = 2 } } }
					else_if = {	limit = { planet_size = 3   } prev = { change_variable = { which = resources_total value = 3 } } }
					else_if = {	limit = { planet_size = 4   } prev = { change_variable = { which = resources_total value = 4 } } }
					else_if = {	limit = { planet_size = 5   } prev = { change_variable = { which = resources_total value = 5 } } }
					else_if = {	limit = { planet_size = 6   } prev = { change_variable = { which = resources_total value = 6 } } }
					else_if = {	limit = { planet_size = 7   } prev = { change_variable = { which = resources_total value = 7 } } }
					else_if = {	limit = { planet_size = 8   } prev = { change_variable = { which = resources_total value = 8 } } }
					else_if = {	limit = { planet_size = 9   } prev = { change_variable = { which = resources_total value = 9 } } }
					else_if = {	limit = { planet_size = 10  } prev = { change_variable = { which = resources_total value = 10 } } }
					else_if = {	limit = { planet_size = 11  } prev = { change_variable = { which = resources_total value = 11 } } }
					else_if = {	limit = { planet_size = 12  } prev = { change_variable = { which = resources_total value = 12 } } }
					else_if = {	limit = { planet_size = 13  } prev = { change_variable = { which = resources_total value = 13 } } }
					else_if = {	limit = { planet_size = 14  } prev = { change_variable = { which = resources_total value = 14 } } }
					else_if = {	limit = { planet_size = 15  } prev = { change_variable = { which = resources_total value = 15 } } }
					else_if = {	limit = { planet_size = 16  } prev = { change_variable = { which = resources_total value = 16 } } }
					else_if = {	limit = { planet_size = 17  } prev = { change_variable = { which = resources_total value = 17 } } }
					else_if = {	limit = { planet_size = 18  } prev = { change_variable = { which = resources_total value = 18 } } }
					else_if = {	limit = { planet_size = 19  } prev = { change_variable = { which = resources_total value = 19 } } }
					else_if = {	limit = { planet_size = 20  } prev = { change_variable = { which = resources_total value = 20 } } }
					else_if = {	limit = { planet_size = 21  } prev = { change_variable = { which = resources_total value = 21 } } }
					else_if = {	limit = { planet_size = 22  } prev = { change_variable = { which = resources_total value = 22 } } }
					else_if = {	limit = { planet_size = 23  } prev = { change_variable = { which = resources_total value = 23 } } }
					else_if = {	limit = { planet_size = 24  } prev = { change_variable = { which = resources_total value = 24 } } }
					else_if = {	limit = { planet_size = 25  } prev = { change_variable = { which = resources_total value = 25 } } }
					else_if = {	limit = { planet_size = 26  } prev = { change_variable = { which = resources_total value = 26 } } }
					else_if = {	limit = { planet_size = 27  } prev = { change_variable = { which = resources_total value = 27 } } }
					else_if = {	limit = { planet_size = 28  } prev = { change_variable = { which = resources_total value = 28 } } }
					else_if = {	limit = { planet_size = 29  } prev = { change_variable = { which = resources_total value = 29 } } }
					else_if = {	limit = { planet_size = 30  } prev = { change_variable = { which = resources_total value = 30 } } }
					else_if = {	limit = { planet_size = 31  } prev = { change_variable = { which = resources_total value = 31 } } }
					else_if = {	limit = { planet_size = 32  } prev = { change_variable = { which = resources_total value = 32 } } }
					else_if = {	limit = { planet_size = 33  } prev = { change_variable = { which = resources_total value = 33 } } }
					else_if = {	limit = { planet_size = 34  } prev = { change_variable = { which = resources_total value = 34 } } }
					else_if = {	limit = { planet_size = 35  } prev = { change_variable = { which = resources_total value = 35 } } }
					else_if = {	limit = { planet_size = 36  } prev = { change_variable = { which = resources_total value = 36 } } }
					else_if = {	limit = { planet_size = 37  } prev = { change_variable = { which = resources_total value = 37 } } }
					else_if = {	limit = { planet_size = 38  } prev = { change_variable = { which = resources_total value = 38 } } }
					else_if = {	limit = { planet_size = 39  } prev = { change_variable = { which = resources_total value = 39 } } }
					else_if = {	limit = { planet_size = 40  } prev = { change_variable = { which = resources_total value = 40 } } }
					else_if = {	limit = { planet_size = 41  } prev = { change_variable = { which = resources_total value = 41 } } }
					else_if = {	limit = { planet_size = 42  } prev = { change_variable = { which = resources_total value = 42 } } }
					else_if = {	limit = { planet_size = 43  } prev = { change_variable = { which = resources_total value = 43 } } }
					else_if = {	limit = { planet_size = 44  } prev = { change_variable = { which = resources_total value = 44 } } }
					else_if = {	limit = { planet_size = 45  } prev = { change_variable = { which = resources_total value = 45 } } }
					else_if = {	limit = { planet_size = 46  } prev = { change_variable = { which = resources_total value = 46 } } }
					else_if = {	limit = { planet_size = 47  } prev = { change_variable = { which = resources_total value = 47 } } }
					else_if = {	limit = { planet_size = 48  } prev = { change_variable = { which = resources_total value = 48 } } }
					else_if = {	limit = { planet_size = 49  } prev = { change_variable = { which = resources_total value = 49 } } }
					else_if = {	limit = { planet_size >= 50 } prev = { change_variable = { which = resources_total value = 50 } } }
				}

				divide_variable = { which = resources_total value = @deposit_multiplier }

				if = {		limit = { rare_system = yes }		multiply_variable = { which = resources_total value = @rare_system_multiplier } }
				else_if = {	limit = { urmazin_system = yes }	multiply_variable = { which = resources_total value = @urmazin_system_multiplier } }
				else_if = {	limit = { quest_system = yes }		multiply_variable = { which = resources_total value = @quest_system_multiplier } }
				else = {										multiply_variable = { which = resources_total value = @standard_system_multiplier } }

		#		set_variable = { which = resources_total_nodeduct value = resources_total }	# Debug

				# Rare resources
				##################################
				set_variable = { which = resource_rare_cost value = @resource_rare_cost }
				random_list = {
					70 = {}	# No rare resources
					20 = {	# 1 rare resource
						modifier = {
							factor = 0
							OR = {
								check_variable = { which = resources_total value < 15 }
								NOT = {
									any_system_planet = {
										OR = {
											eligible_for_zro = yes
											eligible_for_living_metal = yes
										}
									}
								}
								event_target:current_system_creator = {
									OR = {
										NAND = {
											has_technology = tech_mine_living_metal
											has_technology = tech_mine_zro
										}
										AND = {
											has_country_flag = recently_spawned_lm
											has_country_flag = recently_spawned_zro
										}
									}
								}
							}
						}
						change_variable = { which = resources_rare value = resource_rare_cost }
						subtract_variable = { which = resources_total value = resource_rare_cost }
						set_star_flag = resources_rare_1
					}
					10 = {	# 2 rare resources
						modifier = {
							factor = 0
							OR = {
								check_variable = { which = resources_total value < 30 }
								NOT = {
									any_system_planet = {
										OR = {
											eligible_for_zro = yes
											eligible_for_living_metal = yes
										}
									}
								}
								event_target:current_system_creator = {
									OR = {
										NAND = {
											has_technology = tech_mine_living_metal
											has_technology = tech_mine_zro
										}
										AND = {
											has_country_flag = recently_spawned_lm
											has_country_flag = recently_spawned_zro
										}
									}
								}
							}
						}
						change_variable = { which = resources_rare value = resource_rare_cost }
						change_variable = { which = resources_rare value = resource_rare_cost }
						subtract_variable = { which = resources_total value = resource_rare_cost }
						subtract_variable = { which = resources_total value = resource_rare_cost }
						set_star_flag = resources_rare_2
					}
				}

				while = {
					limit = {
						OR = {
							has_star_flag = resources_rare_1
							has_star_flag = resources_rare_2
						}
						any_system_planet = {
							OR = {
								eligible_for_zro = yes
								eligible_for_living_metal = yes
							}
						}
					}
					random_system_planet = {
						limit = {
							is_planet_habitable = no
							OR = {
								eligible_for_zro = yes
								eligible_for_living_metal = yes
							}
						}
						giga_add_resources_rare = yes
					}
				}

				# Strategic
				##################################
				random_list = {
					50 = {}	# No strategic resources
					50 = {	# 1/4 of total in strategic resources
						modifier = {
							factor = 0
							OR = {
								check_variable = { which = resources_total value < 15 }
								NOT = {
									any_system_planet = {
										OR = {
											eligible_for_volatile_motes = yes
											eligible_for_exotic_gases = yes
											eligible_for_rare_crystals = yes
											eligible_for_alloys = yes
										}
									}
								}
							}
						}
						modifier = { factor = @rare_system_multiplier		rare_system = yes }
						modifier = { factor = @urmazin_system_multiplier	urmazin_system = yes }
						modifier = { factor = @quest_system_multiplier		quest_system = yes }
						set_variable = {		which = resources_strategic	value = resources_total }				# Amount after rare resources have been deducted
						divide_variable = {		which = resources_strategic	value = @strategic_fraction }			# Strategic = 1/4 of total
						subtract_variable = {	which = resources_total		value = resources_strategic }			# Subtract 1/4 from total
						divide_variable = {		which = resources_strategic value = @resource_strategic_cost }		# Divide total budget for strategic by the cost per 1
						round_variable = resources_strategic
						if = {		limit = { check_variable = { which = resources_strategic value <= 1  } } set_star_flag = resources_strategic_1 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 2   } } set_star_flag = resources_strategic_2 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 3   } } set_star_flag = resources_strategic_3 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 4   } } set_star_flag = resources_strategic_4 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 5   } } set_star_flag = resources_strategic_5 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 6   } } set_star_flag = resources_strategic_6 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 7   } } set_star_flag = resources_strategic_7 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 8   } } set_star_flag = resources_strategic_8 }
						else_if = {	limit = { check_variable = { which = resources_strategic value = 9   } } set_star_flag = resources_strategic_9 }
						else_if = {	limit = { check_variable = { which = resources_strategic value >= 10 } } set_star_flag = resources_strategic_10 }
					}
				}

				if = {
					limit = { blackhole_system = yes }
					if = {
						limit = { has_star_flag = resources_strategic_10 }
						remove_star_flag = resources_strategic_10
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_9 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_8 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_7 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_6 } }
								1 = { add_deposit = d_dark_matter_deposit_5 solar_system = { set_star_flag = resources_strategic_5 } }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_9 }
						remove_star_flag = resources_strategic_9
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_8 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_7 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_6 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_5 } }
								1 = { add_deposit = d_dark_matter_deposit_5 solar_system = { set_star_flag = resources_strategic_4 } }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_8 }
						remove_star_flag = resources_strategic_8
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_7 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_6 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_5 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_4 } }
								1 = { add_deposit = d_dark_matter_deposit_5 solar_system = { set_star_flag = resources_strategic_3 } }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_7 }
						remove_star_flag = resources_strategic_7
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_6 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_5 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_4 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_3 } }
								1 = { add_deposit = d_dark_matter_deposit_5 solar_system = { set_star_flag = resources_strategic_2 } }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_6 }
						remove_star_flag = resources_strategic_6
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_5 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_4 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_3 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_2 } }
								1 = { add_deposit = d_dark_matter_deposit_5 solar_system = { set_star_flag = resources_strategic_1 } }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_5 }
						remove_star_flag = resources_strategic_5
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								5 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_4 } }
								4 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_3 } }
								3 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_2 } }
								2 = { add_deposit = d_dark_matter_deposit_4 solar_system = { set_star_flag = resources_strategic_1 } }
								1 = { add_deposit = d_dark_matter_deposit_5 }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_4 }
						remove_star_flag = resources_strategic_4
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								4 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_3 } }
								3 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_2 } }
								2 = { add_deposit = d_dark_matter_deposit_3 solar_system = { set_star_flag = resources_strategic_1 } }
								1 = { add_deposit = d_dark_matter_deposit_4 }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_3 }
						remove_star_flag = resources_strategic_3
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								3 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_2 } }
								2 = { add_deposit = d_dark_matter_deposit_2 solar_system = { set_star_flag = resources_strategic_1 } }
								1 = { add_deposit = d_dark_matter_deposit_3 }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else_if = {
						limit = { has_star_flag = resources_strategic_2 }
						remove_star_flag = resources_strategic_2
						star = {
							change_variable = { which = planet_deposits value = 1 }
							random_list = {
								2 = { add_deposit = d_dark_matter_deposit_1 solar_system = { set_star_flag = resources_strategic_1 } }
								1 = { add_deposit = d_dark_matter_deposit_2 }
							}
							set_planet_flag = has_dark_matter_deposit
						}
					}
					else = {
						remove_star_flag = resources_strategic_1
						star = {
							change_variable = { which = planet_deposits value = 1 }
							add_deposit = d_dark_matter_deposit_1
							set_planet_flag = has_dark_matter_deposit
						}
					}
				}

				if = {
					limit = { has_star_flag = resources_strategic_10 }
					remove_star_flag = resources_strategic_10
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_9 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_8 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_7 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_6 } }
							1 = { add_deposit = d_negative_mass_deposit_5 solar_system = { set_star_flag = resources_strategic_5 } }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_9 }
					remove_star_flag = resources_strategic_9
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_8 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_7 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_6 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_5 } }
							1 = { add_deposit = d_negative_mass_deposit_5 solar_system = { set_star_flag = resources_strategic_4 } }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_8 }
					remove_star_flag = resources_strategic_8
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_7 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_6 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_5 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_4 } }
							1 = { add_deposit = d_negative_mass_deposit_5 solar_system = { set_star_flag = resources_strategic_3 } }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_7 }
					remove_star_flag = resources_strategic_7
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_6 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_5 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_4 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_3 } }
							1 = { add_deposit = d_negative_mass_deposit_5 solar_system = { set_star_flag = resources_strategic_2 } }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_6 }
					remove_star_flag = resources_strategic_6
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_5 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_4 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_3 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_2 } }
							1 = { add_deposit = d_negative_mass_deposit_5 solar_system = { set_star_flag = resources_strategic_1 } }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_5 }
					remove_star_flag = resources_strategic_5
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							5 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_4 } }
							4 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_3 } }
							3 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_2 } }
							2 = { add_deposit = d_negative_mass_deposit_4 solar_system = { set_star_flag = resources_strategic_1 } }
							1 = { add_deposit = d_negative_mass_deposit_5 }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_4 }
					remove_star_flag = resources_strategic_4
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							4 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_3 } }
							3 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_2 } }
							2 = { add_deposit = d_negative_mass_deposit_3 solar_system = { set_star_flag = resources_strategic_1 } }
							1 = { add_deposit = d_negative_mass_deposit_4 }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_3 }
					remove_star_flag = resources_strategic_3
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							3 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_2 } }
							2 = { add_deposit = d_negative_mass_deposit_2 solar_system = { set_star_flag = resources_strategic_1 } }
							1 = { add_deposit = d_negative_mass_deposit_3 }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else_if = {
					limit = { has_star_flag = resources_strategic_2 }
					remove_star_flag = resources_strategic_2
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						random_list = {
							2 = { add_deposit = d_negative_mass_deposit_1 solar_system = { set_star_flag = resources_strategic_1 } }
							1 = { add_deposit = d_negative_mass_deposit_2 }
						}
						set_planet_flag = has_negative_mass_deposit
					}
				}
				else = {
					remove_star_flag = resources_strategic_1
					random_system_planet = {
						limit = { eligible_for_negative_mass = yes }
						change_variable = { which = planet_deposits value = 1 }
						add_deposit = d_negative_mass_deposit_1
						set_planet_flag = has_negative_mass_deposit
					}
				}

				while = {
					limit = {
						OR = {
							has_star_flag = resources_strategic_1
							has_star_flag = resources_strategic_2
							has_star_flag = resources_strategic_3
							has_star_flag = resources_strategic_4
							has_star_flag = resources_strategic_5
							has_star_flag = resources_strategic_6
							has_star_flag = resources_strategic_7
							has_star_flag = resources_strategic_8
							has_star_flag = resources_strategic_9
							has_star_flag = resources_strategic_10
						}
						any_system_planet = {
							is_planet_habitable = no
							check_variable = { which = planet_deposits value < 5 }
							OR = {
								eligible_for_volatile_motes = yes
								eligible_for_exotic_gases = yes
								eligible_for_rare_crystals = yes
								eligible_for_alloys = yes
							}
						}
					}
					random_system_planet = {
						limit = {
							is_planet_habitable = no
							check_variable = { which = planet_deposits value < 5 }
							OR = {
								eligible_for_volatile_motes = yes
								eligible_for_exotic_gases = yes
								eligible_for_rare_crystals = yes
								eligible_for_alloys = yes
							}
						}
						giga_add_resources_strategic = yes
					}
				}

				# Standard
				##################################
				set_variable = {		which = resources_standard	value = resources_total }						# Amount after rare & strategic resources have been deducted
				round_variable = resources_standard

				while = {
					limit = {
						check_variable = { which = resources_standard value > 0 }
						any_system_planet = {
							is_planet_habitable = no
							check_variable = { which = planet_deposits value < 5 }
							NOR = {
								has_deposit_for = shipclass_research_station
								has_planet_flag = has_zro_deposit
								has_planet_flag = has_living_metal_deposit
							}
						}
					}
					random_system_planet = {
						limit = {
							is_planet_habitable = no
							check_variable = { which = planet_deposits value < 5 }
							NOR = {
								has_deposit_for = shipclass_research_station
								has_planet_flag = has_zro_deposit
								has_planet_flag = has_living_metal_deposit
							}
						}
						giga_add_resources_standard = yes
					}
				}

				# Habitable Planet Deposits
				##################################
				every_system_planet = {
					limit = { is_planet_habitable = yes }
					reroll_deposits = yes
				}

				set_variable = { which = resources_total		value = 0 }
				set_variable = { which = resource_rare_cost		value = 0 }

				every_system_planet = {
					limit = { NOT = { has_planet_flag = hoard_planet } }
					set_variable = { which = planet_deposits value = 0 }
					remove_planet_flag = has_engineering_deposit
					remove_planet_flag = has_society_deposit
					remove_planet_flag = has_physics_deposit
					remove_planet_flag = has_energy_deposit
					remove_planet_flag = has_minerals_deposit
					remove_planet_flag = has_volatile_motes_deposit
					remove_planet_flag = has_rare_crystals_deposit
					remove_planet_flag = has_exotic_gases_deposit
					remove_planet_flag = has_zro_deposit
					remove_planet_flag = has_alloys_deposit
					remove_planet_flag = has_dark_matter_deposit
					remove_planet_flag = has_negative_mass_deposit
					remove_planet_flag = has_living_metal_deposit
				}
			}
		}
	}
}

# Generate Hostiles
country_event = {
	id = ehof_systems.007
	is_triggered_only = yes
	hide_window = yes
	trigger = { NOT = { has_country_flag = ehof_spawn_reality_code } }

	immediate = {
		last_created_system = {
			random_list = {
				90 = {}
				10 = {
					modifier = { factor = 0 has_star_flag = guardian }
					modifier = { factor = 0 urmazin_system = yes }
					modifier = { factor = 0 compound_cluster = yes }
					random_list = {
						####################################################################
						# Crystal Entities - Blue
						####################################################################
						1 = {
							set_star_flag = blue_system
							set_star_flag = hostile_system

							create_crystal_country = yes
							random_system_planet = {
								limit = { is_star = no }
								event_target:crystal_country = {
									create_fleet = {
										name = "NAME_Sapphire_Lurkers"
										effect = {
											set_owner = event_target:crystal_country
											while = {
												count = 7
												create_ship = {
													name = ""
													design = "NAME_Large_Crystal_Entity_Blue"
												}
											}
											while = {
												count = 9
												create_ship = {
													name = ""
													design = "NAME_Medium_Crystal_Entity_Blue"
												}
											}
											while = {
												count = 20
												create_ship = {
													name = ""
													design = "NAME_Small_Crystal_Entity_Blue"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 150
										}
									}
								}
							}
						}
						####################################################################
						# Crystal Entities - Blue VARIATION
						####################################################################
						1 = {
							modifier = {
								factor = 0
								num_planets_in_system < 4
							}

							set_star_flag = blue2_system
							set_star_flag = hostile_system

							create_crystal_country = yes
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = blue2_trigger_1
							}
							random_system_planet = {
								limit = {
									is_star = no
									NOT = { is_same_value = event_target:blue2_trigger_1 }
								}
								save_event_target_as = blue2_trigger_2
							}
							random_system_planet = {
								limit = {
									is_star = no
									NOR = {
										is_same_value = event_target:blue2_trigger_1
										is_same_value = event_target:blue2_trigger_2
									}
								}
								save_event_target_as = blue2_trigger_3
							}
							event_target:crystal_country = {
								if = {
									limit = { exists = event_target:blue2_trigger_3 }
									create_fleet = {
										name = "NAME_Sapphire_Lurkers"
										effect = {
											set_owner = event_target:crystal_country
											while = {
												count = 14
												create_ship = {
													name = ""
													design = "NAME_Small_Crystal_Entity_Blue"
												}
											}
											set_location = event_target:blue2_trigger_3
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 150
										}
									}
								}
								if = {
									limit = { exists = event_target:blue2_trigger_2 }
									create_fleet = {
										name = "NAME_Sapphire_Lurkers"
										effect = {
											set_owner = event_target:crystal_country
											while = {
												count = 3
												create_ship = {
													name = ""
													design = "NAME_Medium_Crystal_Entity_Blue"
												}
											}
											while = {
												count = 6
												create_ship = {
													name = ""
													design = "NAME_Small_Crystal_Entity_Blue"
												}
											}
											set_location = event_target:blue2_trigger_2
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 150
										}
									}
								}
								if = {
									limit = { exists = event_target:blue2_trigger_1 }
									create_fleet = {
										name = "NAME_Sapphire_Lurkers"
										effect = {
											set_owner = event_target:crystal_country
											while = {
												count = 3
												create_ship = {
													name = ""
													design = "NAME_Medium_Crystal_Entity_Blue"
												}
											}
											while = {
												count = 6
												create_ship = {
													name = ""
													design = "NAME_Small_Crystal_Entity_Blue"
												}
											}
											set_location = event_target:blue2_trigger_1
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 150
										}
									}
								}
							}
						}
						####################################################################
						# Crystal Entities - Green (Patrol)
						####################################################################
						1 = {
							modifier = {
								factor = 0
								num_planets_in_system < 4
							}

							set_star_flag = green_system
							set_star_flag = hostile_system

							create_crystal_country = yes
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
								}
								save_event_target_as = green_trigger_1
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOT = { is_same_value = event_target:green_trigger_1 }
								}
								save_event_target_as = green_trigger_2
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOR = {
										is_same_value = event_target:green_trigger_1
										is_same_value = event_target:green_trigger_2
									}
								}
								save_event_target_as = green_trigger_3
							}
							event_target:crystal_country = {
								create_fleet = {
									name = "NAME_Emerald_Roamers"
									effect = {
										set_owner = event_target:crystal_country
										create_ship = {
											name = ""
											design = "NAME_Large_Crystal_Entity_Green"
										}
										while = {
											count = 2
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Green"
											}
										}
										while = {
											count = 8
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Green"
											}
										}
										set_location = event_target:green_trigger_3
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = self
										set_aggro_range = 100
										queue_actions = {
											repeat = {
												find_closest_planet = {
													trigger = {
														id = "giga_greenC.1.trigger.1"
														is_planet = event_target:green_trigger_1
													}
													found_planet = {
														move_to = this
														orbit_planet = THIS
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC.1.trigger.2"
														is_planet = event_target:green_trigger_2
													}
													found_planet = {
														move_to = this
														orbit_planet = THIS
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC.1.trigger.3"
														is_planet = event_target:green_trigger_3
													}
													found_planet = {
														move_to = this
														orbit_planet = THIS
													}
												}
											}
										}
									}
								}
							}
						}
						####################################################################
						# Crystal Entities - Green (Patrol) VARIATION
						####################################################################
						1 = {
							modifier = {
								factor = 0
								num_planets_in_system < 4
							}

							set_star_flag = green2_system
							set_star_flag = hostile_system

							create_crystal_country = yes
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = green2_trigger_1
							}
							random_system_planet = {
								limit = {
									is_star = no
									NOT = { is_same_value = event_target:green2_trigger_1 }
								}
								save_event_target_as = green2_trigger_2
							}
							random_system_planet = {
								limit = {
									is_star = no
									NOR = {
										is_same_value = event_target:green2_trigger_1
										is_same_value = event_target:green2_trigger_2
									}
								}
								save_event_target_as = green2_trigger_3
							}
							event_target:crystal_country = {
								save_event_target_as = green2_owner
								create_fleet = {
									name = "NAME_Emerald_Roamers"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 5
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Green"
											}
										}
										set_location = event_target:green2_trigger_3
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 40
										queue_actions = {
											repeat = {
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.1.trigger.1"
														is_planet = event_target:green2_trigger_1
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.1.trigger.2"
														is_planet = event_target:green2_trigger_2
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.1.trigger.3"
														is_planet = event_target:green2_trigger_3
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Emerald_Roamers"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 3
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Green"
											}
										}
										while = {
											count = 2
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Green"
											}
										}
										while = {
											count = 3
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Green"
											}
										}
										set_location = event_target:green2_trigger_1
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = self
										set_aggro_range = 40
										queue_actions = {
											repeat = {
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.2.trigger.2"
														is_planet = event_target:green2_trigger_2
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.2.trigger.3"
														is_planet = event_target:green2_trigger_3
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.2.trigger.1"
														is_planet = event_target:green2_trigger_1
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Emerald_Roamers"
									effect = {
										set_owner = event_target:crystal_country
										create_ship = {
											name = ""
											design = "NAME_Medium_Crystal_Entity_Green"
										}
										while = {
											count = 6
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Green"
											}
										}
										set_location = event_target:green2_trigger_2
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = self
										set_aggro_range = 40
										queue_actions = {
											repeat = {
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.3.trigger.3"
														is_planet = event_target:green2_trigger_3
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.3.trigger.1"
														is_planet = event_target:green2_trigger_1
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
												find_closest_planet = {
													trigger = {
														id = "giga_greenC2.3.trigger.2"
														is_planet = event_target:green2_trigger_2
													}
													found_planet = {
														move_to = this
														orbit_planet = this
													}
												}
											}
										}
									}
								}
							}
						}
						####################################################################
						# Crystal Entities - Red
						####################################################################
						1 = {
							modifier = {
								factor = 0
								num_planets_in_system < 5
							}

							set_star_flag = red_system
							set_star_flag = hostile_system

							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
								}
								save_event_target_as = red_trigger_1
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOT = { is_same_value = event_target:red_trigger_1 }
								}
								save_event_target_as = red_trigger_2
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOR = {
										is_same_value = event_target:red_trigger_1
										is_same_value = event_target:red_trigger_2
									}
								}
								save_event_target_as = red_trigger_3
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOR = {
										is_same_value = event_target:red_trigger_1
										is_same_value = event_target:red_trigger_2
										is_same_value = event_target:red_trigger_3
									}
								}
								save_event_target_as = red_trigger_4
							}
							create_crystal_country = yes
							event_target:crystal_country = {
								save_event_target_as = red_crystals
								create_fleet = {
									name = "NAME_Ruby_Stack"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 3
											create_ship = {
												name = ""
												design = "NAME_Large_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red_trigger_1
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 40
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Stack"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 4
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red_trigger_2
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 30
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Stack"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 11
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red_trigger_3
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 40
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Stack"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 3
											create_ship = {
												name = ""
												design = "NAME_Large_Crystal_Entity_Red"
											}
										}
										while = {
											count = 6
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red_trigger_4
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 30
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
							}
						}
						####################################################################
						# Crystal Entities - Red VARIATION
						####################################################################
						1 = {
							modifier = {
								factor = 0
								num_planets_in_system < 5
							}

							set_star_flag = red2_system
							set_star_flag = hostile_system

							create_crystal_country = yes
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
								}
								save_event_target_as = red2_trigger_1
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOT = { is_same_value = event_target:red2_trigger_1 }
								}
								save_event_target_as = red2_trigger_2
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOR = {
										is_same_value = event_target:red2_trigger_1
										is_same_value = event_target:red2_trigger_2
									}
								}
								save_event_target_as = red2_trigger_3
							}
							random_system_planet = {
								limit = {
									is_star = no
									is_moon = no
									NOR = {
										is_same_value = event_target:red2_trigger_1
										is_same_value = event_target:red2_trigger_2
										is_same_value = event_target:red2_trigger_3
									}
								}
								save_event_target_as = red2_trigger_4
							}
							event_target:crystal_country = {
								save_event_target_as = red2_crystals
								create_fleet = {
									name = "NAME_Ruby_Swarm"
									effect = {
										set_owner = event_target:crystal_country
										create_ship = {
											name = "NAME_Kappa"
											design = "NAME_Large_Crystal_Entity_Red"
										}
										create_ship = {
											name = ""
											design = "NAME_Large_Crystal_Entity_Red"
										}
										while = {
											count = 6
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Red"
											}
										}
										while = {
											count = 19
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red2_trigger_1
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 100
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Swarm"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 9
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Red"
											}
										}
										while = {
											count = 6
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red2_trigger_2
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 100
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Swarm"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 24
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red2_trigger_3
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 100
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
								create_fleet = {
									name = "NAME_Ruby_Swarm"
									effect = {
										set_owner = event_target:crystal_country
										while = {
											count = 11
											create_ship = {
												name = ""
												design = "NAME_Large_Crystal_Entity_Red"
											}
										}
										while = {
											count = 2
											create_ship = {
												name = ""
												design = "NAME_Medium_Crystal_Entity_Red"
											}
										}
										while = {
											count = 7
											create_ship = {
												name = ""
												design = "NAME_Small_Crystal_Entity_Red"
											}
										}
										set_location = event_target:red2_trigger_4
										set_fleet_stance = aggressive
										set_aggro_range_measure_from = return_point
										set_aggro_range = 100
										queue_actions = {
											repeat = {
												wait = {
													duration = 9999
												}
											}
										}
									}
								}
							}
						}
						####################################################################
						# Cloud Entity
						####################################################################
						1 = {
							set_star_flag = void_system
							set_star_flag = hostile_system

							create_cloud_country = yes
							random_system_planet = {
								limit = { is_star = yes }
								set_deposit = d_energy_2
								event_target:cloud_country = {
									set_aggro_range = 500
									create_fleet = {
										name = "NAME_Void_Cloud"
										effect = {
											set_owner = event_target:cloud_country
											create_ship = {
												name = ""
												design = "NAME_Cloud_Entity"
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 500
										}
									}
								}
							}
						}
						####################################################################
						# Space Amoeba, Large pack
						####################################################################
						1 = {
							set_star_flag = amoeba_1_system
							set_star_flag = hostile_system

							create_amoeba_country = yes
							random_system_planet = {
								limit = { is_star = no }
								event_target:amoeba_country = {
									create_fleet = {
										name = "NAME_Space_Amoeba"
										settings = { garrison = yes }
										effect = {
											set_owner = event_target:amoeba_country
											while = {
												count = 6
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Zebra"
												}
											}
											while = {
												count = 2
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Zebra"
												}
											}
											set_formation_scale = 3.0
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 100
										}
									}
								}
							}
						}
						####################################################################
						# Space Amoeba, Small pack
						####################################################################
						1 = {
							set_star_flag = amoeba_2_system
							set_star_flag = hostile_system

							create_amoeba_country = yes
							random_system_planet = {
								limit = { is_star = no }
								event_target:amoeba_country = {
									create_fleet = {
										name = "NAME_Space_Amoeba"
										settings = { garrison = yes }
										effect = {
											set_owner = event_target:amoeba_country
											while = {
												count = 4
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Teal"
												}
											}
											while = {
												count = 1
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Teal"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 100
										}
									}
								}
							}
						}
						####################################################################
						# Space Amoeba ROAMING VARIATION
						####################################################################
						1 = {
							set_star_flag = amoeba_3_system
							set_star_flag = hostile_system

							create_amoeba_country = yes
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = grazing_grounds
								event_target:amoeba_country = {
									create_fleet = {
										name = "NAME_Space_Amoeba_Hunters"
										effect = {
											set_owner = event_target:amoeba_country
											random_list = {
												20 = { set_fleet_flag = tiyanki_hunter }
												70 = { set_fleet_flag = empty_system }
											}
											while = {
												count = 4
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Orange"
												}
											}
											while = {
												count = 1
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Orange"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = self
											set_aggro_range = 20

											if = {
												limit = { has_fleet_flag = tiyanki_hunter }
												save_event_target_as = hunting_amoeba
												queue_actions = {
													wait = { # Cooldown until they start moving
														duration = 500
														random = 100
													}
												}
											}
											else = {
												queue_actions = {
													wait = { # Cooldown until they start moving
														duration = 500
														random = 100
													}
												}
											}
										}
									}
								}
							}
						}
						####################################################################
						# Mining Drones
						####################################################################
						1 = {
							modifier = {
								factor = 0
								NOT = {
									any_system_planet = {
										has_deposit_for = shipclass_mining_station
										is_star = no
										NOT = { is_planet_class = pc_gas_giant }
									}
								}
							}

							set_star_flag = drone_system_1
							set_star_flag = hostile_system

							create_drone_country = yes
							random_system_planet = {
								limit = {
									has_deposit_for = shipclass_mining_station
									is_star = no
									NOT = { is_planet_class = pc_gas_giant }
								}
								set_deposit = d_minerals_4
								event_target:drone_country = {
									save_event_target_as = mining_drones
									create_fleet = {
										name = "NAME_Ancient_Mining_Drones"
										effect = {
											set_owner = event_target:drone_country
											while = {
												count = 10
												create_ship = {
													name = ""
													design = "NAME_Ancient_Mining_Drone"
												}
											}
											while = {
												count = 4
												create_ship = {
													name = ""
													design = "NAME_Ancient_Combat_Drone"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = return_point
											set_aggro_range = 150
											queue_actions = {
												repeat = {
													wait = {
														duration = 999
														random = 10
													}
												}
											}
										}
									}
								}
								create_mining_station = {
									owner = event_target:mining_drones
								}
							}
						}
						####################################################################
						# Mining Drones
						####################################################################
						1 = {
							modifier = {
								factor = 0
								NOT = {
									any_system_planet = {
										has_deposit_for = shipclass_mining_station
										is_star = no
										NOT = { is_planet_class = pc_gas_giant }
									}
								}
							}

							set_star_flag = drone_system_2
							set_star_flag = hostile_system

							create_drone_country = yes
							random_system_planet = {
								limit = {
									has_deposit_for = shipclass_mining_station
									is_star = no
									NOT = { is_planet_class = pc_gas_giant }
								}
								set_deposit = d_minerals_8
								event_target:drone_country = {
									save_event_target_as = mining_drones
									create_fleet = {
										name = "NAME_Ancient_Mining_Drones"
										effect = {
											set_owner = event_target:drone_country
											while = {
												count = 8
												create_ship = {
													name = ""
													design = "NAME_Ancient_Mining_Drone"
												}
											}
											while = {
												count = 4
												create_ship = {
													name = ""
													design = "NAME_Ancient_Combat_Drone"
												}
											}
											while = {
												count = 2
												create_ship = {
													name = ""
													design = "NAME_Ancient_Destroyer"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = return_point
											set_aggro_range = 150
											queue_actions = {
												repeat = {
													wait = {
														duration = 999
														random = 10
													}
												}
											}
										}
									}
								}
								create_mining_station = {
									owner = event_target:mining_drones
								}
							}
						}
						####################################################################
						# Mining Drone Destroyers
						####################################################################
						1 = {
							modifier = {
								factor = 0
								NOT = { any_system_planet = { has_deposit_for = shipclass_mining_station } }
							}

							set_star_flag = drone_destroyer_system
							set_star_flag = hostile_system

							create_drone_country = yes
							random_system_planet = {
								limit = { has_deposit_for = shipclass_mining_station }
								set_deposit = d_minerals_8
								event_target:drone_country = {
									save_event_target_as = mining_drones
									create_fleet = {
										name = "NAME_Asset_Protection_Unit"
										effect = {
											set_owner = event_target:drone_country
											while = {
												count = 7
												create_ship = {
													name = ""
													design = "NAME_Ancient_Combat_Drone"
												}
											}
											while = {
												count = 3
												create_ship = {
													name = ""
													design = "NAME_Ancient_Destroyer"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = return_point
											set_aggro_range = 150
											queue_actions = {
												repeat = {
													wait = {
														duration = 999
														random = 10
													}
												}
											}
										}
									}
								}
								create_mining_station = {
									owner = event_target:mining_drones
								}
							}
						}
						####################################################################
						# Mining Drones ALTERNATE
						####################################################################
						1 = {
							modifier = {
								factor = 0
								NOT = { any_system_planet = { has_deposit_for = shipclass_mining_station } }
							}

							set_star_flag = drone_system_3
							set_star_flag = hostile_system

							create_drone_country = yes
							random_system_planet = {
								limit = { has_deposit_for = shipclass_mining_station }
								set_deposit = d_minerals_8
								event_target:drone_country = {
									create_fleet = {
										name = "NAME_Ancient_Mining_Drones"
										effect = {
											set_owner = event_target:drone_country
											while = {
												count = 10
												create_ship = {
													name = ""
													design = "NAME_Ancient_Mining_Drone"
												}
											}
											while = {
												count = 3
												create_ship = {
													name = ""
													design = "NAME_Ancient_Combat_Drone"
												}
											}
											set_location = PREVPREV
											set_fleet_stance = aggressive
											set_aggro_range_measure_from = return_point
											set_aggro_range = 200
										}
									}
								}
								create_mining_station = {
									owner = event_target:drone_country
								}
							}
						}
						####################################################################
					}
				}
			}
		}
	}
}