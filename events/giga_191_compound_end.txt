namespace = compound_end

# Compound dies
planet_event = {
	id = compound_end.001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		stop_crisis_sound = yes

		# End compound event chain
		remove_global_flag = compound_invasion_ongoing
		set_global_flag = compound_destroyed
		every_country = {
			limit = { has_event_chain = "compound_crisis_chain" }
			end_event_chain = "compound_crisis_chain"
			if = {
				limit = {
					NOT = { has_global_flag = giga_achievements_disabled }
					OR = {
						has_global_flag = compound_capped_1	# x1 Vanilla crisis, compound when dead
						has_global_flag = compound_capped_2	# x1 Vanilla crisis & compound
						has_global_flag = compound_capped_3	# x2 Vanilla crisis & compound
						has_global_flag = compound_capped_4	# x3 Vanilla crisis & compound
					}
				}
				if = {
					limit = {
						has_global_flag = compound_capped_4	# x3 Vanilla crisis & compound
						is_difficulty = 5					# Grand Admiral
					}
					set_country_flag = giga_achievement_52
					set_country_flag = giga_achievement_51
					set_country_flag = giga_achievement_50
					set_country_flag = giga_achievement_49
					set_country_flag = giga_achievement_48
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					add_modifier = { modifier = achievement_52 }
					add_modifier = { modifier = achievement_48 }
					set_timed_country_flag = { flag = giga_achievement_52_notification days = 30 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = {
						has_global_flag = compound_capped_3	# x2 Vanilla crisis & compound
						is_difficulty = 5					# Grand Admiral
					}
					set_country_flag = giga_achievement_51
					set_country_flag = giga_achievement_50
					set_country_flag = giga_achievement_49
					set_country_flag = giga_achievement_48
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					add_modifier = { modifier = achievement_51 }
					add_modifier = { modifier = achievement_48 }
					set_timed_country_flag = { flag = giga_achievement_51_notification days = 30 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = {
						has_global_flag = compound_capped_2	# x1 Vanilla crisis & compound
						is_difficulty = 5					# Grand Admiral
					}
					set_country_flag = giga_achievement_50
					set_country_flag = giga_achievement_49
					set_country_flag = giga_achievement_48
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					add_modifier = { modifier = achievement_50 }
					add_modifier = { modifier = achievement_48 }
					set_timed_country_flag = { flag = giga_achievement_50_notification days = 30 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 5 }				# Grand Admiral
					set_country_flag = giga_achievement_49
					set_country_flag = giga_achievement_48
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					add_modifier = { modifier = achievement_49 }
					add_modifier = { modifier = achievement_48 }
					set_timed_country_flag = { flag = giga_achievement_49_notification days = 30 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 4 }				# Admiral
					set_country_flag = giga_achievement_48
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					set_timed_country_flag = { flag = giga_achievement_48_notification days = 30 }
					add_modifier = { modifier = achievement_48 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 3 }				# Commodore
					set_country_flag = giga_achievement_47
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					set_timed_country_flag = { flag = giga_achievement_47_notification days = 30 }
					add_modifier = { modifier = achievement_47 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 2 }				# Captain
					set_country_flag = giga_achievement_46
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					set_timed_country_flag = { flag = giga_achievement_46_notification days = 30 }
					add_modifier = { modifier = achievement_46 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 1 }				# Ensign
					set_country_flag = giga_achievement_45
					set_country_flag = giga_achievement_44
					set_timed_country_flag = { flag = giga_achievement_45_notification days = 30 }
					add_modifier = { modifier = achievement_45 }
					giga_achievement_sound = yes
				}
				else_if = {
					limit = { is_difficulty = 0 }				# Cadet
					set_country_flag = giga_achievement_44
					set_timed_country_flag = { flag = giga_achievement_44_notification days = 30 }
					add_modifier = { modifier = achievement_44 }
					giga_achievement_sound = yes
				}
			}
		}

		# Remove wormholes
		every_megastructure = {
			limit = {
				OR = {
					is_megastructure_type = compound_wormhole_portal
					is_megastructure_type = compound_wormhole_ehof
				}
			}
			remove_megastructure = this
		}
		
		every_galaxy_planet = {
			limit = {
				is_star = yes
			}
			solar_system = {
				if = { limit = { has_modifier = giga_compound_immunity }
					remove_modifier = giga_compound_immunity
				}
			}
		}

		if = {
			limit = { has_global_flag = annihilator_destroyed_sphere }
			# Create death animation
			event_target:compound_capital_system = {
				set_star_flag = compound_sphere_destroyed
				random_system_ambient_object = {
					limit = { has_ambient_object_flag = sa_firing_at_sphere }
					destroy_ambient_object = this
				}
				random_system_planet = {
					limit = { has_planet_flag = sa_firing_source }
					create_ambient_object = {
						type = "sa_fired_at_sphere"
						location = this
						use_3d_location = yes
						base_angle_towards = star
						entity_face_object = star
						entity_offset = 0
						entity_scale_to_size = yes
						entity_offset_height = 17
					}
					last_created_ambient_object = { set_ambient_object_flag = sa_fired_at_sphere }
					annihilator_death = yes
					clear_deposits = yes
					remove_planet = yes
				}
				event_target:ehof_annihilator = {
					queue_actions = {
						find_random_planet = {
							trigger = {
								id = sa_final_destination.1
								has_planet_flag = compound_home_sphere
							}
							found_planet = {
								move_to = this
							}
						}
					}
				}
			}

			# Give discoverer a relic
			event_target:discoverer_country = { country_event = { id = compound_end.002 days = 10 random = 10 } }
			event_target:creators_country = { country_event = { id = annihilator.012 days = 5 } }	# Kill Annihilator (For Good)

			every_country = {
				limit = { ehof_default_country = yes }
				country_event = { id = annihilator_dialog.012 days = 30 }							# Notification: Sphere and Annihalor are dead
			}
		}
		else_if = {
			limit = { has_global_flag = bombardment_destroyed_sphere }

			# Give discoverer a relic
			event_target:preservation_sphere_destroyer = { country_event = { id = compound_end.002 days = 10 random = 10 } }
			event_target:creators_country = { country_event = { id = annihilator.012 days = 5 } }	# Kill Annihilator (For Good)

			# Notify Sphere was bombarded & Annihilator is gone
			every_country = {
				limit = { ehof_default_country = yes }
				country_event = { id = compound_dialog.20 }

				if = {
					limit = { has_event_chain = compound_solution_chain }
					end_event_chain = compound_solution_chain
					if = { limit = { has_special_project = REPAIR_ANNIHILATOR }				abort_special_project = { type = REPAIR_ANNIHILATOR } }
					if = { limit = { has_special_project = ENTERING_LEVIATHAN }				abort_special_project = { type = ENTERING_LEVIATHAN } }
					if = { limit = { has_special_project = INVESTIGATE_DORMANT_LEVIATHAN }	abort_special_project = { type = INVESTIGATE_DORMANT_LEVIATHAN } }
					if = { limit = { has_special_project = INVESTIGATE_STELLAR_WOUND }		abort_special_project = { type = INVESTIGATE_STELLAR_WOUND } }
					if = { limit = { has_special_project = INVESTIGATE_WOUNDED_STAR }		abort_special_project = { type = INVESTIGATE_WOUNDED_STAR } }
				}
			}
		}

		# The traders are open for business
		if = {
			limit = { exists = event_target:urmazin_country }
			every_country = {
				limit = {
					ehof_default_country = yes
					has_country_flag = ehof_traders_first_time
				}
				country_event = { id = ehof_mega_trader.014 days = 60 }
			}
		}

		# Remove sphere from star and create debris
		event_target:compound_capital_system = {
			every_system_ambient_object = { limit = { has_ambient_object_flag = fake_sphere } destroy_ambient_object = this }
			random_system_planet = {
				limit = { has_planet_flag = compound_home_sphere }
				destroy_colony = yes
				change_pc = pc_wh_star
				set_name = "ehof_whitehole"
				giga_field_debris = yes
			}

			# Spawn $PGATE_GALACTIC$
			spawn_megastructure = {
				type = "ehof_pgate_gateway"
				orbit_angle = 110
				orbit_distance = 35
			}

			# Spawn Ruined Preservation Sphere
			spawn_megastructure = {
				type = "ehof_presphere_ruined"
				orbit_distance = 0
				orbit_angle = 0
			}
		}

		# Remove the compound
		random_country = {
			limit = { is_country_type = compound_empire }
			every_owned_pop = { kill_pop = yes }
			every_owned_fleet = { delete_fleet = this }
			every_controlled_planet = { remove_all_buildings = yes }
			destroy_country = yes
		}

	}
}

# Creators Shard
country_event = {
	id = compound_end.002
	title = "compound_end.002.name"
	desc = "compound_end.002.desc"
	picture = GFX_evt_shattered_planet
	show_sound = event_mystic_reveal
	is_triggered_only = yes

	option = {
		name = GOOD
		add_relic = r_creator_shard
	}
}