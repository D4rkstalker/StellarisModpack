
###############################
### Civil Wars by MrFunEGUY ###
###############################


namespace = civnat

## NOTE: I need to revisit the just-implemented truly_dead_country flag, as a country still needs to be around for Nationalism to function correctly. I can just make it a hidden exile country.


#################
# Separatist Pop Formation Events, Conquest

#FromFrom = Former Owner (if any)
#From = Country scope (new owner)
#This = Planet scope
planet_event = { ## Initial Event to create separatists from transferred planets.
	id = civnat.1000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_modifier = planet_culture_shock }
		exists = fromfrom
		fromfrom = {
			is_regular_empire = yes
			NOT = { is_overlord_to = from }
			NOT = { has_country_flag = civstrife_nat_timer }
		}
		from = {
			NOT = { has_country_flag = civwar_rebel_timer }
			is_country_type_with_subjects = yes
		}
		any_owned_pop = {
			OR = {
				has_pop_flag = citizen_of_@fromfrom
				has_pop_flag = resident_of_@fromfrom
			}
		}
	}

	immediate = {

		fromfrom = {
			save_event_target_as = nat_pops_country
			set_country_flag = has_nats_in_@root.owner
		}

		set_timed_planet_flag = { flag = nat_pops_planet_@event_target:nat_pops_country days = 30 }

		########

		get_nat_seps = yes
	}
}

#This = destroyed country
#From = optional, destroyer (country)
country_event = { ## Initial Event to create nationalists from destroyed countries.
	id = civnat.1010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = from # Is this a good idea? I think so.
		OR = {
			is_regular_empire = yes
			is_country_type = enclave_exiled_gov
		}
		NOR = {
			has_country_flag = truly_dead_country
			has_country_flag = civstrife_nat_timer
		}
	}

	immediate = {

		species = { # For some reason, this doesnt work during country creation and needs to be done after
			save_event_target_as = original_nation_species
		}

		# Create Exile Government
		create_country = {
			name = root
			type = exile_country
			species = event_target:original_nation_species
			ignore_initial_colony_error = yes
			day_zero_contact = no
			authority = root
			ethos = root
			origin = origin_exile_government
			civics = root
			flag = root
			effect = {
				copy_techs_from = { target = root }
				set_leader = root.ruler
				set_graphical_culture = root
				save_event_target_as = nat_pops_country
				get_separatist_faction_nat = yes
				# This needs to be done or the species will be the ruler species, very odd.
				change_species = event_target:original_nation_species
				if = {
					limit = { root = { has_country_flag = integrated_subject } }
					set_country_flag = integrated_subject
				}
			}
		}

		every_owned_leader = { set_owner = event_target:nat_pops_country }

		from = { set_timed_country_flag = { flag = destroyed_country_nat_@event_target:nat_pops_country days = 30 } }

		save_event_target_as = old_nat_country

		get_nat_change_flags = yes

		from = { set_country_flag = exile_already_asked_@event_target:nat_pops_country }

		if = {
			limit = {
				is_homicidal = yes
				is_organic_zealots = no
			}
			event_target:nat_pops_country = { set_country_flag = was_purifier }
		}

		if = {
			limit = { NOT = { is_country_type = enclave_exiled_gov } }
			every_galaxy_pop = {
				limit = { has_pop_flag = sep_pop_nat_@event_target:nat_pops_country }
				add_modifier = { modifier = "death_of_motherland" years = 20 }
				if = { # No need to have both of these, it's just overkill.
					limit = { has_modifier = pop_recently_conquered }
					remove_modifier = pop_recently_conquered
				}
			}
		}

		if = { # Subject will ask overlord first.
			limit = { is_subject = yes }
			overlord = { set_timed_country_flag = { flag = overlord_of_@event_target:nat_pops_country days = 100 } }
		}
	}

	after = {
		event_target:nat_pops_country = {
			if = {
				limit = { NOT = { has_country_flag = integrated_subject } }
				country_event = { id = civnat.1200 }
			}
			else = {
				from = { save_event_target_as = overlord_country }
				country_event = { id = civnat.1310 }
			}
		}
	}
}

country_event = { # Shop for home for Government-In-Exile
	id = civnat.1200
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		# Government-In-Exile, will shop around 
		if = {
			limit = {
				OR = {
					any_country = { has_country_flag = overlord_of_@root }
					AND = {
						OR = {
							is_homicidal = no
							is_organic_zealots = yes
						}
						any_country = {
							is_subject = no
							is_country_type_with_subjects = yes
							has_communications = event_target:nat_pops_country
							OR = {
								is_homicidal = no
								is_organic_zealots = yes
							}
							NOT = { is_same_value = root }
							# has_country_flag = test_test
						}
					}
				}
			}
			country_event = { id = civnat.1300 }
		}
		else = {
			country_event = { id = civnat.1310 }
		}	
	}
}

country_event = { # Gov In Exile Requst Hosting
	id = civnat.1300
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		if = {
			limit = { any_country = { has_country_flag = overlord_of_@root } }
			random_country = {
				limit = { has_country_flag = overlord_of_@root }
				country_event = { id = civcom.9000 days = 2 random = 10 }
			}
		}

		else_if = { # They will ask same species country first
			limit = {
				any_country = {
					is_subject = no
					has_communications = root
					is_country_type_with_subjects = yes
					species = { is_same_value = root.owner_main_species }
					OR = {
						is_homicidal = no
						is_organic_zealots = yes
					}
					NOR = {
						is_same_value = root
						has_country_flag = exile_already_asked_@root
					}
					# has_country_flag = test_test
				}
			}
			random_country = {
				limit = {
					is_subject = no
					has_communications = root
					is_country_type_with_subjects = yes
					species = { is_same_value = root.owner_main_species }
					OR = {
						is_homicidal = no
						is_organic_zealots = yes
					}
					NOR = {
						is_same_value = root
						has_country_flag = exile_already_asked_@root
					}
					# has_country_flag = test_test
				}
				country_event = { id = civcom.9000 days = 5 random = 40 }
			}
		}

		else_if = {
			limit = {
				any_country = {
					is_subject = no
					has_communications = root
					is_country_type_with_subjects = yes
					OR = {
						is_homicidal = no
						is_organic_zealots = yes
					}
					NOR = {
						is_same_value = root
						has_country_flag = exile_already_asked_@root
					}
					# has_country_flag = test_test
				}
			}
			random_country = {
				limit = {
					is_subject = no
					has_communications = root
					is_country_type_with_subjects = yes
					OR = {
						is_homicidal = no
						is_organic_zealots = yes
					}
					NOR = {
						is_same_value = root
						has_country_flag = exile_already_asked_@root
					}
					# has_country_flag = test_test
				}
				country_event = { id = civcom.9000 days = 5 random = 40 }
			}
		}

		else = {
			country_event = { id = civnat.1310 }
		}
	}
}

country_event = { # Gov In Exile cannot find host, dissolves
	id = civnat.1310
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		if = {
			limit = { NOT = { has_country_flag = dead_nation } }
			set_country_flag = dead_nation
		}

		if = {
			limit = { is_country_type = enclave_exiled_gov }
			random_owned_fleet = { destroy_fleet = this }

			save_event_target_as = old_nat_country

			# Create Country for nationalists, can still be restored by them via civil war
			create_country = {
				name = event_target:old_nat_country
				type = exile_country
				species = event_target:old_nat_country.species
				day_zero_contact = no
				authority = event_target:old_nat_country
				ethos = event_target:old_nat_country
				origin = origin_exile_government
				civics = event_target:old_nat_country
				flag = event_target:old_nat_country
				ignore_initial_colony_error = yes
				effect = {
					copy_techs_from = { target = event_target:old_nat_country }
					set_leader = event_target:old_nat_country.ruler
					get_separatist_faction_nat = yes
					save_event_target_as = nat_pops_country
				}
			}
			get_nat_change_flags = yes
		}

		save_event_target_as = gov_in_exile

		if = {
			limit = { NOT = { has_country_flag = ancient_exile_gov } }
			every_playable_country = {
				limit = {
					has_communications = root
					NOT = { is_same_value = root }
					OR = {
						NOT = { exists = event_target:overlord_country }
						NOT = { is_same_value = event_target:overlord_country }
					}
				}
				country_event = { id = civ_action.62 }
			}
			random_playable_country = {
				observer_event = { id = civ_observer.2 }
			}
		}
		else = {
			every_playable_country = {
				limit = {
					has_communications = root
					NOT = { is_same_value = root }
					OR = {
						NOT = { exists = event_target:overlord_country }
						NOT = { is_same_value = event_target:overlord_country }
					}
				}
				country_event = { id = civ_action.63 }
			}
			random_playable_country = {
				observer_event = { id = civ_observer.3 }
			}
		}

		if = {
			limit = { is_country_type = enclave_exiled_gov }
			set_country_flag = truly_dead_country
			destroy_country = yes
		}
	}
}

country_event = { # Gov In Exile finds host
	id = civnat.1320
	hide_window = yes
	is_triggered_only = yes


	immediate = {

		if = {
			limit = { NOT = { has_country_flag = ancient_exile_gov } }
			every_playable_country = {
				limit = {
					OR = {
						has_communications = root
						has_communications = event_target:hosting_country
					}
					NOR = {
						is_same_value = root
						is_same_value = event_target:hosting_country
					}
				}
				country_event = { id = civ_action.6210 }
			}
			random_playable_country = {
				observer_event = { id = civ_observer.210 }
			}
		}
		else = {
			every_playable_country = {
				limit = {
					OR = {
						has_communications = root
						has_communications = event_target:hosting_country
					}
					NOR = {
						is_same_value = root
						is_same_value = event_target:hosting_country
					}
				}
				country_event = { id = civ_action.6310 }
			}
			random_playable_country = {
				observer_event = { id = civ_observer.310 }
			}
		}
	}

	after = {
		add_modifier = { modifier = exile_gov_loyalty days = -1 }
	}
}

country_event = { # Government-In-Exile Released as Enclave
	id = civnat.1330
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		event_target:exiled_gov_enclave_country = { save_event_target_as = exile_need_host }

		random_owned_planet = {
			limit = { has_planet_flag = exile_enclave_link_@event_target:exile_need_host }
			remove_planet_flag = exiled_gov_host_planet
			remove_planet_flag = exile_enclave_link_@event_target:exile_need_host
		}

		event_target:exile_need_host = { country_event = { id = civnat.1300 } }
	}
}

country_event = { # Gov In Exile restoration, when released peacefully
	id = civnat.1340
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_exile_country = yes
		any_country = { has_country_flag = exile_link_@root }
	}


	immediate = {

		save_event_target_as = restored_country

		random_country = {
			limit = { has_country_flag = exile_link_@root }

			save_global_event_target_as = new_homeland

			if = {
				limit = {
					root = { is_subject = yes } # To make sure that they actually had a Government-In-Exile. If they didn't, a new dynasty will begin.
					is_imperial = yes
				}
				set_leader = root.ruler
				# This needs to be done or the species will be the ruler species, very odd.
				change_species = event_target:restored_country.species
			}
			every_owned_pop = {	# The nationalists in the restored homeland have won, they don't need to be nationalist anymore 
				limit = { has_pop_flag = sep_pop_nat_@root }
				remove_pop_flag = sep_pop_nat_@root
			}
		}

		# If nationalists elsewhere exist for a country that then is restored, make them happy and potentially resettle them
		every_galaxy_pop = {
			limit = { has_pop_flag = sep_pop_nat_@root }
			remove_pop_flag = sep_pop_nat_@root
			set_pop_flag = sep_pop_nat_@event_target:new_homeland
			add_modifier = { modifier = "restoration_of_motherland" years = 15 }
			if = {
				limit = {
					has_citizenship_rights = yes
					has_migration_control = { type = no }
				}
				random = {
					chance = 75
					resettle_pop = {
						pop = this
						planet = event_target:new_homeland.capital_scope
					}
				}
			}
		}

		every_galaxy_pop = {
			limit = {
				OR = {
					has_pop_flag = citizen_of_@root
					has_pop_flag = resident_of_@root
					has_pop_flag = slave_of_@root
					has_pop_flag = bio_trophy_of_@root
					has_pop_flag = purgee_of_@root
				}
			}
			if = {
				limit = { has_pop_flag = citizen_of_@root }
				remove_pop_flag = citizen_of_@root
				set_pop_flag = citizen_of_@event_target:new_homeland
			}
			else_if = {
				limit = { has_pop_flag = resident_of_@root }
				remove_pop_flag = resident_of_@root
				set_pop_flag = resident_of_@event_target:new_homeland
			}
			else_if = {
				limit = { has_pop_flag = slave_of_@root }
				remove_pop_flag = slave_of_@root
				set_pop_flag = slave_of_@event_target:new_homeland
			}
			else_if = {
				limit = { has_pop_flag = bio_trophy_of_@root }
				remove_pop_flag = bio_trophy_of_@root
				set_pop_flag = bio_trophy_of_@event_target:new_homeland
			}
			else_if = {
				limit = { has_pop_flag = purgee_of_@root }
				remove_pop_flag = purgee_of_@root
				set_pop_flag = purgee_of_@event_target:new_homeland
			}			
		}

		every_galaxy_planet = {
			limit = {
				OR = {
					has_planet_flag = frontier_planet_@root
					has_planet_flag = integrated_planet_@root
					has_planet_flag = fundamental_planet_@root
					has_planet_flag = capital_planet_@root
				}
			}
			if = {
				limit = { has_planet_flag = frontier_planet_@root }
				remove_planet_flag = frontier_planet_@root
				set_planet_flag = frontier_planet_@event_target:new_homeland
			}
			if = {
				limit = { has_planet_flag = integrated_planet_@root }
				remove_planet_flag = integrated_planet_@root
				set_planet_flag = integrated_planet_@event_target:new_homeland
			}
			if = {
				limit = { has_planet_flag = fundamental_planet_@root }
				remove_planet_flag = fundamental_planet_@root
				set_planet_flag = fundamental_planet_@event_target:new_homeland
			}
			if = {
				limit = { has_planet_flag = capital_planet_@root }
				remove_planet_flag = capital_planet_@root
				set_planet_flag = capital_planet_@event_target:new_homeland
			}
		}

		# Notifications to other countries
		if = {	# If they had a Government-In-Exile
			limit = {
				is_country_type = enclave_exiled_gov
				any_owned_fleet = {
					is_ship_size = enclave_mercenary_station
					solar_system = { exists = space_owner }
				}
			}
			random_owned_fleet = {
				limit =  {
					any_owned_fleet = {
						is_ship_size = enclave_mercenary_station
						solar_system = { exists = space_owner }
					}
				}
				solar_system.space_owner = {
					save_global_event_target_as = exile_host
					country_event = { id = civnat.9210 }
				}
			}
			every_playable_country = {
				limit = { has_communications = prev }
				country_event = { id = civnat.9200 }
			}
		}
		else = {
			every_playable_country = {
				limit = { has_communications = prev }
				country_event = { id = civnat.9230 }
			}
		}

		# Destroy exile country
		country_event = { id = civnat.1350 days = 5 }
	}
}

country_event = { # Gov In Exile restoration, on war won
	id = civnat.1341
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			using_war_goal = { type = wg_natwar owner = root.from }
		}
		any_country = {
			is_exile_country = yes
			has_country_flag = exile_link_@root
		}
	}


	immediate = {

		random_country = {
			limit = {
				is_exile_country = yes
				has_country_flag = exile_link_@root
			}

			save_event_target_as = restored_country

			root = {

				save_global_event_target_as = new_homeland

				if = {
					limit = {
						prev = { is_subject = yes } # To make sure that they actually had a Government-In-Exile. If they didn't, a new dynasty will begin.
						is_imperial = yes
					}
					set_leader = prev.ruler
				}
				every_owned_pop = {	# The nationalists in the restored homeland have won, they don't need to be nationalist anymore 
					limit = { has_pop_flag = sep_pop_nat_@prev }
					remove_pop_flag = sep_pop_nat_@prev
				}
			}

			# If nationalists elsewhere exist for a country that then is restored, make them happy and potentially resettle them
			every_galaxy_pop = {
				limit = { has_pop_flag = sep_pop_nat_@prev }
				remove_pop_flag = sep_pop_nat_@prev
				set_pop_flag = sep_pop_nat_@event_target:new_homeland
				add_modifier = { modifier = "restoration_of_motherland" years = 15 }
				if = {
					limit = {
						has_citizenship_rights = yes
						has_migration_control = { type = no }
					}
					random = {
						chance = 75
						resettle_pop = {
							pop = this
							planet = event_target:new_homeland.capital_scope
						}
					}
				}
			}

			every_galaxy_pop = {
				limit = {
					OR = {
						has_pop_flag = citizen_of_@prev
						has_pop_flag = resident_of_@prev
						has_pop_flag = slave_of_@prev
						has_pop_flag = bio_trophy_of_@prev
						has_pop_flag = purgee_of_@prev
					}
				}
				if = {
					limit = { has_pop_flag = citizen_of_@prev }
					remove_pop_flag = citizen_of_@prev
					set_pop_flag = citizen_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = resident_of_@prev }
					remove_pop_flag = resident_of_@prev
					set_pop_flag = resident_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = slave_of_@prev }
					remove_pop_flag = slave_of_@prev
					set_pop_flag = slave_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = bio_trophy_of_@prev }
					remove_pop_flag = bio_trophy_of_@prev
					set_pop_flag = bio_trophy_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = purgee_of_@prev }
					remove_pop_flag = purgee_of_@prev
					set_pop_flag = purgee_of_@event_target:new_homeland
				}			
			}

			every_galaxy_planet = {
				limit = {
					OR = {
						has_planet_flag = frontier_planet_@prev
						has_planet_flag = integrated_planet_@prev
						has_planet_flag = fundamental_planet_@prev
						has_planet_flag = capital_planet_@prev
					}
				}
				if = {
					limit = { has_planet_flag = frontier_planet_@prev }
					remove_planet_flag = frontier_planet_@prev
					set_planet_flag = frontier_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = integrated_planet_@prev }
					remove_planet_flag = integrated_planet_@prev
					set_planet_flag = integrated_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = fundamental_planet_@prev }
					remove_planet_flag = fundamental_planet_@prev
					set_planet_flag = fundamental_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = capital_planet_@prev }
					remove_planet_flag = capital_planet_@prev
					set_planet_flag = capital_planet_@event_target:new_homeland
				}
			}

			# Notifications to other countries
			if = {	# If they had a Government-In-Exile
				limit = {
					is_country_type = enclave_exiled_gov
					any_owned_fleet = {
						is_ship_size = enclave_mercenary_station
						solar_system = { exists = space_owner }
					}
				}
				random_owned_fleet = {
					limit =  {
						any_owned_fleet = {
							is_ship_size = enclave_mercenary_station
							solar_system = { exists = space_owner }
						}
					}
					solar_system.space_owner = {
						save_global_event_target_as = exile_host
						country_event = { id = civnat.9210 }
					}
				}
				every_playable_country = {
					limit = { has_communications = prev }
					country_event = { id = civnat.9200 }
				}
			}
			else = {
				every_playable_country = {
					limit = { has_communications = prev }
					country_event = { id = civnat.9230 }
				}
			}

			# Destroy exile country
			country_event = { id = civnat.1350 days = 5 }
		}
	}
}

country_event = { # Gov In Exile restoration, on status quo
	id = civnat.1342
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FromFromFromFrom = {
			using_war_goal = { type = wg_natwar owner = FromFrom }
		}
		any_country = {
			is_exile_country = yes
			has_country_flag = exile_link_@fromfromfrom
		}
	}


	immediate = {

		random_country = {
			limit = {
				is_exile_country = yes
				has_country_flag = exile_link_@fromfromfrom
			}

			save_event_target_as = restored_country

			fromfromfrom = {

				save_global_event_target_as = new_homeland

				if = {
					limit = {
						prev = { is_subject = yes } # To make sure that they actually had a Government-In-Exile. If they didn't, a new dynasty will begin.
						is_imperial = yes
					}
					set_leader = prev.ruler
				}
				every_owned_pop = {	# The nationalists in the restored homeland have won, they don't need to be nationalist anymore 
					limit = { has_pop_flag = sep_pop_nat_@prev }
					remove_pop_flag = sep_pop_nat_@prev
				}
			}

			# If nationalists elsewhere exist for a country that then is restored, make them happy and potentially resettle them
			every_galaxy_pop = {
				limit = { has_pop_flag = sep_pop_nat_@prev }
				remove_pop_flag = sep_pop_nat_@prev
				set_pop_flag = sep_pop_nat_@event_target:new_homeland
				add_modifier = { modifier = "restoration_of_motherland" years = 15 }
				if = {
					limit = {
						has_citizenship_rights = yes
						has_migration_control = { type = no }
					}
					random = {
						chance = 75
						resettle_pop = {
							pop = this
							planet = event_target:new_homeland.capital_scope
						}
					}
				}
			}

			every_galaxy_pop = {
				limit = {
					OR = {
						has_pop_flag = citizen_of_@prev
						has_pop_flag = resident_of_@prev
						has_pop_flag = slave_of_@prev
						has_pop_flag = bio_trophy_of_@prev
						has_pop_flag = purgee_of_@prev
					}
				}
				if = {
					limit = { has_pop_flag = citizen_of_@prev }
					remove_pop_flag = citizen_of_@prev
					set_pop_flag = citizen_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = resident_of_@prev }
					remove_pop_flag = resident_of_@prev
					set_pop_flag = resident_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = slave_of_@prev }
					remove_pop_flag = slave_of_@prev
					set_pop_flag = slave_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = bio_trophy_of_@prev }
					remove_pop_flag = bio_trophy_of_@prev
					set_pop_flag = bio_trophy_of_@event_target:new_homeland
				}
				else_if = {
					limit = { has_pop_flag = purgee_of_@prev }
					remove_pop_flag = purgee_of_@prev
					set_pop_flag = purgee_of_@event_target:new_homeland
				}			
			}

			every_galaxy_planet = {
				limit = {
					OR = {
						has_planet_flag = frontier_planet_@prev
						has_planet_flag = integrated_planet_@prev
						has_planet_flag = fundamental_planet_@prev
						has_planet_flag = capital_planet_@prev
					}
				}
				if = {
					limit = { has_planet_flag = frontier_planet_@prev }
					remove_planet_flag = frontier_planet_@prev
					set_planet_flag = frontier_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = integrated_planet_@prev }
					remove_planet_flag = integrated_planet_@prev
					set_planet_flag = integrated_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = fundamental_planet_@prev }
					remove_planet_flag = fundamental_planet_@prev
					set_planet_flag = fundamental_planet_@event_target:new_homeland
				}
				if = {
					limit = { has_planet_flag = capital_planet_@prev }
					remove_planet_flag = capital_planet_@prev
					set_planet_flag = capital_planet_@event_target:new_homeland
				}
			}

			capital_scope = {
				if = { # If they don't have their opriginal capital planet, they rename their empire.
					limit = { NOT = { has_planet_flag = capital_planet_@event_target:new_homeland } }
					prev = {
						set_name = random
						set_country_flag = nat_country_new_name
					}
				}
			}

			# Notifications to other countries
			if = {	# If they had a Government-In-Exile
				limit = {
					is_country_type = enclave_exiled_gov
					any_owned_fleet = {
						is_ship_size = enclave_mercenary_station
						solar_system = { exists = space_owner }
					}
				}
				random_owned_fleet = {
					limit =  {
						any_owned_fleet = {
							is_ship_size = enclave_mercenary_station
							solar_system = { exists = space_owner }
						}
					}
					solar_system.space_owner = {
						save_global_event_target_as = exile_host
						country_event = { id = civnat.9210 }
					}
				}
				every_playable_country = {
					limit = { has_communications = prev }
					country_event = { id = civnat.9200 }
				}
			}
			else = {
				every_playable_country = {
					limit = { has_communications = prev }
					country_event = { id = civnat.9230 }
				}
			}

			# Destroy exile country
			country_event = { id = civnat.1350 days = 5 }
		}
	}
}

country_event = { # Gov In Exile restored, destroy exile country
	id = civnat.1350
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_exile_country = yes
	}

	immediate = {
		set_country_flag = truly_dead_country
		destroy_country = yes
	}
}

country_event = { # Gov In Exile Enclave destroyed
	id = civnat.1360
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = enclave_exiled_gov
	}

	immediate = {
		save_event_target_as = destroyed_exile_gov
		FROMFROM = {
			solar_system = { save_event_target_as = exile_system }
		}
		FROM = {
			save_event_target_as = exile_destroyer
			country_event = { id = civnat.9300 }
		}
		every_playable_country = {
			limit = {
				has_communications = ROOT
				NOT = { is_same_empire = event_target:exile_destroyer }
			}
			country_event = { id = civnat.9300 }
		}
	}
	after = {
		set_country_flag = truly_dead_country
		destroy_country = yes
	}
}

country_event = { # Gov In Give Resources
	id = civnat.1370
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		add_resource = {
			energy = 50
			minerals = 30
			food = 30
			consumer_goods = 20
			alloys = 20
			influence = 2
			mult = trigger:num_pops
		}

		add_500_unity_per_year_passed = yes
	}
}

################
# Flag Events

country_event = { # Set Sector and System flags
	id = civnat.2000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type_with_subjects = yes
		years_passed >= 1
		OR = {
			any_owned_sector = { # New Sectors
				NOR = {
					has_sector_flag = frontier_sector_@root
					has_sector_flag = integrated_sector_@root
					has_sector_flag = fundamental_sector_@root
				}
			}
			any_owned_planet = { # New planets
				NOR = {
					has_planet_flag = frontier_planet_@root
					has_planet_flag = integrated_planet_@root
					has_planet_flag = fundamental_planet_@root
				}
			}
			any_owned_planet = { # Planets Changed Sectors, should be rare
				exists = sector
				OR = {
					AND = {
						has_planet_flag = frontier_planet_@root
						sector = { NOT = { has_sector_flag = frontier_sector_@root } }
					}
					AND = {
						has_planet_flag = integrated_planet_@root
						sector = { NOT = { has_sector_flag = integrated_sector_@root } }
					}
					AND = {
						has_planet_flag = fundamental_planet_@root
						sector = { NOT = { has_sector_flag = fundamental_sector_@root } }
					}
				}
			}	
		}
	}

	immediate = {

		if = { # Set initial sector flags
			limit = {
				any_owned_sector = {
					NOR = {
						has_sector_flag = frontier_sector_@root
						has_sector_flag = integrated_sector_@root
						has_sector_flag = fundamental_sector_@root
					}
				}
			}
			every_owned_sector = {
				limit = {
					NOR = {
						has_sector_flag = frontier_sector_@root
						has_sector_flag = integrated_sector_@root
						has_sector_flag = fundamental_sector_@root
					}
				}
				if = {
					limit = {
						sector_capital = {
							NOR = {
								has_planet_flag = frontier_planet_@root
								has_planet_flag = integrated_planet_@root
								has_planet_flag = fundamental_planet_@root
							}
						}
					}
					set_sector_flag = frontier_sector_@root
					every_owned_planet = { set_planet_flag = frontier_planet_@root }
				}
				else_if = {
					limit = { sector_capital = { has_planet_flag = frontier_planet_@root } }
					set_sector_flag = frontier_sector_@root
				}
				else_if = {
					limit = { sector_capital = { has_planet_flag = integrated_planet_@root } }
					set_sector_flag = integrated_sector_@root
				}
				else_if = {
					limit = { sector_capital = { has_planet_flag = fundamental_planet_@root } }
					set_sector_flag = fundamental_sector_@root
				}
			}
		}

		if = { # For new planets and planets without a sector
			limit = {
				any_owned_planet = {
					NOR = {
						has_planet_flag = frontier_planet_@root
						has_planet_flag = integrated_planet_@root
						has_planet_flag = fundamental_planet_@root
					}
				}
			}
			every_owned_planet = {
				limit = {
					NOR = {
						has_planet_flag = frontier_planet_@root
						has_planet_flag = integrated_planet_@root
						has_planet_flag = fundamental_planet_@root
					}
				}
				if = {
					limit = {
						OR = {
							NOT = { exists = sector }
							sector = { has_sector_flag = frontier_sector_@root }
						}
					}
					set_planet_flag = frontier_planet_@root
				}
				else_if = {
					limit = { sector = { has_sector_flag = integrated_sector_@root } }
					set_planet_flag = integrated_planet_@root
				}
				else_if = {
					limit = { sector = { has_sector_flag = fundamental_sector_@root } }
					set_planet_flag = fundamental_planet_@root
				}
			}
		}
	}

	after = {
		if = {  # Planets Changed Sectors changed sectors
			limit = {
				any_owned_planet = {
					exists = sector
					OR = {
						AND = {
							has_planet_flag = frontier_planet_@root
							OR = {
								sector = { has_sector_flag = integrated_sector_@root }
								sector = { has_sector_flag = fundamental_sector_@root }
							}
						}
						AND = {
							has_planet_flag = integrated_planet_@root
							sector = { has_sector_flag = fundamental_sector_@root }
						}
					}
				}
			}
			country_event = { id = civnat.2300 } # For planets changed sector, should be rare
		}
	}
}

country_event = { # Set Capital Sector as Fundamental on Game Start initializer
	id = civnat.2005
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_regular_empire = yes
		NOT = { has_country_flag = capital_fundamental_set }
	}

	immediate = {
		country_event = { id = civnat.2006 days = 270 } # Was getting issues with sectors existing yet
	}
}

country_event = { # Set Capital Sector as Fundamental after one year
	id = civnat.2006
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_regular_empire = yes
		NOT = { has_country_flag = capital_fundamental_set }
	}

	immediate = {

		capital_scope = {
			set_planet_flag = fundamental_planet_@root
			set_planet_flag = capital_planet_@root
			if = {
				limit = { exists = sector }
				sector = {
					set_sector_flag = fundamental_sector_@root
					if = {
						limit = { has_sector_flag = frontier_sector_@root }
						remove_sector_flag = frontier_sector_@root
					}
					every_owned_planet = {
						if = {
							limit = { has_planet_flag = frontier_planet_@root }
							remove_planet_flag = frontier_planet_@root
						}
						if = {
							limit = { has_planet_flag = integrated_planet_@root }
							remove_planet_flag = integrated_planet_@root
						}
						set_planet_flag = fundamental_planet_@root
					}
				}
			}
		}
		set_country_flag = capital_fundamental_set
	}
}

planet_event = { # Set Planet Flag on Colonized
	id = civnat.2010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_country_type_with_subjects = yes }
	}

	immediate = {
		if = {
			limit = { exists = sector }
			if = {
				limit = { sector = { has_sector_flag = frontier_sector_@root.owner } }
				set_planet_flag = frontier_planet_@root.owner
				if = { # Between 15 and 30 years to transform into a Integrated Sector
					limit = { sector = { NOT = { has_sector_flag = integrated_timer_set } } }
					sector = { set_sector_flag = integrated_timer_set }
					owner = { save_event_target_as = original_owner }
					planet_event = { id = civnat.2015 days = 5400 random = 10800 }
				}
			}
			else_if = {
				limit = { sector = { has_sector_flag = integrated_sector_@root.owner } }
				set_planet_flag = integrated_planet_@root.owner
				if = { # Between 30 and 70 years to transform into a Fundamental Sector
					limit = { sector = { NOT = { has_sector_flag = fundamental_timer_set } } }
					sector = { set_sector_flag = fundamental_timer_set }
					owner = { save_event_target_as = original_owner }
					planet_event = { id = civnat.2020 days = 10800 random = 25200 }
				}
			}
			else_if = {
				limit = { sector = { has_sector_flag = fundamental_sector_@root.owner } }
				set_planet_flag = fundamental_planet_@root.owner
			}
			else = {
				sector = { set_sector_flag = frontier_sector_@root.owner }
				set_planet_flag = frontier_planet_@root.owner
			}
		}
		else = {
			set_planet_flag = frontier_planet_@root.owner
		}
	}
}

planet_event = { # Frontier Planet + Sector -> Integrated Planet + Sector
	id = civnat.2015
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:original_owner
		is_owned_by = event_target:original_owner
	}

	immediate = {
		if = {
			limit = {
				exists = sector
				sector = { NOT = { has_sector_flag = integrated_sector_@root.owner } }
				sector = { NOT = { has_sector_flag = fundamental_sector_@root.owner } }
			}
			if = {
				limit = { sector = { has_sector_flag = frontier_sector_@root.owner } }
				sector = { remove_sector_flag = frontier_sector_@root.owner }
			}
			set_planet_flag = integrated_planet_@root.owner
			sector = {
				remove_sector_flag = integrated_timer_set
				set_sector_flag = integrated_sector_@root.owner
				every_owned_planet = {
					set_planet_flag = integrated_planet_@root.owner
					if = {
						limit = { has_planet_flag = frontier_planet_@root.owner }
						remove_planet_flag = frontier_planet_@root.owner
					}
					if = {
						limit = { has_planet_flag = fundamental_planet_@root.owner }
						remove_planet_flag = fundamental_planet_@root.owner
					}
				}
			}
			owner = { save_event_target_as = original_owner }
			
			if = { # Between 30 and 70 years to transform into a Fundamental Sector
				limit = { sector = { NOT = { has_sector_flag = fundamental_timer_set } } }
				sector = { set_sector_flag = fundamental_timer_set }
				planet_event = { id = civnat.2020 days = 10800 random = 25200 }
			}
		}
		else_if = { # Sector deleted, try again in 6 months
			limit = { NOT = { exists = sector } }
			owner = { save_event_target_as = original_owner }
			planet_event = { id = civnat.2015 days = 180 }
		}
	}
}

planet_event = { # Integrated Planet + Sector -> Fundamental Planet + Sector
	id = civnat.2020
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:original_owner
		is_owned_by = event_target:original_owner
	}

	immediate = {
		if = {
			limit = {
				exists = sector
				sector = { NOT = { has_sector_flag = frontier_sector_@root.owner } }
				sector = { NOT = { has_sector_flag = fundamental_sector_@root.owner } }
			}
			if = {
				limit = { sector = { has_sector_flag = integrated_sector_@root.owner } }
				sector = { remove_sector_flag = integrated_sector_@root.owner }
			}
			set_planet_flag = fundamental_planet_@root.owner
			sector = {
				remove_sector_flag = fundamental_timer_set
				set_sector_flag = fundamental_sector_@root.owner
				every_owned_planet = {
					set_planet_flag = fundamental_planet_@root.owner
					if = {
						limit = { has_planet_flag = frontier_planet_@root.owner }
						remove_planet_flag = frontier_planet_@root.owner
					}
					if = {
						limit = { has_planet_flag = integrated_planet_@root.owner }
						remove_planet_flag = integrated_planet_@root.owner
					}
				}
			}
		}
		else_if = { # Sector deleted, try again in 6 months
			limit = { NOT = { exists = sector } }
			owner = { save_event_target_as = original_owner }
			planet_event = { id = civnat.2020 days = 180 }
		}
	}
}

#FromFrom = Former Owner (if any)
#From = Country scope (new owner)
#This = Planet scope
planet_event = { # Get nat Flags when a planet changes owners
	id = civnat.2100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = { is_country_type_with_subjects = yes }
		NOR = {
			has_planet_flag = frontier_planet_@root.owner
			has_planet_flag = integrated_planet_@root.owner
			has_planet_flag = fundamental_planet_@root.owner
		}
	}

	immediate = {
		if = {
			limit = { exists = sector }
			if = {
				limit = { sector = { has_sector_flag = frontier_sector_@root.owner } }
				set_planet_flag = frontier_planet_@root.owner
			}
			else_if = {
				limit = { sector = { has_sector_flag = integrated_sector_@root.owner } }
				set_planet_flag = integrated_planet_@root.owner
			}
			else_if = {
				limit = { sector = { has_sector_flag = fundamental_sector_@root.owner } }
				set_planet_flag = fundamental_planet_@root.owner
			}
			else = {
				if = {
					limit = { sector = { any_owned_planet = { has_planet_flag = fundamental_sector_@root.owner } } }
					set_planet_flag = fundamental_planet_@root.owner
					sector = { set_sector_flag = fundamental_sector_@root.owner }
				}
				else_if = {
					limit = { sector = { any_owned_planet = { has_planet_flag = integrated_sector_@root.owner } } }
					set_planet_flag = integrated_planet_@root.owner
					sector = { set_sector_flag = integrated_sector_@root.owner }
					
				}
				else = {
					set_planet_flag = frontier_planet_@root.owner
					sector = { set_sector_flag = frontier_sector_@root.owner }
				}
			}

			if = {
				limit = { sector = { has_sector_flag = frontier_sector_@root.owner } }
				if = { # Between 15 and 30 years to transform into a Integrated Sector
					limit = { sector = { NOT = { has_sector_flag = integrated_timer_set } } }
					sector = { set_sector_flag = integrated_timer_set }
					owner = { save_event_target_as = original_owner }
					planet_event = { id = civnat.2015 days = 5400 random = 10800 }
				}
			}
			else_if = {
				limit = { sector = { has_sector_flag = integrated_sector_@root.owner } }
				if = { # Between 30 and 70 years to transform into a Fundamental Sector
					limit = { sector = { NOT = { has_sector_flag = fundamental_timer_set } } }
					sector = { set_sector_flag = fundamental_timer_set }
					owner = { save_event_target_as = original_owner }
					planet_event = { id = civnat.2020 days = 10800 random = 25200 }
				}
			}
		}
		else = {
			planet_event = { id = civnat.2100 days = 180 }
		}
	}
}

country_event = { # For planets that have changed sectors
	id = civnat.2300
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_planet = {
			exists = sector
			OR = {
				AND = {
					has_planet_flag = frontier_planet_@root
					OR = {
						sector = { has_sector_flag = integrated_sector_@root }
						sector = { has_sector_flag = fundamental_sector_@root }
					}
				}
				AND = {
					has_planet_flag = integrated_planet_@root
					sector = { has_sector_flag = fundamental_sector_@root }
				}
			}
		}
	}

	immediate = {

		if = {
			limit = {
				any_owned_planet = {
					exists = sector
					has_planet_flag = frontier_planet_@root
					OR = {
						sector = { has_sector_flag = integrated_sector_@root }
						sector = { has_sector_flag = fundamental_sector_@root }
					}
				}
			}
			every_owned_planet = {
				limit = {
					exists = sector
					has_planet_flag = frontier_planet_@root
					OR = {
						sector = { has_sector_flag = integrated_sector_@root }
						sector = { has_sector_flag = fundamental_sector_@root }
					}
				}
				remove_planet_flag = frontier_planet_@root
				if = {
					limit = { sector = { has_sector_flag = integrated_sector_@root } }
					set_planet_flag = integrated_planet_@root
				}
				else_if = {
					limit = { sector = { has_sector_flag = fundamental_sector_@root } }
					set_planet_flag = fundamental_planet_@root
				}
			}
		}
		else_if = {
			limit = {
				any_owned_planet = {
					exists = sector
					has_planet_flag = integrated_planet_@root
					sector = { has_sector_flag = fundamental_sector_@root }
				}
			}
			every_owned_planet = {
				limit = {
					exists = sector
					has_planet_flag = integrated_planet_@root
					sector = { has_sector_flag = fundamental_sector_@root }
				}
				remove_planet_flag = integrated_planet_@root
				set_planet_flag = fundamental_planet_@root
			}
		}
	}
}

planet_event = { # Get sector nat flag check every year
	id = civnat.2310
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = sector
		is_sector_capital = yes
		sector = {
			NOT = { has_sector_flag = frontier_sector_@root.owner }
			NOT = { has_sector_flag = integrated_sector_@root.owner }
			NOT = { has_sector_flag = fundamental_sector_@root.owner }
		}
	}

	immediate = {
		if = {
			limit = { sector = { any_owned_planet = { has_planet_flag = fundamental_planet_@root.owner } } }
			if = {
				limit = { NOT = { has_planet_flag = fundamental_planet_@root.owner } }
				set_planet_flag = fundamental_planet_@root.owner
			}
			sector = {
				set_sector_flag = fundamental_sector_@root.owner
				every_owned_planet = {
					set_planet_flag = fundamental_planet_@root.owner
					if = {
						limit = { has_planet_flag = frontier_planet_@root.owner }
						remove_planet_flag = frontier_planet_@root.owner
					}
					if = {
						limit = { has_planet_flag = integrated_planet_@root.owner }
						remove_planet_flag = integrated_planet_@root.owner
					}
				}
			}
		}
		else_if = {
			limit = { sector = { any_owned_planet = { has_planet_flag = integrated_planet_@root.owner } } }
			if = {
				limit = { NOT = { has_planet_flag = integrated_planet_@root.owner } }
				set_planet_flag = integrated_planet_@root.owner
			}
			sector = {
				set_sector_flag = integrated_sector_@root.owner
				every_owned_planet = {
					set_planet_flag = integrated_planet_@root.owner
					if = {
						limit = { has_planet_flag = frontier_planet_@root.owner }
						remove_planet_flag = frontier_planet_@root.owner
					}
				}
			}
			
			
		}
		else = {
			sector = { set_sector_flag = frontier_sector_@root.owner }
			if = {
				limit = { NOT = { has_planet_flag = frontier_planet_@root.owner } }
				set_planet_flag = frontier_planet_@root.owner
			}
		}
	}
}

country_event = { # Set and Remove Citizenship flags for species
	id = civnat.2500
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = civstrife_nat_timer }
		
		any_owned_pop = {
			NOT = { has_modifier = pop_recently_conquered }
			planet = { NOT = { has_modifier = planet_culture_shock } }
			OR = {
				AND = {
					has_citizenship_type = { type = citizenship_full country = root }
					NOT = { has_pop_flag = citizen_of_@root }
				}
				AND = {
					NOT = { has_citizenship_type = { type = citizenship_full country = root } }
					has_pop_flag = citizen_of_@root
				}
				AND = {
					has_citizenship_type = { type = citizenship_limited country = root }
					NOT = { has_pop_flag = resident_of_@root }
				}
				AND = {
					NOT = { has_citizenship_type = { type = citizenship_limited country = root } }
					has_pop_flag = resident_of_@root
				}
				AND = {
					has_citizenship_type = { type = citizenship_slavery country = root }
					NOT = { has_pop_flag = slave_of_@root }
				}
				AND = {
					NOT = { has_citizenship_type = { type = citizenship_slavery country = root } }
					has_pop_flag = slave_of_@root
				}
				AND = {
					has_citizenship_type = { type = citizenship_organic_trophy country = root }
					NOT = { has_pop_flag = bio_trophy_of_@root }
				}
				AND = {
					NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = root } }
					has_pop_flag = bio_trophy_of_@root
				}
				AND = {
					has_citizenship_type = { type = citizenship_purge country = root }
					NOT = { has_pop_flag = purgee_of_@root }
				}
				AND = {
					NOT = { has_citizenship_type = { type = citizenship_purge country = root } }
					has_pop_flag = purgee_of_@root
				}
			}
		}
	}

	immediate = {

		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_full }
					NOT = { has_pop_flag = citizen_of_@root }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					NOT = { has_pop_flag = citizen_of_@root }
					has_citizenship_type = { type = citizenship_full }
				}
				set_pop_flag = citizen_of_@root
			}
		}
		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_citizenship_type = { type = citizenship_full } }
					has_pop_flag = citizen_of_@root
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_citizenship_type = { type = citizenship_full } }
					has_pop_flag = citizen_of_@root
				}
				remove_pop_flag = citizen_of_@root
			}
		}

		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_limited }
					NOT = { has_pop_flag = resident_of_@root }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_limited }
					NOT = { has_pop_flag = resident_of_@root }
				}
				set_pop_flag = resident_of_@root
			}
		}
		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_citizenship_type = { type = citizenship_limited } }
					has_pop_flag = resident_of_@root
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_citizenship_type = { type = citizenship_limited } }
					has_pop_flag = resident_of_@root
				}
				remove_pop_flag = resident_of_@root
			}
		}

		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_slavery }
					NOT = { has_pop_flag = slave_of_@root }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_slavery }
					NOT = { has_pop_flag = slave_of_@root }
				}
				set_pop_flag = slave_of_@root
			}
		}
		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_citizenship_type = { type = citizenship_slavery } }
					has_pop_flag = slave_of_@root
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_citizenship_type = { type = citizenship_slavery } }
					has_pop_flag = slave_of_@root
				}
				remove_pop_flag = slave_of_@root
			}
		}

		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_organic_trophy }
					NOT = { has_pop_flag = bio_trophy_of_@root }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_organic_trophy }
					NOT = { has_pop_flag = bio_trophy_of_@root }
				}
				set_pop_flag = bio_trophy_of_@root
			}
		}
		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
					has_pop_flag = bio_trophy_of_@root
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
					has_pop_flag = bio_trophy_of_@root
				}
				remove_pop_flag = bio_trophy_of_@root
			}
		}

		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_purge }
					NOT = { has_pop_flag = purgee_of_@root }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_modifier = pop_recently_conquered }
					planet = { NOT = { has_modifier = planet_culture_shock } }
					has_citizenship_type = { type = citizenship_purge }
					NOT = { has_pop_flag = purgee_of_@root }
				}
				set_pop_flag = purgee_of_@root
			}
		}
		if = {
			limit = {
				any_owned_pop = {
					NOT = { has_citizenship_type = { type = citizenship_purge } }
					has_pop_flag = purgee_of_@root
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { has_citizenship_type = { type = citizenship_purge } }
					has_pop_flag = purgee_of_@root
				}
				remove_pop_flag = purgee_of_@root
			}
		}
		
	}
}

planet_event = { # Set Planet Sectoral Modifiers
	id = civnat.2600
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = { is_gestalt = no }
		owner = { is_country_type_with_subjects = yes }
		OR = {
			AND = {
				OR = {
					has_planet_flag = frontier_planet_@root.owner
					has_planet_flag = integrated_planet_@root.owner
					has_planet_flag = fundamental_planet_@root.owner
				}
				NOR = {
					has_modifier = planet_frontier_sector
					has_modifier = planet_integrated_sector
					has_modifier = planet_fundamental_sector
				}
			}
			AND = {
				has_planet_flag = frontier_planet_@root.owner
				NOT = { has_modifier = planet_frontier_sector }
			}
			AND = {
				has_planet_flag = integrated_planet_@root.owner
				NOT = { has_modifier = planet_integrated_sector }
			}
			AND = {
				has_planet_flag = fundamental_planet_@root.owner
				NOT = { has_modifier = planet_fundamental_sector }
			}
		}
		
	}

	immediate = {
		if = {
			limit = { has_planet_flag = frontier_planet_@root.owner }
			add_modifier = { modifier = planet_frontier_sector days = -1 }
			if = {
				limit = { has_modifier = planet_integrated_sector }
				remove_modifier = planet_integrated_sector
			}
			if = {
				limit = { has_modifier = planet_fundamental_sector }
				remove_modifier = planet_fundamental_sector
			}
		}
		else_if = {
			limit = { has_planet_flag = integrated_planet_@root.owner }
			add_modifier = { modifier = planet_integrated_sector days = -1 }
			if = {
				limit = { has_modifier = planet_frontier_sector }
				remove_modifier = planet_frontier_sector
			}
			if = {
				limit = { has_modifier = planet_fundamental_sector }
				remove_modifier = planet_fundamental_sector
			}
		}
		else_if = {
			limit = { has_planet_flag = fundamental_planet_@root.owner }
			add_modifier = { modifier = planet_fundamental_sector days = -1 }
			if = {
				limit = { has_modifier = planet_frontier_sector }
				remove_modifier = planet_frontier_sector
			}
			if = {
				limit = { has_modifier = planet_integrated_sector }
				remove_modifier = planet_integrated_sector
			}
		}
	}
}

planet_event = { # Remove Planet Sectoral Modifiers from Gestalt
	id = civnat.2605
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		OR = {
			has_modifier = planet_frontier_sector
			has_modifier = planet_integrated_sector
			has_modifier = planet_fundamental_sector
		}
	}

	immediate = {
		if = {
			limit = { has_modifier = planet_frontier_sector }
			remove_modifier = planet_frontier_sector
		}
		else_if = {
			limit = { has_modifier = planet_integrated_sector }
			remove_modifier = planet_integrated_sector
		}
		else_if = {
			limit = { has_modifier = planet_fundamental_sector }
			remove_modifier = planet_fundamental_sector
		}
	}
}

country_event = { # Set Initial Nat Timer on country create
	id = civnat.2700
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_country_type = rebel
			is_country_type_with_subjects = yes
		}
	}

	immediate = {
		set_timed_country_flag = { flag = civstrife_nat_timer years = 60 }
	}
}

#########

country_event = { # Spread Nationalism Initial Trigger
	id = civnat.3000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			NOT = { is_same_value = root }
			is_country_type_with_subjects = yes
			any_owned_planet = {
				num_pops >= 3
				any_owned_pop = {
					has_pop_flag = sep_pop_nat_@root
					happiness < 75
					planet = {
						any_owned_pop = {
							NOT = { has_pop_flag = sep_pop_nat_@root }
							pop_was_saved = no
							happiness <= 60
							OR = {
								is_same_species = prevprev.species 	# Nats can be made from species who were citizens, not just former citizens
								is_same_species = root.species
								has_pop_flag = citizen_of_@root
								has_pop_flag = resident_of_@root
							}
						}
					}
				}
			}
		}
	}
	

	immediate = {
		save_event_target_as = nat_motherland

		every_country = {
			limit = {
				NOT = { is_same_value = root }
				is_country_type_with_subjects = yes
				any_owned_planet = {
					num_pops >= 3
					any_owned_pop = {
						has_pop_flag = sep_pop_nat_@event_target:nat_motherland
						happiness < 75
						planet = {
							any_owned_pop = {
								happiness <= 60
								pop_was_saved = no
								NOT = { has_pop_flag = sep_pop_nat_@event_target:nat_motherland }
								OR = {
									is_same_species = prevprev.species
									is_same_species = event_target:nat_motherland.species
									has_pop_flag = citizen_of_@event_target:nat_motherland
									has_pop_flag = resident_of_@event_target:nat_motherland
								}
							}
						}
					}
				}
			}

			every_owned_planet = {
				limit = {
					num_pops >= 3
					any_owned_pop = {
						has_pop_flag = sep_pop_nat_@event_target:nat_motherland
						happiness < 75
						planet = {
							any_owned_pop = {
								happiness <= 60
								pop_was_saved = no
								NOT = { has_pop_flag = sep_pop_nat_@event_target:nat_motherland }
								OR = {
									is_same_species = prevprev.species
									is_same_species = event_target:nat_motherland.species
									has_pop_flag = citizen_of_@event_target:nat_motherland
									has_pop_flag = resident_of_@event_target:nat_motherland
								}
							}
						}
					}
				}

				planet_event = { id = civnat.3010 days = 1 random = 359 }
			}

		}
	}
}

planet_event = { # Spread Nationalism Event
	id = civnat.3010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			has_pop_flag = sep_pop_nat_@event_target:nat_motherland
			happiness < 65
			planet = {
				any_owned_pop = {
					happiness <= 60
					pop_was_saved = no
					NOT = { has_pop_flag = sep_pop_nat_@event_target:nat_motherland }
					OR = {
						is_same_species = prevprev.species
						is_same_species = event_target:nat_motherland.species
						has_pop_flag = citizen_of_@event_target:nat_motherland
						has_pop_flag = resident_of_@event_target:nat_motherland
					}
				}
			}
		}
	}
	

	immediate = {

		set_variable = { which = nat_pop_converts value = 0 }

		every_owned_pop = {
			limit = {
				has_pop_flag = sep_pop_nat_@event_target:nat_motherland
				happiness < 65
			}
			if = {
				limit = { happiness <= 20 }
				random_list = {
					20 = { }
					80 = { prev = { change_variable = { which = nat_pop_converts value = 1 } } }
				}
			}
			else_if = {
				limit = {
					happiness > 20
					happiness <= 40
				}
				random_list = {
					40 = { }
					60 = { prev = { change_variable = { which = nat_pop_converts value = 1 } } }
				}
			}
			else_if = {
				limit = {
					happiness > 40
					happiness < 65
				}
				random_list = {
					60 = { }
					40 = { prev = { change_variable = { which = nat_pop_converts value = 1 } } }
				}
			}
		}

		while = {
			count = nat_pop_converts
			random_owned_pop = {
				limit = {
					has_pop_flag = sep_pop_nat_@event_target:nat_motherland
					happiness < 75
				}
				planet = {
					ordered_owned_pop = {
						limit = {
							happiness <= 60
							pop_was_saved = no
							NOT = { has_pop_flag = sep_pop_nat_@event_target:nat_motherland }
							OR = {
								is_same_species = prevprev.species
								is_same_species = event_target:nat_motherland.species
								has_pop_flag = citizen_of_@event_target:nat_motherland
								has_pop_flag = resident_of_@event_target:nat_motherland
							}
						}
						position = 0
						order_by = trigger:happiness
						inverse = yes
						set_pop_flag = sep_pop
						set_pop_flag = sep_pop_nat
						set_pop_flag = sep_pop_nat_@event_target:nat_motherland
					}
				}
			}
		}

		clear_variable = nat_pop_converts
	}
}

country_event = { # Remove Nationalism Initial Trigger
	id = civnat.3020
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_pop = { has_pop_flag = sep_pop_nat }
	}
	

	immediate = {

		every_owned_pop = {
			limit = {
				has_pop_flag = sep_pop_nat
				happiness >= 60
				is_enslaved = no
				is_being_purged = no
			}
			random = {
				chance = 80
				pop_event = { id = civnat.3030 days = 1 random = 359 }
			}
		}

		every_owned_pop = {
			limit = { has_pop_flag = sep_pop_nat }
			random = {
				chance = 2
				pop_event = { id = civnat.3030 days = 1 random = 359 }
			}
		}
	}
}

pop_event = { # Remove Nationalism Event
	id = civnat.3030
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_pop_flag = sep_pop_nat
	}
	

	immediate = {
		remove_pop_flag = sep_pop_nat
	}
}

country_event = { # Destroy Government-In-Exile when no nats exist
	id = civnat.3100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_exile_country = yes
		NOT = {
			any_country = {
				is_country_type_with_subjects = yes
				any_owned_pop = {
					can_think = yes
					has_pop_flag = sep_pop_nat_@root
				}
			}
		}
	}
	

	immediate = {
		save_event_target_as = nat_gone

		if = {
			limit = { is_country_type = enclave_exiled_gov }
			random_owned_fleet = { delete_fleet = this }
		}

		every_playable_country = {
			limit = { has_communications = root }
			country_event = { id = civnat.8000 days = 2 random = 14 }
		}
		random_playable_country = {
			observer_event = { id = civnat.8001 days = 2 random = 14 }
		}

		country_event = { id = civnat.3110 days = 90 }		
	}
}

country_event = { # Destroy Government-In-Exile Actual
	id = civnat.3110
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_exile_country = yes
		NOT = {
			any_country = {
				is_country_type_with_subjects = yes
				any_owned_pop = {
					can_think = yes
					has_pop_flag = sep_pop_nat_@root
				}
			}
		}
	}
	

	immediate = {
		set_country_flag = truly_dead_country
		destroy_country = yes
	}
}

###################
# Situation Events

country_event = { # Check disapproving Factions every month Initializer
	id = civnat.4000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		years_passed >= 5
		any_country = {
			is_country_type_with_subjects = yes
			is_gestalt = no
			any_pop_faction = {
				has_pop_faction_flag = nat_faction_@root
				faction_approval < 0.20
				NOT = { has_pop_faction_flag = faction_sep_situation }
				count_owned_pop = { count >= 5 }
			}
		}
	}

	immediate = {
		every_country = {
			limit = {
				is_country_type_with_subjects = yes
				is_gestalt = no
				any_pop_faction = {
					has_pop_faction_flag = nat_faction_@root
					faction_approval < 0.20
					NOT = { has_pop_faction_flag = faction_sep_situation }
					count_owned_pop = { count >= 5 }
				}
			}
			country_event = { id = civnat.4010 days = 1 random = 359 }
		}
	}
}

country_event = { # Check disapproving Factions every month Event
	id = civnat.4010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type_with_subjects = yes
		is_gestalt = no
		any_pop_faction = {
			has_pop_faction_flag = nat_faction_@from
			faction_approval < 0.20
			NOT = { has_pop_faction_flag = faction_sep_situation }
			count_owned_pop = { count >= 5 }
		}
	}

	immediate = {
		from = { save_global_event_target_as = faction_nat_motherland }
		random_pop_faction = {
			limit = {
				has_pop_faction_flag = nat_faction_@from
				faction_approval < 0.20
				NOT = { has_pop_faction_flag = faction_sep_situation }
				count_owned_pop = { count >= 5 }
			}
			set_pop_faction_flag = faction_sep_situation
			owner = {
				start_situation = {
					type = situation_civstrife_faction_sep_nat
					target = prev
				}
			}
		}
	}
}

#########

country_event = { # Give Claims to Fundamental land
	id = civnat.5000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			NOT = { is_same_value = root }
			any_owned_planet = { has_planet_flag = fundamental_planet_@root }
		}
	}
	

	immediate = {
		save_event_target_as = nat_motherland

		every_country = {
			limit = {
				NOT = { is_same_value = root }
				any_owned_planet = {
					has_planet_flag = fundamental_planet_@root
					solar_system = {
						root = { NOT = { has_claim = prev } }
					}
				}
			}

			every_owned_planet = {
				limit = {
					has_planet_flag = fundamental_planet_@root
					solar_system = {
						root = { NOT = { has_claim = prev } }
					}
				}
				solar_system = {
					add_claims = {
						who = root
						num_of_claims = 10
						show_notification = yes
					}
				}
   			}
		}
	}
}

#########


############
# Messages #
############

country_event = { # End of Government-In-Exile
	id = civnat.8000
	title = civnat.8000.name
	desc = civnat.8000.desc
	picture = "GFX_evt_city_ruins"
	hide_window = no

	is_triggered_only = yes

	option = {
		name = INTERESTING
	}
}

# Country Destroyed (Default)
observer_event = {
	id = civnat.8001
	title = civnat.8000.name
	desc = civnat.8000.desc
	show_sound = event_default
	picture = "GFX_evt_city_ruins"

	is_triggered_only = yes

	option = {
		name = INTERESTING
	}
}

#########

pop_faction_event = { # Nationalist Faction Formed Notif
	id = civnat.9000
	title = civnat.9000.name
	desc = civnat.9000.desc
	picture = GFX_evt_one_sided_deal
	hide_window = no
	is_triggered_only = yes

	option = {
		name = civnat.9000.a
	}
}

situation_event = { # Nationalists Strike
	id = civnat.9010
	picture = GFX_evt_open_revolt
	title = civnat.9010.name
	desc = civnat.9010.desc
	hide_window = no
	is_triggered_only = yes

	option = {
		name = civcom.this_is_bad
		ai_chance = { factor = 1 }
	}
}

country_event = { # Set new Separatist/Nationalist Faction Leader
	id = civnat.9100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_pop_faction = {
			NOR = {
				exists = leader
				is_regular_faction = yes
			}
		}
	}

	immediate = {

		set_variable = { which = num_sep_faction_leaders value = 0 }

		random_pop_faction = {
			limit = {
				NOR = {
					exists = leader
					is_regular_faction = yes
				}
			}
			random_owned_pop = {
				species = { save_event_target_as = nat_pop_species }
			}
			owner = {
				create_leader = {
					class = ruler
					species = event_target:nat_pop_species
					name = random
					leader_age_min = 25
					leader_age_max = 55
					traits = { trait = leader_trait_charismatic }
					effect = {
						set_leader_flag = sep_leader
					}
				}
			}
			set_leader = last_created_leader
		}
	}
}

country_event = { # Exiled country has been restored, had host, general message
	id = civnat.9200
	title = civnat.9200.name
	picture = GFX_evt_news_room
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civnat.9200.original_name.desc
		trigger = {
			event_target:new_homeland = { NOT = { has_country_flag = nat_country_new_name } }
		}
	}

	desc = {
		text = civnat.9200.new_name.desc
		trigger = {
			event_target:new_homeland = { has_country_flag = nat_country_new_name }
		}
	}

	option = {
		name = INTERESTING
	}
}

country_event = { # Exiled country has been restored, host granted land, general message
	id = civnat.9205
	title = civnat.9205.name
	picture = GFX_evt_news_room
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civnat.9205.original_name.original_host.desc
		trigger = {
			event_target:new_homeland = {
				has_country_flag = was_true_host
				NOT = { has_country_flag = nat_country_new_name }
			}
		}
	}

	desc = {
		text = civnat.9205.original_name.new_host.desc
		trigger = {
			event_target:new_homeland = {
				NOT = { has_country_flag = was_true_host }
				NOT = { has_country_flag = nat_country_new_name }
			}
		}
	}

	desc = {
		text = civnat.9205.new_name.original_host.desc
		trigger = {
			event_target:new_homeland = {
				has_country_flag = was_true_host
				has_country_flag = nat_country_new_name
			}
		}
	}

	desc = {
		text = civnat.9205.new_name.new_host.desc
		trigger = {
			event_target:new_homeland = {
				NOT = { has_country_flag = was_true_host }
				has_country_flag = nat_country_new_name
			}
		}
	}

	option = {
		name = INTERESTING
		ai_chance = { factor = 1 }
	}
}

country_event = { # Exiled country has been restored, had host, host country message
	id = civnat.9210
	title = civnat.9200.name
	picture = GFX_evt_two_sided_deal
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civnat.9210.original_name.desc
		trigger = {
			event_target:new_homeland = { NOT = { has_country_flag = nat_country_new_name } }
		}
	}

	desc = {
		text = civnat.9210.new_name.desc
		trigger = {
			event_target:new_homeland = { has_country_flag = nat_country_new_name }
		}
	}

	option = {
		name = EXCELLENT
	}
}

country_event = { # Exiled country has been restored, did not have host
	id = civnat.9230
	title = civnat.9200.name
	picture = GFX_evt_news_room
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civnat.9230.original_name.desc
		trigger = {
			event_target:new_homeland = { NOT = { has_country_flag = nat_country_new_name } }
		}
	}

	desc = {
		text = civnat.9230.new_name.desc
		trigger = {
			event_target:new_homeland = { has_country_flag = nat_country_new_name }
		}
	}

	option = {
		name = INTERESTING
	}
}

country_event = { # Exiled country has been restored, did not have host
	id = civnat.9300
	title = civnat.9300.name
	picture = GFX_evt_news_room
	hide_window = no
	is_triggered_only = yes

	desc = {
		text = civnat.9300.desc
		trigger = { NOT = { is_same_value = event_target:exile_destroyer } }
	}

	desc = {
		text = civnat.9300.other.desc
		trigger = { is_same_value = event_target:exile_destroyer }
	}

	option = {
		name = INTERESTING
	}
}