#An event  which tries to make AI doomstack their fleets

namespace = str_doomstack

country_event = {
	id=str_doomstack.1
	hide_window = yes
	fire_only_once = no
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
                is_ai = yes
                or = {
                is_country_type = default
                is_country_type = awakened_fallen_empire
                }
				is_at_war = no
			}
    
    random_owned_fleet = {
        limit = {
            is_ship_class = shipclass_transport
            is_fleet_idle = yes
        }
        set_timed_fleet_flag = {
            flag = rallypoint_armies
            days = 3
        }
        closest_system = {
            limit = {
                starbase = {
                    has_starbase_module = shipyard
                }
            }
            set_timed_star_flag = {
                flag = rallypoint_army
                days = 3
            }
        }
    }

    random_owned_fleet = {
        limit = {
            fleet_power > 500
            is_ship_class = shipclass_military
        }
        weights = {
            base = 1
            modifier = {
                add = 10
                fleet_power > 2000
            }
            modifier = {
                add = 1000
                fleet_power > 10000
            }
        }



        if = {
            limit = {
                has_fleet_order = follow_order
            }
        clear_orders = yes
        }
        set_timed_fleet_flag = {
            flag = rallypoint_f
            days = 3
        }
        closest_system = {
            limit = {
                starbase = {
                    has_starbase_module = shipyard
                }
            }
            set_timed_star_flag = {
                flag = rallypoint
                days = 3
            }
        }
    }


    random_owned_fleet = {
        limit = {
            fleet_power > 5000
            is_ship_class = shipclass_military
        }
        weights = {
            base = 1
            modifier = {
                add = 10
                fleet_power > 10000
            }
            modifier = {
                add = 1000
                fleet_power > 40000
            }
            
        }
        if = {
            limit = {
                has_fleet_order = follow_order
            }
        clear_orders = yes
        }
        set_timed_fleet_flag = {
            flag = rallypoint_f
            days = 3
        }
        closest_system = {
            limit = {
                starbase = {
                    has_starbase_module = shipyard
                }
            }
            set_timed_star_flag = {
                flag = rallypoint
                days = 3
            }
        }
    }


    random_owned_fleet = {
        limit = {
            fleet_power > 40000
            is_ship_class = shipclass_military
        }
        weights = {
            base = 1
            modifier = {
                add = 10
                fleet_power > 100000
            }
            modifier = {
                add = 1000
                fleet_power > 300000
            }
            
        }
        if = {
            limit = {
                has_fleet_order = follow_order
            }
        clear_orders = yes
        }
        set_timed_fleet_flag = {
            flag = rallypoint_f
            days = 3
        }
        closest_system = {
            limit = {
                starbase = {
                    has_starbase_module = shipyard
                }
            }
            set_timed_star_flag = {
                flag = rallypoint
                days = 3
            }
        }
    }

	every_owned_fleet = {
		limit = {
            is_ship_class = shipclass_transport
            is_fleet_idle = yes
            not = {
                has_fleet_flag = rallypoint_armies
            }
        }
        clear_orders = yes
		queue_actions = {

            find_closest_system = {
                trigger = {
                    id = str_doomstack.rallypoint.armies
                    has_star_flag = rallypoint_army
                    is_owned_by = root
                }
                found_system = { 
                    move_to = this
                }
                
            }
        }
	}

	every_owned_fleet = {
		limit = {
            is_ship_class = shipclass_military
            fleet_power > 50
            not = {
                has_fleet_flag = rallypoint_f
            }
        }
        clear_orders = yes
		queue_actions = {

            find_closest_system = {
                trigger = {
                    id = str_doomstack.rallypoint
                    has_star_flag = rallypoint
                    is_owned_by = root
                }
                found_system = { 
                    move_to = this
                }
                
            }
        }
	}

    }

    
    else_if ={
        limit = {
            is_ai = yes
            is_country_type = default
            is_at_war = yes
        }

    
        random_owned_fleet = {
            limit = {
                fleet_power > 1000
                is_ship_class = shipclass_military
            }
            weights = {
                base = 1
                modifier = {
                    add = 10
                    fleet_power > 2000
                }
                modifier = {
                    add = 1000
                    fleet_power > 10000
                }
                
            }
            set_timed_fleet_flag = {
                flag = flagman
                days = 2
            }
            if = {
            limit = {
                has_fleet_order = follow_order
            }
            clear_orders = yes
            }
            owner = {
                every_owned_fleet = {
                    limit = {
                        not = {
                            has_fleet_flag = flagman
                        }
                        is_ship_class = shipclass_military
                        fleet_power > 1
                        is_fleet_idle = yes
                    }
                auto_follow_fleet = {
                    target = prevprev
                    attack_fleet = no
                    
                }
                
            }
        }
    
    }

}
    }
}



