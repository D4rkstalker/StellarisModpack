#######################################
#events related to the starting civics#
#######################################
namespace = dyson_starting

#For "lost home"

# this: capital planet
# from: founder species
planet_event = {
	id = dyson_starting.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_civic = civic_the_void
		}
	}
	
	immediate = {
		set_planet_flag = dyson_doomed_planet
		set_planet_flag = eco_no_pollution
		prevent_anomaly = yes
		while = {
			count = 22
			random_pop = { kill_pop = yes }
		}
		change_pc = pc_nuked
		remove_all_buildings = yes
		add_building = building_underground_bunker
		remove_district = district_city
		remove_district = district_city
		remove_district = district_city
		remove_district = district_mining
		remove_district = district_farming
		remove_district = district_farming
		remove_district = district_generator
		remove_district = district_generator
		if = {
			limit = {
				owner = {
					has_authority = auth_nomad
				}
			}
			remove_district = district_mining
			add_building = building_galaxy_jam
		}
	#add the modifier that shows how much time is left
		add_modifier = {
			modifier = "dyson_doomed_planet"
			days = 3600
		}
	#mod comp.
		planet_event = { id = dyson_starting.9 days = 1 }
	}
}

#set up dyson swarm
#triggered through on action:empire_init_create_ships
country_event = {
	id = dyson_starting.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_civic = civic_the_void
		}
	}
	
	immediate = {
		system_star = {
			save_event_target_as = dyson_swarm_civic_spawnpoint
		}
		random_system = {
			limit = {
				starting_system = yes
			}
			spawn_planet = {
				class = "pc_dyson_swarm"
				location = event_target:dyson_swarm_civic_spawnpoint
				orbit_location = yes
				orbit_angle_offset = 45
				orbit_distance_offset = 9.899
				size = 10
				has_ring = no
				init_effect = {
					clear_blockers = yes
					set_name = "NAME_refuge"
					save_event_target_as = dyson_civic_starting_planet
					set_planet_flag = dyson_civic_starting_planet
					set_planet_flag = eco_no_pollution
					set_planet_entity = {
						entity = "orbital_habitat_entity"
						graphical_culture = fromfrom
					}
					surveyed = {
						set_surveyed = yes
						surveyor = FROM
					}
					set_all_comms_surveyed = yes
					clear_blockers = yes
					clear_deposits = yes
					set_planet_flag = megastructure
					set_planet_flag = habitat
					set_planet_flag = colony_event
					prevent_anomaly = yes
					set_planet_flag = is_dyson_swarm
				#add deposits
					add_deposit = d_dyson_swarm_planetary_access
					add_deposit = d_dyson_food_reserves
				#add pops and ownership
					planet_event = { id = dyson_starting.3 }
				#spawning buildings and districts
					add_district = dyson_swarm_solar_stations
					add_district = dyson_swarm_solar_stations
					add_district = dyson_swarm_mining_bays
					add_district = dyson_swarm_mining_bays
					add_district = dyson_swarm_zero_g_labs
					add_building = building_capital
					add_building = building_dyson_zero_g_foundry_0
					add_building = building_dyson_zero_g_factory_0
					add_building = building_housing_stations_1
				#adjust buildings if nomad authority is active
					if = {
						limit = {
							owner = {
								has_authority = auth_nomad
							}
						}
						remove_building = building_housing_stations_1
						add_building = building_dyson_swarm_nomad_horde_offset
					}
				#add modifier for food reserves for four years
					add_modifier = {
						modifier = "dyson_swarm_food_reserves"
						days = 3960
					}
				#add tier modifier
					add_modifier = {
						modifier = "dyson_swarm_tier_one"
						days = -1
					}
				#ambient objects
					while = {
						count = 2
						create_ambient_object = {
							type = "dyson_station_01"
							entity_offset_height = { min = -0 max = -25 }
							location = this
						}
						last_created_ambient_object = {
							set_location = {
								target = event_target:dyson_swarm_civic_spawnpoint
								distance = 40
								angle = random
							}
						}
					}
					while = {
						count = 2
						create_ambient_object = {
							type = "dyson_station_01"
							entity_offset_height = { min = -0 max = -25 }
							location = this
						}
						last_created_ambient_object = {
							set_location = {
								target = event_target:dyson_swarm_civic_spawnpoint
								distance = 30
								angle = random
							}
						}
					}
					create_ambient_object = {
						type = "dyson_station_02"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 38
							angle = random
						}
					}
					create_ambient_object = {
						type = "dyson_station_04"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 36
							angle = random
						}
					}
					create_ambient_object = {
						type = "dyson_station_05"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 42
							angle = random
						}
					}
				} 
			}
		}
	}
}

#add pops, zero G traits and ownership of dyson swarm
planet_event = {
	id = dyson_starting.3
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_owner = FROM
		set_controller = FROM
	#set it as the capital immediatly to avoid the vanilla bug that breaks special projects
		set_capital = yes
		while = {
			count = 15
			create_pop = {
				species = last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
			}
		}
		every_owned_pop = {
			modify_species = {
				species = last_created_species
				add_trait = trait_low_gravity_adaptation
				add_traits_at_start_of_list = yes
				hidden_effect = {
					set_citizenship_type = {
						country = root.owner
						type = citizenship_full
						cooldown = no
					}
				}
			}
		}
	}
}

#introductory event, also sets up the events for homeplanet destruction and the food reserves running out.
country_event = {
	id = dyson_starting.4
	title = dyson_starting.4.title
	desc = dyson_starting.4.desc
	picture = GFX_evt_nuclear_explosion
	
	trigger = {
		owner = {
			has_civic = civic_the_void
		}
	}
	
	is_triggered_only = yes
	
	immediate = {
		give_technology = { tech = "tech_dyson_swarm" message = no }
		give_technology = { tech = "tech_hydroponics" message = no }
	}
	
	option = {
		name = dyson_starting.4.a
		hidden_effect = {
			#food
			country_event = { id = dyson_starting.5 days = 3960 }
			#homeplanet
			country_event = { id = dyson_starting.6 days = 3600 }
		}
	}
}

#food reserves run out
country_event = {
	id = dyson_starting.5
	title = dyson_starting.5.title
	desc = dyson_starting.5.desc
	
	is_triggered_only = yes
	
	immediate = {
		random_planet = {
			limit = {
				has_planet_flag = dyson_civic_starting_planet
				is_inside_border = ROOT
			}
			remove_deposit = d_dyson_food_reserves
		}
	}
	
	option = {
		name = dyson_starting.5.a
	}
}

#planet ecosystem collapses, turning it into a frozen planet with a terraforming candidate modifier
#depending on if pops were killed in the process, player will recieve a happiness debuff or unity and stability reward
#the AI will roll a random outcome and get some bonus resources to compensate
country_event = {
	id = dyson_starting.6
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				is_ai = yes
			}
			random_list = {
				70 = {
					ROOT = {
						country_event = { id = dyson_starting.8 }
					}
					capital_scope = {
						while = {
							count = 6
							create_pop = {
								species = owner_species
								ethos = random
							}
							last_created_pop = {
								clear_ethos = yes
							}
						}
					}
				}
				70 = {
					ROOT = {
						country_event = { id = dyson_starting.7 }
					}
					capital_scope = {
						while = {
							count = 3
							create_pop = {
								species = owner_species
								ethos = random
							}
							last_created_pop = {
								clear_ethos = yes
							}
						}
					}
				}
			}
			add_resource = { minerals = 3000 }
			add_resource = { food = 2000 }
		}
		if = {
			limit = {
				is_ai = no
				any_planet_within_border = {
					AND = {
						has_planet_flag = dyson_doomed_planet
						OR = {
							num_pops > 0
							has_deposit = d_survivor_camp_1
							has_deposit = d_survivor_camp_2
						}
					}
				}
			}
			ROOT = {
				country_event = { id = dyson_starting.7 }
			}
		}
		if = {
			limit = {
				is_ai = no
				any_planet_within_border = {
					AND = {
						has_planet_flag = dyson_doomed_planet
						NOR = {
							num_pops > 0
							has_deposit = d_survivor_camp_1
							has_deposit = d_survivor_camp_2
						}
					}
				}
			}
			ROOT = {
				country_event = { id = dyson_starting.8 }
			}
		}
		random_planet = {
			limit = {
				is_inside_border = ROOT
				has_planet_flag = dyson_doomed_planet
			}
			change_pc = pc_frozen
			add_modifier = {
				modifier = terraforming_candidate
				days = -1
			}
		}
	}
}

#people were still on the planet when it collapsed and the evacuation failed
country_event = {
	id = dyson_starting.7
	title = dyson_starting.7.title
	desc = dyson_starting.7.desc
	
	is_triggered_only = yes
	
	option = {
		name = dyson_starting.7.a
		every_planet = {
			limit = {
				AND = {
					is_inside_border = ROOT
					has_planet_flag = dyson_civic_starting_planet
				}
			}
			add_modifier = {
				modifier = dyson_evacuation_failed
				days = 1080
			}
		}
	}
}

#planet successfully evacuated
country_event = {
	id = dyson_starting.8
	title = dyson_starting.8.title
	desc = dyson_starting.8.desc
	
	is_triggered_only = yes
	
	option = {
		name = dyson_starting.8.a
		add_monthly_resource_mult = {
			resource = unity
			value = 15
			min = 1200
			max = 9999
		}
	}
}
#mod comp: place blockers a day AFTER initial world generation if none were placed by the initial event
planet_event = {
	id = dyson_starting.9
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		clear_blockers = yes
		add_deposit = d_survivor_camp_1
		add_deposit = d_survivor_camp_1
		add_deposit = d_survivor_camp_1
		add_deposit = d_survivor_camp_2
		add_deposit = d_survivor_camp_2
		while = {
			count = 5
			if = {
				limit = { num_pops > 3 }
				random_pop = { kill_pop = yes }
			}
		}
	}
}

#For "Rogue Colonizing Unit"

#set up dyson swarm, starting techs and start the event chain. triggered through empire_init_create_ships
country_event = {
	id = dyson_starting.10
	hide_window = yes
	
	is_triggered_only = yes 
	
	trigger = {
		has_civic = civic_machine_rogue_colonizing_unit
	}
	
	immediate = {
	#add starting techs
		give_technology = { tech = "tech_dyson_swarm" message = no }
		give_technology = { tech = "tech_hydroponics" message = no }
	#start event chain
		country_event = { id = dyson_starting.12 days = 31 }
	#spawn the dyson swarm
		system_star = {
			save_event_target_as = dyson_swarm_civic_spawnpoint
		}
		random_system = {
			limit = {
				is_inside_border = root
			}
			spawn_planet = {
				class = "pc_dyson_swarm"
				location = event_target:dyson_swarm_civic_spawnpoint
				orbit_location = yes
				orbit_angle_offset = 45
				orbit_distance_offset = 9.899
				size = 10
				has_ring = no
					
				init_effect = {
					set_name = "NAME_evacuation_point"
					set_planet_flag = dyson_machine_civic_refuge
					set_planet_flag = eco_no_pollution
					set_planet_entity = {
						entity = "orbital_habitat_entity"
						graphical_culture = fromfrom
					}
					surveyed = {
						set_surveyed = yes
						surveyor = FROM
					}
					set_all_comms_surveyed = yes
					clear_blockers = yes
					clear_deposits = yes
					set_planet_flag = megastructure
					set_planet_flag = habitat
					set_planet_flag = colony_event
					prevent_anomaly = yes
					set_planet_flag = is_dyson_swarm
				#add deposits
					add_deposit = d_dyson_swarm_planetary_access
				#add pops and ownership
					set_owner = FROM
					set_controller = FROM
					while = {
						limit = { num_pops < 30 }
						create_pop = {
							species = owner_main_species
							ethos = random
						}
					}	
				#spawning buildings and districts
					add_district = dyson_swarm_solar_stations
					add_district = dyson_swarm_solar_stations
					add_district = dyson_swarm_solar_stations
					add_district = dyson_swarm_zero_g_labs
					add_district = dyson_housing_gestalt
					add_district = dyson_housing_gestalt
					add_building = building_machine_capital	
					add_building = building_dyson_zero_g_foundry_0
					add_building = building_machine_assembly_plant
					add_building = building_dyson_organic_sanctuary_station_clone
					add_building = building_housing_stations_1
				#spawn mining districts through a separate event after game start. doesn't work directly for some reason.
					planet_event = { id = dyson_starting.22 days = 1 }
				#add tier modifier
					add_modifier = {
						modifier = "dyson_swarm_tier_one"
						days = -1
					}
				#prevent empty leader/comms screen by relocating the capital
					set_capital = yes
				
					while = {
						count = 2
						create_ambient_object = {
							type = "dyson_station_01"
							entity_offset_height = { min = -0 max = -25 }
							location = this
						}
						last_created_ambient_object = {
							set_location = {
								target = event_target:dyson_swarm_civic_spawnpoint
								distance = 40
								angle = random
							}
						}
					}
					while = {
						count = 2
						create_ambient_object = {
							type = "dyson_station_01"
							entity_offset_height = { min = -0 max = -25 }
							location = this
						}
						last_created_ambient_object = {
							set_location = {
								target = event_target:dyson_swarm_civic_spawnpoint
								distance = 30
								angle = random
							}
						}
					}
					create_ambient_object = {
						type = "dyson_station_02"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 38
							angle = random
						}
					}
					create_ambient_object = {
						type = "dyson_station_04"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 36
							angle = random
						}
					}
					create_ambient_object = {
						type = "dyson_station_05"
						entity_offset_height = { min = -0 max = -25 }
						location = this
					}
					last_created_ambient_object = {
						set_location = {
							target = event_target:dyson_swarm_civic_spawnpoint
							distance = 42
							angle = random
						}
					}
				} 
			}
		}
	}
}

planet_event = {
	id = dyson_starting.22
	hide_window = yes
	
	is_triggered_only = yes 

	immediate = {
		add_district = dyson_swarm_mining_bays
		add_district = dyson_swarm_mining_bays
	}
}

#nuke home planet through empire_init_capital_planet
planet_event = {
	id = dyson_starting.11
	hide_window = yes
	
	is_triggered_only = yes 
	
	trigger = {
		owner = {
			has_civic = civic_machine_rogue_colonizing_unit
		}
	}
	
	immediate = {
		set_planet_flag = dyson_servitor_destroyed_homeworld
		prevent_anomaly = yes
		remove_all_buildings = yes
		remove_district = district_city
		remove_district = district_city
		remove_district = district_city
		remove_district = district_mining
		remove_district = district_mining
		remove_district = district_farming
		remove_district = district_farming
		remove_district = district_generator
		remove_district = district_generator
		while = {
			count = 30
			random_pop = { kill_pop = yes }
		}
		change_pc = pc_toxic
	}
}

#introduction, start special project
country_event = {
	id = dyson_starting.12
	title = dyson_starting.12.title
	desc = dyson_starting.12.desc
	
	is_triggered_only = yes 
	
	option = {
		name = dyson_starting.12.a
		owner.capital_scope.solar_system = {
			every_system_planet = {
				limit = {
					has_planet_flag = dyson_servitor_destroyed_homeworld
				}
				save_event_target_as = dyson_starting_me_planet
			}
		}
		enable_special_project = {
			name = "DYSON_ME_SEARCHING_FOR_SURVIVORS"
			location = event_target:dyson_starting_me_planet 
			owner = ROOT
		}
	}
}

#time has ran out.
country_event = {
	id = dyson_starting.13
	title = dyson_starting.13.title
	desc = dyson_starting.13.desc
	
	is_triggered_only = yes 
	
	immediate = {
		
	}	
	
	option = {
		name = dyson_starting.13.a
		custom_tooltip = dyson_starting.13.a.tooltip
		hidden_effect = {
			country_event = { id = dyson_starting.20 }
		}
	}
	option = {
		name = dyson_starting.13.b
		custom_tooltip = dyson_starting.13.b.tooltip
		hidden_effect = {
			country_event = { id = dyson_starting.21 }
			event_target:dyson_starting_me_planet = {
				add_modifier = {
					modifier = dyson_dead_planet
					days = -1
				}
				set_deposit = d_society_2
			}
		}
	}
}

#The decision
country_event = {
	id = dyson_starting.14
	title = dyson_starting.14.title
	desc = dyson_starting.14.desc
	
	is_triggered_only = yes 
	
	immediate = {
		owner.capital_scope.solar_system = {
			every_system_planet = {
				limit = {
					has_planet_flag = dyson_servitor_destroyed_homeworld
				}
				save_event_target_as = dyson_starting_me_planet
			}
		}
	}
	
#give them up according to your first directive. Gives bonuses and doesn't change civics. Also unlocks the "mine planet" edict.
	option = {
		name = dyson_starting.14.a
		custom_tooltip = dyson_starting.14.a.tooltip
		hidden_effect = {
			add_modifier = {
				modifier = dyson_reinforced_first_directive
				days = -1
			}
			set_country_flag = dyson_reinfroced_building_directive
			event_target:dyson_starting_me_planet = {
				add_modifier = {
					modifier = dyson_dead_planet
					days = -1
				}
				set_deposit = d_society_2
			}
		}
	}
#take them in, turning your country into rogue servitors and removing the rogue building unit civic. Zero G farms also add two extra jobs now. Doesn't unlock the "mine planet" edict. Gain +10% extra unity.
	option = {
		name = dyson_starting.14.b
		custom_tooltip = dyson_starting.14.b.tooltip
		hidden_effect = {
			owner.capital_scope.solar_system = {
				every_system_planet = {
					limit = {
						has_planet_flag = dyson_machine_civic_refuge
					}
					planet_event = { id = dyson_starting.15 }
				}
			}
			set_country_flag = dyson_became_servitor
			country_event = { id = dyson_starting.16 days = 800 }
			country_event = { id = dyson_starting.20 }
			hidden_effect = {
				add_modifier = {
					modifier = dyson_reinforced_second_directive
					days = -1
				}
			}
		}
	}
}

planet_event = {
	id = dyson_starting.15
	title = dyson_starting.15.title
	desc = dyson_starting.15.desc
	
	is_triggered_only = yes
	
	immediate = {
		create_species = {
			name = random
			class = random_non_machine
			portrait = random
			traits = random
			homeworld = event_target:dyson_starting_me_planet 
		}
		last_created_species = { save_event_target_as = dyson_me_civic_trophies }
		while = {
			count = 8
			create_pop = {
				species = event_target:dyson_me_civic_trophies
				ethos = random
			}
		}
	}
	
	option = {
		name = dyson_starting.12.a
	}
}

#follow up events
#people demand that some criminals should be cast out.
country_event = {
	id = dyson_starting.16
	title = dyson_starting.16.title
	desc = dyson_starting.16.desc
	
	is_triggered_only = yes 
	
	immediate = {
		owner.capital_scope.solar_system = {
			every_system_planet = {
				limit = {
					has_planet_flag = dyson_servitor_destroyed_homeworld
				}
				save_event_target_as = dyson_starting_me_planet
			}
		}
	}
	
#decision1: cast them out
	option = {
		name = dyson_starting.16.a
		custom_tooltip = dyson_starting.16.a.tooltip
		add_monthly_resource_mult = {
			resource = unity
			value = 15
			min = 1000
			max = 9999
		}
		hidden_effect = {
			event_target:dyson_starting_me_planet = {
				add_modifier = {
					modifier = dyson_outcast_planet
					days = -1
				}
				set_deposit = d_society_5
			}
			while = {
				count = 3
				random_owned_pop = {
					limit = {
						is_robot_pop = no
					}
					kill_pop = yes
				}
			}
			country_event = { id = dyson_starting.17 days = 500 }
		}
	}
	
#decision2: keep them
	option = {
		name = dyson_starting.16.b
		custom_tooltip = dyson_starting.16.b.tooltip
		hidden_effect = {
			country_event = { id = dyson_starting.18 days = 500 }
			every_owned_pop = {
				limit = {
					is_robot_pop = no
				}
				add_modifier = { modifier = dyson_outraged days = 3600 }
			}
		}
	}
}

#followup: trophies demand that they can vote to cast criminals out (after decision 1, casting some out)
country_event = {
	id = dyson_starting.17
	title = dyson_starting.17.title
	desc = dyson_starting.17.desc
	
	is_triggered_only = yes 

#Go with it, triggering an event every two years that randomly casts 0-2 random pops out, removing them and adding some unity
	option = {
		name = dyson_starting.17.a
		custom_tooltip = dyson_starting.17.a.tooltip
		set_country_flag = dyson_me_two_year_cast_out
	}
	
#forbid this. The criminals are already gone. No penalty
	option = {
		name = dyson_starting.17.b
		custom_tooltip = dyson_starting.17.b.tooltip
		hidden_effect = {
			event_target:dyson_starting_me_planet = {
				set_deposit = d_society_5
			}
		}
	}
}

#followup: trophies demand that they can vote to cast criminals out (after decision 2, keeping everybody)
country_event = {
	id = dyson_starting.18
	title = dyson_starting.18.title
	desc = dyson_starting.18.desc
	
	is_triggered_only = yes 

#Go with it, triggering an event every two years that randomly casts 0-2 random pops out, removing them and adding some unity
	option = {
		name = dyson_starting.18.a
		custom_tooltip = dyson_starting.18.a.tooltip
		set_country_flag = dyson_me_two_year_cast_out
		every_owned_planet = {
			add_modifier = {
				modifier = dyson_ununited_trophies
				days = 3600
			}
		}
	}
	
#forbid this. The criminals are already gone. Ununited trophies modifier added for another ten years.
	option = {
		name = dyson_starting.18.b
		custom_tooltip = dyson_starting.18.b.tooltip
		hidden_effect = {
			every_owned_planet = {
				remove_modifier = dyson_ununited_trophies
				add_modifier = {
					modifier = dyson_ununited_trophies
					days = 14000
				}
			}
		}
	}
}

#Outcast event. triggers every two years
country_event = {
	id = dyson_starting.19
	title = dyson_starting.19.title
	desc = dyson_starting.19.desc
	
	is_triggered_only = yes 
	
	trigger = {
		AND = {
			has_country_flag = dyson_me_two_year_cast_out
			has_civic = civic_machine_servitor
			any_owned_planet = {
				count_pops = { limit = { is_robot_pop = no } count > 26 }
			}
		}
	}
	
	option = {
		name = dyson_starting.19.a
		custom_tooltip = dyson_starting.19.a.tooltip
		add_monthly_resource_mult = {
			resource = unity
			value = 12
			min = 500
			max = 9999
		}
		hidden_effect = {
			random_list = {
				20 = { }
				70 = {
					random_owned_pop = {
						limit = {
							is_robot_pop = no
						}
						kill_pop = yes
					}
				}
				10 = {
					while = {
						count = 2
						random_owned_pop = {
							limit = {
								is_robot_pop = no
							}
							kill_pop = yes
						}
					}
				}
			}
		}
	}
}

#Events to change governments.
#To rogue servitor:
country_event = {
	id = dyson_starting.20
	hide_window = yes
	
	is_triggered_only = yes 

	immediate = {
		IF = {
			limit = {
				has_civic = civic_machine_builder
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_builder
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_factory_overclock
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_factory_overclock
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_unitary_cohesion
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_unitary_cohesion
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_rockbreakers
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_rockbreakers
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_zero_waste_protocols
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_zero_waste_protocols
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_built_to_last
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_built_to_last
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_ota_updates
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_ota_updates
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_warbots
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_warbots
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_introspective
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_introspective
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_predictive_analysis
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_predictive_analysis
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_replication
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_replication
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_GAPS_Amoebakin
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_GAPS_Amoebakin
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Drone_Connection
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = Civic_GAPS_Drone_Connection
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Planters
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = Civic_GAPS_Planters
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_GAPS_History_of_Sky_Battles
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_GAPS_History_of_Sky_Battles
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Traditionless
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = Civic_GAPS_Traditionless
				}
			}
		}
		#if there is a unknown civic, then:
		ELSE_IF = {
			limit = {
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_servitor
					civic = civic_machine_ota_updates
				}
			}
		}
	}
}

#To Terminator:
country_event = {
	id = dyson_starting.21
	hide_window = yes
	
	is_triggered_only = yes 

	immediate = {
		IF = {
			limit = {
				has_civic = civic_machine_builder
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_builder
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_factory_overclock
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_factory_overclock
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_unitary_cohesion
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_unitary_cohesion
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_rockbreakers
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_rockbreakers
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_zero_waste_protocols
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_zero_waste_protocols
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_built_to_last
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_built_to_last
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_ota_updates
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_ota_updates
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_warbots
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_warbots
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_introspective
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_introspective
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_predictive_analysis
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_predictive_analysis
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_machine_replication
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_replication
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_GAPS_Amoebakin
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_GAPS_Amoebakin
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Drone_Connection
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = Civic_GAPS_Drone_Connection
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Planters
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = Civic_GAPS_Planters
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = civic_GAPS_History_of_Sky_Battles
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_GAPS_History_of_Sky_Battles
				}
			}
		}
		ELSE_IF = {
			limit = {
				has_civic = Civic_GAPS_Traditionless
			}
			change_government = {
			authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = Civic_GAPS_Traditionless
				}
			}
		}
		#if there is a unknown civic, then:
		ELSE_IF = {
			limit = {
			}
			change_government = {
				authority = "auth_machine_intelligence"
				civics = {
					civic = civic_machine_terminator
					civic = civic_machine_ota_updates
				}
			}
		}
	}
}

#23
