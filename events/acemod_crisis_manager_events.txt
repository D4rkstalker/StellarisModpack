namespace = acemod_crisis_manager
# INITIALISERS
# Marks ACE Crisis Manager mod as present. Other mods can check against this flag to see if ACE Crisis Manager is installed.
country_event = {
	id = acemod_crisis_manager.100
	hide_window = yes
	fire_only_once = yes
	trigger = {
		is_ai = no
	}
	immediate = {
		set_global_flag = acemod_crisis_manager_installed
	}
}

# Fires Aggresive Crisis Engine Mod Manager menu if Aggresive Crisis Engine is not installed.
country_event = {
	id = acemod_crisis_manager.110
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = no
		NOT = {
			has_global_flag = acemod_crisis_manager_menu_fired
		}
	}
	immediate = {
		set_global_flag = acemod_crisis_manager_menu_fired
		country_event = {
			id = acemod_crisis_manager.111
			days = 1
			random = 0
		}
	}
}

country_event = {
	id = acemod_crisis_manager.111
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = no
		NOT = {
			has_global_flag = acemod_menu_fired			# We do not need to open ACE Crisis Manager window if ACE window was opened.
		}
	}
	immediate = {
		set_global_flag = acemod_crisis_manager_menu_fired
		country_event = {
			id = acemod_crisis_manager.1
		}
	}
}

# MENU
# Crisis Manager window
country_event = {
	id = acemod_crisis_manager.1
	title = acemod_crisis_manager.1.name
	desc = acemod_crisis_manager.1.desc
	picture = GFX_evt_ground_combat
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.1.a
		custom_tooltip = acemod_crisis_manager.1.a.tooltip
		hidden_effect = {
			if = {
				limit = {
					NOT = {
						has_global_flag = acemod_crisis_manager_active
					}
				}
				set_global_flag = acemod_crisis_manager_active
				country_event = {
					id = acemod_crisis_manager.1
					days = 0
					random = 0
				}
				break = yes
			}
			else = {
				remove_global_flag = acemod_crisis_manager_active
				country_event = {
					id = acemod_crisis_manager.1
					days = 0
					random = 0
				}
				break = yes
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.d		# Prethoryn spawn
		custom_tooltip = acemod_crisis_manager.1.d.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					change_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_prethoryn_spawn_time
						value = 0
					}
				}
				else = {
					change_variable = {
						which = acemod_crisis_manager_var_country_prethoryn_spawn_time
						value = acemod_crisis_manager_var_country_spawn_time_variable
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_prethoryn_spawn_time							# Max 200 at this moment. Easy to adjust if scripted_effects are expanded.
							value > 200
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_prethoryn_spawn_time
						value = 0
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_prethoryn_spawn_time
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.f		# Contingency spawn
		custom_tooltip = acemod_crisis_manager.1.f.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					change_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_contingency_spawn_time
						value = 0
					}
				}
				else = {
					change_variable = {
						which = acemod_crisis_manager_var_country_contingency_spawn_time
						value = acemod_crisis_manager_var_country_spawn_time_variable
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_contingency_spawn_time							# Max 200 at this moment. Easy to adjust if scripted_effects are expanded.
							value > 200
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_contingency_spawn_time
						value = 0
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_contingency_spawn_time
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.e		# Extradimensional spawn
		custom_tooltip = acemod_crisis_manager.1.e.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					change_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_extradimensional_spawn_time
						value = 0
					}
				}
				else = {
					change_variable = {
						which = acemod_crisis_manager_var_country_extradimensional_spawn_time
						value = acemod_crisis_manager_var_country_spawn_time_variable
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_extradimensional_spawn_time							# Max 200 at this moment. Easy to adjust if scripted_effects are expanded.
							value > 200
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_extradimensional_spawn_time
						value = 0
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_extradimensional_spawn_time
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.j		# Aberrant spawn
		custom_tooltip = acemod_crisis_manager.1.j.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					change_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_aberrant_spawn_time
						value = 0
					}
				}
				else = {
					change_variable = {
						which = acemod_crisis_manager_var_country_aberrant_spawn_time
						value = acemod_crisis_manager_var_country_spawn_time_variable
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_aberrant_spawn_time							# Max 200 at this moment. Easy to adjust if scripted_effects are expanded.
							value > 200
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_aberrant_spawn_time
						value = 0
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_aberrant_spawn_time
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.k		#  Vehement spawn
		custom_tooltip = acemod_crisis_manager.1.k.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					change_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_vehement_spawn_time
						value = 0
					}
				}
				else = {
					change_variable = {
						which = acemod_crisis_manager_var_country_vehement_spawn_time
						value = acemod_crisis_manager_var_country_spawn_time_variable
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_vehement_spawn_time							# Max 200 at this moment. Easy to adjust if scripted_effects are expanded.
							value > 200
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_vehement_spawn_time
						value = 0
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_vehement_spawn_time
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.g
		custom_tooltip = acemod_crisis_manager.1.g.tooltip
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 0
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 5
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 10
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 10
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 20
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 20
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 50
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 50
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 100
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 100
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 404
					}
				}
				else_if = {
					limit = {
						check_variable = {
							which = acemod_crisis_manager_var_country_spawn_time_variable
							value = 404
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = 5
					}
				}
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_spawn_time_variable
						value = prev
					}
					country_event = {
						id = acemod_crisis_manager.1
						days = 0
						random = 0
					}
				}
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.h
		custom_tooltip = acemod_crisis_manager.1.h.tooltip
		hidden_effect = {
			if = {
				limit = {
					NOT = {
						has_global_flag = acemod_crisis_manager_prethoryn_spawn_skip_mtth_disabled
					}
				}
				set_global_flag = acemod_crisis_manager_prethoryn_spawn_skip_mtth_disabled
				country_event = {
					id = acemod_crisis_manager.1
					days = 0
					random = 0
				}
				break = yes
			}
			else = {
				remove_global_flag = acemod_crisis_manager_prethoryn_spawn_skip_mtth_disabled
				country_event = {
					id = acemod_crisis_manager.1
					days = 0
					random = 0
				}
				break = yes
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.i
		custom_tooltip = acemod_crisis_manager.1.i.tooltip
		hidden_effect = {
			acemod_lib_menu_country_acemod_lib_army_strength_modifier_option_selector = yes
			country_event = {
				id = acemod_crisis_manager.1
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.w
		custom_tooltip = acemod_crisis_manager.1.w.tooltip
		hidden_effect = {
			acemod_crisis_manager_reset_settings = yes
			country_event = {
				id = acemod_crisis_manager.1
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.x
		custom_tooltip = acemod_crisis_manager.1.x.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.11				# Closes Crisis Manager window and opens Debugging tools menu.
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.y
		custom_tooltip = acemod_crisis_manager.1.y.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.10				# Closes Crisis Manager window and opens Debugging tools menu.
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.1.z
		custom_tooltip = acemod_crisis_manager.1.z.tooltip
		hidden_effect = {
			if = {
				limit = {
					has_global_flag = acemod_installed
				}
				country_event = {
					id = acemod_menu.1					# Closes Crisis Manager window and redirects to main menu.
					days = 0
					random = 0
				}
			}
			else = {
				break = yes				# If Crisis Manager is installed as a standalone simply closing the window instead of redirection to main menu event which does not exist.
			}
		}
	}
}

# Gathers information about galaxy as configured in the game lobby.
country_event = {
	id = acemod_crisis_manager.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.3				# Gathers information about galaxy as configured in the game lobby.
				days = 0
				random = 0
			}
			country_event = {
				id = acemod_crisis_manager.4				# Shows information about galaxy as configured in the game lobby.
				days = 0
				random = 0
			}
		}
	}
}

# Gathers information about galaxy as configured in the game lobby.
country_event = {
	id = acemod_crisis_manager.3
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			event_target:global_event_country = {
				# global_event country is always around
				# acemod_crisis_manager_var_country_is_checksum_modified
				if = {
					limit = {
						always = no						# Unable to grab this value but modded events change checksum (this file).
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_checksum_modified
						value = 0
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_is_checksum_modified
						value = 1
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_is_checksum_modified
						value = prev
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# acemod_crisis_manager_var_country_is_ironman
				if = {
					limit = {
						is_ironman = yes
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_ironman
						value = 1
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_is_ironman
						value = 0
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_is_ironman
						value = prev
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# acemod_crisis_manager_var_country_is_multiplayer
				if = {
					limit = {
						is_multiplayer = yes
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_multiplayer
						value = 1
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_is_multiplayer
						value = 0
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_is_multiplayer
						value = prev
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# acemod_crisis_manager_var_country_achievements_disabled
				if = {
					limit = {
						OR = {
							check_variable = {
								which = acemod_crisis_manager_var_country_is_checksum_modified								# Achievements cannot be obtained with modified checksum.
								value = 1
							}
							NOT = {
								check_variable = {
									which = acemod_crisis_manager_var_country_is_ironman									# Achievements require ironman mode.
									value = 1
								}
							}
							check_variable = {
								which = acemod_crisis_manager_var_country_is_multiplayer								# Achievements cannot be obtained in multiplayer.
								value = 1
							}
						}
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_achievements_disabled
						value = 1
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_achievements_disabled
						value = 0
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_achievements_disabled
						value = prev
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# GALAXY_SIZE
				set_variable = {
					which = acemod_crisis_manager_var_country_num_systems
					value = 0
				}
				every_system = {
					limit = {
						always = yes
					}
					event_target:global_event_country = {
						change_variable = {
							which = acemod_crisis_manager_var_country_num_systems
							value = 1
						}
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_num_systems
						value = prev
					}
				}
			}
			# global_event country is always around
			# Counts number of human players present
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_num_human_players_live
					value = 0
				}
				every_country = {
					limit = {
						is_ai = no
					}
					prev = {
						change_variable = {
							which = acemod_crisis_manager_var_country_num_human_players_live							# Counts number of human players present
							value = 1
						}
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_num_human_players_live
						value = prev
					}
				}
			}
			# Counts number of human players on_game_start (since this is post start count number is unknown).
			if = {
				limit = {
					NOT = {
						has_global_flag = acemod_crisis_manager_num_human_players_start_counted
					}
				}
				event_target:global_event_country = {
					set_global_flag = acemod_crisis_manager_num_human_players_start_counted
					set_variable = {
						which = acemod_crisis_manager_var_country_num_human_players_start
						value = 404
					}
					root = {
						# Save to root country so that variables can be displayed on Debug window via scripted_loc.
						set_variable = {
							which = acemod_crisis_manager_var_country_num_human_players_start
							value = prev
						}
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# get_galaxy_setup_value effect
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_empires
					setting = num_empires
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_advanced_empires
					setting = num_advanced_empires
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_fallen_empires
					setting = num_fallen_empires
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_marauder_empires
					setting = num_marauder_empires
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_mid_game_year
					setting = mid_game_year
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_end_game_year
					setting = end_game_year
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_victory_year
					setting = victory_year
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_guaranteed_colonies
					setting = num_guaranteed_colonies
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_gateways
					setting = num_gateways
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_wormhole_pairs
					setting = num_wormhole_pairs
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_num_hyperlanes
					setting = num_hyperlanes
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_habitable_worlds_scale
					setting = habitable_worlds_scale
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_primitive_worlds_scale
					setting = primitive_worlds_scale
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_crisis_strength_scale
					setting = crisis_strength_scale
				}
				get_galaxy_setup_value = {
					which = acemod_crisis_manager_var_country_tech_costs_scale
					setting = tech_costs_scale
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_num_empires
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_advanced_empires
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_fallen_empires
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_marauder_empires
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_mid_game_year
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_end_game_year
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_victory_year
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_guaranteed_colonies
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_wormhole_pairs
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_num_hyperlanes
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_habitable_worlds_scale
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_primitive_worlds_scale
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_crisis_strength_scale
						value = prev
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_tech_costs_scale
						value = prev
					}
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				# FE_DIFFICULTY
				if = {
					limit = {
						is_difficulty = 0
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 0.5
					}
					# break = yes
				}
				else_if = {
					limit = {
						is_difficulty = 1
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 1
					}
					# break = yes
				}
				else_if = {
					limit = {
						is_difficulty = 2
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 2
					}
					# break = yes
				}
				else_if = {
					limit = {
						is_difficulty = 3
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 3
					}
					# break = yes
				}
				else_if = {
					limit = {
						is_difficulty = 4
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 4
					}
					# break = yes
				}
				else_if = {
					limit = {
						is_difficulty = 5
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 5
					}
					# break = yes
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = 404
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_is_difficulty
						value = prev
					}
				}
			}
			# GALAXY_SHAPE - unobtainable
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_setup_scenario
					value = 404
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_setup_scenario
						value = prev
					}
				}
			}
			# FE_SCALING_DIFFICULTY - unobtainable
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_scaling_difficulty
					value = 404
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_scaling_difficulty
						value = prev
					}
				}
			}
			# FE_AGGRESSIVENESS - unobtainable
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_aggressiveness
					value = 404
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_aggressiveness
						value = prev
					}
				}
			}
			# FE_ADVANCED_NEAR_PLAYER - unobtainable
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_advanced_neighbors
					value = 404
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_advanced_neighbors
						value = prev
					}
				}
			}
			# FE_CLUSTERED_STARTS - unobtainable
			event_target:global_event_country = {
				set_variable = {
					which = acemod_crisis_manager_var_country_empire_placement
					value = 404
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_empire_placement
						value = prev
					}
				}
			}
			# CARAVANEERS_LABEL
			event_target:global_event_country = {
				if = {
					limit = {
						caravaneers_enabled = yes
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_caravaneers_enabled
						value = 1
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_caravaneers_enabled
						value = 0
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_caravaneers_enabled
						value = prev
					}
				}
			}
			# XENO_COMPATIBILITY_LABEL
			event_target:global_event_country = {
				if = {
					limit = {
						xeno_compatibility_enabled = yes
					}
					set_variable = {
						which = acemod_crisis_manager_var_country_xeno_compatibility_enabled
						value = 1
					}
				}
				else = {
					set_variable = {
						which = acemod_crisis_manager_var_country_xeno_compatibility_enabled
						value = 0
					}
				}
				root = {
					# Save to root country so that variables can be displayed on Debug window via scripted_loc.
					set_variable = {
						which = acemod_crisis_manager_var_country_xeno_compatibility_enabled
						value = prev
					}
				}
			}
		}
	}
}

# Shows information about galaxy as configured in the game lobby.
country_event = {
	id = acemod_crisis_manager.4
	title = acemod_crisis_manager.4.name
	desc = acemod_crisis_manager.4.desc
	picture = GFX_evt_spy_orb
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.4.a
		custom_tooltip = acemod_crisis_manager.4.a.tooltip
	}
}

# Debugging tool.
country_event = {
	id = acemod_crisis_manager.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.6				# Debugging event.
				days = 0
				random = 0
			}
			country_event = {
				id = acemod_crisis_manager.7				# Debug output.
				days = 0
				random = 0
			}
		}
	}
}

# Debugging event.
country_event = {
	id = acemod_crisis_manager.6
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		hidden_effect = {
		}
	}
}

# Debug output.
country_event = {
	id = acemod_crisis_manager.7
	title = acemod_crisis_manager.7.name
	desc = acemod_crisis_manager.7.desc
	picture = GFX_evt_glitchy_matrix
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.7.a
		custom_tooltip = acemod_crisis_manager.7.a.tooltip
	}
}

# ACE Crisis Manager Debug.
country_event = {
	id = acemod_crisis_manager.8
	title = acemod_crisis_manager.8.name
	desc = acemod_crisis_manager.8.desc
	picture = GFX_evt_laser_grid
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.8.a
		custom_tooltip = acemod_crisis_manager.8.a.tooltip
	}
}

# Debugging tools menu window
country_event = {
	id = acemod_crisis_manager.10
	title = acemod_crisis_manager.10.name
	desc = acemod_crisis_manager.10.desc
	picture = GFX_evt_space_station
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.10.a
		custom_tooltip = acemod_crisis_manager.10.a.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.10
				days = 0
				random = 0
			}
			country_event = {
				id = acemod_crisis_manager.2				# Gathers and shows information about galaxy as configured in the game lobby.
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.10.b
		custom_tooltip = acemod_crisis_manager.10.b.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.10
				days = 0
				random = 0
			}
			country_event = {
				id = acemod_crisis_manager.5				# Debugging tool.
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.10.c
		custom_tooltip = acemod_crisis_manager.10.c.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.10
				days = 0
				random = 0
			}
			acemod_crisis_manager_calculate_current_end_game_year = yes
			country_event = {
				id = acemod_crisis_manager.8				# ACE Crisis Manager Debugging tool.
				days = 0
				random = 0
			}
		}
	}
	option = {
		name = acemod_crisis_manager.10.z
		custom_tooltip = acemod_crisis_manager.10.z.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.1				# Closes Debugging tools window and redirects to main menu.
				days = 0
				random = 0
			}
		}
	}
}

# CRISIS TRIGGERS
# Vanilla crisis trigger override without overwrite. on_five_year_pulse in case ACE Crisis Manager is added mid-game.
event = {
	id = acemod_crisis_manager.1000
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_crises_allowed = yes
		end_game_years_passed >= 44		# Original value is 50. We assume no other mods change this to anything lower than 44 and break this. Every five years this value is checked so it will fire when end_game_years_passed >= 45. One year of spacing allows for optional injection of code later or blocking ACE Crisis Manager from working.
		NOT = {
			has_global_flag = acemod_crisis_manager_countdown_end_game_years_passed_45
		}
	}
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			set_global_flag = acemod_crisis_manager_countdown_end_game_years_passed_45			# Let the other mods know that ACE Crisis Manager began countdown.
			country_event = {
				id = acemod_crisis_manager.1001				# Begin countdown to end_game_years_passed = 50 T-10d where proper crisis trigger override is set.
				days = 350				# years -10 days equals end_game_years_passed = 50 T-10d
			}
		}
	}
}

# Countdown is over, firing main crisis trigger event before vanilla crisis_trigger.1 is fired.
country_event = {
	id = acemod_crisis_manager.1001
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = acemod_crisis_manager_active		# Won't make any changes to the game if it is inactive.
		NOT = {
			has_global_flag = acemod_crisis_manager_disable_crisis_firing			# Allows other mods to effectively disable ACE Crisis Manager's ability to trigger crisis. Best set on_game_start or soon after.
		}
	}
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			if = {
				limit = {
					NAND = {
						check_variable = {
							which = acemod_crisis_manager_var_country_prethoryn_spawn_time
							value = 0							# No changes.
						}
						check_variable = {
							which = acemod_crisis_manager_var_country_extradimensional_spawn_time
							value = 0							# No changes.
						}
						check_variable = {
							which = acemod_crisis_manager_var_country_contingency_spawn_time
							value = 0							# No changes.
						}
					}
				}
				set_global_flag = galactic_crisis_happened				# Setting up flag shortly before end_game_years_passed >= 50 to prevent crisis_trigger.1 from firing. This flag *must* stay up, otherwise crisis_trigger.1 will fire. We don't want crisis and potentially any modded event to trigger earlier than default vanilla value, this is why we waited 50 years minus 10 days to set it up.
				set_global_flag = acemod_crisis_manager_galactic_crisis_happened				# Let other mods know that ACE Crisis Manager hijacked event crisis_trigger.1 and now actively handles crisis spawning.}
			}
			else = {
				# No changes in all equals vanilla.
			}
		}
	}
}

# Crisis trigger tick event (on_five_year_pulse)
event = {
	id = acemod_crisis_manager.1003
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = acemod_crisis_manager_active		# Won't make any changes to the game if it is inactive.
		NOT = {
			has_global_flag = acemod_crisis_manager_disable_crisis_firing			# Allows other mods to effectively disable ACE Crisis Manager's ability to trigger crisis. Set on_game_start or soon after.
		}
	}
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			country_event = {
				id = acemod_crisis_manager.1004				# Delay event for years start performance.
				days = 20
				random = 5
			}
		}
	}
}

# Proper crisis triggers. Branching out depending on settings.
country_event = {
	id = acemod_crisis_manager.1004
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			if = {
				limit = {
					check_variable = {
						which = acemod_crisis_manager_var_country_prethoryn_spawn_time
						value = 0						# No changes.
					}
					check_variable = {
						which = acemod_crisis_manager_var_country_extradimensional_spawn_time
						value = 0						# No changes.
					}
					check_variable = {
						which = acemod_crisis_manager_var_country_contingency_spawn_time
						value = 0						# No changes.
					}
				}
				country_event = {
					id = acemod_crisis_manager.1005					# No changes in all equals vanilla.
					days = 0
				}
			}
			else = {
				if = {
					limit = {
						NOR = {
							check_variable = {
								which = acemod_crisis_manager_var_country_prethoryn_spawn_time
								value = 0								# If changes were made execute custom triggers.
							}
							has_global_flag = prethoryn_invasion_happened							# One instance at a time in case a mod overwrites the event.
						}
					}
					country_event = {
						id = acemod_crisis_manager.1006						# Prethoryn triggers.
						days = 70
						random = 30
					}
				}
				if = {
					limit = {
						NOR = {
							check_variable = {
								which = acemod_crisis_manager_var_country_extradimensional_spawn_time
								value = 0
							}
							has_global_flag = extradimensional_invasion_defeated
						}
					}
					if = {
						limit = {
							NOT = {
								has_global_flag = extradimensional_invasion_happened								# One instance at a time in case a mod overwrites the event.
							}
						}
						country_event = {
							id = acemod_crisis_manager.1007							# Extradimensional triggers.
							days = 105
							random = 10
						}
					}
					country_event = {
						id = acemod_crisis_manager.1009						# Aberrant triggers.
						days = 120
						random = 20
					}
					country_event = {
						id = acemod_crisis_manager.1010						# Vehement triggers.
						days = 150						# Important for Vehement event occur after Aberrant event, otherwise Aberrant global flag might not be set in time.
						random = 20
					}
				}
				if = {
					limit = {
						NOR = {
							check_variable = {
								which = acemod_crisis_manager_var_country_contingency_spawn_time
								value = 0
							}
							has_global_flag = ai_invasion_happened							# One instance at a time in case a mod overwrites the event.
						}
					}
					country_event = {
						id = acemod_crisis_manager.1008						# Contingency triggers
						days = 30
						random = 30
					}
				}
			}
		}
	}
}

# Vanilla, no effect.
country_event = {
	id = acemod_crisis_manager.1005
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		break = yes		# Blank event for overwrites.
	}
}

# acemod_crisis_manager_var_country_prethoryn_spawn_time
country_event = {
	id = acemod_crisis_manager.1006
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			acemod_crisis_manager_calculate_prethoryn_effect = yes
		}
	}
}

# acemod_crisis_manager_var_country_extradimensional_spawn_time
country_event = {
	id = acemod_crisis_manager.1007
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			acemod_crisis_manager_calculate_extradimensional_effect = yes
		}
	}
}

# acemod_crisis_manager_var_country_contingency_spawn_time
country_event = {
	id = acemod_crisis_manager.1008
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		event_target:global_event_country = {
			# global_event country is always around
			acemod_crisis_manager_calculate_contingency_effect = yes
		}
	}
}

# acemod_crisis_manager_var_country_aberrant_spawn_time
country_event = {
	id = acemod_crisis_manager.1009
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = extradimensional_invasion_happened
		NOT = {
			has_global_flag = extradimensional_invasion_defeated
		}
	}
	immediate = {
		if = {
			limit = {
				NOT = {
					has_global_flag = extradimensional_second_portal
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				acemod_crisis_manager_calculate_aberrant_effect = yes
			}
		}
	}
}

# acemod_crisis_manager_var_country_vehement_spawn_time
country_event = {
	id = acemod_crisis_manager.1010
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = extradimensional_invasion_happened
		NOT = {
			has_global_flag = extradimensional_invasion_defeated
		}
	}
	immediate = {
		if = {
			limit = {
				has_global_flag = extradimensional_second_portal
				NOT = {
					has_global_flag = extradimensional_third_portal
				}
			}
			event_target:global_event_country = {
				# global_event country is always around
				acemod_crisis_manager_calculate_vehement_effect = yes
			}
		}
	}
}

country_event = {
	id = acemod_crisis_manager.11
	title = acemod_crisis_manager.11.name
	desc = acemod_crisis_manager.11.desc
	picture = GFX_evt_engineering_research
	is_triggered_only = yes
	option = {
		name = acemod_crisis_manager.11.a
		custom_tooltip = acemod_crisis_manager.11.a.tooltip
		hidden_effect = {
			if = {
				limit = {
					NOT = {
						has_global_flag = acemod_crisis_manager_acot_override_support_disabled						# Disables ACOT Aberrant "flagship" substitute.
					}
				}
				set_global_flag = acemod_crisis_manager_acot_override_support_disabled
				country_event = {
					id = acemod_crisis_manager.11
					days = 0
					random = 0
				}
				break = yes
			}
			else = {
				remove_global_flag = acemod_crisis_manager_acot_override_support_disabled
				country_event = {
					id = acemod_crisis_manager.11
					days = 0
					random = 0
				}
				break = yes
			}
		}
	}
	option = {
		name = acemod_crisis_manager.11.b
		custom_tooltip = acemod_crisis_manager.11.b.tooltip
		hidden_effect = {
			if = {
				limit = {
					NOT = {
						has_global_flag = acemod_crisis_manager_acg_support_disabled						# Aesthetic Cinematic Gameplay support. Disabling it will allow ACE to add techs and debuffs even when ACG is present, possibly breaking balance of the overhaul.
					}
				}
				set_global_flag = acemod_crisis_manager_acg_support_disabled
				country_event = {
					id = acemod_crisis_manager.11
					days = 0
					random = 0
				}
				break = yes
			}
			else = {
				remove_global_flag = acemod_crisis_manager_acg_support_disabled
				country_event = {
					id = acemod_crisis_manager.11
					days = 0
					random = 0
				}
				break = yes
			}
		}
	}
	option = {
		name = acemod_crisis_manager.11.z
		custom_tooltip = acemod_crisis_manager.11.z.tooltip
		hidden_effect = {
			country_event = {
				id = acemod_crisis_manager.1				# Closes Advanced Options window and redirects to main menu.
				days = 0
				random = 0
			}
		}
	}
}

# Dummy event to remove errors in Stellaris log file. DO NOT USE.
event = {
	id = acemod_crisis_manager.1500
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_global_flag = acemod_crisis_manager_disable_crisis_firing		# Allows other mods to effectively disable ACE Crisis Manager's ability to trigger crisis. Set on_game_start or soon after.
		set_country_flag = acemod_crisis_manager_crisis_establish_communications_aberrant		# Extra flag if other mods with custom country_type need event chain access. This does NOT affect other chain events, I trust other mods to overwrite them or make additional events.
		set_global_flag = acemod_crisis_manager_acot_override_support_disabled		# Disables ACOT Aberrant "flagship" substitute.
		set_global_flag = a_deadly_tempest_mod_active		# A Deadly Tempest
		set_global_flag = z_cm_installed		# Infinite Crisis Master
		set_global_flag = CmtFlagActivated		# NaK1119's Crisis Manager (all editions + unofficial)
		set_global_flag = acot_override_activated		# Ancient Cache of Technologies: Override
		set_global_flag = nhsc_v30		# Extra Ship Components 3.0
		set_global_flag = nhsc_overwrites_v30		# Extra Ship Components 3.0 - Overwrites
		set_global_flag = nhsc_fe_planets_updated		# Extra Ship Components 3.0 - Overwrites
		set_global_flag = has_real_space_mod		# Real Space
		set_global_flag = z_framework_installed		# Infinite Stellaris Framework
		set_global_flag = gigastructures_enabled		# Gigastructural Engineering & More
		set_global_flag = acg_active		# Aesthetic Cinematic Gameplay
		set_global_flag = galactic_community_formed		# missing vanilla flag?
	}
}

# Marks Aggresive Crisis Engine Mod Manager mod as present. Other mods can check against this flag to see if ACEMOD is installed. on_game_start
country_event = {
	id = acemod_crisis_manager.2000
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = no
		NOT = {
			has_global_flag = acemod_crisis_manager_installed
		}
	}
	immediate = {
		set_country_flag = acemod_crisis_manager_original_game_host		# Marks original game host country for debug purposes.
		set_global_flag = acemod_crisis_manager_installed
		if = {
			limit = {
				NOT = {
					has_global_flag = acemod_crisis_manager_num_human_players_start_counted
				}
			}
			event_target:global_event_country = {
				set_global_flag = acemod_crisis_manager_num_human_players_start_counted
				set_variable = {
					which = acemod_crisis_manager_var_country_num_human_players_start
					value = 0
				}
				every_country = {
					limit = {
						is_ai = no
					}
					event_target:global_event_country = {
						change_variable = {
							which = acemod_crisis_manager_var_country_num_human_players_start							# Counts number of human players on_game_start
							value = 1
						}
					}
				}
				# Save to root country so that variables can be displayed on Debug window via scripted_loc.
				root = {
					set_variable = {
						which = acemod_crisis_manager_var_country_num_human_players_start
						value = prev
					}
				}
			}
		}
	}
}

# Aesthetic Cinematic Gameplay support. on_game_start
country_event = {
	id = acemod_crisis_manager.2010
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = acg_active
	}
	immediate = {
		set_global_flag = acemod_technology_disabled
		set_global_flag = acemod_crisis_debuff_disabled
		set_global_flag = acemod_fallen_awakened_empire_debuff_disabled
		event_target:global_event_country = {
			# global_event country is always around
			set_variable = {
				which = acemod_var_country_acemod_lib_army_strength_modifier				# OFF
				value = 101
			}
		}
		every_country = {
			limit = {
				is_ai = no
			}
			set_variable = {
				which = acemod_var_country_acemod_lib_army_strength_modifier				# Save to root country so that variables can be displayed on Debug window via scripted_loc.
				value = 101
			}
		}
	}
}
