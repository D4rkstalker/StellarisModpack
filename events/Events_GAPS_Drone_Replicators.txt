namespace = Events_GAPS_Drone_Replicators

country_event = {
	id = Events_GAPS_Drone_Replicators.1
	title = Events_GAPS_Drone_Replicators.1.name
	desc = Events_GAPS_Drone_Replicators.1.desc
	picture = GFX_evt_unidentified_ship
	show_sound = megastructure_upgraded_01
	hide_window = no
	is_triggered_only = yes

	trigger = {
		this = { has_origin = Origin_GAPS_Drone_Replicators }
		last_increased_tech = Tech_GAPS_Wilder_Advancements
	}

	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Work_With_The_Wild"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Work_With_The_Wild.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Work_With_The_Wild
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Work_With_The_Wild }
		}
		ai_chance = {
			factor = 20
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Welcome_To_The_Jungle"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Welcome_To_The_Jungle.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Welcome_To_The_Jungle
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Welcome_To_The_Jungle }
		}
		ai_chance = {
			factor = 20
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Influence_Of_The_Wild"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Influence_Of_The_Wild.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Influence_Of_The_Wild
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Influence_Of_The_Wild }
		}
		ai_chance = {
			factor = 20
		}
	}

	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Bounty_Of_The_Wild"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Bounty_Of_The_Wild.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Bounty_Of_The_Wild
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Bounty_Of_The_Wild }
		}
		ai_chance = {
			factor = 20
		}
	}
	
	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Love_Of_The_Wild"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Love_Of_The_Wild.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Love_Of_The_Wild
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Love_Of_The_Wild }
		}
		ai_chance = {
			factor = 20
		}
	}
	
	option = {
		name = "Events_GAPS_Drone_Replicators_Option1.Live_In_The_Wild"
		custom_tooltip = "Events_GAPS_Drone_Replicators_Option1.Live_In_The_Wild.Tooltip"
		hidden_effect = {
			set_country_flag = CountryFlag_GAPS_Drone_Replicators_Live_In_The_Wild
		}
		trigger = {
			NOT = { has_country_flag = CountryFlag_GAPS_Drone_Replicators_Live_In_The_Wild }
		}
		ai_chance = {
			factor = 20
		}
	}
}
#on game start country
country_event = {
	id = Events_GAPS_Drone_Replicators.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		this = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		#give_technology = { tech = Tech_GAPS_Wilder_Advancements message = no }
		create_replicated_drone_country = yes
		every_owned_planet = {
			limit = { is_capital = yes } 
			planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 5 }
			create_fleet = { 
				name = "NAME_Ancient_Mining_Drone"
				effect = {
					set_owner = event_target:Global_Target_GAPS_replicated_drone_country
					create_ship = {
						name = ""
						design = "NAME_Ancient_Mining_Drone"
					}
					set_location = prev
					set_fleet_stance = passive
					queue_actions = {
						repeat = {
							wait = {
								duration = 999
								random = 10
							}
						}
					}
				}
			}
		}
	}
}

#on colonized
# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
ship_event = {
	id = Events_GAPS_Drone_Replicators.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		From = { planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 5 } }
		From = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 60 } }
	}
}
#SPAWN MINING DRONES
planet_event = {
	id = Events_GAPS_Drone_Replicators.31
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_origin = Origin_GAPS_Drone_Replicators }
	}
	immediate = {
		planet_event = { id = Events_GAPS_Drone_Replicators.31 days = 30 }
		if = { 
			limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count > 0 } } }
			create_replicated_drone_country = yes
			set_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 0 }
			solar_system = {
				set_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 0 }
				every_system_planet = { 
					limit = { 
						has_deposit_for = shipclass_mining_station 
						NOR = { 
							has_deposit = d_trade_value_1 
							has_deposit = d_trade_value_2 
							has_deposit = d_trade_value_3 
							has_deposit = d_trade_value_4
							has_deposit = d_trade_value_5
							has_deposit = d_trade_value_6
							has_deposit = d_trade_value_7 
							has_deposit = d_trade_value_8
							has_deposit = d_trade_value_9
							has_deposit = d_trade_value_10
						}
					}
					solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Stations" value = 1 } }
				}
				set_variable = { which = "GAPS_Max_Mining_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
				multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 4 }
				if = { 
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 1 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 1 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 2 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 2 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 3 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 3 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 4 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 4 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 5 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 5 }
				}
				else_if = {
					limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 6 } } }
					multiply_variable = { which = GAPS_Max_Mining_Drones_To_Spawn value = 6 }
				}
				if = { 
					limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
					if = { 
						limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Mining_Drones" value < GAPS_Max_Mining_Drones_To_Spawn } } }
						every_fleet_in_system = {
							limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
							solar_system = { change_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
						}
					}
				}
				else_if = {
					#limit = { any_fleet_in_system = { num_ships >= GAPS_Max_Mining_Drones_To_Spawn } }
					#count = GAPS_Max_Mining_Drones_To_Spawn 
					create_fleet = { 
						name = "NAME_Ancient_Mining_Drone"
						effect = {
							set_owner = event_target:Global_Target_GAPS_replicated_drone_country
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
							set_location = root
							set_fleet_stance = aggressive
							queue_actions = {
								repeat = {
									wait = {
										duration = 999
										random = 10
									}
								}
							}
						}
					}
					solar_system = { set_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } }
				}
				#COMBAT DRONES
				if = { 
					limit = { root = { NOT = { has_planet_flag = Planet_Flag_GAPS_Spawned_Combat_Drone } } }
					root = { set_timed_planet_flag = { flag = Planet_Flag_GAPS_Spawned_Combat_Drone days = 60 } }
					set_variable = { which = "GAPS_Max_Combat_Drones_To_Spawn" value = GAPS_Number_Of_Mining_Stations }
					multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 2 }
					if = { 
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 1 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 1 }
					}
					else_if = {
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 2 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 2 }
					}
					else_if = {
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 3 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 3 }
					}
					else_if = {
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 4 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 4 }
					}
					else_if = {
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 5 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 5 }
					}
					else_if = {
						limit = { starbase = { count_starbase_modules = { type = Starbase_Module_GAPS_Drone_Signal_Station count = 6 } } }
						multiply_variable = { which = GAPS_Max_Combat_Drones_To_Spawn value = 6 }
					}
					if = { 
						limit = { any_fleet_in_system = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } } }
						if = { 
							limit = { solar_system = { check_variable = { which = "GAPS_Number_Of_Combat_Drones" value < GAPS_Max_Combat_Drones_To_Spawn } } }
							every_fleet_in_system = {
								limit = { owner = { is_same_value = event_target:Global_Target_GAPS_replicated_drone_country } }
								create_ship = {
									name = ""
									design = "NAME_Ancient_Combat_Drone"
								}
								solar_system = { change_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } }
							}
						}
					}
					else_if = {
						#limit = { any_fleet_in_system = { num_ships >= GAPS_Max_Combat_Drones_To_Spawn } }
						#count = GAPS_Max_Combat_Drones_To_Spawn 
						create_fleet = { 
							name = "NAME_Ancient_Combat_Drone"
							effect = {
								set_owner = event_target:Global_Target_GAPS_replicated_drone_country
								create_ship = {
									name = ""
									design = "NAME_Ancient_Combat_Drone"
								}
								set_location = root
								set_fleet_stance = aggressive
								queue_actions = {
									repeat = {
										wait = {
											duration = 999
											random = 10
										}
									}
								}
							}
						}
						solar_system = { set_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } }
					}
				}
			}
		}
	}
}
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
#ancient_corvette
#MINING DRONE DIES
country_event = {
	id = Events_GAPS_Drone_Replicators.32
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = Country_Type_GAPS_replicated_drone
		#FROMFROM = { is_ship_size = ancient_mining_drone }
	}

	immediate = {
		if = {
			limit = { FROMFROM = { is_ship_size = ancient_mining_drone } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Mining_Drones" value = 1 } } }
		}
		else_if = {
			limit = { FROMFROM = { is_ship_size = ancient_corvette } }
			FromFrom = { solar_system = { subtract_variable = { which = "GAPS_Number_Of_Combat_Drones" value = 1 } } }
		}
	}
}
