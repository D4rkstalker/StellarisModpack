namespace = Events_GAPS_Preservers

country_event = {
	id = Events_GAPS_Preservers.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { has_civic = Civic_GAPS_Preservers }
	}
	immediate = {
		set_country_flag = Country_Flag_GAPS_I_am_Preservers
		every_owned_planet = {
			limit = { is_capital = yes }
			if = { limit = { NOT = { has_deposit = d_GAPS_Preserver_Homeworld } } add_deposit = d_GAPS_Preserver_Homeworld }
			set_planet_flag = Planet_Flag_GaPS_Preserver_HomeWorld@root
		}
		owner = { country_event = { id = Events_GAPS_Preservers.12 days = 1 } }
		#add_research_option = tech_planetary_unification
	}
}

#reevaluate all systems
country_event = {
	id = Events_GAPS_Preservers.12
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_civic = Civic_GAPS_Preservers
	}
	immediate = {
		owner = { country_event = { id = Events_GAPS_Preservers.12 days = 30 } }
		set_variable = { which = "Country_Variable_GAPS_Number_Of_Preservable_Planets" value = 0 }
		set_variable = { which = "Country_Variable_GAPS_Number_Of_Preservable_Gaia_Planets" value = 0 }
		every_owned_planet = {
			limit = { has_planet_flag = Planet_Flag_GaPS_Preserver_HomeWorld@root }
			if = { limit = { NOT = { has_deposit = d_GAPS_Preserver_Homeworld } } add_deposit = d_GAPS_Preserver_Homeworld }
			save_event_target_as = Planet_Target_GAPS_Preserver_Homeworld
		}
		event_target:Planet_Target_GAPS_Preserver_Homeworld = {
			if = { limit = { NOT = { has_deposit = d_GAPS_Preserver_Homeworld } } add_deposit = d_GAPS_Preserver_Homeworld }
			while = {
				limit = { has_deposit = d_GAPS_Num_Uncolonized_Planets_In_Borders }
				remove_deposit = d_GAPS_Num_Uncolonized_Planets_In_Borders
			}
			while = {
				limit = { has_deposit = d_GAPS_Num_Uncolonized_Gaia_Worlds_In_Borders }
				remove_deposit = d_GAPS_Num_Uncolonized_Gaia_Worlds_In_Borders
			}
			while = {
				limit = { has_deposit = d_GAPS_Num_Uncolonized_Shielded_Worlds_In_Borders }
				remove_deposit = d_GAPS_Num_Uncolonized_Shielded_Worlds_In_Borders
			}
		}
		every_system_within_border = {
			solar_system = { set_variable = { which = "System_Variable_GAPS_Number_Of_Preservable_Gaia_Planets" value = 0 } }
			solar_system = { set_variable = { which = "System_Variable_GAPS_Number_Of_Preservable_Planets" value = 0 } }
		}
		every_planet_within_border = {
			limit = { is_colonizable = yes is_colony = no NOR = { is_planet_class = pc_habitat is_planet_class = pc_ringworld_habitable } }
			if = {
				limit = { is_planet_class = pc_gaia is_terraformed = no }
				event_target:Planet_Target_GAPS_Preserver_Homeworld = {
					add_deposit = d_GAPS_Num_Uncolonized_Gaia_Worlds_In_Borders
				}
				solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Preservable_Gaia_Planets" value = 1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Number_Of_Preservable_Gaia_Planets" value = 1 } }
			}
			else = {
				event_target:Planet_Target_GAPS_Preserver_Homeworld = {
					add_deposit = d_GAPS_Num_Uncolonized_Planets_In_Borders
				}
				solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Preservable_Planets" value = 1 } }
				root = { change_variable = { which = "Country_Variable_GAPS_Number_Of_Preservable_Planets" value = 1 } }
			}
		}
	}
}

planet_event = {
	id = Events_GAPS_Preservers.13
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_deposit = d_GAPS_Preserver_Homeworld
		add_deposit = d_GAPS_Preserver_Homeworld
		owner = { country_event = { id = Events_GAPS_Preservers.1 days = 1 } }
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
#ON SYSTEM GAINED/ON SYSTEM LOST
country_event = {
	id = Events_GAPS_Preservers.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		This = { has_civic = Civic_GAPS_Preservers }
	}
	immediate = {
		country_event = { id = Events_GAPS_Preservers.12 days = 0 }
	}
}



# Finished
#ON OUTPOST BUILT
ship_event = {
	id = Events_GAPS_Preservers.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_civic = Civic_GAPS_Preservers
		}
	}

	immediate = {
		owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
#SHIP DIES
country_event = {
	id = Events_GAPS_Preservers.4
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { has_civic = Civic_GAPS_Preservers }
		FROMFROM = { OR = { is_ship_size = starbase_outpost is_ship_size = starbase_starport is_ship_size = starbase_starhold is_ship_size = starbase_starfortress is_ship_size = starbase_citadel } }
	}

	immediate = {
		owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}

# A planet has been colonized.
# Scope = Planet
#ON COLONIZED/ON COLONY DESTROYED
planet_event = {
	id = Events_GAPS_Preservers.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { has_civic = Civic_GAPS_Preservers }
	}

	immediate = {
		owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}

# Scope:
# this/root = planet that have been fired upon
# from = fleet that fired
# PLANET_KILLER_CRACKER/PLANET_KILLER_SHIELDER
planet_event = {
	id = Events_GAPS_Preservers.6
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_civic = Civic_GAPS_Preservers }
		root = { OR = { is_colonizable = yes is_colony = yes } }
	}

	immediate = {
		solar_system.owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}
# Scope:
# this/root = planet that have been fired upon
# from = fleet that fired
# PLANET_KILLER_NEUTRON/PLANET_KILLER_GODRAY
planet_event = {
	id = Events_GAPS_Preservers.7
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_civic = Civic_GAPS_Preservers }
		root = { is_colonizable = yes is_colony = yes }
	}

	immediate = {
		solar_system.owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}

# MOVE POP
planet_event = {
	id = Events_GAPS_Preservers.8
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_civic = Civic_GAPS_Preservers }
		root = { is_colonizable = yes is_colony = yes }
	}

	immediate = {
		owner = {
			every_owned_planet = {
				limit = { has_planet_flag = Planet_Flag_GaPS_Preserver_HomeWorld@root }
				save_event_target_as = Planet_Target_GAPS_Preserver_Homeworld
			}
		}

		random_pop = {
			save_event_target_as = Event_Target_GAPS_Pop_To_Move
		}

		resettle_pop = { pop = event_target:Event_Target_GAPS_Pop_To_Move planet = event_target:Planet_Target_GAPS_Preserver_Homeworld }
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
#ON TERRAFORMED
planet_event = {
	id = Events_GAPS_Preservers.9
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		From = { has_civic = Civic_GAPS_Preservers }
	}

	immediate = {
		From = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
#ON PLANET TRANSFER
planet_event = {
	id = Events_GAPS_Preservers.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system.owner = { has_civic = Civic_GAPS_Preservers }
	}

	immediate = {
		solar_system.owner = { country_event = { id = Events_GAPS_Preservers.12 days = 0 } }
	}
}
