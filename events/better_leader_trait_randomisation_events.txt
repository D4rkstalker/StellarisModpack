namespace = better_leader_trait_randomization

# marks the science ship's leader as having recently conducted a survey
ship_event = {
	id = better_leader_trait_randomization.20
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_ship_class = shipclass_science_ship
		exists = fleet
		exists = fleet.leader
		fleet.leader = { leader_class = scientist }
	}
	immediate = {
		fleet.leader = {
			set_timed_leader_flag = {
				flag = was_recently_surveying
				days = 7
			}
		}
	}
}

# marks the science ship's leader as having recently conducted archeaology
fleet_event = {
	id = better_leader_trait_randomization.21
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = leader
		leader = { leader_class = scientist }
	}
	immediate = {
		leader = {
			set_timed_leader_flag = {
				flag = was_recently_excavating
				days = 7
			}
		}
	}
}

# fired by on_leader_spawned and on_ruler_back_to_pre_ruler_class (better_leader_trait_randomization.51, below)
country_event = {
	id = better_leader_trait_randomization.50
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
	}
	immediate = {
		FROM = {
			# this does NOT fire the on_action because these leaders haven't changed, but we still want to check
			# their species traits just in case they rolled trait(s) that don't follow the new rules
			ensure_appropriate_leader_traits = yes
		}
	}
}

# fired by on_ruler_back_to_pre_ruler_class
country_event = {
	id = better_leader_trait_randomization.51
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
	}
	immediate = {
		FROM = {
			ensure_appropriate_leader_traits_demoted_ruler = yes
		}
		country_event = {
			id = better_leader_trait_randomization.50
			scopes = {
				from = FROM
			}
		}
	}
}

# fired by on_modification_complete - every leader of the modified species could have been changed
# fires on_leader_species_changed for each (potentially) modified leader
country_event = {
	id = better_leader_trait_randomization.60
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
	}
	immediate = {
		every_owned_leader = {
			limit = { is_exact_same_species = FROM }
			fire_on_action = { on_action = on_leader_species_changed }
		}
	}
}

# fired by on_leader_species_changed and on_leader_owner_changed
# event to adjust a leader's traits whenever their species was set or changed, or their owner changed
leader_event = {
	id = better_leader_trait_randomization.70
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		ensure_appropriate_leader_traits = yes
	}
}