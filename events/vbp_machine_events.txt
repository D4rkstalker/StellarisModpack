namespace = vbp_machine

#Test event

country_event = {
	id = vbp_machine.9999
	
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		set_global_flag = vbp_machine_testing
	}
}

###############
#  ON ACTION  #
###############

#On survey
ship_event = {
	id = vbp_machine.100
	title = vbp_machine.100.name
	desc = vbp_machine.100.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_machine_sapience
	location = FROM
	
	trigger = {
		FROM = {
			exists = owner
			owner = { is_country_type = vbp_machine }
		}
	}
	
	immediate = {
		owner = { save_event_target_as = ship_owner }
		FROM = {
			owner = {
				establish_contact = { who = event_target:ship_owner }
				establish_communications = event_target:ship_owner
				save_event_target_as = primitive_civ
			}
		}
	}
	
	option = {
		name = INTERESTING
		
		hidden_effect = {
			owner = {
				country_event = { id = vbp_machine.101 days = 30 }
			}
		}
	}
}

#News event: Will we ever see it naturally?
country_event = {
	id = vbp_machine.101
	title = vbp_machine.101.name
	
	# First
	desc = {
		trigger = { NOT = { has_country_flag = StoryFirst } }
		text = vbp_machine.101.desc
	}
	# Gestalt Consciousness
	desc = {
		trigger = { has_ethic = ethic_gestalt_consciousness }
		text = vbp_machine.101.desc.gesta
	}	
	# Xenophobe
	desc = {
		trigger = { OR = { has_ethic = ethic_fanatic_xenophobe has_ethic = ethic_xenophobe } }
		text = vbp_machine.101.desc.phobe
	}
	# Xenophile
	desc = {
		trigger = { OR = { has_ethic = ethic_fanatic_xenophile has_ethic = ethic_xenophile } }
		text = vbp_machine.101.desc.phile
	}
	# Followup 5
	desc = {
		trigger = { has_country_flag = Story5 }
		text = vbp_machine.101.desc.followup5
	}
	# Followup 1-2-3
	desc = {
		text = vbp_machine.101.desc.followup123
		trigger = {
			OR = {
				has_country_flag = Story1
				has_country_flag = Story2
			}
		}
	}
	
	trigger = {
		NOR = {
			has_country_flag = Story6
			has_country_flag = Story7
			has_country_flag = vbp_machine_story
		}
	}
	
	is_triggered_only = yes
	
	picture = GFX_evt_news_room
	show_sound = event_scanner
	
	immediate = {
		if = {
			limit = { NOT = { has_country_flag = StoryFirst } }
			set_country_flag = StoryFirst
		}
		if = {
			limit = { NOT = { has_country_flag = first_alien_life } }
			set_country_flag = first_alien_life
		}
		set_country_flag = vbp_machine_story
	}
	
	option = {
		name = OK
	}
}

# Robot planet found by trading Star Charts
planet_event = {
	id = vbp_machine.102
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		exists = owner
		NOT = { exists = fromfrom }
		owner = { is_country_type = vbp_machine }
	}
	
	immediate = {
		from = {
			establish_communications_no_message = root.owner
		}
	}
}


#Scheduling creation of special systems. Just in case, create Sol on second day, as probability is written under this assumption.
# event = {
# 	id = vbp_machine.150
	
# 	hide_window = yes
	
# 	is_triggered_only = yes
	
# 	trigger = {
# 		host_has_dlc = "Synthetic Dawn Story Pack"
# 		# NOT = { 
# 			# any_system = { has_star_flag = sol }
# 		# }
# 	}
	
# 	immediate = {
# 		random_system = {
# 			limit = { NOT = { exists = space_owner } }
# 			random_system_planet = { planet_event = { id = vbp_machine.151 days = 1 } }
# 		}
# 		random_system = {
# 			limit = { NOT = { exists = space_owner } }
# 			random_list = {
# 				80 = {  }
# 				20 = { spawn_system = { initializer = "vbp_machine_ring" } }
# 			}
# 		}
# 		IF = {
# 			limit = { 
# 				NOT = { any_system = { has_star_flag = deneb_system } }
# 			}
# 			random_system = {
# 				limit = { NOT = { exists = space_owner } }
# 				random_system_planet = {
# 					random_list = {
# 						70 = {  }
# 						30 = { planet_event = { id = vbp_machine.152 days = 2 } }
# 					}
# 				}
# 			}
# 		}
# 	}
# }

#spawner
# planet_event = {
# 	id = vbp_machine.151
	
# 	hide_window = yes
	
# 	is_triggered_only = yes
	
# 	trigger = {
# 		host_has_dlc = "Synthetic Dawn Story Pack"
# 		NOT = { 
# 			any_system = { has_star_flag = sol }
# 		}
# 	}
	
# 	immediate = {
# 		random_list = {
# 			50 = { 
# 				modifier = {
# 					add = 50
# 					has_global_flag = vbph_spawn_scheduled
# 				}
# 				modifier = {
# 					add = 50
# 					has_global_flag = vb_tomb_scheduled
# 				}
# 			}
# 			50 = { spawn_system = { initializer = "vbp_machine_sol" } }
# 		}
# 	}
# }

planet_event = {
	id = vbp_machine.152
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		host_has_dlc = "Synthetic Dawn Story Pack"
		NOT = {
			any_system = { has_star_flag = deneb_system }
		}
		any_system = { 
				has_star_flag = sol 
				NOT = { has_star_flag = primitive_sol }
		}
	}
	
	immediate = {
		spawn_system = { initializer = "vbp_machine_deneb" }
	}
}



#########################
#Natural  outcome  block#
#########################

#Space age
country_event = {
	id = vbp_machine.200
	
	hide_window = yes
	
	trigger = {
		is_country_type = vbp_machine
		OR = {
			years_passed >= 25
			has_global_flag = vbp_machine_testing
			exists = from
		}
	}
	
	mean_time_to_happen = {
		years = 100
		
		# modifier = {
		# 	factor = 0.01
		# 	has_global_flag = vbp_machine_testing
		# }
		
		modifier = {
			factor = 0.8
			has_country_flag = vbp_machine_angered
		}
	}
	
	immediate = {
		remove_country_flag = vbp_primitive_robots
		set_country_flag = primitives_can_into_space
		set_country_type = default
		IF = {
            limit = { 
                OR = {
                    AND = {
                        has_country_flag = vbp_machine_angered 
                        NOT = { exists = from } 
                    }
                    AND = {
                        exists = FROM
                        FROM = { has_civic = civic_machine_terminator }
                    }
                }
            }
            change_government = {
                civics = {
                    civic = civic_machine_terminator
                    civic = random
                }
            }
        }
        else = {
            change_government = {
                civics = random
            }
            while = { #Reroll civics terminator vassals not allowed
                limit = {
                    exists = from
                    FROM = { NOT = { has_civic = civic_machine_terminator } }
                    has_civic = civic_machine_terminator
                }
                change_government = {
                    civics = random
                }
            }
        }
		change_country_flag = random
		add_resource = {
            minerals = 1000
            energy = 500
        }
		set_name = random
		remove_country_flag = day_0
		
		capital_scope = {
			IF = {
				limit = { has_observation_outpost = yes }
				observation_outpost_owner = { country_event = { id = vbp_machine.201 } }
				observation_outpost = { dismantle = yes }
            }
            remove_all_buildings = yes
            remove_all_armies = yes
            add_district = district_nexus
            add_district = district_nexus
            add_district = district_nexus
            add_district = district_mining
            add_district = district_mining
            add_district = district_generator
            add_district = district_generator
            add_district = district_generator
            add_district = district_generator
            add_district = district_generator
            add_building = building_machine_capital	
            add_building = building_maintenance_depot
            add_building = building_research_lab_1
            add_building = building_foundry_1
            add_building = building_machine_assembly_plant
            while = {
                count = 3
                create_pop = { species = root }
            }
			solar_system = {
				if = {
					limit = {
						NOT = { exists = starbase }
					}
					create_starbase = {
						size = starbase_outpost
						owner = root
					}
				}
				else = {
					if = {
						limit = {
							starbase = {
								NOT = { owner = { is_same_value = root } }
							}								
						}	
						starbase = {
							owner = { country_event = { id = primitive.180 days = 10 } }
						}								
					}
				}
			}
		}
	}
}

#Player is notified
country_event = {
	id = vbp_machine.201
	title = vbp_machine.201.name
	desc = vbp_machine.201.desc
	
	picture = GFX_evt_machine_sapience
	location = from
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
	}
}

#Self-destruction
country_event = {
	id = vbp_machine.210
	
	hide_window = yes
	
	mean_time_to_happen = {
		years = 200
		
		modifier = {
			factor = 0.01
			has_global_flag = vbp_machine_testing
		}
		
		modifier = {
			factor = 0.6
			capital_scope = {
				IF = {
					limit = {has_observation_outpost = yes }
					observation_outpost = {
						OR = {
							has_mission = vbp_machine_repurpose
							has_mission = vbp_machine_framework_upgrade
						}
					}
				}
			}
		}
		
		modifier = {
			factor = 0.8
			has_country_flag = vbp_machine_angered
		}
	}
	
	trigger = {
		is_country_type = vbp_machine
	}
	
	immediate = {
		capital_scope = {
			save_event_target_as = robot_planet
			IF = {
				limit = { has_observation_outpost = yes }
				observation_outpost_owner = {
					random_list = {
						33 = { country_event = { id = vbp_machine.211 } }
						33 = { country_event = { id = vbp_machine.212 } }
						33 = { country_event = { id = vbp_machine.213 } }
					}
				}
			}
			destroy_colony = yes
			vbp_machine_clear_mods = yes
		}
	}
}

#Overflow
country_event = {
	id = vbp_machine.211
	title = vbp_machine.211.name
	desc = vbp_machine.211.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	option = {
		name = vbp_machine.211.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		event_target:robot_planet = {
			add_modifier = {
				modifier = vbp_robot_graveyard
				days = -1
			}
		}
	}
}

#Does this unit have a soul?
country_event = {
	id = vbp_machine.212
	title = vbp_machine.212.name
	desc = vbp_machine.212.desc
	
	picture = GFX_evt_burning_settlement
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	option = {
		name = vbp_machine.211.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		event_target:robot_planet = {
			add_modifier = {
				modifier = vbp_robot_graveyard
				days = -1
			}
		}
	}
}

#Wear and tear
country_event = {
	id = vbp_machine.213
	title = vbp_machine.213.name
	desc = vbp_machine.213.desc
	
	picture = GFX_evt_robot_assembly_plant
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	option = {
		name = vbp_machine.211.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
		event_target:robot_planet = {
			add_modifier = {
				modifier = vbp_robot_graveyard
				days = -1
			}
		}
	}
}

#######################
#ACTIVE STUDIES EVENTS#
#######################

#Robots are mad at your agression
country_event = {
	id = vbp_machine.300
	
	hide_window = yes
	
	mean_time_to_happen = {
		months = 180
		
		modifier = {
			factor = 0.2
			
			capital_scope = {
				has_observation_outpost = yes
				observation_outpost = { has_mission = vbp_machine_salvage_components }
			}
		}
	}
	
	trigger = {
		is_country_type = vbp_machine
		NOT = { has_country_flag = vbp_machine_angered }
		capital_scope = {
			has_observation_outpost = yes
			observation_outpost = {
				OR = {
					has_mission = vbp_machine_specimen_collection
					has_mission = vbp_machine_salvage_components
				}
			}
		}
	}
	
	immediate = {
		set_country_flag = vbp_machine_angered
		
		capital_scope = {
			add_modifier = {
				modifier = vbp_angered_machines
				days = -1
			}
			observation_outpost_owner = {
				country_event = { id = vbp_machine.301 }
			}
		}
	}
}

#Player is notified that robots are mad at him
country_event = {
	id = vbp_machine.301
	title = vbp_machine.301.name
	desc = vbp_machine.301.desc
	
	picture = GFX_evt_sapient_AI
	location = from.capital_scope
	
	is_triggered_only = yes
	
	option = {
		name = UNFORTUNATE
	}
	
}

#Abducting leader
country_event = {
	id = vbp_machine.310
	
	hide_window = yes
	
	mean_time_to_happen = {
		months = 800
		
		modifier = {
			factor = 0.01
			has_global_flag = vbp_machine_testing
		}
	}
	
	trigger = {
		
		is_country_type = vbp_machine
		NOT = { has_country_flag = vbp_machine_gave_away_drone }
		
		capital_scope = {
			has_observation_outpost = yes
			observation_outpost = { has_mission = vbp_machine_specimen_collection }
			observation_outpost_owner = { 
				NOR = { 
					has_country_flag = vbp_machine_offered_leader 
					has_authority = auth_hive_mind
				} 
			}
		}
		
	}
	
	immediate = {
		capital_scope = { save_event_target_as = robot_planet }
	
		save_event_target_as = robot_country
		owner_species = { save_event_target_as = robots }
		set_country_flag = vbp_machine_gave_away_drone
		
		capital_scope = {
			observation_outpost_owner = { country_event = { id = vbp_machine.311 }  }
		}
	}
}

#Player is offered to abduct a robot
country_event = {
	id = vbp_machine.311
	title = vbp_machine.311.name
	desc = vbp_machine.311.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
    is_triggered_only = yes
    
    immediate = {
        set_country_flag = vbp_machine_offered_leader
    }
	
	option = {
		name = vbp_machine.311.a
		
		enable_special_project = {
			name = "VBP_ABDUCTION_PROJECT"
			location = event_target:robot_planet
			owner = root
		}
	}
	
	option = {
		name = NOTIME
		
		add_resource = {
            influence = 50
        }
	}
	
}

#Success: Governor
ship_event = {
	id = vbp_machine.312
	title = vbp_machine.312.name
	desc = vbp_machine.312.desc
	
	picture = GFX_evt_cybernetics
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		
		hidden_effect = {
			owner = {
				create_leader = {
					class = governor
					species = event_target:robots
					name = random
					skill = 3
					event_leader = yes
				}
				last_created_leader = {
					add_trait = leader_trait_architectural_interest
					set_age = 1
				}
			}
		}
	}
}

#Success: Scientist
ship_event = {
	id = vbp_machine.313
	title = vbp_machine.312.name
	desc = vbp_machine.313.desc
	
	picture = GFX_evt_cybernetics
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		
		hidden_effect = {
			owner = {
				create_leader = {
					class = scientist
					species = event_target:robots
					name = random
					skill = 1
					event_leader = yes
				}
				last_created_leader = {
					add_trait = leader_trait_meticulous
					set_age = 1
				}
			}
		}
	}
}

#Success: Admiral
ship_event = {
	id = vbp_machine.314
	title = vbp_machine.312.name
	desc = vbp_machine.314.desc
	
	picture = GFX_evt_cybernetics
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		
		hidden_effect = {
			owner = {
				create_leader = {
					class = general
					species = event_target:robots
					name = random
					skill = 1
					event_leader = yes
				}
				last_created_leader = {
					add_experience = 500
					add_trait = leader_trait_fleet_logistician
					set_age = 1
				}
			}
		}
	}
}

#Success: General
ship_event = {
	id = vbp_machine.315
	title = vbp_machine.312.name
	desc = vbp_machine.315.desc
	
	picture = GFX_evt_cybernetics
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		
		hidden_effect = {
			owner = {
				create_leader = {
					class = general
					species = event_target:robots
					name = random
					skill = 1
					event_leader = yes
				}
				last_created_leader = {
					add_trait = leader_trait_butcher
					set_age = 1
				}
			}
		}
	}
}

#Failure
ship_event = {
	id = vbp_machine.316
	title = vbp_machine.316.name
	desc = vbp_machine.316.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = UNFORTUNATE
	}
}

#Out of time
country_event = {
	id = vbp_machine.317
	title = vbp_machine.317.name
	desc = vbp_machine.317.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	option = {
		name = UNFORTUNATE
	}
}

#Excursion

#Initiate excusrion. I'll let AI trigger it, for now. Not sure it could manage though.
# planet_event = {
	# id = vbp_machine.320
	
	# hide_window = yes
	
	# trigger = {
		# always = no
		# NOT = { has_planet_flag = vbp_machine_special_planet }
		# has_owner = yes
		# owner = { 
			# is_country_type = vbp_machine_country 
			# NOT = { has_country_flag = vbph_excursion }
		# }
		# has_observation_outpost = yes
		# observation_outpost = {
			# OR = {
				# has_mission = vbp_machine_passive_observation
				# has_mission = vbp_machine_specimen_collection
			# }
		# }
		# observation_outpost_owner = {
			# check_variable = {
				# which = vbp_machine_excursion_counter
				# value < 2
			# }
		# }
	# }
	
	# mean_time_to_happen = {
		# months = 3000
		
		# modifier = {
			# factor = 5
			# observation_outpost_owner = { is_ai = yes }
		# }
		
		# modifier = {
			# factor = 0.8
			# observation_outpost = { has_mission = vbp_machine_specimen_collection }
		# }
	# }
	
	# immediate = {
		# save_event_target_as = robot_planet
		# owner = {
			# set_country_flag = vbph_excursion
			# save_event_target_as = robot_country
		# }
		# observation_outpost_owner = {
			# change_variable = {
				# which = vbp_machine_excursion_counter
				# value = 1
			# }
			# country_event = { id = vbp_machine.321 }
		# }
	# }
# }

# #Player receives an offer of special project
# country_event = {
	# id = vbp_machine.321
	# title = vbp_machine.321.name
	# desc = vbp_machine.321.desc
	
	# picture = GFX_evt_city_ruins
	# location = event_target:robot_planet
	
	# is_triggered_only = yes
	
	# option = {
		# name = vbp_machine.321.a
		
		# enable_special_project = {
			# name = "vbp_machine_EXCURSION_PROJECT"
			# location = event_target:robot_planet
			# owner = root
		# }
	# }
	
	# option = {
		# name = NOTIME
		# custom_tooltip = vbp_machine.321.b.tooltip
		
		# add_influence = 30
	# }

# }

# #Project success. Leads further to more events
# ship_event = {
	# id = vbp_machine.322
	
	# hide_window = yes
	
	# is_triggered_only = yes
	
	# immediate = {
		# random_list = {
			# 1 = {
				# owner = { country_event = { id = vbp_machine.323 } } #Found life pod
				# modifier = {
					# factor = 0
					# owner = { has_country_flag = vbp_machine_found_pod }
				# }
			# }
			# 1 = {
				# owner = { country_event = { id = vbp_machine.329 } } #Failure
			# }
		# }
	# }
# }

# #Found life pod
# country_event = {
	# id = vbp_machine.323
	# title = vbp_machine.323.name
	# desc = vbp_machine.323.desc
	
	# picture = GFX_evt_city_ruins
	# location = event_target:robot_planet
	
	# is_triggered_only = yes
	
	# immediate = {
		# set_country_flag = vbp_machine_found_pod
	# }
	
	# option = {
		# name = vbp_machine.323.a
		
		# trigger = {
			# NOR = {
				# has_ethic = ethic_fanatic_xenophobe
				# has_civic = civic_fanatic_purifiers
				# has_civic = civic_machine_terminator
				# has_civic = civic_hive_devouring_swarm
			# }
		# }
		
		# allow = {
			# NOR = {
				# has_ethic = ethic_fanatic_xenophobe
				# has_civic = civic_fanatic_purifiers
				# has_civic = civic_machine_terminator
				# has_civic = civic_hive_devouring_swarm
			# }
		# }
		
		# hidden_effect = {
			# country_event = { id = vbp_machine.324 days = 30 }
		# }
	# }
	
	# option = {
		# name = vbp_machine.323.b
		
		# trigger = {
			# OR = {
				# has_ethic = ethic_xenophobe
				# has_ethic = ethic_fanatic_xenophobe
				# has_civic = civic_fanatic_purifiers
				# has_civic = civic_machine_terminator
				# has_civic = civic_hive_devouring_swarm
				# has_ethic = ethic_fanatic_materialist
				# NOR = {
					# has_ethic = ethic_egalitarian
					# has_ethic = ethic_fanatic_egalitarian
					# has_ethic = ethic_xenophile
					# has_ethic = ethic_fanatic_xenophile
				# }
			# }
		# }
		
		# allow = {
			# OR = {
				# has_ethic = ethic_xenophobe
				# has_ethic = ethic_fanatic_xenophobe
				# has_civic = civic_fanatic_purifiers
				# has_civic = civic_machine_terminator
				# has_civic = civic_hive_devouring_swarm
				# has_ethic = ethic_fanatic_materialist
				# NOR = {
					# has_ethic = ethic_egalitarian
					# has_ethic = ethic_fanatic_egalitarian
					# has_ethic = ethic_xenophile
					# has_ethic = ethic_fanatic_xenophile
					# has_civic = civic_machine_servitor
				# }
			# }
		# }
		
		# add_monthly_resource_mult = {
			# resource = society_research
			# value = @tier2researchreward
			# min = @tier2researchmin
			# max = @tier2researchmax
		# }
		# add_monthly_resource_mult = {
			# resource = engineering_research
			# value = @tier2researchreward
			# min = @tier2researchmin
			# max = @tier2researchmax
		# }
	# }
# }

# #Life pod opener chooser
# country_event = {
	# id = vbp_machine.324
	
	# hide_window = yes
	
	# is_triggered_only = yes
	
	# immediate = {
		# # IF = {
			# # limit = { has_civic = civic_machine_servitor }
			# # country_event = { id = vbp_machine.3241 }
			# # break = yes
		# # }
		# # IF = {
			# # limit = { has_civic = civic_machine_assimilator }
			# # country_event = { id = vbp_machine.3242 }
			# # break = yes
		# # }
		# # IF = {
			# # limit = { has_authority = auth_hive_mind }
			# # country_event = { id = vbp_machine.3243 }
			# # break = yes
		# # }
		# # IF = {
			# # limit = { has_authority = auth_machine_intelligence }
			# # country_event = { id = vbp_machine.3244 }
			# # break = yes
		# # }
		# # country_event = { id = vbp_machine.3240 }
	# }
# }

##################
#OVERFISHING LOOP#
##################

#When being salvaged, kill a pop once in a while
event = {
	id = vbp_machine.400
	
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		every_country = {
			limit = {
				is_country_type = vbp_machine
			}
			every_owned_planet = {
				limit = {
					has_observation_outpost = yes
					observation_outpost = { has_mission = vbp_machine_salvage_components }
				}
				change_variable = {
					which = vbp_machine_salvage_counter
					value = 1
				}
				IF = {
					limit = {
						check_variable = {
							which = vbp_machine_salvage_counter
							value > 9
						}
					}
					set_variable = {
						which = vbp_machine_salvage_counter
						value = 0
					}
					save_event_target_as = robot_planet
					random_owned_pop = { kill_pop = yes }
					IF = {
						limit = { num_pops = 0 }
						vbp_machine_clear_mods = yes
						observation_outpost_owner = {
							country_event = { id = vbp_machine.401 }
						}
					}
				}
			}
		}
	}
}

#All robots are dead
country_event = {
	id = vbp_machine.401
	title = vbp_machine.401.name
	desc = vbp_machine.401.desc
	
	picture = GFX_evt_satellite_in_orbit
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	immediate = {
		every_country = {
			limit = { 
				has_communications = root 
				OR = {
					has_authority = auth_machine_intelligence
					has_policy_flag = ai_full_rights
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_destroyed_negative }
		}
		every_country = {
			limit = {
				has_communications = root
				NOT = { has_policy_flag = ai_full_rights }
				OR = {
					has_policy_flag = robots_outlawed
					has_ethic = ethic_spiritualist
					has_ethic = ethic_fanatic_spiritualist
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_destroyed_positive }
		}
	}
	
	option = {
		name = OK
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	option = {
		name = vbp_machine.401.a.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
}

#####################
#INFILTRATION EVENTS#
#####################

#Successful uplift disambig - FROMFROM - primitive planet
country_event = {
	id = vbp_machine.500
	
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		FROMFROM = {
			save_event_target_as = robot_planet
			owner = { 
				save_event_target_as = robot_species 
				save_event_target_as = robot_country 
				set_country_flag = vbp_machine_uplifted 
			}
			vbp_machine_clear_mods = yes
			observation_outpost = { dismantle = yes }
		}
		IF = {
			limit = { has_authority = auth_machine_intelligence }
			country_event = { id = vbp_machine.501 }
			break = yes
		}
		IF = {
			limit = {
				NOT = { has_authority = auth_machine_intelligence }
				NOT = { has_technology = tech_synthetic_workers }
			}
			country_event = { id = vbp_machine.502 }
			break = yes
		}
		IF = {
			limit = {
				NOT = { has_authority = auth_machine_intelligence }
				has_technology = tech_synthetic_workers
			}
			country_event = { id = vbp_machine.503 }
			break = yes
		}
	}
}

#Machines took control
country_event = {
	id = vbp_machine.501
	title = vbp_machine.501.name
	desc = vbp_machine.501.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	# option = {
		# name = vbp_machine.501.a
		# custom_tooltip = vbp_machine.501.a.tooltip
		
		# allow = {
			# influence > 99
		# }
		
		# add_influence = -100
		
		# hidden_effect = {
			# event_target:robot_country = {
				# change_government = {
					# civics = root
				# }
				# set_global_flag = vbp_machine_took_after_us
			# }
		# }
	# }
	
	option = {
		name = vbp_machine.501.b
		custom_tooltip = vbp_machine.501.b.tooltip
	}
	
	after = {
		event_target:robot_planet = {
			IF = { 
				limit =  { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
			solar_system = {
				if = {
					limit = {
						starbase = { owner = { is_same_value = root } }
					}
					starbase = {
						set_owner = event_target:robot_country
					}						
				}
				every_system_planet = {
					limit = {
						exists = owner
						owner = { is_same_value = root }
					}
					set_owner = event_target:robot_country			
				}
			}
		}
		
		event_target:robot_country = {
			country_event = { id = vbp_machine.200 }
			if = {
				limit = {
					root = { is_country_type = default }
				}
				if = {
					limit = {
						root = { has_valid_civic = "civic_inwards_perfection" }
					}
					set_subject_of = {
						who = root
						subject_type = tributary
					}
				}	
				else = {
					set_subject_of = {
						who = root
						subject_type = protectorate
					}						
				}			
			}
			if = {
				limit = {
					root = { is_country_type = awakened_fallen_empire }
				}
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophobe
						}
					}
					set_subject_of = {
						who = root
						subject_type = thrall
					}		
				}	
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophile
						}
					}
					set_subject_of = {
						who = root
						subject_type = signatory
					}		
				}			
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					set_subject_of = {
						who = root
						subject_type = dominion
					}		
				}		
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_materialist
						}
					}
					set_subject_of = {
						who = root
						subject_type = satellite
					}		
				}				
			}
		}
	}
}

#Non-machine, does not have synths
country_event = {
	id = vbp_machine.502
	title = vbp_machine.502.name
	desc = vbp_machine.502.desc
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	immediate = {
		event_target:robot_planet = {
			IF = {
				limit = { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
			solar_system = {
				if = {
					limit = {
						starbase = { owner = { is_same_value = root } }
					}
					starbase = {
						set_owner = event_target:robot_country
					}						
				}
				every_system_planet = {
					limit = {
						exists = owner
						owner = { is_same_value = root }
					}
					set_owner = event_target:robot_country			
				}
			}
		}
		event_target:robot_country = {
			country_event = { id = vbp_machine.200 }
			if = {
				limit = {
					root = { is_country_type = default }
				}
				if = {
					limit = {
						root = { has_valid_civic = "civic_inwards_perfection" }
					}
					set_subject_of = {
						who = root
						subject_type = tributary
					}
				}	
				else = {
					set_subject_of = {
						who = root
						subject_type = protectorate
					}						
				}			
			}
			if = {
				limit = {
					root = { is_country_type = awakened_fallen_empire }
				}
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophobe
						}
					}
					set_subject_of = {
						who = root
						subject_type = thrall
					}		
				}	
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophile
						}
					}
					set_subject_of = {
						who = root
						subject_type = signatory
					}		
				}			
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					set_subject_of = {
						who = root
						subject_type = dominion
					}		
				}		
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_materialist
						}
					}
					set_subject_of = {
						who = root
						subject_type = satellite
					}		
				}				
			}
		}
	}
	
	option = {
		name = EXCELLENT
	}
}

#Empire with access to synths
country_event = {
	id = vbp_machine.503
	title = vbp_machine.503.name
	desc = vbp_machine.503.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_sapient_AI
	location = event_target:robot_planet
	
	option = {
		name = vbp_machine.503.a
		custom_tooltip = vbp_machine.503.a.tooltip
		
		event_target:robot_planet = {
			IF = {
				limit = { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
		}
		event_target:robot_country = {
			country_event = { id = vbp_machine.200 }
			if = {
				limit = {
					root = { is_country_type = default }
				}
				if = {
					limit = {
						root = { has_valid_civic = "civic_inwards_perfection" }
					}
					set_subject_of = {
						who = root
						subject_type = tributary
					}
				}
				else = {
					set_subject_of = {
						who = root
						subject_type = protectorate
					}						
				}				
			}
			if = {
				limit = {
					root = { is_country_type = awakened_fallen_empire }
				}
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophobe
						}
					}
					set_subject_of = {
						who = root
						subject_type = thrall
					}		
				}	
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_xenophile
						}
					}
					set_subject_of = {
						who = root
						subject_type = signatory
					}		
				}			
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_spiritualist
						}
					}
					set_subject_of = {
						who = root
						subject_type = dominion
					}		
				}		
				if = {
					limit = { 
						root = { 
							has_ethic = ethic_fanatic_materialist
						}
					}
					set_subject_of = {
						who = root
						subject_type = satellite
					}		
				}				
			}
		}
	}
	
	option = {
		name = vbp_machine.503.b
		custom_tooltip = vbp_machine.503.b.tooltip
		
		hidden_effect = {
			# create_species = {
				# # name = event_target:robot_species
				# # plural = event_target:robot_species
				# class = ROBOT
				# portrait = event_target:robot_species
				# traits = event_target:robot_species
			# }
			event_target:robot_country = {
				random_owned_pop = {
					create_species = {
						is_mod = yes
						name = this
						namelist = AI
						plural = this
						class = "ROBOT"
						portrait = this.species
						traits = {
							trait = "trait_mechanical"
						}
						traits = this
						
						pops_can_be_colonizers = yes
						pops_can_migrate = yes
						pops_can_reproduce = no
						pops_can_join_factions = yes
						pop_maintenance = 1
						can_generate_leaders = yes
						pops_can_be_slaves = yes
						pops_have_happiness = yes
					}
					modify_species = {
						species = last_created_species
						remove_trait = trait_machine_unit
					}
					change_species = last_created_species
					save_event_target_as = template_species
				}
			}
			create_country = {
				name = random
				flag = random
				ethos = root
				species = last_created_species
				type = default
				ignore_initial_colony_error = yes
				origin = origin_enlightened
			}
			last_created_country = {
				set_timed_country_flag = { flag = day_0 days = 1 }
				random_list = {
					1 = { set_graphical_culture = mammalian_01 }
					1 = { set_graphical_culture = reptilian_01 }
					1 = { set_graphical_culture = avian_01 }
					1 = { set_graphical_culture = molluscoid_01 }
					1 = { set_graphical_culture = fungoid_01 }
					1 = { set_graphical_culture = arthropoid_01 }
				}
				set_policy = {
					policy = appropriation
					option = appropriation_not_allowed
					cooldown = no
				}
				give_technology = { tech = tech_robotic_workers }
				give_technology = { tech = tech_droid_workers }
				give_technology = { tech = tech_synthetic_workers }
			}
			event_target:robot_planet = {
				set_owner = last_created_country
				# remove_modifier = land_appropriation
				every_owned_pop = {
					change_species = owner 
				}
				while = {
                    count = 3
                    create_pop = { species = owner }
                }
                remove_all_buildings = yes
                remove_all_armies = yes
                add_district = district_nexus
                add_district = district_nexus
                add_district = district_nexus
                add_district = district_mining
                add_district = district_mining
                add_district = district_generator
                add_district = district_generator
                add_district = district_generator
                add_district = district_generator
                add_district = district_generator
                add_building = building_machine_capital	
                add_building = building_maintenance_depot
                add_building = building_research_lab_1
                add_building = building_foundry_1
                add_building = building_machine_assembly_plant
                while = {
                    count = 3
                    create_pop = { species = root }
                }
			}
			last_created_country = {
				add_resource = {
                    minerals = 1000
                    energy = 500
                }
				if = {
					limit = {
						root = { is_country_type = default }
					}
					if = {
						limit = {
							root = { has_valid_civic = "civic_inwards_perfection" }
						}
						set_subject_of = {
							who = root
							subject_type = tributary
						}
					}
					else = {
						set_subject_of = {
							who = root
							subject_type = protectorate
						}						
					}				
				}
				if = {
					limit = {
						root = { is_country_type = awakened_fallen_empire }
					}
					if = {
						limit = { 
							root = { 
								has_ethic = ethic_fanatic_xenophobe
							}
						}
						set_subject_of = {
							who = root
							subject_type = thrall
						}		
					}	
					if = {
						limit = { 
							root = { 
								has_ethic = ethic_fanatic_xenophile
							}
						}
						set_subject_of = {
							who = root
							subject_type = signatory
						}		
					}			
					if = {
						limit = { 
							root = { 
								has_ethic = ethic_fanatic_spiritualist
							}
						}
						set_subject_of = {
							who = root
							subject_type = dominion
						}		
					}		
					if = {
						limit = { 
							root = { 
								has_ethic = ethic_fanatic_materialist
							}
						}
						set_subject_of = {
							who = root
							subject_type = satellite
						}		
					}				
				}
			}
		}
	}
	
	after = {
		hidden_effect = {
			event_target:robot_planet = {
				solar_system = {
					if = {
						limit = {
							starbase = { owner = { is_same_value = root } }
						}
						starbase = {
							set_owner = event_target:robot_country
						}						
					}
					every_system_planet = {
						limit = {
							exists = owner
							owner = { is_same_value = root }
						}
						set_owner = event_target:robot_country			
					}
				}
			}
		}
	}
}

country_event = {
	id = vbp_machine.510
	title = vbp_machine.510.name
	
	desc = {
		trigger = { has_authority = auth_machine_intelligence }
		text = vbp_machine.510.machine
	}
	
	desc = {
		trigger = { NOT = { has_authority = auth_machine_intelligence } }
		text = vbp_machine.510.normal
	}
	
	picture = GFX_evt_circuitry_modification
	location = FROM
	
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			save_event_target_as = robot_planet
			vbp_machine_clear_mods = yes
			owner = { save_event_target_as = robot_country }
			observation_outpost = { dismantle = yes }
						
			IF = {
				limit = {
					root = { has_authority = auth_machine_intelligence }
				}
				every_owned_pop = {
					limit = { is_same_species = event_target:robot_country }
					add_modifier = { modifier = vbp_protocol_conflict days = 1800 }
				}
			}
			else = {
				hidden_effect = {
                    random_owned_pop = {
                        create_species = {
							is_mod = yes
							name = this
							namelist = AI
							plural = this
							class = "ROBOT"
							portrait = this.species
							traits = {
								trait = "trait_mechanical"
							}
							traits = this
						}
                        change_species = last_created_species			
						modify_species = {
                            species = this
                            remove_trait = trait_machine_unit
                        }
                    }
					every_owned_pop = {
						limit = { is_same_species = event_target:robot_country }
						change_species = last_created_species
					}
				}
				every_owned_pop = {
					limit = { is_same_species = event_target:robot_country }
					add_modifier = { modifier = vbp_repurposed_machines days = 1800 }
					
					hidden_effect = { change_species = last_created_species }
				}
			}
			
			set_owner = root
		}
	}
	
	option = {
		name = vbp_machine.510.a.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	option = {
		name = EXCELLENT
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
}

#Basic interference -progress
country_event = {
	id = vbp_machine.520
	
	hide_window = yes
	
	mean_time_to_happen = {
		months = 75 #CHANGE TO MONTHS
		
		modifier = {
			factor = 0.3
			
			has_country_flag = vbp_machine_angered
		}
	}
	
	trigger = {
		is_country_type = vbp_machine
		capital_scope = {
			has_observation_outpost = yes
			observation_outpost = {
				OR = {
					has_mission = vbp_machine_framework_upgrade
					has_mission = vbp_machine_repurpose
				}
				mission_progress > 0.2
			}
			NOT = {
				owner = {
					has_relation_flag = {
						who = root
						flag = vbp_machine_interference
					}
				}
			}
		}
	}
	
	immediate = {
		capital_scope = {
			observation_outpost_owner = {
				country_event = { id = vbp_machine.521 }
			}
		}
	}
}

#Player notified of interference
country_event = {
	id = vbp_machine.521
	title = vbp_machine.521.name
	desc = vbp_machine.521.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_sapient_AI
	location = FROM
	
	immediate = {
		FROM = {
			observation_outpost = { add_mission_progress = -0.2 }
			owner = {
				set_relation_flag = {
					who = ROOT
					flag = vbp_machine_interference
				}
			}
		}
	}
	
	option = {
		name = UNFORTUNATE
		tooltip = {
			FROM = {
				observation_outpost = { add_mission_progress = -0.2 }
			}
		}
	}
}

#Basic assistance
country_event = {
	id = vbp_machine.522
	
	hide_window = yes
	
	mean_time_to_happen = {
		months = 75 #CHANGE TO MONTHS
	}
	
	trigger = {
		is_country_type = vbp_machine
		capital_scope = {
			has_observation_outpost = yes
			observation_outpost = {
				OR = {
					has_mission = vbp_machine_framework_upgrade
					has_mission = vbp_machine_repurpose
				}
				mission_progress > 0.2
			}
			NOT = {
				owner = {
					has_relation_flag = {
						who = root
						flag = vbp_machine_interference
					}
				}
			}
		}
	}
	
	immediate = {
		capital_scope = {
			observation_outpost_owner = {
				country_event = { id = vbp_machine.523 }
			}
		}
	}
}

#Player notified of interference
country_event = {
	id = vbp_machine.523
	title = vbp_machine.523.name
	desc = vbp_machine.523.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_sapient_AI
	location = FROM
	
	immediate = {
		FROM = {
			observation_outpost = { add_mission_progress = 0.2 }
			
			set_relation_flag = {
				who = ROOT
				flag = vbp_machine_interference
			}
			
		}
	}
	
	option = {
		name = EXCELLENT
		tooltip = {
			FROM = {
				observation_outpost = { add_mission_progress = 0.2 }
			}
		}
	}
}

###################
#CONQUEST HANDLING#
###################

#Hidden event. Determining whenever robots are all destroyed
country_event = {
	id = vbp_machine.600
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		is_country_type = vbp_machine
	}
	
	immediate = {
		save_event_target_as = robot_country
		FROMFROM = { save_event_target_as = robot_planet vbp_machine_clear_mods = yes }
		FROM = {
			random_list = {
				1 = {
					modifier = {
						add = 8
						OR = {
							has_authority = auth_machine_intelligence
							has_technology = tech_synthetic_workers
						}
					}
					modifier = {
						add = 2
						OR = {
							has_technology = tech_droid_workers
						}
					}
					modifier = {
						factor = 0
						NOT = { has_authority = auth_machine_intelligence }
						OR = {
							has_policy_flag = robots_outlawed
							NOT = { has_technology = tech_robotic_workers }
						}
					}
					country_event = { id = vbp_machine.601 }
				}
				3 = {
					country_event = { id = vbp_machine.602 }
				}
			}
		}
	}
}

#Taking control
country_event = {
	id = vbp_machine.601
	title = vbp_machine.601.name
	
	desc = {
		trigger = { has_authority = auth_machine_intelligence }
		text = vbp_machine.601.machine
	}
	
	desc = {
		trigger = { NOT = { has_authority = auth_machine_intelligence } }
		text = vbp_machine.601.normal
	}
	
	picture = GFX_evt_ground_combat
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	immediate = {
		every_country = {
			limit = { 
				has_communications = root 
				OR = {
					has_authority = auth_machine_intelligence
					has_policy_flag = ai_full_rights
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_conquered_negative }
		}
		every_country = {
			limit = {
				has_communications = root
				NOT = { has_policy_flag = ai_full_rights }
				OR = {
					has_policy_flag = robots_outlawed
					has_ethic = ethic_spiritualist
					has_ethic = ethic_fanatic_spiritualist
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_conquered_positive }
		}
	
		event_target:robot_planet = {
			observation_outpost = { dismantle = yes }
			
			
			IF = {
				limit = {
					root = { has_authority = auth_machine_intelligence }
				}
				every_owned_pop = {
					limit = { is_same_species = event_target:robot_country }
					add_modifier = { modifier = vbp_protocol_conflict days = 1800 }
				}
			}
			else = {
				hidden_effect = {
					random_owned_pop = {
						limit = { is_same_species = event_target:robot_country }
						
						create_species = {
							is_mod = yes
							name = this
							namelist = AI
							plural = this
							class = "ROBOT"
							portrait = this.species
							traits = {
								trait = "trait_mechanical"
							}
							traits = this
						}
						change_species = last_created_species
                        modify_species = {
                            species = this
                            remove_trait = trait_machine_unit
                            add_trait = trait_mechanical
                            add_traits_at_start_of_list = yes
                        }
						change_species = last_created_species
						save_event_target_as = template_species
					}
				}
				every_owned_pop = {
					limit = { is_same_species = event_target:robot_country }
					add_modifier = { modifier = vbp_repurposed_machines days = 1800 }
					
					hidden_effect = { change_species = last_created_species }
				}
			}
			
			set_owner = root
			
		}
	}
	
	option = {
		name = vbp_machine.601.a.machine
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	option = {
		name = EXCELLENT
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	
}

#Failed to take control, destroyed planet instrad
country_event = {
	id = vbp_machine.602
	title = vbp_machine.602.name
	
	desc = {
		trigger = { has_authority = auth_machine_intelligence }
		text = vbp_machine.602.machine
	}
	
	desc = {
		trigger = { NOT = { has_authority = auth_machine_intelligence } }
		text = vbp_machine.602.normal
	}
	
	picture = GFX_evt_ground_combat
	location = event_target:robot_planet
	
	is_triggered_only = yes
	
	immediate = {
		every_country = {
			limit = { 
				has_communications = root 
				OR = {
					has_authority = auth_machine_intelligence
					has_policy_flag = ai_full_rights
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_destroyed_negative }
		}
		every_country = {
			limit = {
				has_communications = root
				NOT = { has_policy_flag = ai_full_rights }
				OR = {
					has_policy_flag = robots_outlawed
					has_ethic = ethic_spiritualist
					has_ethic = ethic_fanatic_spiritualist
				}
			}
			add_opinion_modifier = { who = root modifier = vbp_machine_destroyed_positive }
		}
	
		event_target:robot_planet = {
			while = {
				limit = { num_pops > 0 }
				random_owned_pop = { kill_pop = yes }
				change_variable = {
					which = vbp_machine_robots_slaughtered
					value = 75
				}
			}
			if = {
				limit = { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
		}
	}
	
	option = {
		name = vbp_machine.602.a.machine
		custom_tooltip = vbp_machine.602.a.tooltip
		
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	
	option = {
		name = vbp_machine.602.a.normal
		custom_tooltip = vbp_machine.602.a.tooltip
		
		trigger = {
			NOT = { has_authority = auth_machine_intelligence }
		}
	}
	
	after = {
		hidden_effect = {
			while = {
				limit = {
					event_target:robot_planet = {
						check_variable = {
							which = vbp_machine_robots_slaughtered
							value > 0
						}
					}
				}
				add_resource = {
                    minerals = 75
                }
				event_target:robot_planet = {
					change_variable = {
						which = vbp_machine_robots_slaughtered
						value = -75
					}
				}
			}
		}
		event_target:robot_planet = {
			add_modifier = {
				modifier = vbp_robot_graveyard
				days = -1
			}
		}
	}
}

#################################
#AI HELPER and other maintenance#
#################################

#On observation complete, trigger the flip
ship_event = {
	id = vbp_machine.901
	
	hide_window = yes
	
	is_triggered_only = yes 
	
	trigger = {
		FROM = {
			exists = owner
			owner = { is_country_type = vbp_machine }
		}
	}
	
	immediate = {
		FROM = {  
			planet_event = { id = vbp_machine.902 days = 1 } 
		}
	}
}

#Planet actually flips the mission after it's complete
planet_event = {
	id = vbp_machine.902
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		exists = owner
		owner = { is_country_type = vbp_machine }
		has_observation_outpost = yes
		observation_outpost = { has_mission = passive_observation }
	}
	
	immediate = {
		observation_outpost = { set_mission = vbp_machine_passive_observation }
	}
}