#events for the new colossus weapons

namespace = sleeper_exploding_stuff

#hivemind assimilation
planet_event = {
	id = sleeper_exploding_stuff.1
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		from.owner = { country_event = { id = sleeper_exploding_stuff.2 } }
		if = {
			limit = {
				from.owner = {
					is_sleeper = yes
				}
			}
			this.owner = { country_event = { id = sleeper_exploding_stuff.6 } }
		}
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
						AND = {
							is_country_type = default
							is_egalitarian = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner 
		owner = {
			add_static_war_exhaustion = {
				attacker = from.fleet.owner
				location = root
				value_for_planet_destruction = 1.0
			}
		}
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			# already owned
		}
		else = {
			set_owner = from.owner
		}
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
				}
			}
			modify_species = {
				species = this
				add_trait = trait_hive_mind
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_pop = yes
		}
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		every_owned_pop = {
			set_citizenship_type = {
				type = citizenship_full
				cooldown = yes
			}
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_nanobot_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
			}
		}
	}
}

country_event = {
	id = sleeper_exploding_stuff.2
	title = sleeper_exploding_stuff.2.name
	desc = sleeper_exploding_stuff.2.desc
	picture = GFX_evt_circuitry_modification
	show_sound = event_mystic_reveal
	location = from
	
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_hive_integration }
		FROM = {
			NOR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_ringworld_habitable
			}
		}
	}

	immediate = {
		set_country_flag = fired_hive_integration
	}

	option = {
		name = OK
		from = {
			custom_tooltip = sleeper_exploding_stuff.2.tooltip
		}
	}
}

#Hivemind creation
planet_event = {
	id = sleeper_exploding_stuff.3
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		from.owner = {
			country_event = { id = sleeper_exploding_stuff.4 } 
			save_event_target_as = firer
		}
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
						AND = {
							is_country_type = default
							is_egalitarian = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner 
		owner = {
			add_static_war_exhaustion = {
				attacker = from.fleet.owner
				location = root
				value_for_planet_destruction = 1.0
			}
		}
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
				}
			}
			modify_species = {
				species = this
				add_trait = trait_hive_mind
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
			}
			clear_ethos = yes
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_pop = yes
		}
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
	#create a new country and make it a subject. System control only changes when this is the only planet in the system, to avoid this weapon also magically taking all other planets.
		random_pop = {
			save_event_target_as = new_hive_main_species
		}
		create_country = {
			name = random 
			type = default
			#name_list = random
			ship_prefix = ass
			authority = auth_hive_mind
			civics = random
			species = event_target:new_hive_main_species.species
			flag = random
			ethos = {
				ethic = ethic_gestalt_consciousness
			}
			effect = {
				save_event_target_as = created_hive
			}
		}
		set_owner = last_created_country
		last_created_country = {
			country_event = { id = sleeper_exploding_stuff.5 days = 1 }
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_nanobot_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
			}
		}
	}
}

country_event = {
	id = sleeper_exploding_stuff.4
	title = sleeper_exploding_stuff.4.name
	desc = sleeper_exploding_stuff.4.desc
	picture = GFX_evt_circuitry_modification
	show_sound = event_mystic_reveal
	location = from
	
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_hive_creator }
		FROM = {
			NOR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_ringworld_habitable
			}
		}
	}

	immediate = {
		set_country_flag = fired_hive_creator
	}

	option = {
		name = sleeper_exploding_stuff.4.a
		from = {
			custom_tooltip = sleeper_exploding_stuff.4.tooltip
		}
	}
}

#make new hive a tributary with positive opinion, give it resources and a construction ship.
country_event = {
	id = sleeper_exploding_stuff.5
	hide_window = yes
	
	is_triggered_only = yes

	immediate = {
		every_owned_pop = {
			set_citizenship_type = {
				type = citizenship_full
				cooldown = yes
			}
		}
		set_subject_of = {
			who = event_target:firer
			subject_type = tributary
		}
		add_opinion_modifier = {
			modifier = opinion_loyal_hivemind
			who = event_target:firer
		}
		add_resource = { energy = 4000 }
		add_resource = { minerals = 4000 }
		add_resource = { alloys = 2000 }
		add_resource = { influence = 1000 }
		capital_scope = {
			while = {
				count = 2
				create_fleet = {
					effect = {
						set_owner = event_target:created_hive
						create_ship = {
							name = random
							design = "NAME_Construction_drone"
							graphical_culture = owner
						}
						set_location = {
							target = prev
							distance = 60
							angle = random 
						}				
					}
				}
			}
			solar_system = {
				every_system_planet = {
					surveyed = {
						set_surveyed = yes
						surveyor = event_target:created_hive
					}
				}
			}
			if = {
				limit = {
					solar_system = {
						any_system_planet = {
							num_pops > 0
							NOT = {
								owner = { is_same_value = event_target:created_hive }
							}
						}
					}
				}
				#destroy starbase to prevent colonies from changing owner, if there are any
				solar_system = {
					starbase = {
						fleet = { destroy_fleet = this }
					}
				}
			}
			else = {
				solar_system = {
					starbase = {
						fleet = { set_owner = event_target:created_hive }
					}
				}
			}
		}
	}
}

#message for the victim of the sleepers colossus
country_event = {
	id = sleeper_exploding_stuff.6
	title = sleeper_exploding_stuff.6.name
	desc = sleeper_exploding_stuff.6.desc
	picture = GFX_evt_circuitry_modification
	show_sound = event_mystic_reveal
	location = from
	
	is_triggered_only = yes

	option = {
		name = sleeper_exploding_stuff.4.a
	}
}