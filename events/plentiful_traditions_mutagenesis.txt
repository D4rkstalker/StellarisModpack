namespace = plentiful_traditions_mutagenesis

planet_event = {
	id = plentiful_traditions_mutagenesis.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = {
			has_tradition = tr_plentiful_mutagenesis_finish
		}
		FROMFROM = {
			is_robot_pop = no
			NOT = {
				is_same_species = owner_species
			}
		}
		is_controlled_by = FROM
	}
	
	immediate = {
		FROM = {
			add_monthly_resource_mult = {
				resource = food
				value = 1
				min = 3
				max = 3
			}
		}
	}
}

# Mutagenesis Pops on Half-Yearly Pulse
event = {
	id = plentiful_traditions_mutagenesis.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "plentiful_traditions_mutagenesis.2"
		every_playable_country = {
			limit = {
				#num_unique_species > 1
				any_owned_planet = {
					has_modifier = modifier_mutagenesis_transformation
				}
			}
			log = "plentiful_traditions_mutagenesis.2.epc"
			every_owned_planet = {
				limit = {
					has_modifier = modifier_mutagenesis_transformation
					owner = { has_ascension_perk = ap_plentiful_traditions_mutagenesis_universalis }
				}
				planet_event = { id = plentiful_traditions_mutagenesis.3 }
			}
			every_owned_planet = {
				limit = {
					has_modifier = modifier_mutagenesis_transformation
					owner = { 
						NOT = {
							has_ascension_perk = ap_plentiful_traditions_mutagenesis_universalis
						}
					}
				}
				remove_modifier = modifier_mutagenesis_transformation
			}
		}
	}
}

# Mutagenesis Pops
planet_event = {
	id = plentiful_traditions_mutagenesis.3 #action.65
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			NOT = {
				has_citizenship_type = {
					type = citizenship_full
					country = root.owner
				}
				is_same_species = owner_species
			}
		}
	}

	immediate = {
		random_list = {
			1 = { # 1 pops
				set_variable = {
					which = mutagenesis_counter
					value = 1
				}
				while = {
					count = 1
					limit = {
						any_owned_pop = {
							NOT = {
								has_citizenship_type = {
									type = citizenship_full
									country = root.owner
								}
								is_same_species = owner_species
								has_trait = "trait_mechanical"
							}
						}
						check_variable = {
							which = mutagenesis_counter
							value > 0
						}
					}
					mutagenesis_effect = yes
				}
			}

			1 = { # 2 pops
				set_variable = {
					which = mutagenesis_counter
					value = 2
				}
				while = {
					count = 2
					limit = {
						any_owned_pop = {
							NOT = {
								has_citizenship_type = {
									type = citizenship_full
									country = root.owner
								}
								is_same_species = owner_species
								has_trait = "trait_mechanical"
							}
						}
						check_variable = {
							which = mutagenesis_counter
							value > 0
						}
					}
					mutagenesis_effect = yes
				}
			}

			1 = { # 3 pops
				set_variable = {
					which = mutagenesis_counter
					value = 3
				}
				while = {
					count = 3
					limit = {
						any_owned_pop = {
							NOT = {
								has_citizenship_type = {
									type = citizenship_full
									country = root.owner
								}
								is_same_species = owner_species
								has_trait = "trait_mechanical"
							}
						}
						check_variable = {
							which = mutagenesis_counter
							value > 0
						}
					}
					mutagenesis_effect = yes
				}
			}
		}
		set_variable = {
			which = mutagenesis_counter
			value = 0
		}
	}
}