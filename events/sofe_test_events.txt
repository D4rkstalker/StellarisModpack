namespace = origin_test_event

# Test Events

country_event = {
	id = origin_test_event.0
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = stellarite_tech_enable
		give_technology = { tech = tech_computer_stellarite message = no }
		give_technology = { tech = tech_stellarite_afterburners message = no }	
		give_technology = { tech = tech_stellarite_armor message = no }
		give_technology = { tech = tech_stellarite_artillery message = no }			
		give_technology = { tech = tech_stellarite_aura_energy_drainer message = no }
		give_technology = { tech = tech_stellarite_autocannon message = no }	
		give_technology = { tech = tech_stellarite_bomber message = no }
		give_technology = { tech = tech_stellarite_beam message = no }			
		give_technology = { tech = tech_stellarite_disruptor message = no }		
		give_technology = { tech = tech_stellarite_emitter message = no }	
		give_technology = { tech = tech_stellarite_fighter message = no }		
		give_technology = { tech = tech_stellarite_flak message = no }	
		give_technology = { tech = tech_stellarite_gauss message = no }	
		give_technology = { tech = tech_stellarite_gunship message = no }
		give_technology = { tech = tech_stellarite_hyper_jump_drive message = no }	
		give_technology = { tech = tech_stellarite_inspire_aura message = no }
		give_technology = { tech = tech_stellarite_jump_drive message = no }			
		give_technology = { tech = tech_stellarite_laser message = no }	
		give_technology = { tech = tech_stellarite_missile message = no }
		give_technology = { tech = tech_stellarite_photon message = no }			
		give_technology = { tech = tech_stellarite_plasma_cannon message = no }		
		give_technology = { tech = tech_stellarite_point_defence message = no }	
		give_technology = { tech = tech_stellarite_reactive_drone message = no }	
		give_technology = { tech = tech_stellarite_reactor message = no }	
		give_technology = { tech = tech_stellarite_reactor_booster message = no }	
		give_technology = { tech = tech_stellarite_sensors message = no }	
		give_technology = { tech = tech_stellarite_shield message = no }
		give_technology = { tech = tech_stellarite_shield_supercharger message = no }
		give_technology = { tech = tech_stellarite_star_charter message = no }	
		give_technology = { tech = tech_stellarite_thruster message = no }
		give_technology = { tech = tech_stellarite_titan_beam message = no }			
		give_technology = { tech = tech_stellarite_weapon_core message = no }	
		give_technology = { tech = tech_warp_stellarite_cannon message = no }		
		give_technology = { tech = tech_stellarite_army message = no }
		give_technology = { tech = tech_stellarite_bomberman message = no }	
		give_technology = { tech = tech_stellarite_titan_accelerator message = no }
		give_technology = { tech = tech_stelar_advanced_ships message = no }			
		give_technology = { tech = tech_precursor_escort_sigma message = no }
		give_technology = { tech = tech_precursor_bc_sigma message = no }	
		give_technology = { tech = tech_fe_assault_carrier_sigma message = no }
		give_technology = { tech = tech_fe_tower_offense_sigma message = no }			
		give_technology = { tech = tech_gatekeepers_sigma message = no }		
		give_technology = { tech = tech_precursor_titan_sigma message = no }	
		give_technology = { tech = tech_precursor_guardian_sigma message = no }		
		give_technology = { tech = tech_reinforced_starbase_se message = no }	
	}
}


country_event = {
	id = origin_test_event.1
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {

		if = {
			limit = { NOT = { has_technology = tech_celestial_guardian } }
			give_technology = { tech = tech_celestial_guardian message = no } 			
		}

		if = {
			limit = { NOT = { has_technology = tech_fe_assault_carrier } }
			give_technology = { tech = tech_fe_assault_carrier message = no } 			
		}
		if = {
			limit = { NOT = { has_technology = tech_gatekeepers } }
			give_technology = { tech = tech_gatekeepers message = no } 			
		}
		if = {
			limit = { NOT = { has_technology = tech_progenitor_escort } }
			give_technology = { tech = tech_progenitor_escort message = no } 			
		}
		if = {
			limit = { NOT = { has_technology = tech_progenitor_battlecruiser } }
			give_technology = { tech = tech_progenitor_battlecruiser message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_progenitor_titan } }
			give_technology = { tech = tech_progenitor_titan message = no } 			
		}
		if = {
			limit = { NOT = { has_technology = tech_progenitor_avatar } }
			give_technology = { tech = tech_progenitor_avatar message = no } 				
		}

		###############################################
		
		if = {
			limit = { NOT = { has_technology = tech_omega_escort } }
			give_technology = { tech = tech_omega_escort message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_omega_battlecruiser } }
			give_technology = { tech = tech_omega_battlecruiser message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_omege_sentinel } }
			give_technology = { tech = tech_omege_sentinel message = no } 					
		}				
		if = {
			limit = { NOT = { has_technology = tech_omega_guardian } }
			give_technology = { tech = tech_omega_guardian message = no } 				
		}		
		if = {
			limit = { NOT = { has_technology = tech_omega_titan } }
			give_technology = { tech = tech_omega_titan message = no } 				
		}	
		if = {
			limit = { NOT = { has_technology = tech_omega_carrier } }
			give_technology = { tech = tech_omega_carrier message = no } 					
		}		
		if = {
			limit = { NOT = { has_technology = tech_omega_gatekeeper } }
			give_technology = { tech = tech_omega_gatekeeper message = no } 					
		}		
	#####################OFFENSE################

		if = {
			limit = { NOT = { has_technology = tech_lightmatter_artillery } }
			give_technology = { tech = tech_lightmatter_artillery message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_warp_lightmatter_cannon } }
			give_technology = { tech = tech_warp_lightmatter_cannon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_disruptor } }
			give_technology = { tech = tech_lightmatter_disruptor message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_warp_lightmatter_cannon } }
			give_technology = { tech = tech_warp_lightmatter_cannon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_plasma_cannon } }
			give_technology = { tech = tech_lightmatter_plasma_cannon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_lance } }
			give_technology = { tech = tech_lightmatter_lance message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_emitter } }
			give_technology = { tech = tech_lightmatter_emitter message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_titan_beam } }
			give_technology = { tech = tech_lightmatter_titan_beam message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_ultimate_weapon } }
			give_technology = { tech = tech_ultimate_weapon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_missile } }
			give_technology = { tech = tech_lightmatter_missile message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_gunship } }
			give_technology = { tech = tech_lightmatter_gunship message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_bomber } }
			give_technology = { tech = tech_lightmatter_bomber message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_weapon_core } }
			give_technology = { tech = tech_lightmatter_weapon_core message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_titan_accelerator } }
			give_technology = { tech = tech_lightmatter_titan_accelerator message = no } 				
		}	

	#####################DEFENCE################

		if = {
			limit = { NOT = { has_technology = tech_lightmatter_flak } }
			give_technology = { tech = tech_lightmatter_flak message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_point_defence } }
			give_technology = { tech = tech_lightmatter_point_defence message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_autocannon } }
			give_technology = { tech = tech_lightmatter_autocannon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_gauss } }
			give_technology = { tech = tech_lightmatter_gauss message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_laser } }
			give_technology = { tech = tech_lightmatter_laser message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_photon } }
			give_technology = { tech = tech_lightmatter_photon message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_fighter } }
			give_technology = { tech = tech_lightmatter_fighter message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_armor } }
			give_technology = { tech = tech_lightmatter_armor message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_shield } }
			give_technology = { tech = tech_lightmatter_shield message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_reactive_drone } }
			give_technology = { tech = tech_lightmatter_reactive_drone message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_shield_supercharger } }
			give_technology = { tech = tech_lightmatter_shield_supercharger message = no } 					
		}

	#####################UTILITY################
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_thruster } }
			give_technology = { tech = tech_lightmatter_thruster message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_reactor } }
			give_technology = { tech = tech_lightmatter_reactor message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_sensors } }
			give_technology = { tech = tech_lightmatter_sensors message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_computer_lightmatter } }
			give_technology = { tech = tech_computer_lightmatter message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_jump_drive } }
			give_technology = { tech = tech_lightmatter_jump_drive message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_afterburners } }
			give_technology = { tech = tech_lightmatter_afterburners message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_hyper_jump_drive } }
			give_technology = { tech = tech_lightmatter_hyper_jump_drive message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_analyzer_ai } }
			give_technology = { tech = tech_lightmatter_analyzer_ai message = no } 					
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_inspire_aura } }
			give_technology = { tech = tech_lightmatter_inspire_aura message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_lightmatter_aura_energy_drainer } }
			give_technology = { tech = tech_lightmatter_aura_energy_drainer message = no } 				
		}
		if = {
			limit = { NOT = { has_technology = tech_omega_warmech } }
			give_technology = { tech = tech_omega_warmech message = no } 					
		}
	}
}

country_event = {
	id = origin_test_event.2
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_origin_scout_fleet = yes
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.3
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
	
			create_origin_small_fleet = yes
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.4
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_scrub_fleet = yes
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.5
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_scrub_fleet_large = yes
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.6
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_flagship = yes
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.7
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_fleet = {
				settings = {
					 is_boss = yes
					 can_upgrade = no 
					 uses_naval_capacity = no
			}
			effect = {
				set_owner = root
				while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_WARDEN_MATERIALIST"
							upgradable = no
							graphical_culture = fallen_empire_01
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
			}
			create_fleet = {
				settings = {
					 is_boss = yes
					 can_upgrade = no 
					 uses_naval_capacity = no
			}
			effect = {
				set_owner = root
				while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_WARDEN_XENOPHOBE"
							upgradable = no
							graphical_culture = fallen_empire_02
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
			}
			create_fleet = {
				settings = {
					 is_boss = yes
					 can_upgrade = no 
					 uses_naval_capacity = no
			}
			effect = {
				set_owner = root
				while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_WARDEN_EGALITARIAN"
							upgradable = no
							graphical_culture = fallen_empire_03
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
			}
			create_fleet = {
				settings = {
					 is_boss = yes
					 can_upgrade = no 
					 uses_naval_capacity = no
			}
			effect = {
				set_owner = root
				while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_WARDEN_DEVOUR"
							upgradable = no
							graphical_culture = fallen_empire_04
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
			}
			create_fleet = {
				settings = {
					 is_boss = yes
					 can_upgrade = no 
					 uses_naval_capacity = no
			}
			effect = {
				set_owner = root
				while = {
						count = 1
						create_ship = {
							name = random
							design = "NAME_WARDEN_STELLAR"
							upgradable = no
							graphical_culture = original_empire
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}
				}
			}
			set_owner = ROOT
		}
	}
}

country_event = {
	id = origin_test_event.9
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		create_leader = {
			class = general
			species = root.species
			name = random
			traits = {
				trait = leader_trait_general_ancient_knowledge
				trait = leader_trait_general_bionic_implant
				trait = leader_trait_general_master_mind
			}
			set_age = 20
			skill = 10
		}
		capital_scope = {	
			create_fleet = {
				name = random
				effect = {
					set_owner = root
					while = {
						count = 1
						create_army_transport = {
							ship_name = random
							graphical_culture = "original_empire"
							army_name = random
							army_type = "origin_autarch_guardian"
							species = root.species
						}
					}
					last_created_army = { assign_leader = last_created_leader }
					while = {
						count = 5
						create_army_transport = {
							ship_name = random
							graphical_culture = "original_empire"
							army_name = random
							army_type = "origin_assault_guardian"
							species = root.species
						}
					}
					while = {
						count = 10
						create_army_transport = {
							ship_name = random
							graphical_culture = "original_empire"
							army_name = random
							army_type = "sofe_omega_mech"
							species = root.species
						}
					}
					set_location = {
						target = prev
						distance = 20
						angle = random 
					}
				}
			}
		}
	}
}

country_event = {
	id = origin_test_event.10
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		add_resource = {
			minerals = 100000
			alloys = 100000
			food = 100000
			energy = 100000
			consumer_goods = 100000
			sr_dark_matter = 50000
			acot_sr_dark_energy = 50000
			acot_sr_stellarite = 50000		
			acot_sr_light_matter = 50000	
		}
	}
}

country_event = {
	id = origin_test_event.11
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		set_country_type = original_empire_active
		country_event = { id = origin_test_event.1 }
		country_event = { id = origin_test_event.2 }
		clear_ethos = yes
		change_government = {
			civics = {
				civic = civic_eternal_fleet_ascended
				civic = civic_know_everything_ascended
				civic = civic_solar_empire_ascended
			}
		}
		add_resource = {
			minerals = 1000000
			energy = 1000000
			alloys = 1000000
			food = 1000000
			consumer_goods = 1000000
			sr_dark_matter = 1000000
			sr_zro = 100000
			sr_living_metal = 100000
			volatile_motes = 100000
			rare_crystals = 100000
			exotic_gases = 100000
			nanites = 100000
			acot_sr_dark_energy = 1000000
			acot_sr_stellarite = 1000000
			acot_sr_light_matter = 1000000				
			influence = 1000
			unity = 100000
		}
		create_ship_design = { design = "NAME_PROGENITOR_ESCORT" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_PROGENITOR_BATTLECRUISER" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_PROGENITOR_TITAN" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_PROGENITOR_AVATAR" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_ORIGIN_TOWER" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_OE_Super_Starbase_Playable" }
		add_ship_design = last_created_design
		every_owned_pop = {
			if = {
				limit = { has_trait = trait_pc_desert_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_desert_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_arid_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_arid_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_savannah_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_savannah_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_tropical_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_tropical_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_continental_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_continental_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_arctic_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_arctic_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_tundra_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_tundra_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_alpine_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_alpine_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_nuked_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_nuked_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_gaia_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_gaia_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_ringworld_habitable_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_ringworld_habitable_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_habitat_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_habitat_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_machine_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_machine_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_hive_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_hive_preference
				}			
			}
			if = {
				limit = { has_trait = trait_pc_relic_preference }
				modify_species = {
					species = this
					remove_trait = trait_pc_relic_preference
				}			
			}
		}	
		every_owned_pop = {
			modify_species = {
				species = this
					add_trait = trait_pc_all_preference
					add_trait = trait_ancient_race
					add_trait = trait_bionic_implants
					add_trait = trait_ancient_knowledge
					add_trait = trait_master_mind
			}
		}
		change_dominant_species = { species = last_created change_all = yes }
		
		every_country = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire			
				}
			}
			establish_communications_no_message = root
		}

		### Ancient Knowledge
	
				every_owned_leader = {
					limit = {
						is_same_species = root
						NOR = {
							has_trait =	leader_trait_admiral_ancient_knowledge
							has_trait =	leader_trait_general_ancient_knowledge
							has_trait =	leader_trait_governor_ancient_knowledge
							has_trait =	leader_trait_scientist_ancient_knowledge
							has_trait =	leader_trait_ruler_ancient_knowledge
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
				}		
		
				every_pool_leader = {
					limit = {
						is_same_species = root
						#species = { 
						#	has_trait = trait_psionic
						#	is_same_value = event_target:psionic_species
						#}
						NOR = {
							has_trait = leader_trait_admiral_ancient_knowledge
							has_trait = leader_trait_general_ancient_knowledge
							has_trait = leader_trait_governor_ancient_knowledge
							has_trait = leader_trait_scientist_ancient_knowledge
							has_trait = leader_trait_ruler_ancient_knowledge
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_ancient_knowledge
						add_ruler_trait = leader_trait_ruler_ancient_knowledge
					}
				}

		#### Bio Implants

				every_owned_leader = {
					limit = {
						is_same_species = root.owner
						NOR = {
							has_trait =    leader_trait_admiral_bionic_implant
							has_trait =    leader_trait_general_bionic_implant
							has_trait =    leader_trait_governor_bionic_implant
							has_trait =    leader_trait_scientist_bionic_implant
							has_trait =    leader_trait_ruler_bionic_implant
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_bionic_implant
					}
				}
				every_owned_leader = {
					limit = {
						is_same_species = root.owner
						NOR = {
							has_trait =    leader_trait_admiral_bionic_implant
							has_trait =    leader_trait_general_bionic_implant
							has_trait =    leader_trait_governor_bionic_implant
							has_trait =    leader_trait_scientist_bionic_implant
							has_trait =    leader_trait_ruler_bionic_implant
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_bionic_implant
						add_ruler_trait = leader_trait_ruler_bionic_implant
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_bionic_implant
					}
				}
			
		
		#### Dracakis

				every_owned_leader = {
					limit = {
						is_same_species = root.owner
						NOR = {
							has_trait =    leader_trait_admiral_master_mind
							has_trait =    leader_trait_general_master_mind
							has_trait =    leader_trait_governor_master_mind
							has_trait =    leader_trait_scientist_master_mind
							has_trait =    leader_trait_ruler_master_mind
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_master_mind
					}
				}
				every_owned_leader = {
					limit = {
						is_same_species = root.owner
						NOR = {
							has_trait =    leader_trait_admiral_bionic_implant
							has_trait =    leader_trait_general_bionic_implant
							has_trait =    leader_trait_governor_bionic_implant
							has_trait =    leader_trait_scientist_bionic_implant
							has_trait =    leader_trait_ruler_master_mind
						}
					}
					if = {
						limit = { leader_class = admiral }
						add_trait = leader_trait_admiral_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = general }
						add_trait = leader_trait_general_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = governor }
						add_trait = leader_trait_governor_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = scientist }
						add_trait = leader_trait_scientist_master_mind
						add_ruler_trait = leader_trait_ruler_master_mind
					}
					if = {
						limit = { leader_class = ruler }
						add_trait = leader_trait_ruler_master_mind
					}
				}
		
	}
}

# Original Emprie Helana
planet_event = {
	id = origin_test_event.12
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {	
		reset_planet = yes
		remove_all_buildings = yes
		prevent_anomaly = yes
		change_pc = pc_goodman_gaia_world
		set_owner = root.owner
		set_controller = root.owner
		while = {
			count = 75
			create_pop = {
				species = owner_main_species
			}
		}
		change_planet_size = 60
		remove_all_districts = yes
		while = {
			count = 50
			add_district = district_sofe_omega_city
		}
		while = {
			count = 25
			add_district = district_sofe_omega_logistics
		}
		while = {
			count = 25
			add_district = district_sofe_omega_progression
		}
	
		add_building = building_heaven_sanctuary
		add_building = building_grand_fortress
		add_building = building_grand_fortress
		add_building = building_eden_garden
		add_building = building_eden_garden
		add_building = building_crystal_arch
		add_building = building_crystal_arch
		add_building = building_chamber_of_hope
		add_building = building_chamber_of_hope
		add_building = building_library_of_fate
		add_building = building_library_of_fate
		add_building = building_power_pyramid
		add_building = building_power_pyramid
		add_building = building_super_shelter
		add_building = building_super_shelter
		add_building = building_light_foundry

		root.owner = {
			create_leader = {
				class = general
				species = event_target:origin_species
				name = random
				traits = {
					trait = leader_trait_general_ancient_knowledge
					trait = leader_trait_general_bionic_implant
					trait = leader_trait_general_master_mind
				}
				leader_age_min = 101010
				leader_age_max = 614104
				skill = 10
			}
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		create_army = {
			owner = root.owner
			species = owner_main_species
			type = "origin_guardian"
		}
		last_created_army = { assign_leader = last_created_leader }
	}
}


country_event = {
	id = origin_test_event.13
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		every_country = {
			limit = {
				is_country_type = original_empire
			}
		remove_modifier = sofe_ca_damagenerf_heavy
		remove_modifier = sofe_ca_damagenerf_lite
		}
	}
}

country_event = {
	id = origin_test_event.14
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		every_country = {
			limit = {
				is_country_type = original_empire
			}
			remove_modifier = sofe_ca_damagenerf_heavy
			remove_modifier = sofe_ca_damagenerf_lite
		add_modifier = { modifier = sofe_ca_damagenerf_lite }
		}
	}
}

country_event = {
	id = origin_test_event.15
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		every_country = {
			limit = {
				is_country_type = original_empire
			}
			remove_modifier = sofe_ca_damagenerf_heavy
			remove_modifier = sofe_ca_damagenerf_lite
		add_modifier = { modifier = sofe_ca_damagenerf_heavy }
		}
	}
}


country_event = {
	id = origin_test_event.16
	hide_window = yes
	is_triggered_only = yes	
	
	immediate = {
		capital_scope = {	
			create_fleet = {
				name = "NAME_AUSCHWITZ"
				settings = {
					can_upgrade = no 
					is_boss = yes
					spawn_debris = no
					can_change_composition = no 
					uses_naval_capacity = no
				}
				effect = {
					set_owner = ROOT
					create_origin_colossus = yes
					set_formation_scale = 2
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 250
					set_location = {
						target = prev
						distance = 10
						angle = random
					}
				}
			}
		}
	}
}