namespace = ehof_megastructure

#########################################################################################################
############################################ EHOF On Actions ############################################
#########################################################################################################
# Ship is built [on_ship_built]
ship_event = {
    id = ehof_megastructure.001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			owner = {
				has_country_flag = ehof_is_upgrading
				has_country_flag = ehof_can_activate
			}
			fleet = { has_fleet_flag = recently_triggered_ehof }
			is_constructing = mining_station
			is_constructing = research_station
			is_constructing = observation_post
			is_constructing = megastructure
			is_constructing = starbase
			is_ship_class = shipclass_mining_station
			is_ship_class = shipclass_observation_station
			is_ship_class = shipclass_research_station
			is_ship_class = shipclass_military_station
			AND = {
				is_ship_class = shipclass_starbase
				NOT = { is_ship_size = juggernaut }
			}
		}
		exists = owner
		exists = solar_system
		owner = { is_same_value = solar_system.starbase.owner }
		solar_system = { has_star_flag = ehof_megastructure_system@root.owner }
	}

	immediate = {
		set_ship_flag = ehof_already_counted
		if = { limit = { is_ship_size = science }						owner = { change_variable = { which = ehof_pre_flight_science value = 1 } } }
		if = { limit = { is_ship_size = constructor }					owner = { change_variable = { which = ehof_pre_flight_constructor value = 1 } } }
		if = { limit = { is_ship_class = shipclass_military }			owner = { change_variable = { which = ehof_pre_flight_military value = 1 } } }
		if = { limit = { is_ship_class = shipclass_military_special }	owner = { change_variable = { which = ehof_pre_flight_colossus value = 1 } } }
		if = { limit = { is_ship_size = juggernaut }					owner = { change_variable = { which = ehof_pre_flight_juggernaut value = 1 } } }
		fleet = {
			set_timed_fleet_flag = { flag = recently_triggered_ehof days = 1 } # stop triggering ehof twice
			owner = { country_event = { id = ehof_megastructure.009 days = 2 } }
		}
	}
}

# Ship is built [on_ship_built]
ship_event = {
    id = ehof_megastructure.016
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			has_ship_flag = ehof_already_counted
			is_constructing = mining_station
			is_constructing = research_station
			is_constructing = observation_post
			is_constructing = megastructure
			is_constructing = starbase
			is_ship_class = shipclass_mining_station
			is_ship_class = shipclass_observation_station
			is_ship_class = shipclass_research_station
			is_ship_class = shipclass_military_station
			AND = {
				is_ship_class = shipclass_starbase
				NOT = { is_ship_size = juggernaut }
			}
		}
		exists = owner
		exists = solar_system
		owner = { is_same_value = solar_system.starbase.owner }
		solar_system = { has_star_flag = ehof_megastructure_system@root.owner }
	}

	immediate = {
		if = { limit = { is_ship_size = science }						owner = { change_variable = { which = ehof_pre_flight_science value = 1 } } }
		if = { limit = { is_ship_size = constructor }					owner = { change_variable = { which = ehof_pre_flight_constructor value = 1 } } }
		if = { limit = { is_ship_class = shipclass_military }			owner = { change_variable = { which = ehof_pre_flight_military value = 1 } } }
		if = { limit = { is_ship_class = shipclass_military_special }	owner = { change_variable = { which = ehof_pre_flight_colossus value = 1 } } }
		if = { limit = { is_ship_size = juggernaut }					owner = { change_variable = { which = ehof_pre_flight_juggernaut value = 1 } } }
		set_ship_flag = ehof_already_counted
	}
}

# Fleet enters a system [on_entering_system_fleet]
fleet_event = {
    id = ehof_megastructure.002
    hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			owner = {
				has_country_flag = ehof_is_upgrading
				has_country_flag = ehof_can_activate
			}
			has_fleet_flag = recently_triggered_ehof
			is_constructing = mining_station
			is_constructing = research_station
			is_constructing = observation_post
			is_constructing = megastructure
			is_constructing = starbase
			is_ship_class = shipclass_mining_station
			is_ship_class = shipclass_observation_station
			is_ship_class = shipclass_research_station
			is_ship_class = shipclass_military_station
			AND = {
				is_ship_class = shipclass_starbase
				NOT = { is_ship_size = juggernaut }
			}
		}
		exists = owner
		exists = solar_system
		owner = { is_same_value = solar_system.starbase.owner }
		solar_system = { has_star_flag = ehof_megastructure_system@root.owner }
	}

	immediate = {
		if = {
			limit = { any_owned_ship = { NOT = { has_ship_flag = ehof_already_counted } } }
			every_owned_ship = {
				limit = { NOT = { has_ship_flag = ehof_already_counted } }
				set_ship_flag = ehof_already_counted
				if = { limit = { is_ship_size = science }						owner = { change_variable = { which = ehof_pre_flight_science value = 1 } } }
				if = { limit = { is_ship_size = constructor }					owner = { change_variable = { which = ehof_pre_flight_constructor value = 1 } } }
				if = { limit = { is_ship_class = shipclass_military }			owner = { change_variable = { which = ehof_pre_flight_military value = 1 } } }
				if = { limit = { is_ship_class = shipclass_military_special }	owner = { change_variable = { which = ehof_pre_flight_colossus value = 1 } } }
				if = { limit = { is_ship_size = juggernaut }					owner = { change_variable = { which = ehof_pre_flight_juggernaut value = 1 } } }
			}
		}
		set_timed_fleet_flag = { flag = recently_triggered_ehof days = 1 } # stop triggering ehof twice
		owner = { country_event = { id = ehof_megastructure.009 days = 2 } }
	}
}

# Fleet enters a system [on_entering_system_fleet]
fleet_event = {
    id = ehof_megastructure.014
    hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			any_owned_ship = { NOT = { has_ship_flag = ehof_already_counted } }
			is_constructing = mining_station
			is_constructing = research_station
			is_constructing = observation_post
			is_constructing = megastructure
			is_constructing = starbase
			is_ship_class = shipclass_mining_station
			is_ship_class = shipclass_observation_station
			is_ship_class = shipclass_research_station
			is_ship_class = shipclass_military_station
			AND = {
				is_ship_class = shipclass_starbase
				NOT = { is_ship_size = juggernaut }
			}
		}
		exists = owner
		exists = solar_system
		owner = { is_same_value = solar_system.starbase.owner }
		solar_system = { has_star_flag = ehof_megastructure_system@root.owner }
	}

	immediate = {
		every_owned_ship = {
			limit = { NOT = { has_ship_flag = ehof_already_counted } }
			set_ship_flag = ehof_already_counted
			if = { limit = { is_ship_size = science }						owner = { change_variable = { which = ehof_pre_flight_science value = 1 } } }
			if = { limit = { is_ship_size = constructor }					owner = { change_variable = { which = ehof_pre_flight_constructor value = 1 } } }
			if = { limit = { is_ship_class = shipclass_military }			owner = { change_variable = { which = ehof_pre_flight_military value = 1 } } }
			if = { limit = { is_ship_class = shipclass_military_special }	owner = { change_variable = { which = ehof_pre_flight_colossus value = 1 } } }
			if = { limit = { is_ship_size = juggernaut }					owner = { change_variable = { which = ehof_pre_flight_juggernaut value = 1 } } }
		}
	}
}

# Fleet enters a system [on_entering_system_fleet]
fleet_event = {
    id = ehof_megastructure.015
    hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_ship = { has_ship_flag = ehof_already_counted }
		exists = solar_system
		solar_system = { NOT = { has_star_flag = ehof_megastructure_system@root.owner } }
	}

	immediate = {
		every_owned_ship = {
			limit = { has_ship_flag = ehof_already_counted }
			remove_ship_flag = ehof_already_counted
			if = { limit = { is_ship_size = science }						owner = { subtract_variable = { which = ehof_pre_flight_science value = 1 } } }
			if = { limit = { is_ship_size = constructor }					owner = { subtract_variable = { which = ehof_pre_flight_constructor value = 1 } } }
			if = { limit = { is_ship_class = shipclass_military }			owner = { subtract_variable = { which = ehof_pre_flight_military value = 1 } } }
			if = { limit = { is_ship_class = shipclass_military_special }	owner = { subtract_variable = { which = ehof_pre_flight_colossus value = 1 } } }
			if = { limit = { is_ship_size = juggernaut }					owner = { subtract_variable = { which = ehof_pre_flight_juggernaut value = 1 } } }
		}
	}
}

# Set country flags if system is lost [on_system_lost]
country_event = {
    id = ehof_megastructure.003
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			NOT = { has_star_flag = compound_invasion_entry }
			any_system_megastructure = {
				OR = {
					has_megastructure_flag = ehof_phase_01
					has_megastructure_flag = ehof_phase_02
					has_megastructure_flag = ehof_phase_03
					has_megastructure_flag = ehof_phase_04
					has_megastructure_flag = ehof_phase_05
				}
			}
		}
	}

	immediate = {
		# Remove previous owners flags
		if = { limit = { has_country_flag = ehof_is_upgrading }			remove_country_flag = ehof_is_upgrading }
		if = { limit = { has_country_flag = ehof_travel_diplomacy }		remove_country_flag = ehof_travel_diplomacy }
		if = { limit = { has_country_flag = ehof_can_activate }			remove_country_flag = ehof_can_activate }
		if = { limit = { has_country_flag = ehof_activating }			remove_country_flag = ehof_activating }
		if = { limit = { has_country_flag = ehof_activated }			remove_country_flag = ehof_activated }
		if = { limit = { has_country_flag = ehof_on_cooldown }			remove_country_flag = ehof_on_cooldown }
		if = { limit = { has_country_flag = ehof_malfunctioning }		remove_country_flag = ehof_malfunctioning }
		if = { limit = { has_country_flag = ehof_ai_spawning_cohesive }	remove_country_flag = ehof_ai_spawning_cohesive }
		every_owned_fleet = {
			set_event_locked = no
			remove_fleet_flag = ehof_is_at_wormhole
			remove_fleet_flag = ehof_ready_for_travel@root
		}
		from = {
			remove_star_flag = ehof_megastructure_system@root
			every_system_planet = { remove_planet_flag = cant_build_here }
		}

		# Try to recomission an EHOF
		if = {
			limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_04_decommissioned } }
			set_variable = { which = ehof_phase value = 4 }
			set_country_flag = ehof_restored_first_time
			set_country_flag = ehof_p0_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p2_first_time
			set_country_flag = ehof_p3_first_time
			set_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time

			random_system_within_border = {
				limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_04_decommissioned } }
				set_star_flag = ehof_megastructure_system@root
				every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_04_decommissioned } delete_megastructure = this }
				spawn_megastructure = {
					type = "ehof_megastructure_phase4_idle"
					orbit_angle = 0
					orbit_distance = 0
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_phase_04 }
				}
			}

			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }
			if = { limit = { NOT = { has_technology = tech_prob_c } }					give_technology = { tech = tech_prob_c } }
			if = { limit = { NOT = { has_technology = tech_vedrs } }					give_technology = { tech = tech_vedrs } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_04 } }			give_technology = { tech = tech_ehof_phase_04 } }
			country_event = { id = ehof_megastructure.201 }
		}
		else_if = {
			limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_03_decommissioned } }
			set_variable = { which = ehof_phase value = 3 }
			set_country_flag = ehof_restored_first_time
			set_country_flag = ehof_p0_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p2_first_time
			set_country_flag = ehof_p3_first_time
			remove_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time

			random_system_within_border = {
				limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_03_decommissioned } }
				set_star_flag = ehof_megastructure_system@root
				every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_03_decommissioned } delete_megastructure = this }
				spawn_megastructure = {
					type = "ehof_megastructure_phase3_idle"
					orbit_angle = 0
					orbit_distance = 0
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_phase_03 }
				}
			}

			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }
			country_event = { id = ehof_megastructure.201 }
		}
		else_if = {
			limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_02_decommissioned } }
			set_variable = { which = ehof_phase value = 2 }
			set_country_flag = ehof_restored_first_time
			set_country_flag = ehof_p0_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p2_first_time
			remove_country_flag = ehof_p3_first_time
			remove_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time

			random_system_within_border = {
				limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_02_decommissioned } }
				set_star_flag = ehof_megastructure_system@root
				every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_02_decommissioned } delete_megastructure = this }
				spawn_megastructure = {
					type = "ehof_megastructure_phase2_idle"
					orbit_angle = 0
					orbit_distance = 0
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_phase_02 }
				}
			}

			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			country_event = { id = ehof_megastructure.201 }
		}
		else_if = {
			limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_01_decommissioned } }
			set_variable = { which = ehof_phase value = 1 }
			set_country_flag = ehof_restored_first_time
			set_country_flag = ehof_p0_first_time
			set_country_flag = ehof_p1_first_time
			remove_country_flag = ehof_p2_first_time
			remove_country_flag = ehof_p3_first_time
			remove_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time

			random_system_within_border = {
				limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_01_decommissioned } }
				set_star_flag = ehof_megastructure_system@root
				every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_01_decommissioned } delete_megastructure = this }
				spawn_megastructure = {
					type = "ehof_megastructure_phase1_idle"
					orbit_angle = 0
					orbit_distance = 0
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_phase_01 }
				}
			}

			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			country_event = { id = ehof_megastructure.201 }
		}
		else_if = {
			limit = { any_owned_megastructure = { has_megastructure_flag = ehof_phase_05_decommissioned } }
			set_variable = { which = ehof_phase value = 5 }
			set_country_flag = ehof_restored_first_time
			set_country_flag = ehof_p0_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p2_first_time
			set_country_flag = ehof_p3_first_time
			set_country_flag = ehof_p4_first_time
			set_country_flag = ehof_p5_first_time

			random_system_within_border = {
				limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_05_decommissioned } }
				set_star_flag = ehof_megastructure_system@root
				every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_05_decommissioned } delete_megastructure = this }
				spawn_megastructure = {
					type = "ehof_megastructure_phase5_idle"
					orbit_angle = 0
					orbit_distance = 0
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_phase_05 }
				}
			}

			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_micro } }			give_technology = { tech = tech_ehof_phase_micro } }
			country_event = { id = ehof_megastructure.201 }
		}
		else = {
			remove_country_flag = ehof_p0_first_time
			remove_country_flag = ehof_p1_first_time
			remove_country_flag = ehof_p2_first_time
			remove_country_flag = ehof_p3_first_time
			remove_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time
			remove_country_flag = ehof_restored_first_time
			set_variable = { which = ehof_phase value = 0 }
		}
	}
}

# Set country flags if system is gained [on_system_gained]
country_event = {
    id = ehof_megastructure.013
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_country_type = default
			is_country_type = awakened_fallen_empire
			is_country_type = fallen_empire
		}
		from = {
			NOT = { has_star_flag = compound_invasion_entry }
			any_system_megastructure = {
				OR = {
					has_megastructure_flag = ehof_phase_00
					has_megastructure_flag = ehof_phase_01
					has_megastructure_flag = ehof_phase_02
					has_megastructure_flag = ehof_phase_03
					has_megastructure_flag = ehof_phase_04
					has_megastructure_flag = ehof_phase_05
					has_megastructure_flag = ehof_phase_01_decommissioned
					has_megastructure_flag = ehof_phase_02_decommissioned
					has_megastructure_flag = ehof_phase_03_decommissioned
					has_megastructure_flag = ehof_phase_04_decommissioned
					has_megastructure_flag = ehof_phase_05_decommissioned
				}
			}
		}
	}

	immediate = {
		if = {
			limit = { from = { any_system_megastructure = { has_megastructure_flag = ehof_phase_00 } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { NOT = { any_owned_megastructure = { is_megastructure_type = ehof_megastructure_phase0 } } }
				from = {
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				remove_country_flag = ehof_p0_first_time
				remove_country_flag = ehof_p1_first_time
				remove_country_flag = ehof_p2_first_time
				remove_country_flag = ehof_p3_first_time
				remove_country_flag = ehof_p4_first_time
				remove_country_flag = ehof_p5_first_time
			}
			# Else, decomission it
			else = { from = { every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_00 } delete_megastructure = this } } }
		}
		else_if = {
			limit = { from = { any_system_megastructure = { OR = { has_megastructure_flag = ehof_phase_01 has_megastructure_flag = ehof_phase_01_decommissioned } } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { check_variable = { which = ehof_phase value = 0 } }
				from = {
					if = {
						limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_01_decommissioned } }
						every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_01_decommissioned } delete_megastructure = this }
						spawn_megastructure = {
							type = "ehof_megastructure_phase1_idle"
							orbit_angle = 0
							orbit_distance = 0
							location = star
							owner = root
							init_effect = { set_megastructure_flag = ehof_phase_01 }
						}
					}
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				set_variable = { which = ehof_phase value = 1 }
				set_country_flag = ehof_restored_first_time
				set_country_flag = ehof_p0_first_time
				set_country_flag = ehof_p1_first_time
				remove_country_flag = ehof_p2_first_time
				remove_country_flag = ehof_p3_first_time
				remove_country_flag = ehof_p4_first_time
				remove_country_flag = ehof_p5_first_time
				country_event = { id = ehof_megastructure.201 }
			}
			# Else, decomission it
			else = {
				from = {
					every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_01 } delete_megastructure = this }
					spawn_megastructure = {
						type = "ehof_megastructure_phase1_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						location = star
						owner = root
						init_effect = { set_megastructure_flag = ehof_phase_01_decommissioned }
					}
				}
			}
			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }

		}
		else_if = {
			limit = { from = { any_system_megastructure = { OR = { has_megastructure_flag = ehof_phase_02 has_megastructure_flag = ehof_phase_02_decommissioned } } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { check_variable = { which = ehof_phase value = 0 } }
				from = {
					if = {
						limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_02_decommissioned } }
						every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_02_decommissioned } delete_megastructure = this }
						spawn_megastructure = {
							type = "ehof_megastructure_phase2_idle"
							orbit_angle = 0
							orbit_distance = 0
							location = star
							owner = root
							init_effect = { set_megastructure_flag = ehof_phase_02 }
						}
					}
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				set_variable = { which = ehof_phase value = 2 }
				set_country_flag = ehof_restored_first_time
				set_country_flag = ehof_p0_first_time
				set_country_flag = ehof_p1_first_time
				set_country_flag = ehof_p2_first_time
				remove_country_flag = ehof_p3_first_time
				remove_country_flag = ehof_p4_first_time
				remove_country_flag = ehof_p5_first_time
				country_event = { id = ehof_megastructure.201 }
			}
			# Else, decomission it
			else = {
				from = {
					every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_02 } delete_megastructure = this }
					spawn_megastructure = {
						type = "ehof_megastructure_phase2_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						location = star
						owner = root
						init_effect = { set_megastructure_flag = ehof_phase_02_decommissioned }
					}
				}
			}
			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }

		}
		else_if = {
			limit = { from = { any_system_megastructure = { OR = { has_megastructure_flag = ehof_phase_03 has_megastructure_flag = ehof_phase_03_decommissioned } } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { check_variable = { which = ehof_phase value = 0 } }
				from = {
					if = {
						limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_03_decommissioned } }
						every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_03_decommissioned } delete_megastructure = this }
						spawn_megastructure = {
							type = "ehof_megastructure_phase3_idle"
							orbit_angle = 0
							orbit_distance = 0
							location = star
							owner = root
							init_effect = { set_megastructure_flag = ehof_phase_03 }
						}
					}
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				set_variable = { which = ehof_phase value = 3 }
				set_country_flag = ehof_restored_first_time
				set_country_flag = ehof_p0_first_time
				set_country_flag = ehof_p1_first_time
				set_country_flag = ehof_p2_first_time
				set_country_flag = ehof_p3_first_time
				remove_country_flag = ehof_p4_first_time
				remove_country_flag = ehof_p5_first_time
				country_event = { id = ehof_megastructure.201 }
			}
			# Else, decomission it
			else = {
				from = {
					every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_03 } delete_megastructure = this }
					spawn_megastructure = {
						type = "ehof_megastructure_phase3_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						location = star
						owner = root
						init_effect = { set_megastructure_flag = ehof_phase_03_decommissioned }
					}
				}
			}
			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }

		}
		else_if = {
			limit = { from = { any_system_megastructure = { OR = { has_megastructure_flag = ehof_phase_04 has_megastructure_flag = ehof_phase_04_decommissioned } } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { check_variable = { which = ehof_phase value = 0 } }
				from = {
					if = {
						limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_04_decommissioned } }
						every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_04_decommissioned } delete_megastructure = this }
						spawn_megastructure = {
							type = "ehof_megastructure_phase4_idle"
							orbit_angle = 0
							orbit_distance = 0
							location = star
							owner = root
							init_effect = { set_megastructure_flag = ehof_phase_04 }
						}
					}
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				set_variable = { which = ehof_phase value = 4 }
				set_country_flag = ehof_restored_first_time
				set_country_flag = ehof_p0_first_time
				set_country_flag = ehof_p1_first_time
				set_country_flag = ehof_p2_first_time
				set_country_flag = ehof_p3_first_time
				set_country_flag = ehof_p4_first_time
				remove_country_flag = ehof_p5_first_time
				country_event = { id = ehof_megastructure.201 }
			}
			# Else, decomission it
			else = {
				from = {
					every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_04 } delete_megastructure = this }
					spawn_megastructure = {
						type = "ehof_megastructure_phase4_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						location = star
						owner = root
						init_effect = { set_megastructure_flag = ehof_phase_04_decommissioned }
					}
				}
			}
			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }
			if = { limit = { NOT = { has_technology = tech_prob_c } }					give_technology = { tech = tech_prob_c } }
			if = { limit = { NOT = { has_technology = tech_vedrs } }					give_technology = { tech = tech_vedrs } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_04 } }			give_technology = { tech = tech_ehof_phase_04 } }

		}
		else_if = {
			limit = { from = { any_system_megastructure = { OR = { has_megastructure_flag = ehof_phase_05 has_megastructure_flag = ehof_phase_05_decommissioned } } } }
			# If attacker doesn't have an ehof, take this one
			if = {
				limit = { check_variable = { which = ehof_phase value = 0 } }
				from = {
					if = {
						limit = { any_system_megastructure = { has_megastructure_flag = ehof_phase_05_decommissioned } }
						every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_05_decommissioned } delete_megastructure = this }
						spawn_megastructure = {
							type = "ehof_megastructure_phase5_idle"
							orbit_angle = 0
							orbit_distance = 0
							location = star
							owner = root
							init_effect = { set_megastructure_flag = ehof_phase_05 }
						}
					}
					set_star_flag = ehof_megastructure_system@root
					every_system_planet = { set_planet_flag = cant_build_here }
				}
				set_variable = { which = ehof_phase value = 5 }
				set_country_flag = ehof_restored_first_time
				set_country_flag = ehof_p0_first_time
				set_country_flag = ehof_p1_first_time
				set_country_flag = ehof_p2_first_time
				set_country_flag = ehof_p3_first_time
				set_country_flag = ehof_p4_first_time
				set_country_flag = ehof_p5_first_time
				country_event = { id = ehof_megastructure.201 }
			}
			# Else, decomission it
			else = {
				from = {
					every_system_megastructure = { limit = { has_megastructure_flag = ehof_phase_05 } delete_megastructure = this }
					spawn_megastructure = {
						type = "ehof_megastructure_phase5_decommissioned"
						orbit_angle = 0
						orbit_distance = 0
						location = star
						owner = root
						init_effect = { set_megastructure_flag = ehof_phase_05_decommissioned }
					}
				}
			}
			if = { limit = { NOT = { has_technology = tech_condensed_qe } }				give_technology = { tech = tech_condensed_qe } }
			if = { limit = { NOT = { has_technology = tech_abstract_1 } }				give_technology = { tech = tech_abstract_1 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_01 } }			give_technology = { tech = tech_ehof_phase_01 } }
			if = { limit = { NOT = { has_technology = tech_abstract_2 } }				give_technology = { tech = tech_abstract_2 } }
			if = { limit = { NOT = { has_technology = tech_negative_pressure } }		give_technology = { tech = tech_negative_pressure } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_02 } }			give_technology = { tech = tech_ehof_phase_02 } }
			if = { limit = { NOT = { has_technology = tech_dm_injection } }				give_technology = { tech = tech_dm_injection } }
			if = { limit = { NOT = { has_technology = tech_negative_mass_enrichment } }	give_technology = { tech = tech_negative_mass_enrichment } }
			if = { limit = { NOT = { has_technology = tech_grav_control } }				give_technology = { tech = tech_grav_control } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_03 } }			give_technology = { tech = tech_ehof_phase_03 } }
			if = { limit = { NOT = { has_technology = tech_ehof_phase_micro } }			give_technology = { tech = tech_ehof_phase_micro } }

		}
	}
}

# Toggle mod flags (cwtools error check)
country_event = {
    id = ehof_megastructure.004
	hide_window = yes
	is_triggered_only = yes
	trigger = { NOT = { has_global_flag = ehof_compatibility } }
	immediate = {
		set_global_flag = ehof_compatibility
		if = { limit = { NOT = { has_global_flag = planetarydiversity } }		set_global_flag = planetarydiversity		remove_global_flag = planetarydiversity }
		if = { limit = { NOT = { has_global_flag = has_real_space_mod } }		set_global_flag = has_real_space_mod		remove_global_flag = has_real_space_mod }
		if = { limit = { NOT = { has_global_flag = gigastructures_enabled } }	set_global_flag = gigastructures_enabled	remove_global_flag = gigastructures_enabled }
		if = { limit = { NOT = { has_global_flag = kugel_disabled } }			set_global_flag = kugel_disabled			remove_global_flag = kugel_disabled }
		if = { limit = { NOT = { has_global_flag = megabase_disabled } }		set_global_flag = megabase_disabled			remove_global_flag = megabase_disabled }
		if = { limit = { NOT = { has_global_flag = gigaforge_disabled } }		set_global_flag = gigaforge_disabled		remove_global_flag = gigaforge_disabled }
		if = { limit = { NOT = { has_global_flag = accelerator_disabled } }		set_global_flag = accelerator_disabled		remove_global_flag = accelerator_disabled }
		if = { limit = { NOT = { has_global_flag = zoo_disabled } }				set_global_flag = zoo_disabled				remove_global_flag = zoo_disabled }
		if = { limit = { NOT = { has_global_flag = orchid_disabled } }			set_global_flag = orchid_disabled			remove_global_flag = orchid_disabled }
		if = { limit = { NOT = { has_global_flag = acot_activated } }			set_global_flag = acot_activated			remove_global_flag = acot_activated }
	}
}

# Create additional blackholes
country_event = {
    id = ehof_megastructure.005
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		# Mod compatibility check error
		country_event = { id = ehof_megastructure.004 days = 30 }
		set_global_flag = event_horizon_offset_facility

		set_spawn_system_batch = begin
		every_system = {
			limit = {
				has_star_flag = empire_home_system
				any_ship_in_system = {
					is_ship_class = shipclass_starbase
					owner = { is_ai = no }
				}
			}
			random_system = {
				limit = {
					NOR = {
						has_star_flag = additional_blackhole
						has_star_flag = empire_cluster
					}
					distance = {
						source = prev
						use_bypasses = no
						min_jumps = 2
						max_jumps = 4
					}
				}
				spawn_system = {
					initializer = ehof_blackhole_init_system
					min_distance = 10
					max_distance = 20
					max_jumps = 0
				}
			}
		}

		while = {
			limit = { any_system = { has_star_flag = additional_blackhole } }
			random_system = {
				limit = { has_star_flag = additional_blackhole }
				every_system = {
					limit = {
						NOR = {
							is_same_value = prev
							has_hyperlane_to = prev
						}
						distance = {
							type = euclidean
							source = prev
							min_distance >= 0
							max_distance <= 25
						}
					}
					add_hyperlane = {
						from = this
						to = prev
					}
				}
				every_neighbor_system = {
					limit = { NOT = { has_star_flag = additional_blackhole } }
					set_star_flag = neigboring_blackhole
					every_neighbor_system = {
						limit = {
							has_star_flag = neigboring_blackhole
							has_hyperlane_to = prev
						}
						remove_hyperlane = {
							from = this
							to = prev
						}
					}
				}
				remove_star_flag = additional_blackhole
				every_neighbor_system = { limit = { has_star_flag = neigboring_blackhole } remove_star_flag = neigboring_blackhole }
			}
		}
		set_spawn_system_batch = end
	}
}

# Check we still have an EHOF in an OWNED system
country_event = {
    id = ehof_megastructure.006
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		check_variable = { which = ehof_phase value > 0 }
		NOT = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root } }
	}

	immediate = {
		set_variable = { which = ehof_phase value = 0 }
		remove_country_flag = ehof_p0_first_time
		remove_country_flag = ehof_p1_first_time
		remove_country_flag = ehof_p2_first_time
		remove_country_flag = ehof_p3_first_time
		remove_country_flag = ehof_p4_first_time
		remove_country_flag = ehof_p5_first_time
		remove_country_flag = ehof_restored_first_time
		if = { limit = { has_country_flag = ehof_is_upgrading }			remove_country_flag = ehof_is_upgrading }
		if = { limit = { has_country_flag = ehof_travel_diplomacy }		remove_country_flag = ehof_travel_diplomacy }
		if = { limit = { has_country_flag = ehof_can_activate }			remove_country_flag = ehof_can_activate }
		if = { limit = { has_country_flag = ehof_activating }			remove_country_flag = ehof_activating }
		if = { limit = { has_country_flag = ehof_activated }			remove_country_flag = ehof_activated }
		if = { limit = { has_country_flag = ehof_on_cooldown }			remove_country_flag = ehof_on_cooldown }
		if = { limit = { has_country_flag = ehof_malfunctioning }		remove_country_flag = ehof_malfunctioning }
		if = { limit = { has_country_flag = ehof_ai_spawning_cohesive }	remove_country_flag = ehof_ai_spawning_cohesive }
		every_owned_fleet = {
			set_event_locked = no
			remove_fleet_flag = ehof_is_at_wormhole
			remove_fleet_flag = ehof_ready_for_travel@root
		}
		random_system = {
			limit = { has_star_flag = ehof_megastructure_system@root }
			remove_star_flag = ehof_megastructure_system@root
		}
	}
}

# Mark system as visited
ship_event = {
    id = ehof_megastructure.007
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
		from = {
			NOR = {
				has_star_flag = ehof_visited_anyone
				has_star_flag = ehof_visited@root.owner
			}
		}
	}

	immediate = { ship_event = { id = ehof_megastructure.008 days = 30 } }
}

ship_event = {
    id = ehof_megastructure.008
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = solar_system }

	immediate = {
		solar_system = {
			set_star_flag = ehof_visited_anyone
			set_star_flag = ehof_visited@root.owner
		}
	}
}

# Should it activate? [Monthly Pulse]
country_event = {
	id = ehof_megastructure.009
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		check_variable = { which = ehof_phase value > 0 }
		any_system_within_border = {
			has_star_flag = ehof_megastructure_system@root
			any_fleet_in_system = {
				NOR = {
					is_constructing = mining_station
					is_constructing = research_station
					is_constructing = observation_post
					is_constructing = megastructure
					is_constructing = starbase
					is_ship_class = shipclass_mining_station
					is_ship_class = shipclass_observation_station
					is_ship_class = shipclass_research_station
					is_ship_class = shipclass_military_station
					AND = {
						is_ship_class = shipclass_starbase
						NOT = { is_ship_size = juggernaut }
					}
				}
				exists = owner
				owner = { is_same_value = root }
			}
		}
		NOR = {
			has_country_flag = ehof_can_activate
			has_country_flag = ehof_can_deactivate
			has_country_flag = ehof_activating
			has_country_flag = ehof_activated
			has_country_flag = ehof_malfunctioning
			has_country_flag = ehof_on_cooldown
			has_country_flag = ehof_is_upgrading
		}
	}

	immediate = {
		set_country_flag = ehof_can_activate
		every_owned_fleet = {
			limit = {
				OR = {
					has_fleet_flag = ehof_is_at_wormhole
					has_fleet_flag = ehof_is_at_destination
					has_fleet_flag = ehof_ready_for_travel@root
				}
			}
			remove_fleet_flag = ehof_is_at_wormhole
			remove_fleet_flag = ehof_is_at_destination
			remove_fleet_flag = ehof_ready_for_travel@root
		}
		if = {
			limit = {
				is_ai = no
				is_multiplayer = no
			}
			random_list = {
				1 = { play_sound = sfx_ehof_activate_01 }
				1 = { play_sound = sfx_ehof_activate_02 }
			}
		}
	}
}

# Should it deactivate?
country_event = {
	id = ehof_megastructure.010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_system_within_border = {
			has_star_flag = ehof_megastructure_system@root
			NOT = {
				any_fleet_in_system = {
					NOR = {
						is_constructing = mining_station
						is_constructing = research_station
						is_constructing = observation_post
						is_constructing = megastructure
						is_constructing = starbase
						is_ship_class = shipclass_mining_station
						is_ship_class = shipclass_observation_station
						is_ship_class = shipclass_research_station
						is_ship_class = shipclass_military_station
						AND = {
							is_ship_class = shipclass_starbase
							NOT = { is_ship_size = juggernaut }
						}
					}
					exists = owner
					owner = { is_same_value = root }
				}
			}
		}
		has_country_flag = ehof_can_activate
	}

	immediate = {
		remove_country_flag = ehof_can_activate
		every_owned_fleet = {
			limit = {
				OR = {
					has_fleet_flag = ehof_is_at_wormhole
					has_fleet_flag = ehof_is_at_destination
					has_fleet_flag = ehof_ready_for_travel@root
				}
			}
			remove_fleet_flag = ehof_is_at_wormhole
			remove_fleet_flag = ehof_is_at_destination
			remove_fleet_flag = ehof_ready_for_travel@root
		}
	}
}

# On building all mining/research stations in system, salvage construction ship
ship_event = {
	id = ehof_megastructure.011
	title = "ehof_megastructure.011_name"
	desc = "ehof_megastructure.011_desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "mining_station_room" }
	show_sound = event_machinery
	location = this
	is_triggered_only = yes

	trigger = {
		owner = {
			NOR = {
				check_variable = { which = ehof_phase value = 4 }
				has_country_flag = ehof_always_salvage_construction_ships
				has_country_flag = ehof_never_salvage_construction_ships
			}
		}
		exists = solar_system
		solar_system = {
			NOT = {
				any_system_planet = {
					OR = {
						AND = {
							NOT = { is_same_value = root.from }
							has_deposit_for = shipclass_mining_station
							has_mining_station = no
						}
						AND = {
							NOT = { is_same_value = root.from }
							has_deposit_for = shipclass_research_station
							has_research_station = no
						}
					}
				}
			}
			ehof_cohesive_system = yes
		}
	}

	immediate = {
		owner = {
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
		}
		solar_system = {
			every_fleet_in_system = {
				limit = {
					is_ship_class = shipclass_constructor
					exists = owner
					owner = { is_same_value = root.owner }
				}
				root.owner = { change_variable = { which = ehof_refund_ships value = 1 } }
			}
		}
		owner = { ehof_calculate_refund = yes }
	}

	option = { # Scrap the construction vessels
		custom_gui = "ehof_eventui_option"
		name = "ehof_megastructure.011_a"
		hidden_effect = {
			owner = {
				ehof_give_refund = yes
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_stations days = @ehof_ui_notification_time }
			}
			solar_system = {
				save_event_target_as = ehof_refunded_after_stations
				every_fleet_in_system = {
					limit = { is_ship_class = shipclass_constructor }
					delete_fleet = this
				}
			}
		}
	}

	option = { custom_gui = "ehof_eventui_option" default_hide_option = yes name = "ehof_megastructure.011_b" } # Dont scrap the vessels

	option = { # Never scrap my construction vessels
		custom_gui = "ehof_eventui_option"
		name = "ehof_megastructure.011_c"
		custom_tooltip = "ehof_megastructure.011_c_tooltip"
		hidden_effect = { owner = { set_country_flag = ehof_never_salvage_construction_ships } }
	}

	option = { # Always scrap my construction vessels
		custom_gui = "ehof_eventui_option"
		custom_tooltip = "ehof_megastructure.011_d_tooltip"
		name = "ehof_megastructure.011_d"
		hidden_effect = {
			owner = {
				set_country_flag = ehof_always_salvage_construction_ships
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_stations days = @ehof_ui_notification_time }
				ehof_give_refund = yes 
			}
			solar_system = {
				save_event_target_as = ehof_refunded_after_stations
				every_fleet_in_system = {
					limit = { is_ship_class = shipclass_constructor }
					delete_fleet = this
				}
			}
		}
	}
}

# Always salvage construction ships
ship_event = {
	id = ehof_megastructure.012
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			NOT = { check_variable = { which = ehof_phase value = 4 } }
			has_country_flag = ehof_always_salvage_construction_ships
		}
		exists = solar_system
		solar_system = {
			NOT = {
				any_system_planet = {
					OR = {
						AND = {
							NOT = { is_same_value = root.from }
							has_deposit_for = shipclass_mining_station
							has_mining_station = no
						}
						AND = {
							NOT = { is_same_value = root.from }
							has_deposit_for = shipclass_research_station
							has_research_station = no
						}
					}
				}
			}
			ehof_cohesive_system = yes
		}
	}

	immediate = {
		owner = {
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
		}
		solar_system = {
			save_event_target_as = ehof_refunded_after_stations
			every_fleet_in_system = {
				limit = { is_ship_class = shipclass_constructor }
				root.owner = { change_variable = { which = ehof_refund_ships value = 1 } }
				delete_fleet = this
			}
		}
		owner = {
			ehof_calculate_refund = yes
			ehof_give_refund = yes
			remove_country_flag = ehof_refunded_after_outpost
			remove_country_flag = ehof_refunded_after_stations
			remove_country_flag = ehof_refunded_after_inaccurate
			set_timed_country_flag = { flag = ehof_refunded_after_stations days = @ehof_ui_notification_time }
		}
	}
}

#########################################################################################################
########################################### EHOF Construction ###########################################
#########################################################################################################
country_event = {
	id = ehof_megastructure.101
	title = "ehof_megastructure.101_name"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "evt_ehof_room" }
	show_sound = event_dyson_sphere_build_complete
	location = event_target:ehof_megastructure_system
	is_triggered_only = yes
	desc = { trigger = { check_variable = { which = ehof_phase value = 5 } } text = "ehof_megastructure.101_desc_5" }
	desc = { trigger = { check_variable = { which = ehof_phase value = 4 } } text = "ehof_megastructure.101_desc_4" }
	desc = { trigger = { check_variable = { which = ehof_phase value = 3 } } text = "ehof_megastructure.101_desc_3" }
	desc = { trigger = { NOT = { has_country_flag = ehof_restored } check_variable = { which = ehof_phase value = 2 } } text = "ehof_megastructure.101_desc_2" }
	desc = { trigger = { check_variable = { which = ehof_phase value = 1 } } text = "ehof_megastructure.101_desc_1" }
	desc = { trigger = { check_variable = { which = ehof_phase value = 0 } } text = "ehof_megastructure.101_desc_0" }
	desc = { trigger = { has_country_flag = ehof_restored check_variable = { which = ehof_phase value = 2 } } text = "ehof_megastructure.101_desc_restored" }

	trigger = {
		OR = {
			AND = {
				has_megastructure = ehof_megastructure_phase2_idle
				has_country_flag = ehof_restored
				NOT = { has_country_flag = ehof_restored_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase0
				NOT = { has_country_flag = ehof_p0_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase5_idle
				NOT = { has_country_flag = ehof_p5_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase4_idle
				NOT = { has_country_flag = ehof_p4_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase3_idle
				NOT = { has_country_flag = ehof_p3_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase2_idle
				NOT = { has_country_flag = ehof_restored }
				NOT = { has_country_flag = ehof_p2_first_time }
			}
			AND = {
				has_megastructure = ehof_megastructure_phase1_idle
				NOT = { has_country_flag = ehof_p1_first_time }
			}
		}
	}

	immediate = {

		# Set EHOF system flag
		random_system_within_border = {
			limit = {
				OR = {
					has_megastructure = ehof_megastructure_phase0
					has_megastructure = ehof_megastructure_restored
					has_megastructure = ehof_megastructure_phase1_idle
					has_megastructure = ehof_megastructure_phase2_idle
					has_megastructure = ehof_megastructure_phase3_idle
					has_megastructure = ehof_megastructure_phase4_idle
					has_megastructure = ehof_megastructure_phase5_idle
				}
			}
			set_star_flag = ehof_megastructure_system@root
			every_system_planet = { set_planet_flag = cant_build_here }
			save_event_target_as = ehof_megastructure_system
		}

		# Restored
		if = {
			limit = { has_country_flag = ehof_restored }
			set_country_flag = ehof_restored_first_time
			remove_country_flag = ehof_restored
			set_country_flag = ehof_p2_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p0_first_time
			set_timed_global_flag = { flag = ehof_recently_built_phase_2 days = 2 }
		}

		# Phase 5
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase5_idle }
			set_country_flag = ehof_p5_first_time
			set_variable = { which = ehof_phase value = 5 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_5 days = 2 }
		}

		# Phase 4
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase4_idle }
			set_country_flag = ehof_p4_first_time
			set_variable = { which = ehof_phase value = 4 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_4 days = 2 }
		}

		# Phase 3
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase3_idle }
			set_country_flag = has_built_or_repaired_megastructure
			set_country_flag = ehof_p3_first_time
			set_variable = { which = ehof_phase value = 3 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_3 days = 2 }
		}

		# Phase 2
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase2_idle }
			set_country_flag = ehof_p2_first_time
			set_variable = { which = ehof_phase value = 2 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_2 days = 2 }
		}

		# Phase 1
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase1_idle }
			set_country_flag = ehof_p1_first_time
			set_variable = { which = ehof_phase value = 1 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_1 days = 2 }
		}

		# Phase 0
		else_if = {
			limit = { has_megastructure = ehof_megastructure_phase0 }
			set_country_flag = ehof_p0_first_time
			set_variable = { which = ehof_phase value = 0 }
			set_timed_global_flag = { flag = ehof_recently_built_phase_0 days = 2 }
		}

		# Set globals for localization
		if = { limit = { exists = event_target:ehof_recently_built_system	} clear_global_event_target = ehof_recently_built_system }
		if = { limit = { exists = event_target:ehof_recently_built_country	} clear_global_event_target = ehof_recently_built_country }
		random_system_within_border = {
			limit = { has_star_flag = ehof_megastructure_system@root }
			save_global_event_target_as = ehof_recently_built_system
		}
		save_global_event_target_as = ehof_recently_built_country

		# Notify everyone else
		every_relation = {
			limit = {
				is_country_type = default
				is_ai = no
				has_communications = root
			}
			country_event = { id = ehof_megastructure.102 }
		}

		# Check EHOF state
		country_event = { id = ehof_megastructure.009 days = 2 }
	}

	option = { custom_gui = "ehof_eventui_option" name = GOOD }
}

# Alert contacts megastructure upgraded
country_event = {
	id = ehof_megastructure.102
	title = "ehof_megastructure.102_name"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "evt_ehof_room" }
	show_sound = event_mega_structure_other_empire_build_complete
	location = event_target:ehof_recently_built_system
	is_triggered_only = yes
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_5 } text = "ehof_megastructure.102_desc_5" }
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_4 } text = "ehof_megastructure.102_desc_4" }
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_3 } text = "ehof_megastructure.102_desc_3" }
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_2 } text = "ehof_megastructure.102_desc_2" }
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_1 } text = "ehof_megastructure.102_desc_1" }
	desc = { trigger = { has_global_flag = ehof_recently_built_phase_0 } text = "ehof_megastructure.102_desc_0" }
	
	option = { custom_gui = "ehof_eventui_option" name = OK }
}

country_event = {
	id = ehof_megastructure.103
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				is_megastructure_type = ehof_megastructure_phase1_idle
				is_megastructure_type = ehof_megastructure_phase2_idle
				is_megastructure_type = ehof_megastructure_phase3_idle
				is_megastructure_type = ehof_megastructure_phase4_idle
				is_megastructure_type = ehof_megastructure_phase5_idle
				is_megastructure_type = ehof_gateway
				is_megastructure_type = ehof_gateway_restored
			}
		}
	}

	immediate = {
		every_relation = {
			limit = { is_country_type = default }
			create_message = {
				type = ALIEN_MEGASTRUCTURE_BUILT
				localization = MESSAGE_ALIEN_MEGASTRUCTURE_BUILT
				days = 30
				target = root.from # the Go To
				variable = {
					type = name
					localization = COUNTRY
					scope = root
				}
				variable = {
					type = name
					localization = MEGASTRUCTURE
					scope = root.from
				}
				variable = {
					type = name
					localization = SYSTEM
					scope = root.fromfrom
				}
			}
		}
	}
}

########################################################################################################
########################################## EHOF State Changes ##########################################
########################################################################################################
# Set to Idle
country_event = {
	id = ehof_megastructure.201
	hide_window = yes
	is_triggered_only = yes

	trigger = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root } }

	immediate = {
		if = { limit = { has_country_flag = ehof_activating }	remove_country_flag = ehof_activating }
		if = { limit = { has_country_flag = ehof_activated }	remove_country_flag = ehof_activated }
		if = { limit = { has_country_flag = ehof_on_cooldown }	remove_country_flag = ehof_on_cooldown }
		random_system_within_border = {
			limit = { has_star_flag = ehof_megastructure_system@root }
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_same_value = root }
				}
				clear_orders = yes
				clear_fleet_actions = this
				remove_auto_move_target = yes
				set_event_locked = no
				remove_fleet_flag = ehof_is_at_wormhole
				remove_fleet_flag = ehof_ready_for_travel@root
			}
			if = {
				limit = {
					NOT = {
						any_system_megastructure = {
							OR = {
								is_megastructure_type = ehof_megastructure_phase1_idle
								is_megastructure_type = ehof_megastructure_phase2_idle
								is_megastructure_type = ehof_megastructure_phase3_idle
								is_megastructure_type = ehof_megastructure_phase4_idle
								is_megastructure_type = ehof_megastructure_phase5_idle
							}
						}
					}
				}
				root = { ehof_set_to_idle = yes }
			}
		}
		country_event = { id = ehof_megastructure.009 days = 2 } # Check EHOF state
	}
}

# Set to Firing
country_event = {
	id = ehof_megastructure.202
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { has_country_flag = ehof_can_activate }	remove_country_flag = ehof_can_activate }
		set_country_flag = ehof_activating
		ehof_set_to_activating = yes
	}
}

# Set to Active
country_event = {
	id = ehof_megastructure.203
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { is_ai = yes } ehof_set_to_activated = yes }
		else = {
			if = { limit = { has_country_flag = ehof_travel_diplomacy }	remove_country_flag = ehof_travel_diplomacy }
			if = { limit = { has_country_flag = ehof_activating }	remove_country_flag = ehof_activating }
			set_country_flag = ehof_activated
			ehof_set_to_activated = yes
			country_event = { id = ehof_megastructure.204 days = 30 }
		}
	}
}

# If still activated in 1 month, reset it
country_event = {
	id = ehof_megastructure.204
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = ehof_permanent }
		has_country_flag = ehof_activated
	}

	immediate = { country_event = { id = ehof_megastructure.307 } }
}

# Set to Cooldown
country_event = {
	id = ehof_megastructure.205
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { is_ai = yes } ehof_set_to_idle = yes }
		else = {
			if = { limit = { has_country_flag = ehof_travel_diplomacy }		remove_country_flag = ehof_travel_diplomacy }
			if = { limit = { has_country_flag = ehof_can_activate }			remove_country_flag = ehof_can_activate }
			if = { limit = { has_country_flag = ehof_activating }			remove_country_flag = ehof_activating }
			if = { limit = { has_country_flag = ehof_activated }			remove_country_flag = ehof_activated }
			if = { limit = { has_country_flag = ehof_malfunctioning }		remove_country_flag = ehof_malfunctioning }
			set_country_flag = ehof_on_cooldown
			random_system_within_border = {
				limit = { has_star_flag = ehof_megastructure_system@root }
				every_fleet_in_system = {
					limit = {
						exists = owner
						owner = { is_same_value = root }
					}
					clear_orders = yes
					clear_fleet_actions = this
					remove_auto_move_target = yes
					set_event_locked = no
					remove_fleet_flag = ehof_is_at_wormhole
					remove_fleet_flag = ehof_ready_for_travel@root
				}
				if = {
					limit = {
						NOT = {
							any_system_megastructure = {
								OR = {
									is_megastructure_type = ehof_megastructure_phase1_idle
									is_megastructure_type = ehof_megastructure_phase2_idle
									is_megastructure_type = ehof_megastructure_phase3_idle
									is_megastructure_type = ehof_megastructure_phase4_idle
									is_megastructure_type = ehof_megastructure_phase5_idle
								}
							}
						}
					}
					root = { ehof_set_to_idle = yes }
				}
			}
			if = {		limit = { check_variable = { which = ehof_phase value = 1 } } country_event = { id = ehof_megastructure.201 days = @ehof_phase1_cooldown_days } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } country_event = { id = ehof_megastructure.201 days = @ehof_phase2_cooldown_days } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } country_event = { id = ehof_megastructure.201 days = @ehof_phase3_cooldown_days } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 4 } } country_event = { id = ehof_megastructure.201 days = @ehof_phase4_cooldown_days } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } country_event = { id = ehof_megastructure.201 days = @ehof_phase3_cooldown_days } }
		}
	}
}

# Set to Malfunctioning
country_event = {
	id = ehof_megastructure.206
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { has_country_flag = ehof_travel_diplomacy }	remove_country_flag = ehof_travel_diplomacy }
		if = { limit = { has_country_flag = ehof_can_activate }		remove_country_flag = ehof_can_activate }
		if = { limit = { has_country_flag = ehof_activating }		remove_country_flag = ehof_activating }
		if = { limit = { has_country_flag = ehof_activated }		remove_country_flag = ehof_activated }
		if = { limit = { has_country_flag = ehof_on_cooldown }		remove_country_flag = ehof_on_cooldown }
		set_country_flag = ehof_malfunctioning
		random_system_within_border = {
			limit = { has_star_flag = ehof_megastructure_system@root }
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_same_value = root }
				}
				clear_orders = yes
				clear_fleet_actions = this
				remove_auto_move_target = yes
				set_event_locked = no
				remove_fleet_flag = ehof_is_at_wormhole
				remove_fleet_flag = ehof_ready_for_travel@root
			}
			if = {
				limit = {
					NOT = {
						any_system_megastructure = {
							OR = {
								is_megastructure_type = ehof_megastructure_phase1_idle
								is_megastructure_type = ehof_megastructure_phase2_idle
								is_megastructure_type = ehof_megastructure_phase3_idle
								is_megastructure_type = ehof_megastructure_phase4_idle
								is_megastructure_type = ehof_megastructure_phase5_idle
							}
						}
					}
				}
				root = { ehof_set_to_idle = yes }
			}
		}
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			if = {
				limit = { any_system_megastructure = { is_megastructure_type = ehof_megastructure_wormhole_destination } }
				every_system_megastructure = { limit = { is_megastructure_type = ehof_megastructure_wormhole_destination } delete_megastructure = this }
			}
		}
		if = {		limit = { check_variable = { which = ehof_phase value = 1 } } country_event = { id = ehof_megastructure.205 days = @ehof_p1_malfunction_time } }
		else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } country_event = { id = ehof_megastructure.205 days = @ehof_p2_malfunction_time } }
		else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } country_event = { id = ehof_megastructure.205 days = @ehof_p3_malfunction_time } }
		else_if = {	limit = { check_variable = { which = ehof_phase value = 4 } } country_event = { id = ehof_megastructure.205 days = @ehof_p4_malfunction_time } }
		else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } country_event = { id = ehof_megastructure.205 days = @ehof_p3_malfunction_time } }
	}
}

########################################################################################################
############################################## EHOF Travel #############################################
########################################################################################################
country_event = {
	id = ehof_megastructure.301
	title = "ehof_ehof"
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "ehof_mainui_window"
	picture_event_data = {
		portrait = root
		graphical_culture = root
		room = "ehof_room"
	}
	location = event_target:ehof_megastructure_system
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 1 }
			NOR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_01_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 1 }
			OR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_11_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 2 }
			NOR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_02_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 2 }
			OR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_12_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 3 }
			NOR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_03_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 3 }
			OR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_13_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 4 }
			NOR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_04_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 4 }
			OR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_14_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 5 }
			NOR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_05_desc"
	}
	desc = {
		trigger = {
			check_variable = { which = ehof_phase value = 5 }
			OR = {
				check_variable = { which = ehof_acc_true value > 0 }
				check_variable = { which = ehof_acc_false value > 0 }
				check_variable = { which = ehof_nogo value > 0 }
				check_variable = { which = ehof_stats_debris value > 0 }
				check_variable = { which = ehof_stats_detonated value > 0 }
				check_variable = { which = ehof_stats_damaged value > 0 }
			}
		}
		text = "ehof_megastructure.301_15_desc"
	}

	trigger = { NOT = { has_country_flag = ehof_travel_diplomacy } }
	immediate = {
		ehof_mega_system = yes
		set_country_flag = ehof_travel_diplomacy
		if = {
			limit = {
				OR = {
					has_country_flag = ehof_activating
					has_country_flag = ehof_can_activate
				}
			}
			ehof_pre_flight = yes
		}
	}

	###############################################################################################################
	# DESTINATIONS ################################################################################################
	###############################################################################################################
	option = {
		custom_gui = "enclave_ehof_ehof_header"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
		}
		name = "ehof_header_01"
		hidden_effect = { remove_country_flag = ehof_travel_diplomacy country_event = { id = ehof_megastructure.301 } }
	}

	# Random
	option = {
		custom_tooltip = "ehof_standard_cat_00"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			check_variable = { which = ehof_phase value <= 4 }
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c00 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c00 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c00 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c00 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c00 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c00 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c00 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c00 = yes }
		name = "ehof_category_00"
		hidden_effect = { ehof_dest_cat00 = yes }
	}

	# Point of Interest
	option = {
		custom_tooltip = "ehof_standard_cat_01"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_poi }
			check_variable = { which = ehof_phase value > 0 }
			OR = {
				has_global_flag = ehof_sa_system_spawned
				has_global_flag = ehof_traders_spawned
				has_country_flag = ehof_started_reality_code
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c01 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c01 = yes }
		name = "ehof_standard_cattitle_01"
		hidden_effect = { ehof_dest_cat01 = yes }
	}

	# Point of Interest
	option = {
		custom_tooltip = "ehof_standard_cat_01"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_poi
			check_variable = { which = ehof_phase value > 0 }
			OR = {
				has_global_flag = ehof_sa_system_spawned
				has_global_flag = ehof_traders_spawned
				has_country_flag = ehof_started_reality_code
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c01 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c01 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c01 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c01 = yes }
		name = "ehof_standard_cattitle_01_new"
		hidden_effect = { ehof_dest_cat01 = yes }
	}

	# Bountiful Stars
	option = {
		custom_tooltip = "ehof_standard_cat_02"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_rare }
			check_variable = { which = ehof_phase value = 3 }
			any_system = {
				ehof_is_rare = yes
				has_star_flag = ehof_system_created_by_@root
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c02 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c02 = yes }
		name = "ehof_standard_cattitle_02"
		hidden_effect = { ehof_dest_cat02 = yes }
	}

	# Bountiful Stars
	option = {
		custom_tooltip = "ehof_standard_cat_02"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_rare
			check_variable = { which = ehof_phase value = 3 }
			any_system = {
				ehof_is_rare = yes
				has_star_flag = ehof_system_created_by_@root
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c02 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c02 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c02 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c02 = yes }
		name = "ehof_standard_cattitle_02_new"
		hidden_effect = { ehof_dest_cat02 = yes }
	}

	# Wormhole Cohesive
	option = {
		custom_tooltip = "ehof_standard_cat_03"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_normal }
			OR = {
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
				check_variable = { which = ehof_phase value = 1 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c03 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c03 = yes }
		name = "ehof_standard_cattitle_03"
		hidden_effect = { ehof_dest_cat03 = yes }
	}

	# Wormhole Cohesive
	option = {
		custom_tooltip = "ehof_standard_cat_03"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_normal
			OR = {
				check_variable = { which = ehof_phase value = 5 }
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
				check_variable = { which = ehof_phase value = 1 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c03 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c03 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c03 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c03 = yes }
		name = "ehof_standard_cattitle_03_new"
		hidden_effect = { ehof_dest_cat03 = yes }
	}

	# Stellar Remnants
	option = {
		if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_05" } else = { custom_tooltip = "ehof_standard_cat_05" }
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			check_variable = { which = ehof_phase value = 3 }
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c05 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c05 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c05 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c05 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c05 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c05 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c05 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c05 = yes }
		name = "ehof_standard_cattitle_05"
		hidden_effect = { ehof_dest_cat05 = yes }
	}

	# Binary Stars
	option = {
		custom_tooltip = "ehof_standard_cat_06"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			OR = {
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c06 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c06 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c06 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c06 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c06 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c06 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c06 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c06 = yes }
		name = "ehof_standard_cattitle_06"
		hidden_effect = { ehof_dest_cat06 = yes }
	}

	# Trinary Stars
	option = {
		custom_tooltip = "ehof_standard_cat_07"
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			check_variable = { which = ehof_phase value = 3 }
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c07 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c07 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c07 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c07 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c07 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c07 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c07 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c07 = yes }
		name = "ehof_standard_cattitle_07"
		hidden_effect = { ehof_dest_cat07 = yes }
	}

	# Giant Stars
	option = {
		if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_08" } else = { custom_tooltip = "ehof_standard_cat_08" }
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			OR = {
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c08 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c08 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c08 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c08 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c08 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c08 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c08 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c08 = yes }
		name = "ehof_standard_cattitle_08"
		hidden_effect = { ehof_dest_cat08 = yes }
	}

	# Fledgling Stars
	option = {
		if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_09" } else = { custom_tooltip = "ehof_standard_cat_09" }
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			OR = {
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
				check_variable = { which = ehof_phase value = 1 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c09 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c09 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c09 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c09 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c09 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c09 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c09 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c09 = yes }
		name = "ehof_standard_cattitle_09"
		hidden_effect = { ehof_dest_cat09 = yes }
	}

	# Dwarf Stars
	option = {
		if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_10" } else = { custom_tooltip = "ehof_standard_cat_10" }
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			OR = {
				check_variable = { which = ehof_phase value = 3 }
				check_variable = { which = ehof_phase value = 2 }
				check_variable = { which = ehof_phase value = 1 }
			}
		}
		allow = {
			if = { limit = { check_variable = { which = ehof_phase value = 4 } } a4_c10 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 3 } } a3_c10 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 2 } } a2_c10 = yes }
			if = { limit = { check_variable = { which = ehof_phase value = 1 } } a1_c10 = yes }
		}
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } c4_c10 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } c3_c10 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } c2_c10 = yes }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } c1_c10 = yes }
		name = "ehof_standard_cattitle_10"
		hidden_effect = { ehof_dest_cat10 = yes }
	}

	################################## Phase 4 Travel ##################################

	option = {
		custom_tooltip = "ehof_standard_cat_01"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_01"
		allow = { a4_c01 = yes }
		c4_c01 = yes
		hidden_effect = { country_event = { id = ehof_category.01 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_poi }
			check_variable = { which = ehof_phase value = 4 }
			OR = {
				has_global_flag = ehof_sa_system_spawned
				has_global_flag = ehof_traders_spawned
				has_country_flag = ehof_started_reality_code
			}
		}
	}

	option = {
		custom_tooltip = "ehof_standard_cat_01"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_01_new"
		allow = { a4_c01 = yes }
		c4_c01 = yes
		hidden_effect = { country_event = { id = ehof_category.01 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_poi
			check_variable = { which = ehof_phase value = 4 }
			OR = {
				has_global_flag = ehof_sa_system_spawned
				has_global_flag = ehof_traders_spawned
				has_country_flag = ehof_started_reality_code
			}
		}
	}

	option = {
		custom_tooltip = "ehof_standard_cat_02"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_02"
		allow = { a4_c02 = yes }
		c4_c02 = yes
		hidden_effect = { country_event = { id = ehof_category.02 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_rare }
			check_variable = { which = ehof_phase value = 4 }
			any_system = {
				ehof_is_rare = yes
				has_star_flag = ehof_system_created_by_@root
			}
		}
	}

	option = {
		custom_tooltip = "ehof_standard_cat_02"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_02_new"
		allow = { a4_c02 = yes }
		c4_c02 = yes
		hidden_effect = { country_event = { id = ehof_category.02 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_rare
			check_variable = { which = ehof_phase value = 4 }
			any_system = {
				ehof_is_rare = yes
				has_star_flag = ehof_system_created_by_@root
			}
		}
	}

	option = {
		custom_tooltip = "ehof_standard_cat_03"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_03"
		allow = { a4_c03 = yes }
		c4_c03 = yes
		hidden_effect = { country_event = { id = ehof_category.03 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			NOT = { has_country_flag = ehof_new_system_normal }
			check_variable = { which = ehof_phase value = 4 }
		}
	}

	option = {
		custom_tooltip = "ehof_standard_cat_03"
		custom_gui = "ehof_mainui_option"
		name = "ehof_category_03_new"
		allow = { a4_c03 = yes }
		c4_c03 = yes
		hidden_effect = { country_event = { id = ehof_category.03 } }
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
			has_country_flag = ehof_new_system_normal
			check_variable = { which = ehof_phase value = 4 }
		}
	}

	option = { if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_05" } else = { custom_tooltip = "ehof_standard_cat_05" } custom_gui = "ehof_mainui_option" name = "ehof_category_05" allow = { a4_c05 = yes } c4_c05 = yes hidden_effect = { country_event = { id = ehof_category.05 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = { custom_tooltip = "ehof_standard_cat_06" custom_gui = "ehof_mainui_option" name = "ehof_category_06" allow = { a4_c06 = yes } c4_c06 = yes hidden_effect = { country_event = { id = ehof_category.06 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = { custom_tooltip = "ehof_standard_cat_07" custom_gui = "ehof_mainui_option" name = "ehof_category_07" allow = { a4_c07 = yes } c4_c07 = yes hidden_effect = { country_event = { id = ehof_category.07 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = { if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_08" } else = { custom_tooltip = "ehof_standard_cat_08" } custom_gui = "ehof_mainui_option" name = "ehof_category_08" allow = { a4_c08 = yes } c4_c08 = yes hidden_effect = { country_event = { id = ehof_category.08 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = { if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_09" } else = { custom_tooltip = "ehof_standard_cat_09" } custom_gui = "ehof_mainui_option" name = "ehof_category_09" allow = { a4_c09 = yes } c4_c09 = yes hidden_effect = { country_event = { id = ehof_category.09 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = { if = { limit = { has_global_flag = has_real_space_mod } custom_tooltip = "ehof_realspace_cat_10" } else = { custom_tooltip = "ehof_standard_cat_10" } custom_gui = "ehof_mainui_option" name = "ehof_category_10" allow = { a4_c10 = yes } c4_c10 = yes hidden_effect = { country_event = { id = ehof_category.10 } } trigger = { OR = { has_country_flag = ehof_activating has_country_flag = ehof_can_activate } check_variable = { which = ehof_phase value = 4 } } }
	option = {
		custom_gui = "enclave_ehof_ehof_header"
		trigger = {
			OR = {
				has_country_flag = ehof_activating
				has_country_flag = ehof_can_activate
			}
		}
		name = "ehof_header_blank"
		hidden_effect = { remove_country_flag = ehof_travel_diplomacy country_event = { id = ehof_megastructure.301 } }
	}

	###############################################################################################################
	# INFORMATION #################################################################################################
	###############################################################################################################
	option = {
		custom_gui = "enclave_ehof_ehof_header"
		name = "ehof_header_02"
		hidden_effect = { remove_country_flag = ehof_travel_diplomacy country_event = { id = ehof_megastructure.301 } }
	}

	# Main Menu
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 5 } } name = "ehof_mega_phase.10041_option_5" response_text = "ehof_megastructure.301_05_desc" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 4 } } name = "ehof_mega_phase.10041_option_5" response_text = "ehof_megastructure.301_04_desc" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 3 } } name = "ehof_mega_phase.10041_option_5" response_text = "ehof_megastructure.301_03_desc" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 2 } } name = "ehof_mega_phase.10041_option_5" response_text = "ehof_megastructure.301_02_desc" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 1 } } name = "ehof_mega_phase.10041_option_5" response_text = "ehof_megastructure.301_01_desc" is_dialog_only = yes }

	# How it works
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 5 } } name = "ehof_mega_phase.10041_option_2" response_text = "ehof_mega_phase.10041_response_2_p5" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 4 } } name = "ehof_mega_phase.10041_option_2" response_text = "ehof_mega_phase.10041_response_2_p4" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 3 } } name = "ehof_mega_phase.10041_option_2" response_text = "ehof_mega_phase.10041_response_2_p3" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 2 } } name = "ehof_mega_phase.10041_option_2" response_text = "ehof_mega_phase.10041_response_2_p2" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 1 } } name = "ehof_mega_phase.10041_option_2" response_text = "ehof_mega_phase.10041_response_2_p1" is_dialog_only = yes }

	# The Dangers
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 5 } } name = "ehof_mega_phase.10041_option_3" response_text = "ehof_mega_phase.10041_response_3_p5" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 4 } } name = "ehof_mega_phase.10041_option_3" response_text = "ehof_mega_phase.10041_response_3_p4" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 3 } } name = "ehof_mega_phase.10041_option_3" response_text = "ehof_mega_phase.10041_response_3_p3" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 2 } } name = "ehof_mega_phase.10041_option_3" response_text = "ehof_mega_phase.10041_response_3_p2" is_dialog_only = yes }
	option = { custom_gui = "ehof_mainui_option" trigger = { check_variable = { which = ehof_phase value = 1 } } name = "ehof_mega_phase.10041_option_3" response_text = "ehof_mega_phase.10041_response_3_p1" is_dialog_only = yes }

	# Strategic Resource
	option = {
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_sr_negative_mass_found
				resource_stockpile_compare = { resource = ehof_sr_negative_mass value > 0 }
			}
		}
		name = ehof_mega_phase.10041_option_4
		response_text = ehof_mega_phase.10041_response_4
		is_dialog_only = yes
	}
	option = {
		custom_gui = "ehof_mainui_option"
		trigger = {
			OR = {
				has_country_flag = ehof_sr_sentient_metal_found
				resource_stockpile_compare = { resource = ehof_sr_sentient_metal value > 0 }
			}
		}
		name = ehof_mega_phase.10041_option_8
		response_text = ehof_mega_phase.10041_response_8
		is_dialog_only = yes
	}

	option = {
		custom_gui = "enclave_ehof_ehof_header"
		name = "ehof_header_blank"
		hidden_effect = { remove_country_flag = ehof_travel_diplomacy country_event = { id = ehof_megastructure.301 } }
	}

	###############################################################################################################
	# ACTIONS #####################################################################################################
	###############################################################################################################
	option = {
		custom_gui = "enclave_ehof_ehof_header"
		name = "ehof_header_03"
		hidden_effect = { remove_country_flag = ehof_travel_diplomacy country_event = { id = ehof_megastructure.301 } }
	}

	# I wish to dismantle my EHOF
	option = {
		custom_gui = "ehof_mainui_option"
		name = ehof_mega_phase.10041_option_7
		hidden_effect = { country_event = { id = ehof_megastructure.410 } }
	}
	
	option = { custom_gui = "ehof_mainui_option" name = "ehof_leavestation" ehof_leave_station = yes default_hide_option = yes }
}

#########################################################################################################
######################################### Accuracy + Generation #########################################
#########################################################################################################
country_event = {
	id = ehof_megastructure.303
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		# Factor phase
		if = {		limit = { check_variable = { which = ehof_phase value >= 3 } }	set_variable = { which = ehof_accuracy value = 25 } }
		else_if = { limit = { check_variable = { which = ehof_phase value = 2 } }	set_variable = { which = ehof_accuracy value = 21 } }
		else_if = { limit = { check_variable = { which = ehof_phase value = 1 } }	set_variable = { which = ehof_accuracy value = 17 } }

		# Factor target
		if = {		limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_01 } } multiply_variable = { which = ehof_accuracy value = 1.5 } }	# phase 3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_02 } } multiply_variable = { which = ehof_accuracy value = 1.4 } }	# phase 3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_03 } } multiply_variable = { which = ehof_accuracy value = 1.2 } }	# phase 1,2,3,4,5
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_05 } } multiply_variable = { which = ehof_accuracy value = 0.7 } }	# phase 3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_06 } } multiply_variable = { which = ehof_accuracy value = 0.9 } }	# phase 2,3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_07 } } multiply_variable = { which = ehof_accuracy value = 0.8 } }	# phase 3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_08 } } multiply_variable = { which = ehof_accuracy value = 1.0 } }	# phase 2,3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_09 } } multiply_variable = { which = ehof_accuracy value = 1.2 } }	# phase 1,2,3,4
		else_if = {	limit = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_10 } } multiply_variable = { which = ehof_accuracy value = 1.3 } }	# phase 1,2,3,4

		# Factor random
		set_variable = { which = ehof_final_accuracy value = 0 }
		while = {
			limit = { check_variable = { which = ehof_accuracy value > 1 } }
			subtract_variable = { which = ehof_accuracy value = 1 }
			random_list = {
				1 = { change_variable = { which = ehof_final_accuracy value = 1 } }
				1 = { change_variable = { which = ehof_final_accuracy value = 2 } }
				1 = { change_variable = { which = ehof_final_accuracy value = 3 } }
				1 = { change_variable = { which = ehof_final_accuracy value = 4 } }
				1 = { change_variable = { which = ehof_final_accuracy value = 5 } }
			}
		}
		random_list = {
			80 = {}
			20 = {
				modifier = { factor = 0 has_country_flag = ehof_failed_accuracy }
				modifier = { factor = 0 has_country_flag = ehof_failed_last_time }
				modifier = { factor = 0.8 check_variable = { which = ehof_phase value = 2 } }
				modifier = { factor = 0.6 check_variable = { which = ehof_phase value = 3 } }
				modifier = { factor = 0.4 check_variable = { which = ehof_phase value = 5 } }
				random_list = {
					1 = { subtract_variable = {	which = ehof_final_accuracy value = 15 } }
					1 = { subtract_variable = {	which = ehof_final_accuracy value = 10 } }
					1 = { subtract_variable = {	which = ehof_final_accuracy value = 5 } }
					1 = { change_variable = {	which = ehof_final_accuracy value = 5 } }
					1 = { change_variable = {	which = ehof_final_accuracy value = 10 } }
					1 = { change_variable = {	which = ehof_final_accuracy value = 15 } }
					1 = { divide_variable = {	which = ehof_final_accuracy value = 1.3 } }
					1 = { divide_variable = {	which = ehof_final_accuracy value = 1.2 } }
					1 = { divide_variable = {	which = ehof_final_accuracy value = 1.1 } }
					1 = { multiply_variable = {	which = ehof_final_accuracy value = 1.1 } }
					1 = { multiply_variable = {	which = ehof_final_accuracy value = 1.2 } }
					1 = { multiply_variable = {	which = ehof_final_accuracy value = 1.3 } }
				}
			}
		}

		if = { limit = { has_country_flag = ehof_failed_accuracy }						change_variable = { which = ehof_bonus_accuracy value = 5 }	remove_country_flag = ehof_failed_accuracy }
		if = { limit = { check_variable = { which = ehof_bonus_accuracy value > 0 } }	change_variable = { which = ehof_final_accuracy value = ehof_bonus_accuracy } }
		if = { limit = { has_country_flag = ehof_failed_last_time }						multiply_variable = { which = ehof_final_accuracy value = 2 } remove_country_flag = ehof_failed_last_time }
		if = { limit = { has_country_flag = ehof_first_time_immune }					set_variable = { which = ehof_final_accuracy value = 100 } }

		# Generation
		if = {
			limit = {
				OR = {
					check_variable = { which = ehof_final_accuracy value >= 45 }
					any_system_within_border = {
						has_star_flag = ehof_megastructure_system@root
						has_star_flag = ehof_target_category_00
					}
					has_country_flag = ehof_skip_accuracy
					check_variable = { which = ehof_phase value = 4 }
				}
			}

			# Not Accurate
			if = {
				limit = {
					NOR = {
						check_variable = { which = ehof_final_accuracy value >= 70 }
						any_system_within_border = {
							has_star_flag = ehof_megastructure_system@root
							has_star_flag = ehof_target_category_00
						}
						has_country_flag = ehof_skip_accuracy
						check_variable = { which = ehof_phase value = 4 }
					}
				}
				set_country_flag = ehof_failed_accuracy
				every_system = { limit = { has_star_flag = ehof_destination_system@root } remove_star_flag = ehof_destination_system@root }
				random_system = { limit = { ehof_travel_conditions = yes } set_star_flag = ehof_destination_system@root }

				random_planet_within_border = {
					limit = {
						planet_size > 0
						planet_size < 15
						is_star = no
						is_asteroid = no
						is_colony = no
						has_mining_station = no
						has_research_station = no
						NOT = { is_planet_class = pc_gas_giant }
					}
					ehof_add_dark_matter_deposit = yes
				}
			}
			else = { set_variable = { which = ehof_bonus_accuracy value = 0 } }

			# Open the wormholes
			country_event = { id = ehof_megastructure.304 days = @ehof_short_cooldown }
		}

		# No Generation (Set to malfunctioning, then to cooldown and notify that wormhole failed to generate)
		else = {
			set_country_flag = ehof_failed_last_time
			country_event = { id = ehof_megastructure.206 } # Set to Malfunctioning
			country_event = { id = ehof_megastructure.405 }	# Notification of failure

			random_planet_within_border = {
				limit = {
					planet_size > 14
					is_star = no
					is_asteroid = no
					is_colony = no
					has_mining_station = no
					has_research_station = no
					NOT = { is_planet_class = pc_gas_giant }
				}
				ehof_add_dark_matter_deposit = yes
			}
		}

		set_variable = { which = ehof_final_accuracy value = 0 }
		set_variable = { which = ehof_accuracy value = 0 }
	}
}

########################################################################################################
########################################## Open the wormholes ##########################################
########################################################################################################
country_event = {
	id = ehof_megastructure.304
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_country_flag = compound_seized_ehof_country }
			country_event = { id = compound_spawn.003 }	# Begin the invasion
		}
		else = {
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				spawn_megastructure = {
					type = "ehof_megastructure_wormhole_destination"
					orbit_angle = @ehof_wormhole_angle
					orbit_distance = @ehof_wormhole_distance
					location = star
					owner = root
					init_effect = { set_megastructure_flag = ehof_wormhole_nexus }
				}
			}
			country_event = { id = ehof_megastructure.203 days = 2 } # Set to Active
			country_event = { id = ehof_megastructure.305 days = 4 }
		}

		# Should fleet go MIA?
		random_list = {
			90 = { change_variable = { which = ehof_count_mia value = 1 } }
			10 = {
				modifier = { factor = 0.6	check_variable = { which = ehof_phase value = 2 } }
				modifier = { factor = 0.3	check_variable = { which = ehof_phase value = 3 } }
				modifier = { factor = 1.25	check_variable = { which = ehof_count_mia value = 2 } }
				modifier = { factor = 1.5	check_variable = { which = ehof_count_mia value = 3 } }
				modifier = { factor = 1.75	check_variable = { which = ehof_count_mia value = 4 } }
				modifier = { factor = 2		check_variable = { which = ehof_count_mia value = 5 } }
				modifier = { factor = 2.25	check_variable = { which = ehof_count_mia value = 6 } }
				modifier = { factor = 2.5	check_variable = { which = ehof_count_mia value = 7 } }
				modifier = { factor = 2.75	check_variable = { which = ehof_count_mia value = 8 } }
				modifier = { factor = 3		check_variable = { which = ehof_count_mia value = 9 } }
				modifier = { factor = 3.25	check_variable = { which = ehof_count_mia value >= 10 } }
				modifier = { factor = 0		check_variable = { which = ehof_phase value = 4 } }
				modifier = { factor = 0		has_country_flag = ehof_first_time_immune }
				modifier = { factor = 0		has_country_flag = ehof_mia_cooldown }
				modifier = { factor = 0		has_country_flag = ehof_permanent }
				set_country_flag = ehof_doomed_fleets

				# Set cooldown (Cant happen)
				set_variable = { which = ehof_count_mia value = 0 }
				if = {		limit = { check_variable = { which = ehof_phase value = 5 } } set_timed_country_flag = { flag = ehof_mia_cooldown days = @ehofp3_mia_cooldown } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } set_timed_country_flag = { flag = ehof_mia_cooldown days = @ehofp3_mia_cooldown } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } set_timed_country_flag = { flag = ehof_mia_cooldown days = @ehofp2_mia_cooldown } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 1 } } set_timed_country_flag = { flag = ehof_mia_cooldown days = @ehofp1_mia_cooldown } }
			}
		}
	}
}

########################################################################################################
######################################### Send Fleets Through ##########################################
########################################################################################################
country_event = {
	id = ehof_megastructure.305
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		while = {
			limit = { check_variable = { which = ehof_amount_of_fleets_to_travel value > 0 } }
			random_owned_fleet = {
				limit = {
					has_fleet_flag = ehof_is_at_wormhole
					NOT = { has_fleet_flag = ehof_is_at_destination }
				}

				if = {
					limit = { root = { has_country_flag = ehof_doomed_fleets } }
					set_fleet_flag = ehof_doomed_fleet
				}

				remove_fleet_flag = ehof_is_at_wormhole
				set_fleet_flag = ehof_is_at_destination
				set_fleet_stance = passive
				set_event_locked = no
				remove_auto_move_target = yes
				random_system = {
					limit = { has_star_flag = ehof_destination_system@root }
					star = { save_event_target_as = ehof_destination }
				}
				auto_move_to_planet = {
					target = event_target:ehof_destination
					clear_auto_move_on_arrival = yes
				}
			}
		}
	}
}

########################################################################################################
######################################### Close the Wormholes ##########################################
########################################################################################################
fleet_event = {
	id = ehof_megastructure.306
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_ai = no }
		from = { has_star_flag = ehof_destination_system@root.owner }
	}

	immediate = {
		remove_fleet_flag = ehof_is_at_destination
		owner = {
			subtract_variable = { which = ehof_amount_of_fleets_to_travel value = 1 }
			if = {
				limit = {
					NOT = { has_country_flag = ehof_permanent }
					check_variable = { which = ehof_amount_of_fleets_to_travel value = 0 }
				}
				country_event = { id =  ehof_megastructure.307 days = 2 }
			}
			else_if = {
				limit = { has_country_flag = ehof_permanent }
				set_country_flag = ehof_can_deactivate
			}
		}
	}
}

country_event = {
	id = ehof_megastructure.307
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		country_event = { id = ehof_megastructure.205 } # Set to Cooldown
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			every_system_megastructure = { limit = { is_megastructure_type = ehof_megastructure_wormhole_destination } delete_megastructure = this }
		}
	}
}

#########################################################################################################
##################################### Check if travel was successful ####################################
#########################################################################################################
fleet_event = {
	id = ehof_megastructure.308
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_ai = no }
		has_fleet_flag = ehof_ready_for_travel@root.owner
		NOR = {
			any_system = {
				has_star_flag = ehof_destination_system@root.owner
				ehof_compound_cluster = yes
				ehof_trader_hub = yes
				ehof_sa_system = yes
				ehof_creator_system = yes
			}
			owner = { has_country_flag = ehof_already_shown_success }
		}
	}

	immediate = {
		if = {
			limit = {
				exists = solar_system
				solar_system = {
					has_star_flag = ehof_destination_system@root.owner
					NOT = { has_star_flag = ehof_already_reported@root.owner }
				}
			}
			solar_system = {
				if = {
					limit = {
						root.owner = {
							check_variable = { which = ehof_phase value = 4 }
							has_country_flag = ehof_permanent
						}
					}
					set_star_flag = ehof_already_reported@root.owner
				}
			}
			owner = {
				set_timed_country_flag = { flag = ehof_already_shown_success days = @ehof_short_cooldown }
				country_event = { id = ehof_megastructure.309 days = 2 }
			}
		}
		else = { fleet_event = { id = ehof_megastructure.308 days = 2 } }
	}
}

country_event = {
	id = ehof_megastructure.309
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_technology = tech_ehof_use_gateway
				any_system = {
					has_star_flag = ehof_destination_system@root
					NOT = { has_star_flag = ehof_gateway_changed }
					any_system_megastructure = { is_megastructure_type = ehof_gateway_unknown }
				}
			}
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				set_star_flag = ehof_gateway_changed
				every_system_megastructure = {
					limit = { is_megastructure_type = ehof_gateway_unknown }
					upgrade_megastructure_to = "ehof_gateway_disabled"
					finish_upgrade = yes
				}
			}
		}

		# First 5 uses of EHOF come without risk
		if = { limit = { NOT = { has_country_flag = ehof_immunity_over } } change_variable = { which = ehof_first_time_immune value = 1 } }
		if = {
			limit = { check_variable = { which = ehof_first_time_immune value >= 3 } }
			set_country_flag = ehof_immunity_over
			set_variable = { which = ehof_first_time_immune value = 0 }
			remove_country_flag = ehof_first_time_immune
		}

		#####################################################################################################
		######################################### Check for refunds #########################################
		#####################################################################################################

		# Construction Ships
		if = {
			limit = {
				NOT = { check_variable = { which = ehof_phase value = 4 } }
				any_system = {
					has_star_flag = ehof_destination_system@root
					has_star_flag = ehof_visited_anyone
					any_fleet_in_system = {
						is_ship_class = shipclass_constructor
						has_fleet_flag = ehof_ready_for_travel@root
					}
					OR = {
						any_fleet_in_system = {
							NOT = { has_fleet_flag = ehof_ready_for_travel@root }
							OR = {
								is_ship_class = shipclass_mining_station
								is_ship_class = shipclass_research_station
								is_ship_class = shipclass_constructor
							}
						}
						AND = {
							exists = owner
							owner = { NOT = { is_same_value = root } }
						}
					}
				}
			}
			set_country_flag = ehof_offer_to_refund_ships
		}

		# Science Ships
		if = {
			limit = {
				NOT = { check_variable = { which = ehof_phase value = 4 } }
				any_system = {
					has_star_flag = ehof_destination_system@root
					has_star_flag = ehof_visited_anyone
					any_fleet_in_system = {
						is_ship_class = shipclass_science_ship
						has_fleet_flag = ehof_ready_for_travel@root
					}
					OR = {
						any_fleet_in_system = {
							NOT = { has_fleet_flag = ehof_ready_for_travel@root }
							OR = {
								AND = {
									is_ship_class = shipclass_starbase
									NOT = { is_ship_size = juggernaut }
								}
								is_ship_class = shipclass_science_ship
							}
						}
						AND = {
							exists = owner
							owner = { NOT = { is_same_value = root } }
						}
					}
				}
			}
			set_country_flag = ehof_offer_to_refund_ships
		}

		#####################################################################################################
		########################################### CHECK ACCURACY ##########################################
		#####################################################################################################
		
		# Localization
		ehof_mega_system = yes
		ehof_dest_system = yes
		remove_country_flag = ehof_chk_accurate_yes
		remove_country_flag = ehof_chk_accurate_no
		remove_country_flag = ehof_chk_owner_us
		remove_country_flag = ehof_chk_owner_other
		remove_country_flag = ehof_chk_owner_no
		remove_country_flag = ehof_chk_explored_no
		remove_country_flag = ehof_chk_explored_yes

		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			if = { limit = { has_star_flag = ehof_new_system_poi@root }		remove_star_flag = ehof_new_system_poi@root }
			if = { limit = { has_star_flag = ehof_new_system_rare@root }	remove_star_flag = ehof_new_system_rare@root }
			if = { limit = { has_star_flag = ehof_new_system_normal@root }	remove_star_flag = ehof_new_system_normal@root }
			if = {
				limit = {
					OR = {
						has_star_flag = ehof_intended_destination@root
						root = { check_variable = { which = ehof_phase value = 4 } }
						root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_00 } }
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_01 } }
							ehof_category_01 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_02 } }
							ehof_category_02 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_03 } }
							ehof_category_03 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_05 } }
							ehof_category_05 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_06 } }
							ehof_category_06 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_07 } }
							ehof_category_07 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_08 } }
							ehof_category_08 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_09 } }
							ehof_category_09 = yes
						}
						AND = {
							root = { any_system_within_border = { has_star_flag = ehof_megastructure_system@root has_star_flag = ehof_target_category_10 } }
							ehof_category_10 = yes
						}
					}
				}
				root = {
					if = {
						limit = {
							any_system_within_border = {
								has_star_flag = ehof_megastructure_system@root
								has_star_flag = ehof_target_category_01
							}
							NOT = { any_system = { has_star_flag = ehof_new_system_poi@root } }
						}
						remove_country_flag = ehof_new_system_poi
					}
					if = {
						limit = {
							any_system_within_border = {
								has_star_flag = ehof_megastructure_system@root
								has_star_flag = ehof_target_category_02
							}
							NOT = { any_system = { has_star_flag = ehof_new_system_rare@root } }
						}
						remove_country_flag = ehof_new_system_rare
					}
					if = {
						limit = {
							any_system_within_border = {
								has_star_flag = ehof_megastructure_system@root
								has_star_flag = ehof_target_category_03
							}
							NOT = { any_system = { has_star_flag = ehof_new_system_rare@root } }
						}
						remove_country_flag = ehof_new_system_rare
					}
					set_country_flag = ehof_chk_accurate_yes
					change_variable = { which = ehof_acc_true value = 1 } # +1 wormhole accurate
				}
			}
			else = {
				root = {
					set_country_flag = ehof_chk_accurate_no
					change_variable = { which = ehof_acc_false value = 1 } # +1 wormhole non-accurate
				}
			}

			#####################################################################################################
			########################################## CHECK EXPLORED ###########################################
			#####################################################################################################

			if = {
				limit = { has_star_flag = ehof_visited@root }
				root = { set_country_flag = ehof_chk_explored_yes }
			}
			else = { root = { set_country_flag = ehof_chk_explored_no } }

			#####################################################################################################
			############################################ CHECK OWNER ############################################
			#####################################################################################################

			# Do we own the system?
			if = {
				limit = {
					exists = owner
					owner = { is_same_value = root }
				}
				root = { set_country_flag = ehof_chk_owner_us }
			}

			# Dos someone else own the system?
			else_if = {
				limit = {
					exists = owner
					owner = { NOT = { is_same_value = root } }
				}
				owner = { save_event_target_as = ehof_system_already_taken_by } # Save the owner
				root = { set_country_flag = ehof_chk_owner_other }
			}

			# It's not owned
			else = { root = { set_country_flag = ehof_chk_owner_no } }
		}

		#####################################################################################################
		########################################### CHECK OUTCOME ###########################################
		#####################################################################################################

		############################################## ACCURATE #############################################
		################################ Is Not Owned
		if = {
			limit = { # Good
				has_country_flag = ehof_chk_accurate_yes
				has_country_flag = ehof_chk_explored_no
				has_country_flag = ehof_chk_owner_no
			}
			set_country_flag = ehof_travel_01
		}

		else_if = { # Med
			limit = {
				has_country_flag = ehof_chk_accurate_yes
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_no
			}
			set_country_flag = ehof_travel_02
		}

		################################ Owned by Us
		else_if = { # Med
			limit = {
				has_country_flag = ehof_chk_accurate_yes
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_us
			}
			set_country_flag = ehof_travel_03
		}

		################################ Is owned by someone else
		else_if = { # Bad
			limit = {
				has_country_flag = ehof_chk_accurate_yes
				has_country_flag = ehof_chk_explored_no
				has_country_flag = ehof_chk_owner_other
			}
			set_country_flag = ehof_travel_04
		}

		else_if = { # Bad
			limit = {
				has_country_flag = ehof_chk_accurate_yes
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_other
			}
			set_country_flag = ehof_travel_05
		}

		############################################# INACCURATE ############################################
		################################ Is Not Owned
		else_if = {
			limit = { # Med
				has_country_flag = ehof_chk_accurate_no
				has_country_flag = ehof_chk_explored_no
				has_country_flag = ehof_chk_owner_no
			}
			set_country_flag = ehof_travel_06
		}

		else_if = { # Med
			limit = {
				has_country_flag = ehof_chk_accurate_no
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_no
			}
			set_country_flag = ehof_travel_07
		}

		################################ Owned by Us
		else_if = { # Bad
			limit = {
				has_country_flag = ehof_chk_accurate_no
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_us
			}
			set_country_flag = ehof_travel_08
		}

		################################ Is owned by someone else
		else_if = { # Bad
			limit = {
				has_country_flag = ehof_chk_accurate_no
				has_country_flag = ehof_chk_explored_no
				has_country_flag = ehof_chk_owner_other
			}
			set_country_flag = ehof_travel_09
		}

		else_if = { # Bad
			limit = {
				has_country_flag = ehof_chk_accurate_no
				has_country_flag = ehof_chk_explored_yes
				has_country_flag = ehof_chk_owner_other
			}
			set_country_flag = ehof_travel_10
		}

		###############################################################################################
		########################################### OUTCOME ###########################################
		###############################################################################################

		# Rare
		if = {
			limit = {
				any_system = {
					has_star_flag = ehof_destination_system@root
					ehof_is_rare = yes
				}
				has_country_flag = ehof_travel_01
			}
			country_event = { id = ehof_megastructure.401 }
		}

		# Good
		else_if = {
			limit = { has_country_flag = ehof_travel_01 }
			country_event = { id = ehof_megastructure.4022 }
			country_event = { id = ehof_megastructure.4023 }
		}

		# Med
		else_if = {
			limit = {
				OR = {
					has_country_flag = ehof_travel_02
					has_country_flag = ehof_travel_03
					has_country_flag = ehof_travel_06
					has_country_flag = ehof_travel_07
				}
			}
			country_event = { id = ehof_megastructure.4032 }
			country_event = { id = ehof_megastructure.4033 }
		}

		# Bad
		else_if = {
			limit = {
				OR = {
					has_country_flag = ehof_travel_04
					has_country_flag = ehof_travel_05
					has_country_flag = ehof_travel_08
					has_country_flag = ehof_travel_09
					has_country_flag = ehof_travel_10
				}
			}
			country_event = { id = ehof_megastructure.4042 }
			country_event = { id = ehof_megastructure.4043 }
		}

		#####################################################################################################
		########################################## MARK AS VISITED ##########################################
		#####################################################################################################

		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			random_system = { limit = { has_star_flag = last_visited_system_05@root } remove_star_flag = last_visited_system_05@root }
			random_system = { limit = { has_star_flag = last_visited_system_04@root } remove_star_flag = last_visited_system_04@root set_star_flag = last_visited_system_05@root }
			random_system = { limit = { has_star_flag = last_visited_system_03@root } remove_star_flag = last_visited_system_03@root set_star_flag = last_visited_system_04@root }
			random_system = { limit = { has_star_flag = last_visited_system_02@root } remove_star_flag = last_visited_system_02@root set_star_flag = last_visited_system_03@root }
			random_system = { limit = { has_star_flag = last_visited_system_01@root } remove_star_flag = last_visited_system_01@root set_star_flag = last_visited_system_02@root }
			set_star_flag = last_visited_system_01@root
			if = {
				limit = { any_ship_in_system = { exists = owner owner = { is_same_value = root } } }
				if = { limit = { NOT = { has_star_flag = ehof_visited_anyone } }	set_star_flag = ehof_visited_anyone }
				if = { limit = { NOT = { has_star_flag = ehof_visited@root } }		set_star_flag = ehof_visited@root }
			}
		}
	}
}

#########################################################################################################
################################################ Dialog #################################################
#########################################################################################################
# Rare
country_event = {
	id = ehof_megastructure.401
	diplomatic = yes
	custom_gui = "ehof_rare_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_finding_loot"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_01 } text = "ehof_mega_check_01_desc" }

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		if = {
			limit = { has_country_flag = ehof_always_salvage_after_wormhole }
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
						exists = owner
						owner = { is_same_value = root }
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					root = { change_variable = { which = ehof_refund_ships value = 1 } }
				}
			}
			ehof_calculate_refund = yes
			ehof_give_refund = yes
		}
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_travel_01
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Standard responces
	option = { default_hide_option = yes custom_gui = "ehof_rare_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 1 } } name = "ehof_good_response_01" }
	option = { default_hide_option = yes custom_gui = "ehof_rare_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 2 } } name = "ehof_good_response_02" }
	option = { default_hide_option = yes custom_gui = "ehof_rare_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 3 } } name = "ehof_good_response_03" }
	option = { default_hide_option = yes custom_gui = "ehof_rare_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 4 } } name = "ehof_good_response_04" }
	option = { default_hide_option = yes custom_gui = "ehof_rare_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 5 } } name = "ehof_good_response_05" }
}

# good Medium
country_event = {
	id = ehof_megastructure.4022
	diplomatic = yes
	custom_gui = "ehof_medium_good_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_01 } text = "ehof_mega_check_01_desc" }

	trigger = {
		OR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
			NOT = { has_country_flag = ehof_offer_to_refund_ships }
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		if = {
			limit = { has_country_flag = ehof_always_salvage_after_wormhole }
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
						exists = owner
						owner = { is_same_value = root }
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					root = { change_variable = { which = ehof_refund_ships value = 1 } }
				}
			}
			ehof_calculate_refund = yes
			ehof_give_refund = yes
		}
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_travel_01
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Standard responces
	option = { default_hide_option = yes custom_gui = "ehof_medium_good_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 1 } } name = "ehof_good_response_01" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_good_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 2 } } name = "ehof_good_response_02" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_good_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 3 } } name = "ehof_good_response_03" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_good_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 4 } } name = "ehof_good_response_04" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_good_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 5 } } name = "ehof_good_response_05" }
}

# good Large
country_event = {
	id = ehof_megastructure.4023
	diplomatic = yes
	custom_gui = "ehof_large_good_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_01 } text = "ehof_mega_check_01_desc" }

	trigger = {
		has_country_flag = ehof_offer_to_refund_ships
		NOR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		set_variable = { which = ehof_vessel_refund value = 0 }
		set_variable = { which = ehof_refund_ships value = 0 }
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			every_fleet_in_system = {
				limit = {
					OR = {
						is_ship_class = shipclass_constructor
						is_ship_class = shipclass_science_ship
					}
					has_fleet_flag = ehof_ready_for_travel@root
					exists = owner
					owner = { is_same_value = root }
				}
				root = { change_variable = { which = ehof_refund_ships value = 1 } }
			}
		}
		ehof_calculate_refund = yes
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_offer_to_refund_ships
			remove_country_flag = ehof_travel_01
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Refund ships
	option = {
		custom_gui = "ehof_large_good_ui_option"
		name = "ehof_megastructure.400_a"
		hidden_effect = {
			ehof_give_refund = yes
			remove_country_flag = ehof_refunded_after_outpost
			remove_country_flag = ehof_refunded_after_stations
			remove_country_flag = ehof_refunded_after_inaccurate
			set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}

	# Dont refund ships
	option = {
		default_hide_option = yes
		custom_gui = "ehof_large_good_ui_option"
		name = "ehof_megastructure.400_b"
	}

	# Never offer to refund ships
	option = {
		custom_gui = "ehof_large_good_ui_option"
		name = "ehof_megastructure.400_c"
		custom_tooltip = "ehof_megastructure.400_c_tooltip"
		hidden_effect = { owner = { set_country_flag = ehof_never_salvage_after_wormhole } }
	}

	# Always refund ships
	option = {
		custom_gui = "ehof_large_good_ui_option"
		custom_tooltip = "ehof_megastructure.400_d_tooltip"
		name = "ehof_megastructure.400_d"
		hidden_effect = {
			owner = {
				set_country_flag = ehof_always_salvage_after_wormhole
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			}
			ehof_give_refund = yes
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}
}

# med Medium
country_event = {
	id = ehof_megastructure.4032
	diplomatic = yes
	custom_gui = "ehof_medium_med_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_good"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_02 } text = "ehof_mega_check_02_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_03 } text = "ehof_mega_check_03_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_06 } text = "ehof_mega_check_06_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_07 } text = "ehof_mega_check_07_desc" }

	trigger = {
		OR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
			NOT = { has_country_flag = ehof_offer_to_refund_ships }
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		if = {
			limit = { has_country_flag = ehof_always_salvage_after_wormhole }
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
						exists = owner
						owner = { is_same_value = root }
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					root = { change_variable = { which = ehof_refund_ships value = 1 } }
				}
			}
			ehof_calculate_refund = yes
			ehof_give_refund = yes
		}
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_travel_02
			remove_country_flag = ehof_travel_03
			remove_country_flag = ehof_travel_06
			remove_country_flag = ehof_travel_07
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Standard responces
	option = { default_hide_option = yes custom_gui = "ehof_medium_med_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 1 } } name = "ehof_med_response_01" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_med_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 2 } } name = "ehof_med_response_02" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_med_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 3 } } name = "ehof_med_response_03" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_med_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 4 } } name = "ehof_med_response_04" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_med_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 5 } } name = "ehof_med_response_05" }
}

# med Large
country_event = {
	id = ehof_megastructure.4033
	diplomatic = yes
	custom_gui = "ehof_large_med_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_good"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_02 } text = "ehof_mega_check_02_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_03 } text = "ehof_mega_check_03_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_06 } text = "ehof_mega_check_06_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_07 } text = "ehof_mega_check_07_desc" }

	trigger = {
		has_country_flag = ehof_offer_to_refund_ships
		NOR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		set_variable = { which = ehof_vessel_refund value = 0 }
		set_variable = { which = ehof_refund_ships value = 0 }
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			every_fleet_in_system = {
				limit = {
					OR = {
						is_ship_class = shipclass_constructor
						is_ship_class = shipclass_science_ship
					}
					has_fleet_flag = ehof_ready_for_travel@root
					exists = owner
					owner = { is_same_value = root }
				}
				root = { change_variable = { which = ehof_refund_ships value = 1 } }
			}
		}
		ehof_calculate_refund = yes
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_offer_to_refund_ships
			remove_country_flag = ehof_travel_02
			remove_country_flag = ehof_travel_03
			remove_country_flag = ehof_travel_06
			remove_country_flag = ehof_travel_07
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Refund ships
	option = {
		custom_gui = "ehof_large_med_ui_option"
		name = "ehof_megastructure.400_a"
		hidden_effect = {
			ehof_give_refund = yes
			remove_country_flag = ehof_refunded_after_outpost
			remove_country_flag = ehof_refunded_after_stations
			remove_country_flag = ehof_refunded_after_inaccurate
			set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}

	# Dont refund ships
	option = {
		default_hide_option = yes
		custom_gui = "ehof_large_med_ui_option"
		name = "ehof_megastructure.400_b"
	}

	# Never offer to refund ships
	option = {
		custom_gui = "ehof_large_med_ui_option"
		name = "ehof_megastructure.400_c"
		custom_tooltip = "ehof_megastructure.400_c_tooltip"
		hidden_effect = { owner = { set_country_flag = ehof_never_salvage_after_wormhole } }
	}

	# Always refund ships
	option = {
		custom_gui = "ehof_large_med_ui_option"
		custom_tooltip = "ehof_megastructure.400_d_tooltip"
		name = "ehof_megastructure.400_d"
		hidden_effect = {
			owner = {
				set_country_flag = ehof_always_salvage_after_wormhole
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			}
			ehof_give_refund = yes
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}
}

# Bad Medium
country_event = {
	id = ehof_megastructure.4042
	diplomatic = yes
	custom_gui = "ehof_medium_bad_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_bad"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_04 } text = "ehof_mega_check_04_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_05 } text = "ehof_mega_check_05_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_08 } text = "ehof_mega_check_08_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_09 } text = "ehof_mega_check_09_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_10 } text = "ehof_mega_check_10_desc" }

	trigger = {
		OR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
			NOT = { has_country_flag = ehof_offer_to_refund_ships }
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		if = {
			limit = { has_country_flag = ehof_always_salvage_after_wormhole }
			set_variable = { which = ehof_vessel_refund value = 0 }
			set_variable = { which = ehof_refund_ships value = 0 }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
						exists = owner
						owner = { is_same_value = root }
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					root = { change_variable = { which = ehof_refund_ships value = 1 } }
				}
			}
			ehof_calculate_refund = yes
			ehof_give_refund = yes
		}
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_travel_04
			remove_country_flag = ehof_travel_05
			remove_country_flag = ehof_travel_08
			remove_country_flag = ehof_travel_09
			remove_country_flag = ehof_travel_10
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Standard responces
	option = { default_hide_option = yes custom_gui = "ehof_medium_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 1 } } name = "ehof_bad_response_01" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 2 } } name = "ehof_bad_response_02" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 3 } } name = "ehof_bad_response_03" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 4 } } name = "ehof_bad_response_04" }
	option = { default_hide_option = yes custom_gui = "ehof_medium_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 5 } } name = "ehof_bad_response_05" }
}

# Bad Large
country_event = {
	id = ehof_megastructure.4043
	diplomatic = yes
	custom_gui = "ehof_large_bad_ui_window"
	title = "ehof_mega_check_title"
	show_sound = "event_lootbox_bad"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = { trigger = { has_country_flag = ehof_travel_04 } text = "ehof_mega_check_04_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_05 } text = "ehof_mega_check_05_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_08 } text = "ehof_mega_check_08_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_09 } text = "ehof_mega_check_09_desc" }
	desc = { trigger = { has_country_flag = ehof_travel_10 } text = "ehof_mega_check_10_desc" }

	trigger = {
		has_country_flag = ehof_offer_to_refund_ships
		NOR = {
			has_country_flag = ehof_never_salvage_after_wormhole
			has_country_flag = ehof_always_salvage_after_wormhole
		}
	}

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		set_variable = { which = ehof_vessel_refund value = 0 }
		set_variable = { which = ehof_refund_ships value = 0 }
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			every_fleet_in_system = {
				limit = {
					OR = {
						is_ship_class = shipclass_constructor
						is_ship_class = shipclass_science_ship
					}
					has_fleet_flag = ehof_ready_for_travel@root
					exists = owner
					owner = { is_same_value = root }
				}
				root = { change_variable = { which = ehof_refund_ships value = 1 } }
			}
		}
		ehof_calculate_refund = yes
	}

	after = {
		hidden_effect = {
			remove_country_flag = ehof_offer_to_refund_ships
			remove_country_flag = ehof_travel_04
			remove_country_flag = ehof_travel_05
			remove_country_flag = ehof_travel_08
			remove_country_flag = ehof_travel_09
			remove_country_flag = ehof_travel_10
			set_variable = { which = ehof_travel_dialog value = 0 }
		}
	}

	# Refund ships
	option = {
		custom_gui = "ehof_large_bad_ui_option"
		name = "ehof_megastructure.400_a"
		hidden_effect = {
			ehof_give_refund = yes
			remove_country_flag = ehof_refunded_after_outpost
			remove_country_flag = ehof_refunded_after_stations
			remove_country_flag = ehof_refunded_after_inaccurate
			set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}

	# Dont refund ships
	option = {
		default_hide_option = yes
		custom_gui = "ehof_large_bad_ui_option"
		name = "ehof_megastructure.400_b"
	}

	# Never offer to refund ships
	option = {
		custom_gui = "ehof_large_bad_ui_option"
		name = "ehof_megastructure.400_c"
		custom_tooltip = "ehof_megastructure.400_c_tooltip"
		hidden_effect = { owner = { set_country_flag = ehof_never_salvage_after_wormhole } }
	}

	# Always refund ships
	option = {
		custom_gui = "ehof_large_bad_ui_option"
		custom_tooltip = "ehof_megastructure.400_d_tooltip"
		name = "ehof_megastructure.400_d"
		hidden_effect = {
			owner = {
				set_country_flag = ehof_always_salvage_after_wormhole
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_inaccurate days = @ehof_ui_notification_time }
			}
			ehof_give_refund = yes
			random_system = {
				limit = { has_star_flag = ehof_destination_system@root }
				save_event_target_as = ehof_refunded_after_inaccurate
				every_fleet_in_system = {
					limit = {
						OR = {
							is_ship_class = shipclass_constructor
							is_ship_class = shipclass_science_ship
						}
						has_fleet_flag = ehof_ready_for_travel@root
					}
					if = { limit = { exists = leader } leader = { unassign_leader = this } }
					delete_fleet = this
				}
			}
		}
	}
}

# Failed to Generate Wormhole
country_event = {
	id = ehof_megastructure.405
	diplomatic = yes
	custom_gui = "ehof_small_bad_ui_window"
	title = "ehof_megastructure.405_name"
	desc = "ehof_megastructure.405_desc"
	show_sound = "event_power_down"
	location = event_target:ehof_megastructure_system
	is_triggered_only = yes

	after = { hidden_effect = { set_variable = { which = ehof_travel_dialog value = 0 } } }

	immediate = {
		random_list = {
			1 = { set_variable = { which = ehof_travel_dialog value = 1 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 2 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 3 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 4 } }
			1 = { set_variable = { which = ehof_travel_dialog value = 5 } }
		}
		ehof_mega_system = yes

		# Cooldown time + Malfunctioning time
		if = { limit = { check_variable = { which = ehof_phase value = 5 } } change_variable = { which = ehof_cooldown_days value = @ehof_p3_malfunction_time } }
		if = { limit = { check_variable = { which = ehof_phase value = 4 } } change_variable = { which = ehof_cooldown_days value = @ehof_p4_malfunction_time } }
		if = { limit = { check_variable = { which = ehof_phase value = 3 } } change_variable = { which = ehof_cooldown_days value = @ehof_p3_malfunction_time } }
		if = { limit = { check_variable = { which = ehof_phase value = 2 } } change_variable = { which = ehof_cooldown_days value = @ehof_p2_malfunction_time } }
		if = { limit = { check_variable = { which = ehof_phase value = 1 } } change_variable = { which = ehof_cooldown_days value = @ehof_p1_malfunction_time } }
		change_variable = { which = ehof_nogo value = 1 } # +1 wormhole non-generate
		random_system = {
			limit = { has_star_flag = ehof_destination_system@root }
			save_event_target_as = ehof_destination_system
		}
	}
	
	option = { default_hide_option = yes custom_gui = "ehof_small_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 1 } } name = "ehof_bad_response_01" }
	option = { default_hide_option = yes custom_gui = "ehof_small_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 2 } } name = "ehof_bad_response_02" }
	option = { default_hide_option = yes custom_gui = "ehof_small_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 3 } } name = "ehof_bad_response_03" }
	option = { default_hide_option = yes custom_gui = "ehof_small_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 4 } } name = "ehof_bad_response_04" }
	option = { default_hide_option = yes custom_gui = "ehof_small_bad_ui_option" trigger = { check_variable = { which = ehof_travel_dialog value = 5 } } name = "ehof_bad_response_05" }
}

# On surveying system, offer to sacrifice scenceship + influence for outpost
ship_event = {
	id = ehof_megastructure.407
	title = "ehof_megastructure.407.name"
	desc = "ehof_megastructure.407.desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "gas_giant_station_room" }
	is_triggered_only = yes
	location = from

	trigger = {
		owner = {
			NOR = {
				check_variable = { which = ehof_phase value = 4 }
				has_country_flag = ehof_never_salvage_science_ships
				has_country_flag = ehof_always_salvage_science_ships
			}
		}
		solar_system = {
			NOR = {
				ehof_creator_system = yes
				ehof_sa_system = yes
				any_system_planet = {
					OR = {
						has_planet_flag = code_world1@root.owner
						has_planet_flag = code_world2@root.owner
						has_planet_flag = code_world3@root.owner
						has_planet_flag = code_world4@root.owner
						has_planet_flag = code_world5@root.owner
						has_planet_flag = code_world6@root.owner
						has_planet_flag = ehof_has_special_project
						has_anomaly = yes
					}
				}
			}
			ehof_cohesive_system = yes
		}
	}

	immediate = {
		hidden_effect = {
			if = {
				limit = {
					owner = { has_technology = tech_ehof_use_gateway }
					solar_system = {
						NOT = { has_star_flag = ehof_gateway_changed }
						any_system_megastructure = { is_megastructure_type = ehof_gateway_unknown }
					}
				}
				solar_system = {
					set_star_flag = ehof_gateway_changed
					every_system_megastructure = {
						limit = { is_megastructure_type = ehof_gateway_unknown }
						upgrade_megastructure_to = "ehof_gateway_disabled"
						finish_upgrade = yes
					}
				}
			}

			owner = {
				if = {		limit = { check_variable = { which = ehof_phase value = 1 } } set_variable = { which = ehof_outpost_influence_cost value = 150 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } set_variable = { which = ehof_outpost_influence_cost value = 120 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } set_variable = { which = ehof_outpost_influence_cost value = 90 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } set_variable = { which = ehof_outpost_influence_cost value = 90 } }
			}
		}
	}

	option = {
		custom_gui = "ehof_eventui_option"
		name = "ehof_megastructure.407_a"
		allow = {
			owner = {
				if = {		limit = { check_variable = { which = ehof_phase value = 1 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 150 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 120 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 90 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 90 } }
			}
		}
		owner = {
			if = {		limit = { check_variable = { which = ehof_phase value = 1 } } add_resource = { alloys = -150 } add_resource = { influence = -150 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } add_resource = { alloys = -150 } add_resource = { influence = -120 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }
		}
		hidden_effect = {
			if = {
				limit = { exists = leader }
				leader = { unassign_leader = this }
			}
			owner = {
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_outpost days = @ehof_ui_notification_time }
			}
			solar_system = { save_event_target_as = ehof_refunded_after_outpost }
		}
		delete_ship = this
		solar_system = { create_starbase = { size = starbase_outpost owner = root.owner } }
	}

	option = { custom_gui = "ehof_eventui_option" default_hide_option = yes name = "ehof_megastructure.407_b" }

	option = { # Never scrap my science vessels
		custom_gui = "ehof_eventui_option"
		name = "ehof_megastructure.407_c"
		custom_tooltip = "ehof_megastructure.407_c_tooltip"
		hidden_effect = { owner = { set_country_flag = ehof_never_salvage_science_ships } }
	}

	option = { # Always scrap my science vessels
		custom_gui = "ehof_eventui_option"
		custom_tooltip = "ehof_megastructure.407_d_tooltip"
		name = "ehof_megastructure.407_d"
		allow = {
			owner = {
				if = {		limit = { check_variable = { which = ehof_phase value = 1 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 150 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 120 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 90 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } resource_stockpile_compare = { resource = alloys value >= 150 } resource_stockpile_compare = { resource = influence value >= 90 } }
			}
		}
		owner = {
			if = {		limit = { check_variable = { which = ehof_phase value = 1 } } add_resource = { alloys = -150 } add_resource = { influence = -150 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } add_resource = { alloys = -150 } add_resource = { influence = -120 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }
			else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }
		}
		hidden_effect = {
			owner = {
				set_country_flag = ehof_always_salvage_science_ships
				remove_country_flag = ehof_refunded_after_outpost
				remove_country_flag = ehof_refunded_after_stations
				remove_country_flag = ehof_refunded_after_inaccurate
				set_timed_country_flag = { flag = ehof_refunded_after_outpost days = @ehof_ui_notification_time }
			}
			solar_system = { save_event_target_as = ehof_refunded_after_outpost }
			if = {
				limit = { exists = leader }
				leader = { unassign_leader = this }
			}
		}
		delete_ship = this
		solar_system = { create_starbase = { size = starbase_outpost owner = root.owner } }
	}
}

ship_event = {
	id = ehof_megastructure.408
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			has_country_flag = ehof_always_salvage_science_ships
			NOT = { check_variable = { which = ehof_phase value = 4 } }
		}
		solar_system = {
			NOR = {
				ehof_creator_system = yes
				any_system_planet = {
					OR = {
						has_planet_flag = code_world1@root.owner
						has_planet_flag = code_world2@root.owner
						has_planet_flag = code_world3@root.owner
						has_planet_flag = code_world4@root.owner
						has_planet_flag = code_world5@root.owner
						has_planet_flag = code_world6@root.owner
						has_planet_flag = ehof_has_special_project
						has_anomaly = yes
					}
				}
			}
			ehof_cohesive_system = yes
		}
	}

	immediate = {
		if = {
			limit = {
				owner = { has_technology = tech_ehof_use_gateway }
				solar_system = {
					NOT = { has_star_flag = ehof_gateway_changed }
					any_system_megastructure = { is_megastructure_type = ehof_gateway_unknown }
				}
			}
			solar_system = {
				set_star_flag = ehof_gateway_changed
				every_system_megastructure = {
					limit = { is_megastructure_type = ehof_gateway_unknown }
					upgrade_megastructure_to = "ehof_gateway_disabled"
					finish_upgrade = yes
				}
			}
		}

		owner = {
			remove_country_flag = ehof_refunded_after_outpost
			remove_country_flag = ehof_refunded_after_stations
			remove_country_flag = ehof_refunded_after_inaccurate
			set_timed_country_flag = { flag = ehof_refunded_after_outpost days = @ehof_ui_notification_time }
			if = {
				limit = {
					OR = {
						AND = {
							check_variable = { which = ehof_phase value = 1 }
							resource_stockpile_compare = { resource = alloys value >= 150 }
							resource_stockpile_compare = { resource = influence value >= 150 }
						}
						AND = {
							check_variable = { which = ehof_phase value = 2 }
							resource_stockpile_compare = { resource = alloys value >= 150 }
							resource_stockpile_compare = { resource = influence value >= 120 }
						}
						AND = {
							check_variable = { which = ehof_phase value = 3 }
							resource_stockpile_compare = { resource = alloys value >= 150 }
							resource_stockpile_compare = { resource = influence value >= 90 }
						}
						AND = {
							check_variable = { which = ehof_phase value = 5 }
							resource_stockpile_compare = { resource = alloys value >= 150 }
							resource_stockpile_compare = { resource = influence value >= 90 }
						}
					}
				}
				if = {		limit = { check_variable = { which = ehof_phase value = 1 } } add_resource = { alloys = -150 } add_resource = { influence = -150 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 2 } } add_resource = { alloys = -150 } add_resource = { influence = -120 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 3 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }
				else_if = {	limit = { check_variable = { which = ehof_phase value = 5 } } add_resource = { alloys = -150 } add_resource = { influence = -90 } }

				root = {
					if = {
						limit = { exists = leader }
						leader = { unassign_leader = this }
					}
					delete_ship = this
					solar_system = {
						save_event_target_as = ehof_refunded_after_outpost
						create_starbase = { size = starbase_outpost owner = root.owner }
					}
				}
			}
		}
	}
}

# Ruined EHOF discovered
ship_event = {
	id = ehof_megastructure.409
	title = "ehof_megastructure.409.name"
	desc = "ehof_megastructure.409.desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "ruined_system_room" }
	show_sound = event_radio_chatter
	location = from
	is_triggered_only = yes

	trigger = {
		owner = { NOT = { has_country_flag = encountered_ruined_ehof } }
		from = {
			has_star_flag = ruined_ehof_system
			any_system_megastructure = { is_megastructure_type = ehof_megastructure_ruined }
		}
	}

	immediate = { owner = { set_country_flag = encountered_ruined_ehof } }

	option = {
		custom_gui = "ehof_eventui_option"
		trigger = { owner = { check_variable = { which = ehof_phase value >= 1 } } }
		name = "ehof_megastructure.409.a"
	}

	option = {
		custom_gui = "ehof_eventui_option"
		trigger = { owner = { check_variable = { which = ehof_phase value < 1 } } }
		name = AMAZING
	}
}

# Dismantle Dialog
country_event = {
	id = ehof_megastructure.410
	title = "ehof_ehof"
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "ehof_mainui_window"
	picture_event_data = {
		portrait = root
		room = root.ruler
		planet_background = root
		graphical_culture = root
		city_level = root
	}
	location = event_target:ehof_megastructure_system
	desc = "ehof_megastructure.410.desc"

	option = {
		custom_gui = "ehof_mainui_option"
		name = "ehof_megastructure.410.a"
		random_system_within_border = {
			limit = { has_star_flag = ehof_megastructure_system@root }
			every_system_megastructure = {
				limit = {
					OR = {
						has_megastructure_flag = ehof_phase_00
						has_megastructure_flag = ehof_phase_01
						has_megastructure_flag = ehof_phase_02
						has_megastructure_flag = ehof_phase_03
						has_megastructure_flag = ehof_phase_04
						has_megastructure_flag = ehof_phase_05
					}
				}
				delete_megastructure = this
			}
			hidden_effect = {
				remove_star_flag = ehof_megastructure_system@root
				every_system_planet = { remove_planet_flag = cant_build_here }
				if = {
					limit = { NOT = { check_variable = { which = ehof_phase value = 5 } } }
					star = { change_pc = pc_black_hole }
				}
			}
		}
		hidden_effect = {
			remove_country_flag = ehof_p0_first_time
			remove_country_flag = ehof_p1_first_time
			remove_country_flag = ehof_p2_first_time
			remove_country_flag = ehof_p3_first_time
			remove_country_flag = ehof_p4_first_time
			remove_country_flag = ehof_p5_first_time
			remove_country_flag = ehof_restored_first_time
			if = { limit = { has_country_flag = ehof_is_upgrading }		remove_country_flag = ehof_is_upgrading }
			if = { limit = { has_country_flag = ehof_travel_diplomacy }	remove_country_flag = ehof_travel_diplomacy }
			if = { limit = { has_country_flag = ehof_can_activate }		remove_country_flag = ehof_can_activate }
			if = { limit = { has_country_flag = ehof_activating }		remove_country_flag = ehof_activating }
			if = { limit = { has_country_flag = ehof_activated }		remove_country_flag = ehof_activated }
			if = { limit = { has_country_flag = ehof_on_cooldown }		remove_country_flag = ehof_on_cooldown }
			if = { limit = { has_country_flag = ehof_malfunctioning }	remove_country_flag = ehof_malfunctioning }
			every_owned_fleet = {
				remove_auto_move_target = yes
				set_event_locked = no
				remove_fleet_flag = ehof_is_at_wormhole
				remove_fleet_flag = ehof_ready_for_travel@root
			}
			set_variable = { which = ehof_phase value = 0 }
		}
	}

	option = { custom_gui = "ehof_mainui_option" name = "ehof_goback" ehof_go_back = yes }
	option = { custom_gui = "ehof_mainui_option" name = "ehof_leavestation" ehof_leave_station = yes default_hide_option = yes }
}

# Fleet arrives as debris
country_event = {
	id = ehof_megastructure.411
	title = "ehof_megastructure.411_name"
	desc = "ehof_megastructure.411_desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "exploding_ship_room" }
	show_sound = advisor_notification_fleet_destroyed
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	immediate = { ehof_dest_system = yes }
	option = { custom_gui = "ehof_eventui_option" name = "ehof_megastructure.411_a" default_hide_option = yes }
}

# Detonates upon entering wormhole
country_event = {
	id = ehof_megastructure.412
	title = "ehof_megastructure.412_name"
	desc = "ehof_megastructure.412_desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "space_funeral_room" }
	show_sound = advisor_notification_fleet_destroyed
	location = event_target:ehof_megastructure_system
	is_triggered_only = yes
	immediate = {
		ehof_dest_system = yes
		ehof_mega_system = yes
	}
	option = { custom_gui = "ehof_eventui_option" name = "ehof_megastructure.412_a" default_hide_option = yes }
}

# Damaged
country_event = {
	id = ehof_megastructure.413
	title = "ehof_megastructure.413_name"
	desc = "ehof_megastructure.413_desc"
	diplomatic = yes
	custom_gui = "ehof_eventui_window"
	picture_event_data = { room = "small_space_battle_room" }
	show_sound = event_space_battle
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	immediate = { ehof_dest_system = yes }
	option = { custom_gui = "ehof_eventui_option" name = "ehof_megastructure.413_a" default_hide_option = yes }
}

#########################################################################################################
###################################### Fleets go Missing In Action ######################################
#########################################################################################################
fleet_event = {
	id = ehof_megastructure.501
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			is_ai = no
			has_country_flag = ehof_doomed_fleets
		}
	}

	immediate = {
		remove_fleet_flag = ehof_ready_for_travel@owner
		remove_fleet_flag = ehof_is_at_destination

		owner = {
			remove_country_flag = ehof_doomed_fleets
			random_list = {
				### Incase everything is on cooldown
				0 = {
					modifier = {
						add = 100
						has_country_flag = ehof_fleet_recently_damaged
						has_country_flag = ehof_fleet_recently_debris
						has_country_flag = ehof_fleet_recently_detonated
					}
					change_variable = { which = count_damage value = 1 }		# +1
					change_variable = { which = count_debris value = 1 }		# +1
					change_variable = { which = count_detonate value = 1 }		# +1
				}

				#### DAMAGED
				1 = {
					modifier = { factor = 0		has_country_flag = ehof_fleet_recently_damaged }
					modifier = { factor = 1.25	check_variable = { which = count_damage value = 2 } }
					modifier = { factor = 1.5	check_variable = { which = count_damage value = 3 } }
					modifier = { factor = 1.75	check_variable = { which = count_damage value = 4 } }
					modifier = { factor = 2		check_variable = { which = count_damage value = 5 } }
					modifier = { factor = 2.25	check_variable = { which = count_damage value = 6 } }
					modifier = { factor = 2.5	check_variable = { which = count_damage value = 7 } }
					modifier = { factor = 2.75	check_variable = { which = count_damage value >= 8 } }
					modifier = {
						factor = 0
						NOT = {
							any_owned_fleet = {
								has_fleet_flag = ehof_doomed_fleet
								is_ship_class = shipclass_military
							}
						}
					}

					set_country_flag = ehof_fleet_damaged
					set_variable = {	which = count_damage value = 0 }		# Reset counter
					change_variable = {	which = count_debris value = 1 }		# +1
					change_variable = {	which = count_detonate value = 1 }		# +1

					# How often can fleet be Damaged?
					if = { limit = { check_variable = { which = ehof_phase value = 5 } } set_timed_country_flag = { flag = ehof_fleet_recently_damaged days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 3 } } set_timed_country_flag = { flag = ehof_fleet_recently_damaged days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 2 } } set_timed_country_flag = { flag = ehof_fleet_recently_damaged days = @ehofp2_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 1 } } set_timed_country_flag = { flag = ehof_fleet_recently_damaged days = @ehofp1_mia_effect_cooldown } }
				}

				#### ARRIVES AS DEBRIS
				1 = {
					modifier = { factor = 0		has_country_flag = ehof_fleet_recently_debris }
					modifier = { factor = 1.25	check_variable = { which = count_debris value = 2 } }
					modifier = { factor = 1.5	check_variable = { which = count_debris value = 3 } }
					modifier = { factor = 1.75	check_variable = { which = count_debris value = 4 } }
					modifier = { factor = 2		check_variable = { which = count_debris value = 5 } }
					modifier = { factor = 2.25	check_variable = { which = count_debris value = 6 } }
					modifier = { factor = 2.5	check_variable = { which = count_debris value = 7 } }
					modifier = { factor = 2.75	check_variable = { which = count_debris value >= 8 } }

					set_country_flag = ehof_fleet_debris
					change_variable = { which = ehof_stats_debris value = 1 }	# Set variables for localization
					set_variable = {	which = count_debris value = 0 }		# Reset counter
					change_variable = {	which = count_damage value = 1 }		# +1
					change_variable = {	which = count_detonate value = 1 }		# +1

					# How often can fleet be KIA?
					if = { limit = { check_variable = { which = ehof_phase value = 5 } } set_timed_country_flag = { flag = ehof_fleet_recently_debris days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 3 } } set_timed_country_flag = { flag = ehof_fleet_recently_debris days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 2 } } set_timed_country_flag = { flag = ehof_fleet_recently_debris days = @ehofp2_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 1 } } set_timed_country_flag = { flag = ehof_fleet_recently_debris days = @ehofp1_mia_effect_cooldown } }
				}

				#### DETONATES UPON ENTERING THE WORMHOLE
				1 = {
					modifier = { factor = 0		has_country_flag = ehof_fleet_recently_detonated }
					modifier = { factor = 1.25	check_variable = { which = count_detonate value = 2 } }
					modifier = { factor = 1.5	check_variable = { which = count_detonate value = 3 } }
					modifier = { factor = 1.75	check_variable = { which = count_detonate value = 4 } }
					modifier = { factor = 2		check_variable = { which = count_detonate value = 5 } }
					modifier = { factor = 2.25	check_variable = { which = count_detonate value = 6 } }
					modifier = { factor = 2.5	check_variable = { which = count_detonate value = 7 } }
					modifier = { factor = 2.75	check_variable = { which = count_detonate value >= 8 } }

					set_country_flag = ehof_fleet_detonate
					change_variable = { which = ehof_stats_detonated value = 1 }	# Set variables for localization
					set_variable = {	which = count_detonate value = 0 }			# Reset counter
					change_variable = { which = count_damage value = 1 }			# +1
					change_variable = { which = count_debris value = 1 }			# +1

					# How often can fleet be KIA?
					if = { limit = { check_variable = { which = ehof_phase value = 5 } } set_timed_country_flag = { flag = ehof_fleet_recently_detonated days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 3 } } set_timed_country_flag = { flag = ehof_fleet_recently_detonated days = @ehofp3_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 2 } } set_timed_country_flag = { flag = ehof_fleet_recently_detonated days = @ehofp2_mia_effect_cooldown } }
					if = { limit = { check_variable = { which = ehof_phase value = 1 } } set_timed_country_flag = { flag = ehof_fleet_recently_detonated days = @ehofp1_mia_effect_cooldown } }
				}
			}

			#### HOW MUCH DAMAGE
			if = {
				limit = { has_country_flag = ehof_fleet_damaged }
				remove_country_flag = ehof_fleet_damaged
				country_event = { id = ehof_megastructure.413 days = 6 }

				random_list = {
					10 = {			# (Lose 20% of fleet, upto a maximum of 40)
						modifier = { factor = 4 check_variable = { which = ehof_phase value = 2 } }
						modifier = { factor = 6 check_variable = { which = ehof_phase value = 3 } }
						modifier = { factor = 8 check_variable = { which = ehof_phase value >= 4 } }
						set_country_flag = ehof_fleet_damaged_20
					}
					10 = {			# (Lose 40% of fleet, upto a maximum of 80)
						modifier = { factor = 2 check_variable = { which = ehof_phase value = 2 } }
						modifier = { factor = 4 check_variable = { which = ehof_phase value = 3 } }
						modifier = { factor = 6 check_variable = { which = ehof_phase value >= 4 } }
						set_country_flag = ehof_fleet_damaged_40
						}
					10 = {			# (Lose 60% of fleet, upto a maximum of 120)
						modifier = { factor = 0.8 check_variable = { which = ehof_phase value = 2 } }
						modifier = { factor = 0.6 check_variable = { which = ehof_phase value = 3 } }
						modifier = { factor = 0.4 check_variable = { which = ehof_phase value >= 4 } }
						set_country_flag = ehof_fleet_damaged_60
					}
				}
			}

			##### CAUSE DAMAGE
			if = {
				limit = { has_country_flag = ehof_fleet_damaged_20 }
				remove_country_flag = ehof_fleet_damaged_20
				every_owned_fleet = { limit = { is_ship_class = shipclass_military has_fleet_flag = ehof_doomed_fleet }
					if = {		limit = { count_owned_ship = { count >= 2   } count_owned_ship = { count < 20  } } while = { count = 1  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 20  } count_owned_ship = { count < 40  } } while = { count = 4  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 40  } count_owned_ship = { count < 60  } } while = { count = 8  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 60  } count_owned_ship = { count < 80  } } while = { count = 12 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 80  } count_owned_ship = { count < 100 } } while = { count = 16 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 100 } count_owned_ship = { count < 120 } } while = { count = 20 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 120 } count_owned_ship = { count < 140 } } while = { count = 24 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 140 } count_owned_ship = { count < 160 } } while = { count = 28 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 160 } count_owned_ship = { count < 180 } } while = { count = 32 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 180 } count_owned_ship = { count < 200 } } while = { count = 36 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 200 } }									   while = { count = 40 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
				}
			}
			else_if = {
				limit = { has_country_flag = ehof_fleet_damaged_40 }
				remove_country_flag = ehof_fleet_damaged_40
				every_owned_fleet = { limit = { is_ship_class = shipclass_military has_fleet_flag = ehof_doomed_fleet }
					if = { 		limit = { count_owned_ship = { count >= 3   } count_owned_ship = { count < 20  } } while = { count = 2  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 20  } count_owned_ship = { count < 40  } } while = { count = 8  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 40  } count_owned_ship = { count < 60  } } while = { count = 16 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 60  } count_owned_ship = { count < 80  } } while = { count = 24 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 80  } count_owned_ship = { count < 100 } } while = { count = 32 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 100 } count_owned_ship = { count < 120 } } while = { count = 40 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 120 } count_owned_ship = { count < 140 } } while = { count = 48 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 140 } count_owned_ship = { count < 160 } } while = { count = 56 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 160 } count_owned_ship = { count < 180 } } while = { count = 64 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 180 } count_owned_ship = { count < 200 } } while = { count = 72 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 200 } }									   while = { count = 80 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
				}
			}
			else_if = {
				limit = { has_country_flag = ehof_fleet_damaged_60 }
				remove_country_flag = ehof_fleet_damaged_60
				every_owned_fleet = { limit = { is_ship_class = shipclass_military has_fleet_flag = ehof_doomed_fleet }
					if = { 		limit = { count_owned_ship = { count >= 4   } count_owned_ship = { count < 20  } } while = { count = 3   random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 20  } count_owned_ship = { count < 40  } } while = { count = 12  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 40  } count_owned_ship = { count < 60  } } while = { count = 24  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 60  } count_owned_ship = { count < 80  } } while = { count = 36  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 80  } count_owned_ship = { count < 100 } } while = { count = 48  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 100 } count_owned_ship = { count < 120 } } while = { count = 60  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 120 } count_owned_ship = { count < 140 } } while = { count = 72  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 140 } count_owned_ship = { count < 160 } } while = { count = 84  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 160 } count_owned_ship = { count < 180 } } while = { count = 96  random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 180 } count_owned_ship = { count < 200 } } while = { count = 108 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
					else_if = { limit = { count_owned_ship = { count >= 200 } }									   while = { count = 120 random_owned_ship = { delete_ship = this } root.owner = { change_variable = { which = ehof_stats_damaged value = 1 } } } }
				}
			}

			##### ARRIVES AS DEBRIS
			else_if = {
				limit = { has_country_flag = ehof_fleet_debris }
				remove_country_flag = ehof_fleet_debris
				country_event = { id = ehof_megastructure.411 days = 6 }

				random_system = {
					limit = { has_star_flag = ehof_destination_system@root.owner }
					if = {
						limit = { NOT = { has_star_flag = fleet_arrived_as_debris } }
						set_star_flag = fleet_arrived_as_debris
						create_ambient_object = { type = "small_debris_object" location = this }
						last_created_ambient_object = {
							set_location = {
								target = star
								distance = @ehof_wormhole_distance
								angle = @ehof_wormhole_angle
							}
							save_event_target_as = ehof_arrive_as_debris_wormhole
						}
						while = {
							count = 10
							ehof_singular_debris = yes
							last_created_ambient_object = { set_location = event_target:ehof_arrive_as_debris_wormhole }
						}
					}
				}
				every_owned_fleet = {
					limit = { has_fleet_flag = ehof_doomed_fleet }
					delete_fleet = this
				}
			}

			##### DETONATES UPON ENTERING WORMHOLE
			else_if = {
				limit = { has_country_flag = ehof_fleet_detonate }
				remove_country_flag = ehof_fleet_detonate
				country_event = { id = ehof_megastructure.412 days = 6 }

				random_system = {
					limit = { has_star_flag = ehof_megastructure_system@root.owner }
					create_ambient_object = { type = "small_debris_object" location = this }
					last_created_ambient_object = {
						set_location = {
							target = star
							distance = 50
							angle = @ehof_wormhole_angle
						}
						save_event_target_as = ehof_detonate_debris
					}
					while = {
						count = 5
						ehof_singular_debris = yes
						last_created_ambient_object = { set_location = event_target:ehof_detonate_debris }
					}
				}
				every_owned_fleet = {
					limit = { has_fleet_flag = ehof_doomed_fleet }
					delete_fleet = this
				}
			}
		}
	}
}