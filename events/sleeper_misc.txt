#setupevents, as well as other miscalaneous events
namespace = sleeper_setup

#sets global flag that indicates that the mod is installed
event = {
	id = sleeper_setup.1
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		set_global_flag = "the_sleeper_mod_active"
	}
}

#spawnevents for the sleeper. One major change from sleeper 1 is that the sleeper spawns completely seperate from all other fallen empires (and is therefor not affected by the FE sliders when setting up a game). This does lead to some missing systems sometimes however,
#drone countries also no longer exist
country_event = {
	id = sleeper_setup.2
	hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		is_sleeper = yes
	}

	immediate = {
		every_owned_planet = {
			limit = { has_planet_flag = sleeper_border_planet }
			remove_building = building_sleeper_capital
			add_building = building_drone_capital
		}
		#establish comms with the other fallen empires and TN-3, set hostilities
		every_country = {
			limit = {
				OR = {
					is_country_type = hive_researcher_enclave
					is_country_type = fallen_empire
				}
			}
			establish_communications_no_message = event_target:the_sleeper
			set_country_flag = sleeper_encountered
		}
		every_country = {
			limit = {
				OR = {
					is_country_type = hive_researcher_enclave
					is_country_type = caravaneer_fleet
					is_country_type = mem_surveyor_country_green
				}
			}
			set_faction_hostility = {
				target = event_target:the_sleeper
				set_hostile = no
				set_neutral = yes
				set_friendly = no
			}
		}
	#modcompatability stuff
		every_owned_planet = {
			limit = { is_planet_class = pc_hive }
			clear_deposits = yes
		}
		every_owned_planet = {
			limit = { has_planet_flag = sleeper_farms }
			change_pc = pc_gaia
		}
	#spawn starbases in sleeper systems without a planet, because I could not get it to work through initilazers
		every_system = {
			limit = { has_star_flag = sleeper_empty_space }
			create_starbase = {
				size = "starbase_outpost"
				effect = {
					while = {
						count = 2
						create_sleeper_platform = yes
					}
					set_owner = event_target:the_sleeper
				}		
			}
		}
	#failsave for borderplanets (Mods that add new planetclasses may break borderplanets and make them spawn without pops and ships)
		every_planet = {
			limit = {
				has_modifier = sleeper_drone_planet
				num_pops = 0
			}
			while = {
				count = 15
				create_pop = {
					species = event_target:the_sleeper.species
				}
			}
			solar_system = {
				if = {
					limit = {
						NOT = {
							owner = { is_same_value = event_target:the_sleeper }
						}
					}
					create_starbase = {
						size = "starbase_outpost"
						effect = {
							set_owner = ROOT
						}		
					}
				}
				if = {
					limit = {
						NOT = {
							any_fleet_in_system = {
								NOT = { is_ship_size = starbase_outpost }
								owner = { is_same_value = event_target:the_sleeper }
							}
						}
					}
					PREV = {
						spawn_sleeper_lowtech_fleet_15 = yes
					}
				}
			}
		}
	#spawn lithoids on a random border planet
		if = {
			limit = {
				host_has_dlc = "Lithoids Species Pack"
			}
			random_owned_species = {
				limit = { has_species_flag = sleeper_stoneguys }
				save_event_target_as = stoneguys
			}
			random_owned_planet = {
				limit = {
					has_planet_flag = sleeper_border_planet
				}
				while = {
					count = 5
					create_pop = {
						species = event_target:stoneguys
					}
				}
			}
		}
	}
}
#if comms are established with a country that knows the sleeper, the country will gain the discovery project as well (if not genocidal)
country_event = {
	id = sleeper_setup.5
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = default
		FROM = { is_country_type = default }
		OR = {
			AND = {
				FROM = {
					NOR = { 
						has_country_flag = sleeper_found
						has_country_flag = sleeper_encountered
					}
				}
				OR = { 
					has_country_flag = sleeper_found
					has_country_flag = sleeper_encountered
				}
			}
			AND = {
				NOR = { 
					has_country_flag = sleeper_found
					has_country_flag = sleeper_encountered
				}
				FROM = {
					OR = { 
						has_country_flag = sleeper_found
						has_country_flag = sleeper_encountered
					}
				}
			}
		}
	}

	immediate = {
		IF = {
			limit = {
				FROM = {
					NOR = { 
						has_country_flag = sleeper_found
						has_country_flag = sleeper_encountered
					}
				}
				OR = { 
					has_country_flag = sleeper_found
					has_country_flag = sleeper_encountered
				}
			}
			save_event_target_as = communicators
			FROM = {
				country_event = { id = sleeper_setup.3 days = 5 }
			}
		}
		IF = {
			limit = {
				NOR = { 
					has_country_flag = sleeper_found
					has_country_flag = sleeper_encountered
				}
				FROM = {
					OR = { 
						has_country_flag = sleeper_found
						has_country_flag = sleeper_encountered
					}
				}
			}
			FROM = { save_event_target_as = communicators }
			country_event = { id = sleeper_setup.3 days = 5 }
		}
	}
}

country_event = {
	id = sleeper_setup.3
	title = sleeper_setup.3.title
	desc = sleeper_setup.3.desc
	picture = GFX_evt_star_chart
	location = FROMFROMFROM
	trackable = yes
	
	is_triggered_only = yes

	trigger = {
		NOR = { 
			has_country_flag = sleeper_found
			has_country_flag = sleeper_encountered
		}
	}

	immediate = {
		set_country_flag = sleeper_found
		enable_special_project = {
			name = "INVESTIGATE_THE_SLEEPER"
			location = capital_scope
			owner = THIS
		}
	}
	
	option = {
		name = "action.10.a"
	}
}

#Senate stuff
#add or remove punishment/reward modifiers. called yearly to correct modifers if the laws have changed and also remove them.
event = {
	id = sleeper_setup.6
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOR = {
			has_global_flag = sleeper_berserker_ongoing
			has_global_flag = sleeper_true_awakening_happened
		}
	}
	
	immediate = {
		if = {
			limit = { 
				is_active_resolution = resolution_sleeper_strikes
			}
			every_playable_country = {
				limit = { 
					has_modifier = sleeper_aggressor_marker
				}
				add_modifier = { modifier = sleeper_aggressor_reward days = -1 }
			}
			every_playable_country = {
				limit = {
					has_modifier = sleeper_aggressor_reward
					NOT = { has_modifier = sleeper_aggressor_marker }
				}
				remove_modifier = sleeper_aggressor_reward
			}
		}
		if = {
			limit = {
				is_active_resolution = resolution_sleeper_sanctions
			}
			every_playable_country = {
				limit = { 
					has_modifier = sleeper_aggressor_marker
				}
				add_modifier = { modifier = sleeper_aggressor_sanctions days = -1 }
			}
			every_playable_country = {
				limit = { 
					has_modifier = sleeper_aggressor_sanctions
					NOT = { has_modifier = sleeper_aggressor_marker }
				}
				remove_modifier = sleeper_aggressor_sanctions
			}
		}
	}
}
#event to assign AI neighbors of the sleeper some of tonies missions. triggered every 2 years
event = {
	id = sleeper_setup.7
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOR = {
			has_global_flag = sleeper_berserker_ongoing
			has_global_flag = sleeper_true_awakening_happened
		}
	}
	
	immediate = {
		event_target:the_sleeper = {
			every_neighbor_country = {
				limit = {
					is_ai = yes
				}
				random_list = {
					80 = {
						add_random_tony_mission_ai = yes
					}
					20 = {
					}
				}
			}
		}
	}
}
#event to somwhat control the AIs interaction with the sleeper. It will restrict sleeper systems for countries for whom it makes sense. Called every 10 years to correct it based on the galaxys situation
#to make it all trigger at the same time, there is a random delay. This will hopefully reduce happy new year!-lag a bit.
#system restrictions are removed should the sleeper awake.
event = {
	id = sleeper_setup.8
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOR = {
			has_global_flag = sleeper_berserker_ongoing
			has_global_flag = sleeper_true_awakening_happened
		}
	}

	immediate = {
		every_playable_country = {
			limit = { is_ai = yes }
			country_event = { id = sleeper_setup.9 days = 1 random = 10 }
		}
	}
}

country_event = {
	id = sleeper_setup.9
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		#I have not found a way of restricting systems for the AI through code yet
	}
}
#one year after invading the thinkery the invader will get a tech for a new colossus weapon. checks for the solar system owner in case the planet was abandoned.
country_event = {
	id = sleeper_setup.10
	title = sleeper_setup.10.title
	desc = {
		text = sleeper_setup.10.desc.hivemind
		trigger = {
			is_hive_empire = yes
		}
	}
	desc = {
		text = sleeper_setup.10.desc.non_hivemind
		trigger = {
			is_hive_empire = no
		}
	}
	picture = GFX_evt_society_research
	
	is_triggered_only = yes
	
	trigger = {
		is_sleeper = no
	}
	
	option = {
		name = sleeper_setup.10.hivemind
		trigger = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_research_option = tech_planetkiller_sleeper_integrator
	}
	
	option = {
		name = sleeper_setup.10.non_hivemind
		trigger = {
			owner = {
				is_hive_empire = no
			}
		}
		add_research_option = tech_planetkiller_sleeper_hive_creator
	}
	
	option = {
		name = sleeper_setup.10.no
		custom_tooltip = sleeper_setup.10.no.tooltip
		add_resource = { influence = 300 }
	}
}
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
country_event = {
	id = sleeper_setup.11
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		FromFrom = { has_planet_flag = hive_original_capital }
		owner = { is_sleeper = no }
	}
	
	immediate = {
		FROMFROM = { 
			planet_event = { id = sleeper_setup.12 days = 360 }
		}
	}
}
planet_event = {
	id = sleeper_setup.12
	hide_window = yes
	
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { space_owner = { is_same_value = event_target:the_sleeper } }
			}
			space_owner = {
				country_event = { id = sleeper_setup.10 }
			}
		}
	}
}
#Event for taking the farms
planet_event = {
	id = sleeper_setup.13
	title = sleeper_setup.13.title
	desc  = sleeper_setup.13.desc
	picture = GFX_evt_victorious_army
	
	is_triggered_only = yes
	
	trigger = {
		AND = {
			has_planet_flag = sleeper_farms
			FROM = { is_sleeper = yes }
		}
	}
	
	immediate = {
		planet_event = { id = sleeper_setup.14 days = 720 }
	}
	
	#Welcome, friends!
	option = {
		name = sleeper_setup.13.a
	}
	#A fine trophy
	option = {
		name = sleeper_setup.13.b
		trigger = {
			from = {
				OR = {
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
					has_ethic = ethic_militarist
					has_ethic = ethic_fanatic_militarist
				}
			}
		}
	}
	#*insert joke about starving communists here*
	option = {
		name = sleeper_setup.13.c
		trigger = {
			from = {
				has_valid_civic = civic_shared_burden
			}
		}
	}
	#*laughts in geniocidal/hive emire*
	option = {
		name = sleeper_setup.13.d
		trigger = {
			from = {
				is_hive_empire = yes
			}
		}
	}
	option = {
		name = sleeper_setup.13.e
		trigger = {
			from = {
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
	}
	option = {
		name = sleeper_setup.13.f
		trigger = {
			from = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
	}	
	option = {
		name = sleeper_setup.13.g
		trigger = {
			from = {
				has_valid_civic = civic_machine_terminator
			}
		}
	}
	option = {
		name = sleeper_setup.13.h
		trigger = {
			from = {
				has_valid_civic = civic_machine_servitor
			}
		}
	}
}

#followup event: who ever holds the farms two years later gets the ability to use the sleepers cattle species traits
planet_event = {
	id = sleeper_setup.14
	title = sleeper_setup.14.title
	desc  = sleeper_setup.14.desc
	picture = GFX_evt_society_research
	
	is_triggered_only = yes
	
	option = {
		name = sleeper_setup.14.a
		owner = {
			add_research_option = tech_cattle_species_traits
		}
	}
	
	option = {
		name = sleeper_setup.14.b
		owner = {
			add_resource = { influence = 200 }
		}
	}
}