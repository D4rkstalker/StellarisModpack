namespace = shadowgate_pilgrimage

country_event = {
	id = shadowgate_pilgrimage.0
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_ai = no OR = { from = { is_country_type = shadowgate_ap } has_country_flag = shadowgate_ap_rift_clicked } NOT = { has_country_flag = shadowgate_ap_diplomacy } }

	immediate = {
		set_country_flag = shadowgate_ap_diplomacy
		if = { limit = { OR = { event_target:shadowgate_ap_country = { is_hostile = prev } shadowgate_is_purifier = yes } }
			event_target:shadowgate_ap_country = {
				add_trust = { who = prev amount = -100 }
				set_faction_hostility = { target = prev set_hostile = yes set_neutral = no set_friendly = no }
			}
		}
		country_event = { id = shadowgate_pilgrimage.10 }
	}
}

event = {
	id = shadowgate_pilgrimage.1
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_country }

	immediate = {
		event_target:shadowgate_ap_country = {
			set_shadowgate_bazaar = { SLOT = Left }
			set_shadowgate_bazaar = { SLOT = Mid }
			set_shadowgate_bazaar = { SLOT = Right }
			country_event = { id = shadowgate_pilgrimage.40 }
			every_relation = { limit = { NOR = { is_hostile = prev shadowgate_is_purifier = yes } }
				if = {
					limit = { is_ai = no }
					if = {
						limit = {
							OR = {
								AND = { prev = { trust = { who = prev value >= 0 } } NOR = { has_origin = origin_shadow_remnant has_relic = r_shadowgate_st } }
								AND = { prev = { trust = { who = prev value > 25 } } NAND = { has_origin = origin_shadow_remnant has_relic = r_shadowgate_st } }
								AND = { prev = { trust = { who = prev value > 50 } } has_origin = origin_shadow_remnant has_relic = r_shadowgate_st }
							}
						}
						if = { limit = { NOT = { has_country_flag = shadowgate_ap_bazaar_trust } }
							if = { limit = { is_variable_set = ShadowgateAPTrustBuffer check_variable = { which = ShadowgateAPTrustBuffer value > @shadowgate_ap_trust_buffer_cap } }
								set_variable = { which = ShadowgateAPTrustBuffer value = @shadowgate_ap_trust_buffer_cap }
							}
							else_if = { limit = { is_variable_set = ShadowgateAPTrustBuffer check_variable_arithmetic = { which = ShadowgateAPTrustBuffer by = 1 mode = subtract value >= 0 } }
								subtract_variable = { which = ShadowgateAPTrustBuffer value = 1 }
							}
							else = { prev = { add_trust = { who = prev amount = -1 } } }
						}
					}
					else_if = {
						limit = {
							OR = {
								AND = { prev = { trust = { who = prev value < 25 } } NAND = { has_origin = origin_shadow_remnant has_relic = r_shadowgate_st } }
								AND = { prev = { trust = { who = prev value < 50 } } has_origin = origin_shadow_remnant has_relic = r_shadowgate_st }
							}
						}
						prev = { add_trust = { who = prev amount = 1 } }
					}
					if = { limit = { has_country_flag = shadowgate_ap_bazaar_notify }
						create_message = {
							type = MESSAGE_TYPE_SHADOWGATE_AP_BAZAAR_REFRESH
							localization = MESSAGE_SHADOWGATE_AP_BAZAAR_REFRESH
							days = 15
							target = event_target:shadowgate_ap_planet.solar_system
						}
					}
				}
				else_if = { limit = { NOT = { any_owned_planet = { is_colonized_shadowgate = yes } } }
					random_list = {
						5 = { prev = { add_trust = { who = prev amount = 5 } } }
						4 = { prev = { add_trust = { who = prev amount = 10 } } }
						3 = { prev = { add_trust = { who = prev amount = 15 } } }
						2 = { prev = { add_trust = { who = prev amount = 20 } } }
						1 = { prev = { add_trust = { who = prev amount = 25 } } }
					}
				}
				remove_country_flag = shadowgate_ap_bazaar_trust
			}
			if = { limit = { event_target:shadowgate_ap_planet = { check_variable_arithmetic = { which = ShadowgateRP by = ShadowgateRPMin value >= 100 mode = subtract } } NOR = { has_modifier = relic_activation_cooldown has_country_flag = shadowgate_ap_converter_used } }
				set_timed_country_flag = { flag = shadowgate_ap_converter_used days = 3600 }
				country_event = { id = shadowgate_galactic.605 }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.2
	title = shadowgate.pilgrimage.title
	desc = {
		text = shadowgate.pilgrimage.fc.origin
		exclusive_trigger = { has_country_flag = shadow_remnant_origin_surveyed NOT = { shadowgate_is_purifier = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.fc.origin.foul
		exclusive_trigger = { has_country_flag = shadow_remnant_origin_surveyed shadowgate_is_purifier = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.fc.default
		trigger = { NOT = { shadowgate_is_purifier = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.fc.foul
		trigger = { shadowgate_is_purifier = yes }
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01

	trigger = { OR = { from = { is_scope_type = country is_country_type = shadowgate_ap } has_country_flag = shadowgate_ap_first_contact } }

	immediate = {
		if = { limit = { has_point_of_interest = { poi = shadowgate_shadow_remnant_origin } } remove_point_of_interest = shadowgate_shadow_remnant_origin end_event_chain = shadowgate_shadow_remnant_origin }
		if = { limit = { has_special_project = SHADOW_REMNANT_PROJECT } abort_special_project = { type = SHADOW_REMNANT_PROJECT } }
		if = { limit = { shadowgate_is_purifier = yes }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = -100 }
				set_faction_hostility = { target = root set_hostile = yes set_neutral = no set_friendly = no }
			}
		}
		remove_country_flag = shadowgate_ap_first_contact
		establish_communications_no_message = event_target:shadowgate_ap_country
		event_target:shadowgate_ap_planet = { set_surveyed = { surveyed = yes surveyor = root } }
	}

	option = {
		name = shadowgate.pilgrimage.fc.notnow
		trigger = { NOT = { shadowgate_is_purifier = yes } }
		ai_chance = {
			factor = 100
		}
	}

	option = {
		name = shadowgate.pilgrimage.fc.visit
		trigger = { NOT = { shadowgate_is_purifier = yes } }
		allow = { hidden_trigger = { NOT = { has_country_flag = shadowgate_ap_diplomacy } } }
		hidden_effect = {
			set_country_flag = shadowgate_ap_diplomacy
			country_event = { id = shadowgate_pilgrimage.10 }
		}
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = SCUM
		trigger = { has_valid_civic = civic_fanatic_purifiers }
		ai_chance = {
			factor = 100
		}
	}

	option = {
		name = EXTERMINATE
		trigger = { has_valid_civic = civic_machine_terminator }
		ai_chance = {
			factor = 100
		}
	}

	option = {
		name = TASTY
		trigger = { has_valid_civic = civic_hive_devouring_swarm }
		ai_chance = {
			factor = 100
		}
	}

	option = {
		name = DOTDOTDOT
		trigger = { has_country_flag = shadowgate_ap_restricted }
		ai_chance = {
			factor = 100
		}
	}

	after = {
		if = { limit = { hidden_trigger = { has_origin = origin_shadow_remnant } }
			if = { limit = { hidden_trigger = { NOT = { shadowgate_is_purifier = yes } } }
				add_modifier = { modifier = shadowgate_ap_origin_default days = -1 }
			}
			else = { add_modifier = { modifier = shadowgate_ap_origin_purifier days = -1 } }
		}
		hidden_effect = {
			if = { limit = { NOT = { has_country_flag = shadowgate_ap_diplomacy } }
				country_event = { id = shadowgate_pilgrimage.4 days = 3 }
			}
		}
	}
}

ship_event = {
	id = shadowgate_pilgrimage.3
	hide_window = yes
	is_triggered_only = yes

	trigger = { from = { has_star_flag = shadowgate_ap_solar_system } }

	immediate = {
		if = { limit = { owner = { NOT = { has_communications = event_target:shadowgate_ap_country } } }
			owner = { establish_contact = { who = event_target:shadowgate_ap_country location = from } }
			fromfrom = {
				set_country_flag = shadowgate_ap_first_contact
				country_event = { id = shadowgate_pilgrimage.2 }
			}
		}
	}
}

country_event = { # Copied from progress.6 in events/progress_events.txt and altered slightly - credit and thanks to Henrik Thyrwall.
	id = shadowgate_pilgrimage.4
	title = "progress.4.name"
	picture = GFX_evt_news_room
	
	desc = {
		text = progress.6.desc_01
		trigger = {
			NOT = {
				OR = {
					has_ethic = ethic_gestalt_consciousness
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
		}
	}
	desc = { # Xenophile
		text = progress.6.desc_02
		trigger = {
			OR = {
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
	}
	desc = { # Xenophobe
		text = progress.6.desc_03
		trigger = {
			OR = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
	desc = { # Gestalt Consciousness
		text = progress.6.desc_04
		trigger = { 
			has_ethic = ethic_gestalt_consciousness
		}
	}
	
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		NOT = { has_country_flag = first_contact_event }
	}
	
	immediate = {
		set_country_flag = first_contact_event
	}

	option = {
		name = "progress.4.a"
		trigger = {
			NOT = {
				OR = {
					has_ethic = ethic_gestalt_consciousness
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
		}
	}
	option = {
		name = "progress.6.b"
		trigger = {
			OR = {
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}	
	}
	option = {
		name = "progress.6.c"
		trigger = {
			OR = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
	option = {
		name = "progress.4.d"
		trigger = { 
			has_authority = auth_hive_mind
			NOT = { has_government = "gov_devouring_swarm" }
		}
	}
	option = {
		name = "progress.4.e"
		trigger = { 
			has_authority = auth_machine_intelligence
			NOT = { has_government = "gov_machine_terminator" }
		}
	}
	option = {
		name = "progress.4.f"
		trigger = { 
			has_government = "gov_devouring_swarm"
		}
	}
	option = {
		name = "progress.4.g"
		trigger = { 
			has_government = "gov_machine_terminator"
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.10
	title = shadowgate.pilgrimage.title
	desc = {
		text = shadowgate.pilgrimage.fc.foul
		exclusive_trigger = { NOT = { has_country_flag = shadowgate_ap_disbarred } OR = { event_target:shadowgate_ap_country = { is_hostile = root } shadowgate_is_purifier = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.under.assault
		exclusive_trigger = { event_target:shadowgate_ap_country = { NOT = { is_hostile = root } any_owned_fleet = { is_in_combat = yes } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.disbarred
		exclusive_trigger = { has_country_flag = shadowgate_ap_disbarred }
	}
	desc = {
		text = shadowgate.pilgrimage.main.still.here.1
		exclusive_trigger = { has_country_flag = shadowgate_still_here }
	}
	desc = {
		text = shadowgate.pilgrimage.main.still.here.2
		exclusive_trigger = { has_country_flag = shadowgate_still_here }
	}
	desc = {
		text = shadowgate.pilgrimage.main.still.here.3
		exclusive_trigger = { has_country_flag = shadowgate_still_here }
	}
	desc = {
		text = shadowgate.pilgrimage.main.general.a.desc
		trigger = { always = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.main.general.b.desc
		trigger = { always = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.main.general.c.desc
		trigger = { always = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.main.general.d.desc
		trigger = { always = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.main.general.e.desc
		trigger = { always = yes }
	}
	desc = {
		text = shadowgate.pilgrimage.main.staff.a.desc
		trigger = { has_relic = r_shadowgate_sous }
	}
	desc = {
		text = shadowgate.pilgrimage.main.staff.b.desc
		trigger = { has_relic = r_shadowgate_sous }
	}
	desc = {
		text = shadowgate.pilgrimage.main.staff.c.desc
		trigger = { has_relic = r_shadowgate_sous }
	}
	desc = {
		text = shadowgate.pilgrimage.main.origin.a.desc
		trigger = { has_origin = origin_shadow_remnant }
	}
	desc = {
		text = shadowgate.pilgrimage.main.origin.b.desc
		trigger = { has_origin = origin_shadow_remnant }
	}
	desc = {
		text = shadowgate.pilgrimage.main.origin.c.desc
		trigger = { has_origin = origin_shadow_remnant }
	}
	desc = {
		text = shadowgate.pilgrimage.main.owner.a
		trigger = { any_owned_planet = { is_colonized_shadowgate = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.owner.b
		trigger = { any_owned_planet = { is_colonized_shadowgate = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.owner.c
		trigger = { any_owned_planet = { is_colonized_shadowgate = yes } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.0.a.desc
		trigger = { NOR = { has_origin = origin_shadow_remnant any_owned_planet = { is_colonized_shadowgate = yes } } event_target:shadowgate_ap_country = { trust = { who = root value < 25 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.0.b.desc
		trigger = { NOR = { has_origin = origin_shadow_remnant any_owned_planet = { is_colonized_shadowgate = yes } } event_target:shadowgate_ap_country = { trust = { who = root value < 25 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.0.c.desc
		trigger = { NOR = { has_origin = origin_shadow_remnant any_owned_planet = { is_colonized_shadowgate = yes } } event_target:shadowgate_ap_country = { trust = { who = root value < 25 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.25.a.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 25 } trust = { who = root value < 50 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.25.b.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 25 } trust = { who = root value < 50 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.25.c.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 25 } trust = { who = root value < 50 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.50.a.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 50 } trust = { who = root value < 75 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.50.b.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 50 } trust = { who = root value < 75 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.50.c.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 50 } trust = { who = root value < 75 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.100.a.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 75 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.100.b.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 75 } } }
	}
	desc = {
		text = shadowgate.pilgrimage.main.100.c.desc
		trigger = { event_target:shadowgate_ap_country = { trust = { who = root value >= 75 } } }
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01

	option = {
		name = shadowgate.pilgrimage.use.shadowgate
		trigger = { NOR = { event_target:shadowgate_ap_country = { is_hostile = root } shadowgate_is_purifier = yes } }
		custom_tooltip = shadowgate.pilgrimage.use.shadowgate.tooltip
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_planet exists = event_target:shadowgate_ap_country NOT = { has_global_flag = shadowgate_opening } event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.use.fail.ap.foreign.mainframe NOR = { has_country_flag = shadowgate_accessed has_country_flag = shadowgate_d_compass_open } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.25 event_target:shadowgate_ap_country = { trust = { who = root value >= 25 } } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.prioritize.last.summoner OR = { event_target:shadowgate_ap_planet = { NOT = { shadowgate_shadowrift_is_under_assault = yes } } is_same_value = event_target:shadowgate_ap_last_summoner } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.disabled event_target:shadowgate_ap_planet = { NOT = { shadowgate_is_disabled = yes } } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.queued NOT = { event_target:shadowgate_ap_planet = { has_planet_flag = shadowrift_queued } } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.accessed NOT = { event_target:shadowgate_ap_country = { has_country_flag = shadowgate_ap_accessed } } }
		}
		hidden_effect = {
			save_event_target_as = shadowgate_owner
			set_country_flag = shadowgate_ap_accessed
			set_country_flag = shadowgate_still_here
			event_target:shadowgate_ap_country = {
				set_country_flag = shadowgate_ap_accessed
				event_target:shadowgate_ap_planet = {
					save_event_target_as = shadowgate_planet
					shadowgate_ap_event = { ID = 100 }
				}
			}
		}
	}

	option = {
		name = shadowgate.pilgrimage.donate
		custom_tooltip = shadowgate.pilgrimage.donate.tooltip
		trigger = { NOR = { event_target:shadowgate_ap_country = { is_hostile = root } shadowgate_is_purifier = yes } }
		allow = { hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } } }
		hidden_effect = {
			set_country_flag = shadowgate_still_here
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.pilgrimage.visit.bazaar
		custom_tooltip = shadowgate.pilgrimage.visit.bazaar.tooltip
		trigger = { NOR = { event_target:shadowgate_ap_country = { is_hostile = root } shadowgate_is_purifier = yes } }
		allow = { hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } } }
		hidden_effect = {
			set_country_flag = shadowgate_still_here
			country_event = { id = shadowgate_pilgrimage.20 }
		}
	}

	option = {
		name = shadowgate.pilgrimage.notify
		custom_tooltip = shadowgate.pilgrimage.notify.tooltip
		trigger = { NOR = { event_target:shadowgate_ap_country = { is_hostile = root } shadowgate_is_purifier = yes } }
		hidden_effect = {
			set_country_flag = shadowgate_still_here
			country_event = { id = shadowgate_pilgrimage.15 }
		}
	}

	option = {
		name = shadowgate.exit
		default_hide_option = yes
		hidden_effect = {
			remove_country_flag = shadowgate_ap_diplomacy
			remove_country_flag = shadowgate_still_here
			if = { limit = { NOT = { has_country_flag = first_contact_event } }
				country_event = { id = shadowgate_pilgrimage.4 days = 3 }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.15
	title = shadowgate.pilgrimage.title
	desc = shadowgate.ap.notify.desc
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	option = {
		name = shadowgate.pilgrimage.notify.shadowgate.on
		trigger = { NOR = { has_country_flag = shadowgate_ap_shadowgate_notify event_target:shadowgate_ap_country = { is_hostile = root } } }
		hidden_effect = {
			set_country_flag = shadowgate_ap_shadowgate_notify
			country_event = { id = shadowgate_pilgrimage.15 }
		}
	}

	option = {
		name = shadowgate.pilgrimage.notify.shadowgate.off
		trigger = { has_country_flag = shadowgate_ap_shadowgate_notify NOT = { event_target:shadowgate_ap_country = { is_hostile = root } } }
		hidden_effect = {
			remove_country_flag = shadowgate_ap_shadowgate_notify
			country_event = { id = shadowgate_pilgrimage.15 }
		}
	}

	option = {
		name = shadowgate.pilgrimage.notify.bazaar.on
		trigger = { NOR = { has_country_flag = shadowgate_ap_bazaar_notify event_target:shadowgate_ap_country = { is_hostile = root } } }
		hidden_effect = {
			set_country_flag = shadowgate_ap_bazaar_notify
			country_event = { id = shadowgate_pilgrimage.15 }
		}
	}

	option = {
		name = shadowgate.pilgrimage.notify.bazaar.off
		trigger = { has_country_flag = shadowgate_ap_bazaar_notify NOT = { event_target:shadowgate_ap_country = { is_hostile = root } } }
		hidden_effect = {
			remove_country_flag = shadowgate_ap_bazaar_notify
			country_event = { id = shadowgate_pilgrimage.15 }
		}
	}

	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { exists = event_target:shadowgate_ap_country } country_event = { id = shadowgate_pilgrimage.10 } }
			else = {
				remove_country_flag = shadowgate_ap_diplomacy
				remove_country_flag = shadowgate_still_here
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.20
	title = shadowgate.pilgrimage.title
	desc = {
		exclusive_trigger = { NOT = { has_country_flag = shadowgate_ap_bazaar_seen } }
		text = shadowgate.ap.bazaar.first.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.bazaar.desc.1
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.bazaar.desc.2
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.bazaar.desc.3
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.bazaar.desc.4
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.bazaar.desc.5
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_bazaar_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = { sound = shadowgate_ap_loop_01 trigger = { check_variable = { which = ShadowgateAPLoop value = 1 } } }
	show_sound = { sound = shadowgate_ap_loop_02 trigger = { check_variable = { which = ShadowgateAPLoop value = 2 } } }
	show_sound = { sound = shadowgate_ap_loop_03 trigger = { check_variable = { which = ShadowgateAPLoop value = 3 } } }

	immediate = {
		random_list = {
            1 = { modifier = { factor = 0 check_variable = { which = ShadowgateAPLoop value = 1 } } set_variable = { which = ShadowgateAPLoop value = 1 } }
            1 = { modifier = { factor = 0 check_variable = { which = ShadowgateAPLoop value = 2 } } set_variable = { which = ShadowgateAPLoop value = 2 } }
            1 = { modifier = { factor = 0 check_variable = { which = ShadowgateAPLoop value = 3 } } set_variable = { which = ShadowgateAPLoop value = 3 } }
        }
	}

	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			set_country_flag = shadowgate_ap_bazaar_seen
			clear_variable = ShadowgateAPLoop
			if = { limit = { exists = event_target:shadowgate_ap_country } country_event = { id = shadowgate_pilgrimage.10 } }
			else = {
				remove_country_flag = shadowgate_ap_diplomacy
				remove_country_flag = shadowgate_still_here
			}
		}
	}

	option = {
		custom_tooltip = shadowgate.pilgrimage.bazaar.refresh.stock
		custom_gui = shadowgate_bazaar_refresh_option
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.bazaar.refresh.stock.fail has_resource = { type = influence amount >= 50 } }
			custom_tooltip = { fail_text = shadowgate.pilgrimage.fail.50 event_target:shadowgate_ap_country = { trust = { who = root value >= 50 } } }
		}
		hidden_effect = {
			add_resource = { influence = -50 }
			event_target:shadowgate_ap_country = {
				set_shadowgate_bazaar = { SLOT = Left }
				set_shadowgate_bazaar = { SLOT = Mid }
				set_shadowgate_bazaar = { SLOT = Right }
			}
			if = { limit = { exists = event_target:shadowgate_ap_country } country_event = { id = shadowgate_pilgrimage.20 } }
			else = {
				remove_country_flag = shadowgate_ap_diplomacy
				remove_country_flag = shadowgate_still_here
				clear_variable = ShadowgateAPLoop
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.25
	title = shadowgate.pilgrimage.title
	desc = {
		exclusive_trigger = { check_variable = { which = ShadowgateAPDonation value >= 3 } }
		text = shadowgate.ap.donate.greater.desc
	}
	desc = {
		exclusive_trigger = { check_variable = { which = ShadowgateAPDonation value = 2 } }
		text = shadowgate.ap.donate.10000.desc
	}
	desc = {
		exclusive_trigger = { check_variable = { which = ShadowgateAPDonation value = 1 } }
		text = shadowgate.ap.donate.5000.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.donate.desc.1
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.donate.desc.2
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.donate.desc.3
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_donation_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03

	option = {
		name = shadowgate.ap.donate.5000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 5000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 1 }
			change_variable = { which = ShadowgateAPDonated value = 5000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 10 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 5 }
				change_variable = { which = ShadowgateAPProgress value = 5000 }
			}
			add_resource = { energy = -5000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.ap.donate.10000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 10000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 2 }
			change_variable = { which = ShadowgateAPDonated value = 10000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 20 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 10 }
				change_variable = { which = ShadowgateAPProgress value = 10000 }
			}
			add_resource = { energy = -10000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.ap.donate.20000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 20000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 3 }
			change_variable = { which = ShadowgateAPDonated value = 20000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 40 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 20 }
				change_variable = { which = ShadowgateAPProgress value = 20000 }
			}
			add_resource = { energy = -20000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.ap.donate.50000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 50000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 3 }
			change_variable = { which = ShadowgateAPDonated value = 50000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 100 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 50 }
				change_variable = { which = ShadowgateAPProgress value = 50000 }
			}
			add_resource = { energy = -50000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.ap.donate.100000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		trigger = { has_resource = { type = energy amount >= 100000 } }
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 100000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 3 }
			change_variable = { which = ShadowgateAPDonated value = 100000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 200 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 100 }
				change_variable = { which = ShadowgateAPProgress value = 100000 }
			}
			add_resource = { energy = -100000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.ap.donate.500000
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.ap.donate.tooltip
		trigger = { has_resource = { type = energy amount >= 500000 } }
		allow = {
			hidden_trigger = { exists = event_target:shadowgate_ap_country event_target:shadowgate_ap_country = { NOR = { is_hostile = root any_owned_fleet = { is_in_combat = yes } } } }
			custom_tooltip = { fail_text = shadowgate.ap.donate.fail.cost has_resource = { type = energy amount >= 500000 } }
		}
		hidden_effect = {
			change_variable = { which = ShadowgateAPDonation value = 3 }
			change_variable = { which = ShadowgateAPDonated value = 500000 }
			change_variable = { which = ShadowgateAPTrustBuffer value = 1000 }
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = 100 }
				change_variable = { which = ShadowgateAPProgress value = 500000 }
			}
			add_resource = { energy = -500000 }
			country_event = { id = shadowgate_pilgrimage.25 }
		}
	}

	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			set_variable = { which = ShadowgateAPDonation value = 0 }
			if = { limit = { exists = event_target:shadowgate_ap_country } country_event = { id = shadowgate_pilgrimage.10 } }
			else = {
				remove_country_flag = shadowgate_ap_diplomacy
				remove_country_flag = shadowgate_still_here
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.30
	hide_window = yes
	is_triggered_only = yes

	trigger = { fromfrom = { has_fleet_flag = shadowgate_ap } }

	immediate = {
		if = { limit = { fromfrom = { any_owned_ship = { is_ship_size = shadowgate_ap_turret } } }
			create_ambient_object = { type = small_debris_object entity_offset_angle = { min = 0 max = 359 } use_3d_location = yes location = fromfrom }
			create_ambient_object = { type = small_debris_object scale = @shadowgate_ap_debris_large_scale entity_offset_angle = { min = 0 max = 359 } use_3d_location = yes location = fromfrom }
		}
		else = {
			create_ambient_object = { type = large_debris_object scale = @shadowgate_ap_debris_small_scale entity_offset_angle = { min = 0 max = 359 } use_3d_location = yes location = fromfrom }
			create_ambient_object = { type = large_debris_object scale = @shadowgate_ap_debris_small_scale entity_offset_angle = { min = 0 max = 359 } use_3d_location = yes location = fromfrom }
			last_created_ambient_object = { set_ambient_object_flag = shadowgate_black_harbor_debris }
			event_target:global_event_country = { country_event = { id = shadowgate_pilgrimage.31 days = 12 } }
		}
		if = { limit = { event_target:shadowgate_ap_country = { count_owned_ship = { limit = { OR = { is_ship_size = shadowgate_ap_station is_ship_size = shadowgate_ap_turret } } count = 0 } } }
			if = { limit = { exists = from } from = { save_event_target_as = shadowgate_ap_killer } }
			else = { event_target:shadowgate_ap_planet = { solar_system = { random_fleet_in_system = { limit = { exists = owner owner = { NOR = { is_country_type = shadowgate_ap is_country_type = shadowgate is_country_type = shadowrift } } } owner = { save_event_target_as = shadowgate_ap_killer } } } } }
			every_owned_fleet = {
				if = { limit = { OR = { event_target:shadowgate_ap_killer = { is_crisis_faction = yes } any_owned_ship = { OR = { is_ship_size = shadowgate_ap_station is_ship_size = shadowgate_ap_turret } } } } destroy_fleet = this }
				else = { set_owner = event_target:shadowgate_ap_killer }
			}
			event_target:shadowgate_ap_planet = {
				solar_system = { remove_star_flag = shadowgate_ap_solar_system }
				save_event_target_as = shadowgate_ap_planet
				remove_planet_flag = shadowgate_ashen_pilgrimage
				remove_planet_flag = shadowgate_rp_notifications
				if = { limit = { exists = event_target:shadowgate_ap_killer event_target:shadowgate_ap_killer = { NOT = { is_crisis_faction = yes } } }
					create_pop = { species = event_target:shadowgate_ap_killer.owner_species }
					set_owner = event_target:shadowgate_ap_killer
					set_controller = event_target:shadowgate_ap_killer
				}
				else = {
					destroy_colony = yes
				}
			}
			clear_global_event_target = shadowgate_ap_country
			clear_global_event_target = shadowgate_ap_planet
			clear_global_event_target = shadowgate_ap_last_summoner
			every_relation = { limit = { is_ai = no is_crisis_faction = no }
				country_event = { id = shadowgate_pilgrimage.32 }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.31
	hide_window = yes
	is_triggered_only = yes

	immediate = { random_ambient_object = { limit = { has_ambient_object_flag = shadowgate_black_harbor_debris } remove_ambient_object_flag = shadowgate_black_harbor_debris create_ambient_object = { type = large_debris_object scale = @shadowgate_ap_debris_persistent_scale entity_offset_angle = { min = 0 max = 359 } use_3d_location = yes location = this } destroy_ambient_object = this } }
}

country_event = {
	id = shadowgate_pilgrimage.32
	title = shadowgate.ap.destroyed.title
	desc = shadowgate.ap.destroyed.desc
	picture = GFX_evt_exploding_ship
	show_sound = event_ship_explosion
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes

	option = {
		name = shadowgate.ap.destroyed.response
		trigger = { is_same_value = event_target:shadowgate_ap_killer }
		custom_tooltip = shadowgate.ap.destroyed.lodestones.tooltip
		hidden_effect = { change_variable = { which = ShadowgateLodestonesOwned value = 5 } }
		add_resource = { minor_artifacts = 50 }
		if = { limit = { hidden_trigger = { NOT = { has_relic = r_shadowgate_es } } }
			add_relic = r_shadowgate_es
		}
		if = { limit = { hidden_trigger = { NOT = { has_global_flag = shadowgate_sous_acquired } } }
			hidden_effect = { set_global_flag = shadowgate_sous_acquired }
			add_relic = r_shadowgate_sous
		}
	}

	option = {
		name = TERRIBLE
		trigger = { NOT = { is_same_value = event_target:shadowgate_ap_killer } }
	}

	option = {
		name = SPLENDID
		trigger = { NOT = { is_same_value = event_target:shadowgate_ap_killer } }
	}
}

country_event = {
	id = shadowgate_pilgrimage.35
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_country }

	immediate = {
		random_list = {
			12 = { }
			1 = {
				random_relation = { limit = { NOR = { is_ai = yes is_hostile = root has_country_flag = shadowgate_ap_gifted } root = { trust = { who = prev value >= 50 } } }
					country_event = { id = shadowgate_pilgrimage.36 days = 180 random = 90 }
				}
			}
		}
		country_event = { id = shadowgate_pilgrimage.35 days = 1800 random = 720 }
	}
}

country_event = {
	id = shadowgate_pilgrimage.36
	title = shadowgate.pilgrimage.title
	desc = shadowgate.pilgrimage.gift
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	trigger = { exists = event_target:shadowgate_ap_country }

	immediate = { set_timed_country_flag = { flag = shadowgate_ap_gifted days = 4800 } }

	option = {
		name = MARVELOUS
		locked_random_list = {
			1 = { modifier = { factor = 0 from = { trust = { who = root value >= 75 } } }
				locked_random_list = {
					2 = { add_resource = { minor_artifacts = 5 } }
					2 = { add_resource = { sr_dark_matter = 25 } add_resource = { sr_living_metal = 50 } add_resource = { sr_zro = 50 } }
					1 = { modifier = { factor = 0 OR = { has_country_flag = shadowgate_seal_revoked check_variable = { which = ShadowgateSeal value > 975 } } } custom_tooltip = shadowgate.ap.seal.gift.25 hidden_effect = { change_variable = { which = ShadowgateSeal value = 25 } } }
					1 = { modifier = { factor = 0 has_country_flag = shadowgate_ap_rift_gifted } custom_tooltip = shadowgate.ap.rift.gifted hidden_effect = { set_country_flag = shadowgate_ap_rift_gifted } }
				}
			}
			2 = { modifier = { factor = 0 from = { trust = { who = root value < 75 } } }
				locked_random_list = {
					3 = { add_resource = { minor_artifacts = 10 } }
					3 = { add_resource = { sr_dark_matter = 50 } add_resource = { sr_living_metal = 100 } add_resource = { sr_zro = 100 } }
					2 = { modifier = { factor = 0 OR = { has_country_flag = shadowgate_seal_revoked check_variable = { which = ShadowgateSeal value > 950 } } } custom_tooltip = shadowgate.ap.seal.gift.50 hidden_effect = { change_variable = { which = ShadowgateSeal value = 50 } } }
					1 = { modifier = { factor = 0 has_country_flag = shadowgate_ap_rift_gifted } custom_tooltip = shadowgate.ap.rift.gifted hidden_effect = { set_country_flag = shadowgate_ap_rift_gifted } }
				}
			}
			5 = { modifier = { factor = 0 from = { trust = { who = root value < 90 } } }
				locked_random_list = {
					1 = { add_resource = { minor_artifacts = 20 } }
					1 = { add_resource = { sr_dark_matter = 100 } add_resource = { sr_living_metal = 200 } add_resource = { sr_zro = 200 } }
					1 = { modifier = { factor = 0 OR = { has_country_flag = shadowgate_seal_revoked check_variable = { which = ShadowgateSeal value > 900 } } } custom_tooltip = shadowgate.ap.seal.gift.100 hidden_effect = { change_variable = { which = ShadowgateSeal value = 100 } } }
					1 = { custom_tooltip = shadowgate.ap.lodestone.gifted hidden_effect = { change_variable = { which = ShadowgateLodestonesOwned value = 1 } } }
					1 = { modifier = { factor = 0 has_country_flag = shadowgate_ap_rift_gifted } custom_tooltip = shadowgate.ap.rift.gifted hidden_effect = { set_country_flag = shadowgate_ap_rift_gifted } }
				}
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.40
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_planet }

	immediate = {
		every_relation = { limit = { NOT = { is_hostile = prev } is_ai = yes is_country_type = default }
			random_list = {
				15 = { }
				10 = { prev = { change_variable = { which = ShadowgateAPProgress value = 250 } } change_variable = { which = ShadowgateAPDonated value = 250 } }
				7 = { prev = { change_variable = { which = ShadowgateAPProgress value = 500 } } change_variable = { which = ShadowgateAPDonated value = 500 } }
				5 = { prev = { change_variable = { which = ShadowgateAPProgress value = 750 } } change_variable = { which = ShadowgateAPDonated value = 750 } }
				4 = { prev = { change_variable = { which = ShadowgateAPProgress value = 1000 } } change_variable = { which = ShadowgateAPDonated value = 1000 } }
				3 = { prev = { change_variable = { which = ShadowgateAPProgress value = 1500 } } change_variable = { which = ShadowgateAPDonated value = 1500 } }
				2 = { prev = { change_variable = { which = ShadowgateAPProgress value = 2000 } } change_variable = { which = ShadowgateAPDonated value = 2000 } }
				1 = { prev = { change_variable = { which = ShadowgateAPProgress value = 2500 } } change_variable = { which = ShadowgateAPDonated value = 2500 } }
			}
		}
		while = { count = 50 random_list = { 2 = { } 1 = { change_variable = { which = ShadowgateAPProgress value = 1 } } } }
		if = { limit = { NOT = { has_global_flag = shadowgate_ap_restored } }
			if = { limit = { NOT = { has_country_flag = shadowgate_ap_restoring_district } check_variable = { which = ShadowgateAPProgress value >= 100000 } }
				set_country_flag = shadowgate_ap_restoring_district
				country_event = { id = shadowgate_pilgrimage.41 days = 1440 random = 360 }
			}
		}
		else_if = { limit = { check_variable = { which = ShadowgateAPProgress value >= ShadowgateAPUpgrade } }
			while = { limit = { check_variable = { which = ShadowgateAPProgress value >= ShadowgateAPUpgrade } } country_event = { id = shadowgate_pilgrimage.42 } }
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.41
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_country }

	immediate = {
		remove_country_flag = shadowgate_ap_restoring_district
		subtract_variable = { which = ShadowgateAPProgress value = 100000 }
		event_target:shadowgate_ap_planet = {
			planet_event = { id = shadowgate_galactic.135 }
			if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } num_districts = { type = district_shadow_pulse_condenser value = 3 } num_districts = { type = district_spectral_projection_array value = 3 } }
				set_variable = { which = ShadowgateLodestonesActive value = 3 }
				set_planet_flag = shadowgate_dc
				set_planet_flag = shadowgate_sp
				set_planet_flag = shadowgate_asp
				owner = { save_event_target_as = shadowgate_d_compass_owner set_country_flag = shadowgate_d_compass_saved }
				switch = {
					trigger = has_planet_flag
					shadowgate_a = { planet_event = { id = shadowgate_a.3011 } }
					shadowgate_b = { planet_event = { id = shadowgate_b.3011 } }
					shadowgate_c = { planet_event = { id = shadowgate_c.3011 } }
					shadowgate_d = { planet_event = { id = shadowgate_d.3011 } }
					shadowgate_e = { planet_event = { id = shadowgate_e.3011 } }
				}
				set_global_flag = shadowgate_ap_restored
				root = {
					every_relation = { limit = { NOT = { is_hostile = prev } }
						if = { limit = { NOT = { any_country = { NOT = { is_hostile = root } is_variable_set = ShadowgateAPDonated check_variable = { which = ShadowgateAPDonated value > prev } } } } set_country_flag = shadowgate_ap_sous }
						country_event = { id = shadowgate_pilgrimage.50 }
					}
				}
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.42
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_planet event_target:shadowgate_ap_planet = { NOT = { shadowgate_is_disabled = yes } } }

	immediate = {
		subtract_variable = { which = ShadowgateAPProgress value = ShadowgateAPUpgrade }
		event_target:shadowgate_ap_planet = {
			if = { limit = { check_variable = { which = TerminusCoreFortifyCount value < TerminusBarrierFortifyCount } } apply_shadowrift_core_fortification = yes }
			else_if = { limit = { check_variable = { which = TerminusBarrierFortifyCount value < TerminusCoreFortifyCount } } apply_shadowrift_barrier_fortification = yes }
			else = {
				random_list = {
					1 = { apply_shadowrift_core_fortification = yes }
					1 = { apply_shadowrift_barrier_fortification = yes }
				}
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.43
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		save_event_target_as = shadowgate_d_compass_owner
		set_country_flag = shadowgate_d_compass_saved
		event_target:shadowgate_ap_planet = {
			set_planet_flag = shadowgate_dc
			set_planet_flag = shadowgate_sp
			set_planet_flag = shadowgate_asp
			change_variable = { which = ShadowgateLodestonesActive value = 3 }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { planet_event = { id = shadowgate_a.3011 } }
				shadowgate_b = { planet_event = { id = shadowgate_b.3011 } }
				shadowgate_c = { planet_event = { id = shadowgate_c.3011 } }
				shadowgate_d = { planet_event = { id = shadowgate_d.3011 } }
				shadowgate_e = { planet_event = { id = shadowgate_e.3011 } }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.50
	title = shadowgate.pilgrimage.title
	desc = shadowgate.ap.restored.desc
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_windup_ap

	immediate = {
		if = { limit = { is_variable_set = ShadowgateAPDonated }
			multiply_variable = { which = ShadowgateAPDonated value = 0.5 }
			round_variable = ShadowgateAPDonated
		}
	}

	option = {
		name = SPLENDID
		if = { limit = { hidden_trigger = { is_variable_set = ShadowgateAPDonated check_variable = { which = ShadowgateAPDonated value > 0 } } }
			add_resource = { unity = 1 mult = ShadowgateAPDonated }
		}
		hidden_effect = {
			set_variable = { which = ShadowgateAPDonated value = 0 }
			if = { limit = { has_country_flag = shadowgate_ap_sous NOT = { has_global_flag = shadowgate_sous_acquired } }
				remove_country_flag = shadowgate_ap_sous
				country_event = { id = shadowgate_pilgrimage.51 }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.51
	title = shadowgate.pilgrimage.title
	desc = shadowgate.ap.sous.desc
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03

	immediate = { set_global_flag = shadowgate_sous_acquired event_target:shadowgate_ap_country = { remove_relic = r_shadowgate_sous } }

	option = {
		name = PRAISE
		add_relic = r_shadowgate_sous
	}
}

country_event = {
	id = shadowgate_pilgrimage.60
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_country_type = shadowgate_ap exists = event_target:shadowgate_ap_country }

	immediate = {
		random_relation = { limit = { OR = { is_country_type = default shadowgate_is_fe = yes shadowgate_is_ae = yes } any_relation = { NOR = { has_established_contact = root has_communications = root } } }
			save_event_target_as = shadowgate_ap_contact
			random_relation = { limit = { if = { limit = { prev = { has_country_flag = scion_master } has_origin = origin_scion } years_passed >= 40 } NOR = { is_same_value = root has_established_contact = root has_communications = root } }
				country_event = { id = shadowgate_pilgrimage.61 }
			}
		}
		country_event = { id = shadowgate_pilgrimage.60 days = 4800 random = 1200 }
	}
}

country_event = {
	id = shadowgate_pilgrimage.61
	title = shadowgate.pilgrimage.pre.fc.title
	desc = shadowgate.pilgrimage.pre.fc.desc
	picture = GFX_evt_star_chart
	is_triggered_only = yes
	show_sound = event_scanner

	option = {
		name = ONSCREEN
		hidden_effect = { event_target:shadowgate_ap_country = { establish_contact = { who = prev location = event_target:shadowgate_ap_planet } } }
	}
}

##################################################################
# Shadowgate Main Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.100
	title = shadowgate.pilgrimage.title
	desc = shadowgate.ap.first.desc
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } }
		set_shadowgate_accessed = yes
	}
	
	option = {
		name = shadowgate.open.shadowrift
		custom_tooltip = shadowgate.open.shadowrift.tooltip
		allow = {
			hidden_trigger = { NOT = { has_global_flag = shadowgate_opening } }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.queued.tooltip NOT = { has_planet_flag = shadowrift_queued } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.summoning.tooltip NOT = { has_modifier = pm_shadowgate_summoning } }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.fail.cooldown.tooltip NOT = { has_modifier = pm_shadowgate_cooldown } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { shadowgate_ap_event = { ID = 101 } }
	}

	option = {
		name = shadowgate.adjustseals
		custom_tooltip = shadowgate.adjustseals.tooltip
		allow = { custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } } }
		hidden_effect = {
			set_planet_flag = shadowgate_function_adjusting_seal
			set_planet_flag = shadowgate_sealing_country
			shadowgate_ap_event = { ID = 107 }
		}
	}
	
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = { remove_shadowgate_accessed_switch = yes }
	}
}

##################################################################
# Shadowrift Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.101
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } random_system = { limit = { has_star_flag = has_shadowrift_a NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_a_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } random_system = { limit = { has_star_flag = has_shadowrift_b NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_b_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } random_system = { limit = { has_star_flag = has_shadowrift_c NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_c_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } random_system = { limit = { has_star_flag = has_shadowrift_d NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_d_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } random_system = { limit = { has_star_flag = has_shadowrift_e NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_e_sp_origin has_star_flag = has_shadow_mooring_rift } } save_event_target_as = shadowgate_sp_move_origin } }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.systems
		custom_tooltip = shadowgate.open.shadowrift.systems.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			shadowgate_ap_event = { ID = 103 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires
		custom_tooltip = shadowgate.open.shadowrift.empires.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			shadowgate_ap_event = { ID = 107 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors
		custom_tooltip = shadowgate.open.shadowrift.anchors.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { any_megastructure = { is_megastructure_type = shadow_anchor } fail_text = shadowgate.open.shadowrift.anchors.notfound.tooltip }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			shadowgate_ap_event = { ID = 115 }
		}
	}
	option = {
		name = shadowgate.sp.move.origin
		custom_tooltip = shadowgate.sp.move.origin.tooltip
		trigger = { has_planet_flag = shadowgate_sp_effect has_planet_flag = shadowrift_active exists = event_target:shadowgate_sp_move_origin event_target:shadowgate_origin_system = { NOT = { is_same_value = event_target:shadowgate_sp_move_origin } } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_a_sp_origin } event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_a_sp_origin } }
				shadowgate_b = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_b_sp_origin } event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_b_sp_origin } }
				shadowgate_c = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_c_sp_origin } event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_c_sp_origin } }
				shadowgate_d = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_d_sp_origin } event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_d_sp_origin } }
				shadowgate_e = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin } event_target:shadowgate_sp_move_origin = { set_star_flag = shadowrift_e_sp_origin } }
			}
			set_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			shadowgate_ap_event = { ID = 101 }
		}
	}
	option = {
		name = shadowgate.sp.reset.origin
		custom_tooltip = shadowgate.sp.reset.origin.tooltip
		trigger = { has_planet_flag = shadowgate_sp_effect solar_system = { NOT = { is_same_value = event_target:shadowgate_origin_system } } }
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_a_sp_origin } solar_system = { set_star_flag = shadowrift_a_sp_origin } }
				shadowgate_b = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_b_sp_origin } solar_system = { set_star_flag = shadowrift_b_sp_origin } }
				shadowgate_c = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_c_sp_origin } solar_system = { set_star_flag = shadowrift_c_sp_origin } }
				shadowgate_d = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_d_sp_origin } solar_system = { set_star_flag = shadowrift_d_sp_origin } }
				shadowgate_e = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin } solar_system = { set_star_flag = shadowrift_e_sp_origin } }
			}
			set_planet_flag = shadowgate_sp_origin_reset
			remove_planet_flag = shadowgate_sp_origin_set
			shadowgate_ap_event = { ID = 101 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = shadowgate_sp_origin_set
			remove_planet_flag = shadowgate_sp_origin_reset
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 100 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Systems Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.103
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.systems.galaxy.random
		custom_tooltip = shadowgate.open.shadowrift.systems.galaxy.random.tooltip
		trigger = { any_system = { system_is_valid_random_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { system_is_valid_random_shadowrift_target = yes } save_event_target_as = shadowgate_destination_system }
			set_planet_flag = open_shadowgate_to_random_galactic
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.systems.specific
		custom_tooltip = shadowgate.open.shadowrift.systems.specific.tooltip
		trigger = { any_system = { NOT = { has_star_flag = shadowgate_solar_system } system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { shadowgate_ap_event = { ID = 106 } }
	}
	option = {
		name = shadowgate.open.shadowrift.systems.special
		custom_tooltip = shadowgate.open.shadowrift.systems.special.tooltip
		trigger = { OR = { has_global_flag = l_cluster_opened has_planet_flag = shadowgate_vc_effect AND = { exists = event_target:caravaneer_home_system event_target:caravaneer_home_system = { system_is_valid_shadowrift_target = yes } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { shadowgate_ap_event = { ID = 104 } }
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 101 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Special Galactic Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.104
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.tooltip
		trigger = { has_global_flag = l_cluster_opened any_system = { has_star_flag = lcluster system_is_valid_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { shadowgate_ap_event = { ID = 105 } }
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.caravaneer
		custom_tooltip = shadowgate.open.shadowrift.systems.special.caravaneer.tooltip
		trigger = { exists = event_target:caravaneer_home_system event_target:caravaneer_home_system = { system_is_valid_shadowrift_target = yes } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:caravaneer_home_system = { save_event_target_as = shadowgate_destination_system }
			shadowgate_ap_event = { ID = 1000 }
			set_planet_flag = open_shadowgate_to_caravaneer
		}
	}
	
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 103 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# L-Cluster Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.105
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster.random
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.random.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { system_is_valid_random_shadowrift_target = yes has_star_flag = lcluster NOT = { has_star_flag = lcluster_lgate } } save_event_target_as = shadowgate_destination_system }
			if = { limit = { exists = event_target:shadowgate_destination_system event_target:shadowgate_destination_system = { has_star_flag = lcluster } } set_planet_flag = open_shadowgate_to_lcluster_random }
			else = { random_system = { limit = { has_star_flag = lcluster_lgate } save_event_target_as = shadowgate_destination_system } set_planet_flag = open_shadowgate_to_lcluster }
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.systems.special.lcluster.terminalegress
		custom_tooltip = shadowgate.open.shadowrift.systems.special.lcluster.terminalegress.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			random_system = { limit = { has_star_flag = lcluster_lgate } save_event_target_as = shadowgate_destination_system }
			set_planet_flag = open_shadowgate_to_lcluster
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 104 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Specific Galactic Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.106
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		every_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
			root = { change_variable = { which = ShadowgateListedCount value = 1 } }
		}
		random_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
			list_as_shadowgate_target_1 = yes
		}
		random_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
			list_as_shadowgate_target_2 = yes
		}
		random_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
			list_as_shadowgate_target_3 = yes
		}
		random_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } }
			list_as_shadowgate_target_4 = yes
		}
	}

	option = {
		name = shadowgate.open.shadowrift.specific.system1
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_specific
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system2
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_specific
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system3
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_specific
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system4
		custom_tooltip = shadowgate.open.shadowrift.specific.system.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_specific
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.next
		custom_tooltip = shadowgate.open.shadowrift.specific.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = { shadowgate_ap_event = { ID = 106 } }
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.specific.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 106 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 103 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Empire Type Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.107
	title = shadowgate.pilgrimage.title
	desc = {
		exclusive_trigger = { OR = { has_planet_flag = shadowgate_function_adjusting_seal has_planet_flag = shadowgate_empire_adjusting_seal } }
		text = shadowgate.ap.seals.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		remove_planet_flag = open_shadowgate_to_neutral
		remove_planet_flag = open_shadowgate_to_hostile
		remove_planet_flag = open_shadowgate_to_allied
		remove_planet_flag = open_shadowgate_to_fallenawakened
		remove_planet_flag = open_shadowgate_to_marauder
	}
	
	option = {
		name = shadowgate.open.shadowrift.empires.own
		custom_tooltip = shadowgate.open.shadowrift.empires.own.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_owner = { save_event_target_as = shadowgate_target_country }
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				shadowgate_ap_event = { ID = 117 }
			}
			else = { shadowgate_ap_event = { ID = 109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.neutral
		custom_tooltip = shadowgate.open.shadowrift.empires.neutral.tooltip
		trigger = { any_country = { has_communications = event_target:shadowgate_owner is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_neutral
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.hostile
		custom_tooltip = shadowgate.open.shadowrift.empires.hostile.tooltip
		trigger = {
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal } count_country = { count > 0 limit = { is_at_war_with = event_target:shadowgate_owner NOT = { has_country_flag = shadowgate_hidden_country } } } }
			else = { OR = { has_crisis = yes count_country = { count > 0 limit = { is_at_war_with = event_target:shadowgate_owner NOT = { has_country_flag = shadowgate_hidden_country } } } } }
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_hostile
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.allied
		custom_tooltip = shadowgate.open.shadowrift.empires.allied.tooltip
		trigger = { count_country = { count > 0 limit = { is_in_federation_with = event_target:shadowgate_owner NOT = { has_country_flag = shadowgate_hidden_country } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_allied
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.fallenawakened
		custom_tooltip = shadowgate.open.shadowrift.empires.fallenawakened.tooltip
		trigger = { count_country = { count > 0 limit = { has_communications = event_target:shadowgate_owner NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_fallenawakened
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.marauder
		custom_tooltip = shadowgate.open.shadowrift.empires.marauder.tooltip
		trigger = { count_country = { count > 0 limit = { has_communications = event_target:shadowgate_owner NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_marauder
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					shadowgate_ap_event = { ID = 100 }
				}
				else = { shadowgate_ap_event = { ID = 101 } }
			}
			else = { remove_shadowgate_accessed_switch = yes }
			remove_planet_flag = shadowgate_sealing_country
			remove_planet_flag = shadowgate_function_adjusting_seal
		}
	}
}

##################################################################
# Empire Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.108
	title = shadowgate.pilgrimage.title
	desc = {
		exclusive_trigger = { OR = { has_planet_flag = shadowgate_function_adjusting_seal has_planet_flag = shadowgate_empire_adjusting_seal } }
		text = shadowgate.ap.seals.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_owner = {
			if = { limit = { root = { has_planet_flag = open_shadowgate_to_neutral } }
				every_relation = { limit = { not_listed_as_shadowgate_target = yes is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } } 
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_1 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_2 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_3 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes is_country_type = default NOR = { is_same_value = event_target:shadowgate_owner is_at_war_with = event_target:shadowgate_owner is_in_federation_with = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_4 = yes
				}
			}
			else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_hostile } }
				every_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } } 
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
					list_as_shadowgate_target_1 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
					list_as_shadowgate_target_2 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
					list_as_shadowgate_target_3 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } if = { limit = { root = { OR = { has_planet_flag = shadowgate_empire_adjusting_seal has_planet_flag = shadowgate_function_adjusting_seal } } } is_at_war_with = event_target:shadowgate_owner NOT = { is_crisis_faction = yes } } else = { OR = { is_at_war_with = event_target:shadowgate_owner is_crisis_faction = yes } } }
					list_as_shadowgate_target_4 = yes
				}
			}
			else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_allied } }
				every_federation_ally = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } } 
					root = { change_variable = { which = ShadowgateListedCount value = 1 } } 
				}
				random_federation_ally = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_1 = yes
				}
				random_federation_ally = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_2 = yes
				}
				random_federation_ally = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_3 = yes
				}
				random_federation_ally = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } }
					list_as_shadowgate_target_4 = yes
				}
			}
			else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_fallenawakened } }
				every_relation = { limit = { not_listed_as_shadowgate_target = yes NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } }
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
					list_as_shadowgate_target_1 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
					list_as_shadowgate_target_2 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
					list_as_shadowgate_target_3 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOR = { is_same_value = event_target:shadowgate_owner has_country_flag = shadowgate_hidden_country } OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } }
					list_as_shadowgate_target_4 = yes
				}
			}
			else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_marauder } }
				every_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } }
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
					list_as_shadowgate_target_1 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
					list_as_shadowgate_target_2 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
					list_as_shadowgate_target_3 = yes
				}
				random_relation = { limit = { not_listed_as_shadowgate_target = yes NOT = { has_country_flag = shadowgate_hidden_country } OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } }
					list_as_shadowgate_target_4 = yes
				}
			}
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire1
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				shadowgate_ap_event = { ID = 117 }
			}
			else = { shadowgate_ap_event = { ID = 109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire2
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				shadowgate_ap_event = { ID = 117 }
			}
			else = { shadowgate_ap_event = { ID = 109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire3
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				shadowgate_ap_event = { ID = 117 }
			}
			else = { shadowgate_ap_event = { ID = 109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire4
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = no } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
				shadowgate_ap_event = { ID = 117 }
			}
			else = { shadowgate_ap_event = { ID = 109 } }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire.next
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.empire.refresh
		custom_tooltip = shadowgate.open.shadowrift.empires.empire.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 108 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_country_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_country_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_country_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_country_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_country_targets = { SHADOWGATE = e } }
			}
			remove_planet_flag = open_shadowgate_to_neutral
			remove_planet_flag = open_shadowgate_to_hostile
			remove_planet_flag = open_shadowgate_to_allied
			remove_planet_flag = open_shadowgate_to_fallenawakened
			remove_planet_flag = open_shadowgate_to_marauder
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 107 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Empire System Type Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.109
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		event_target:shadowgate_target_country = {
			if = { limit = { exists = capital_scope } capital_scope = { solar_system = { save_event_target_as = shadowgate_target_country_capital } } }
			else = { random_system_within_border = { save_event_target_as = shadowgate_target_country_capital } }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.empires.random
		custom_tooltip = shadowgate.open.shadowrift.empires.random.tooltip
		trigger = { 
			event_target:shadowgate_target_country = { count_system_within_border = { count >= 3 limit = { system_is_valid_random_shadowrift_target = yes } } }
			NOR = { has_planet_flag = shadowgate_placing_shadow_anchor event_target:shadowgate_target_country = { is_crisis_faction = yes } }
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_country = { random_system_within_border = { limit = { system_is_valid_random_shadowrift_target = yes } save_event_target_as = shadowgate_destination_system } }
			set_planet_flag = open_shadowgate_to_empire_random
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.inhabited
		custom_tooltip = shadowgate.open.shadowrift.empires.inhabited.tooltip
		trigger = { event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes any_system_planet = { is_colony = yes } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes any_system_planet = { is_colony = yes } NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_inhabited
			if = { limit = { event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital }
			shadowgate_ap_event = { ID = 110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.uninhabited
		custom_tooltip = shadowgate.open.shadowrift.empires.uninhabited.tooltip
		trigger = { event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadowgate_hidden_system has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant any_system_planet = { is_colony = yes } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_system_within_border = { count > 0 limit = { NOR = { has_star_flag = shadowgate_solar_system has_star_flag = shadowgate_shadow_remnant any_system_planet = { is_colony = yes } } NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_uninhabited
			shadowgate_ap_event = { ID = 110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.assets
		custom_tooltip = shadowgate.open.shadowrift.empires.assets.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.open.shadowrift.empires.empire.noassets if = { limit = { has_planet_flag = open_shadowgate_to_asset } event_target:shadowgate_target_country = { OR = { count_owned_ship = { count > 0 limit = { OR = { shadowgate_is_civilian_ship = yes fleet = { shadowgate_is_military_fleet = yes } } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes } } } any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { OR = { count_owned_ship = { count > 0 limit = { OR = { shadowgate_is_civilian_ship = yes fleet = { shadowgate_is_military_fleet = yes } } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_asset
			shadowgate_ap_event = { ID = 111 }
		}
	}
	option = {
		name = shadowgate.adjustseals.specific
		custom_tooltip = shadowgate.adjustseals.specific.tooltip
		trigger = {
			NOR = {
				has_planet_flag = shadowgate_placing_shadow_anchor
				event_target:shadowgate_target_country = { is_crisis_faction = yes }
			}
		}
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_empire_adjusting_seal
			set_planet_flag = shadowgate_sealing_country
			shadowgate_ap_event = { ID = 117 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { NOR = { has_planet_flag = open_shadowgate_to_neutral has_planet_flag = open_shadowgate_to_hostile has_planet_flag = open_shadowgate_to_allied has_planet_flag = open_shadowgate_to_fallenawakened has_planet_flag = open_shadowgate_to_marauder } }
					shadowgate_ap_event = { ID = 107 }
				}
				else = { shadowgate_ap_event = { ID = 108 } }
			}
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Empire System Selection for Warp Destinations
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.110
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_target_country = {
			if = { limit = { root = { has_planet_flag = open_shadowgate_to_inhabited } }
				every_system_within_border = { limit = { not_listed_as_shadowgate_target = yes any_system_planet = { is_colony = yes } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } }
				}
				if = { limit = { root = { has_planet_flag = shadowgate_display_inhabited_capital } exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } solar_system = { not_listed_as_shadowgate_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } } }
					capital_scope = { solar_system = { list_as_shadowgate_target_1 = yes } }
				}
				else = {
					root = { remove_planet_flag = shadowgate_display_inhabited_capital }
					random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes any_system_planet = { is_colony = yes OR = { event_target:shadowgate_owner = { is_primitive = yes } NOT = { is_capital = yes } } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
						list_as_shadowgate_target_1 = yes
					}
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes any_system_planet = { is_colony = yes OR = { event_target:shadowgate_owner = { is_primitive = yes } NOT = { is_capital = yes } } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_2 = yes
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes any_system_planet = { is_colony = yes OR = { event_target:shadowgate_owner = { is_primitive = yes } NOT = { is_capital = yes } } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_3 = yes
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes any_system_planet = { is_colony = yes OR = { event_target:shadowgate_owner = { is_primitive = yes } NOT = { is_capital = yes } } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_4 = yes
				}
			}
			else_if = { limit = { root = { has_planet_flag = open_shadowgate_to_uninhabited } }
				every_system_within_border = { limit = { not_listed_as_shadowgate_target = yes NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					root = { change_variable = { which = ShadowgateListedCount value = 1 } }
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_1 = yes
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_2 = yes
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_3 = yes
				}
				random_system_within_border = { limit = { not_listed_as_shadowgate_target = yes NOR = { any_system_planet = { is_colony = yes } has_star_flag = shadowgate_solar_system } NOT = { has_star_flag = shadowgate_shadow_remnant } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes }
					list_as_shadowgate_target_4 = yes
				}
			}
		}
	}

	option = {
		name = shadowgate.open.shadowrift.empires.capital
		custom_tooltip = shadowgate.open.shadowrift.empires.capital.tooltip
		trigger = { has_planet_flag = shadowgate_display_inhabited_capital listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system1
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { NOT = { has_planet_flag = shadowgate_display_inhabited_capital } listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			remove_planet_flag = shadowgate_display_inhabited_capital
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system2
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system3
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system4
		custom_tooltip = shadowgate.open.shadowrift.empires.system.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { NOT = { has_star_flag = shadowgate_blocked_system } } }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system.next
		custom_tooltip = shadowgate.open.shadowrift.empires.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			remove_planet_flag = shadowgate_display_inhabited_capital
			shadowgate_ap_event = { ID = 110 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.empires.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.empires.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			if = { limit = { has_planet_flag = open_shadowgate_to_inhabited event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital }
			shadowgate_ap_event = { ID = 110 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			remove_planet_flag = shadowgate_display_inhabited_capital
			remove_planet_flag = open_shadowgate_to_inhabited
			remove_planet_flag = open_shadowgate_to_uninhabited
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 109 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Asset Selection Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.111
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.fleets
		custom_tooltip = shadowgate.open.shadowrift.fleets.tooltip
		trigger = { event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { fleet = { shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { fleet = { shadowgate_is_military_fleet = yes } exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } } }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 112 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships
		custom_tooltip = shadowgate.open.shadowrift.ships.tooltip
		trigger = { event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { count_owned_ship = { count > 0 limit = { shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } } } }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 113 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases
		custom_tooltip = shadowgate.open.shadowrift.starbases.tooltip
		trigger = { event_target:shadowgate_target_country = { any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } event_target:shadowgate_owner = { intel_level = { system = prev level > low } } shadowgate_check_for_system_shadow_anchor_placement = yes system_is_valid_shadowrift_target = yes } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.dispatch.fail.nosystems if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_country = { any_system_within_border = { exists = starbase starbase = { OR = { has_starbase_size > starbase_outpost has_starbase_size > starbase_fe_outpost } } system_is_valid_shadowrift_target = yes NOR = { has_star_flag = shadow_anchor any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } } } }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 114 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = open_shadowgate_to_asset
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 109 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Fleet Warp Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.112
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_target_country = {
			every_owned_fleet = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_owned_fleet = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_fleet = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_fleet = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_fleet = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_military_fleet = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet1
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_fleet
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet2
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_fleet
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet3
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_fleet
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet4
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_fleet
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet.next
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 112 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.fleets.fleet.refresh
		custom_tooltip = shadowgate.open.shadowrift.fleets.fleet.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 112 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_fleet_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_fleet_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_fleet_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_fleet_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_fleet_targets = { SHADOWGATE = e } }
			}
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 111 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Ship Warp Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.113
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_target_country = {
			every_owned_ship = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_owned_ship = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_ship = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_2 = yes
			}
			random_owned_ship = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_3 = yes
			}
			random_owned_ship = { limit = { not_listed_as_shadowgate_target = yes shadowgate_is_civilian_ship = yes exists = solar_system solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > medium } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.ships.ship1
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_ship
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship2
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_ship
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship3
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_ship
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship4
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_ship
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship.next
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 113 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ships.ship.refresh
		custom_tooltip = shadowgate.open.shadowrift.ships.ship.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 113 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 111 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Starbase Warp Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.114
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_target_country = {
			every_owned_ship = { limit = { OR = { is_ship_class = shipclass_starbase has_ship_flag = shadowgate_starbase } not_listed_as_shadowgate_target = yes NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_owned_ship = { limit = { OR = { is_ship_class = shipclass_starbase has_ship_flag = shadowgate_starbase } not_listed_as_shadowgate_target = yes NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_1 = yes
			}
			random_owned_ship = { limit = { OR = { is_ship_class = shipclass_starbase has_ship_flag = shadowgate_starbase } not_listed_as_shadowgate_target = yes NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_2 = yes
			}
			random_owned_ship = { limit = { OR = { is_ship_class = shipclass_starbase has_ship_flag = shadowgate_starbase } not_listed_as_shadowgate_target = yes NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_3 = yes
			}
			random_owned_ship = { limit = { OR = { is_ship_class = shipclass_starbase has_ship_flag = shadowgate_starbase } not_listed_as_shadowgate_target = yes NOR = { is_ship_size = starbase_outpost is_ship_size = starbase_fe_outpost } solar_system = { event_target:shadowgate_owner = { intel_level = { system = prev level > low } } system_is_valid_shadowrift_target = yes shadowgate_check_for_system_shadow_anchor_placement = yes } }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase1
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_1 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_1 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_starbase
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase2
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_2 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_2 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_starbase
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase3
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_3 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_3 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_starbase
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase4
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.dispatch.planet.fail if = { limit = { has_planet_flag = shadowgate_placing_shadow_anchor } event_target:shadowgate_target_4 = { solar_system = { any_system_planet = { NOR = { is_star = yes is_asteroid = yes is_moon = yes is_colonizable = yes is_colony = yes } } } } } }
			custom_tooltip = { fail_text = shadowgate.fail.blocked event_target:shadowgate_target_4 = { solar_system = { NOT = { has_star_flag = shadowgate_blocked_system } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_starbase
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase.next
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 114 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.starbases.starbase.refresh
		custom_tooltip = shadowgate.open.shadowrift.starbases.starbase.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 114 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_ship_starbase_targets = { SHADOWGATE = e } }
			}
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 111 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Shadow Anchor Category Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.115
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.anchors.own
		custom_tooltip = shadowgate.open.shadowrift.anchors.own.tooltip
		trigger = { event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = {
				fail_text = shadowgate.open.shadowrift.anchors.missing
				OR = { 
					AND = { NOT = { is_variable_set = ShadowAnchorListType } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 1 } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 2 } event_target:shadowgate_owner = { any_owned_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } } } }
				}
			}
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_owned_anchor
			shadowgate_ap_event = { ID = 116 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.foreign
		custom_tooltip = shadowgate.open.shadowrift.anchors.foreign.tooltip
		trigger = { any_megastructure = { is_megastructure_type = shadow_anchor OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = {
				fail_text = shadowgate.open.shadowrift.anchors.missing
				OR = { 
					AND = { NOT = { is_variable_set = ShadowAnchorListType } any_megastructure = { is_megastructure_type = shadow_anchor OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 1 } any_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = active_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
					AND = { check_variable = { which = ShadowAnchorListType value = 2 } any_megastructure = { is_megastructure_type = shadow_anchor solar_system = { has_star_flag = inactive_shadow_anchor } OR = { NOT = { exists = owner } AND = { exists = owner owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } } }
				}
			}
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_foreign_anchor
			shadowgate_ap_event = { ID = 116 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 101 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Shadow Anchor Selection Menu
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.116
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01
	
	immediate = {
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}
		set_variable = { which = ShadowgateListedCount value = 0 }
		if = { limit = { has_planet_flag = open_shadowgate_to_owned_anchor }
			every_system = { limit = { exists = space_owner space_owner = { is_same_value = event_target:shadowgate_owner } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_system = { limit = { exists = space_owner space_owner = { is_same_value = event_target:shadowgate_owner } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_system = { limit = { exists = space_owner space_owner = { is_same_value = event_target:shadowgate_owner } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_system = { limit = { exists = space_owner space_owner = { is_same_value = event_target:shadowgate_owner } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_system = { limit = { exists = space_owner space_owner = { is_same_value = event_target:shadowgate_owner } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
		else_if = { limit = { has_planet_flag = open_shadowgate_to_foreign_anchor }
			every_system = { limit = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_system = { limit = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_system = { limit = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_system = { limit = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_system = { limit = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } } } } has_star_flag = shadow_anchor not_listed_as_shadowgate_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}
	
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor1
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_1 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_anchor
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor2
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_2 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_anchor
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor3
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_3 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_anchor
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor4
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.anchor.management.fail.reclaiming event_target:shadowgate_target_4 = { NOT = { any_system_planet = { has_planet_flag = shadowgate_anchor_target } } } }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_anchor
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor.next
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 116 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.anchors.anchor.refresh
		custom_tooltip = shadowgate.open.shadowrift.anchors.anchor.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 116 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			remove_planet_flag = open_shadowgate_to_owned_anchor
			remove_planet_flag = open_shadowgate_to_foreign_anchor
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 115 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

##################################################################
# Amplify/Dampen Country Seal
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.117
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.ap.seals.desc
				always = yes
			}
			success_text = {
				text = shadowgate.sealcountry.active.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } }
			}
			success_text = {
				text = shadowgate.sealcountry.inactive.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value = 0 } }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01
	
	option = {
		name = shadowgate.amplifyseal
		custom_tooltip = shadowgate.amplifyseal.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.maximum event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value < 1000 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.dampened event_target:shadowgate_owner = { NOT = { has_relation_flag = { flag = shadowgate_seal_dampened who = event_target:shadowgate_target_country } } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_amplifying_seal
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.dampenseal
		custom_tooltip = shadowgate.dampenseal.tooltip
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.minimum event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amplified event_target:shadowgate_owner = { NOT = { has_relation_flag = { flag = shadowgate_seal_amplified who = event_target:shadowgate_target_country } } } }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_dampening_seal
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					if = { limit = { event_target:shadowgate_target_country = { is_same_value = event_target:shadowgate_owner } } shadowgate_ap_event = { ID = 107 } }
					else = { shadowgate_ap_event = { ID = 108 } }
				}
				else_if = { limit = { has_planet_flag = shadowgate_empire_adjusting_seal }
					shadowgate_ap_event = { ID = 109 }
				}
				else = { shadowgate_ap_event = { ID = 108 } }
			}
			else = { remove_shadowgate_accessed_switch = yes }
			remove_planet_flag = shadowgate_empire_adjusting_seal
			remove_planet_flag = shadowgate_sealing_country
		}
	}
}
##################################################################
# Adjust Country Seal
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.118
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = {
			success_text = {
				text = shadowgate.ap.seals.desc
				always = yes
			}
			success_text = {
				text = shadowgate.sealcountry.active.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value > 0 } }
			}
			success_text = {
				text = shadowgate.sealcountry.inactive.desc
				event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value = 0 } }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	option = {
		name = shadowgate.amplifyseal.great
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_gr_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 900 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_gr }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_gr_p } }
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.amplifyseal.large
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_lg_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 950 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_lg }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_lg_p } }
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.amplifyseal.small
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.amplifyseal.tooltip
		trigger = { has_planet_flag = shadowgate_amplifying_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_sm_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value <= 975 } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.revoked event_target:shadowgate_target_country = { NOT = { has_country_flag = shadowgate_seal_revoked } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_sm }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_amplified days = @shadowgate_seal_amplify_cd who = event_target:shadowgate_target_country }
				}
			}
			event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_sm_p } }
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.great
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_gr_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 100 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_gr }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_gr } send_shadowgate_seal_revoked_message = yes }
			}
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.large
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_lg_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 50 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_lg }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_lg } send_shadowgate_seal_revoked_message = yes }
			}
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.dampenseal.small
		custom_gui = "shadowgate_option_action"
		custom_tooltip = shadowgate.dampenseal.tooltip
		trigger = { has_planet_flag = shadowgate_dampening_seal }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
			custom_tooltip = { fail_text = shadowgate.fail.influence event_target:shadowgate_owner = { has_resource = { type = influence amount >= @shadowgate_seal_sm_p } } }
			custom_tooltip = { fail_text = shadowgate.countryseal.fail.amount event_target:shadowgate_target_country = { check_variable = { which = ShadowgateSeal value >= 25 } } }
		}
		hidden_effect = {
			event_target:shadowgate_owner = {
				add_resource = { influence = @shadowgate_seal_sm }
				if = { limit = { event_target:shadowgate_owner = { NOT = { is_same_value = event_target:shadowgate_target_country } } }
					set_timed_relation_flag = { flag = shadowgate_seal_dampened days = @shadowgate_seal_dampen_cd who = event_target:shadowgate_target_country }
				}
				event_target:shadowgate_target_country = { change_variable = { which = ShadowgateSeal value = @shadowgate_seal_sm } send_shadowgate_seal_revoked_message = yes }
			}
			shadowgate_ap_event = { ID = 118 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			if = { limit = { is_current_shadowgate_owner = yes }
				if = { limit = { has_planet_flag = shadowgate_function_adjusting_seal }
					if = { limit = { event_target:shadowgate_target_country = { is_same_value = event_target:shadowgate_owner } } shadowgate_ap_event = { ID = 107 } }
					else = { shadowgate_ap_event = { ID = 108 } }
				}
				else_if = { limit = { has_planet_flag = shadowgate_empire_adjusting_seal }
					shadowgate_ap_event = { ID = 109 }
				}
				else = { shadowgate_ap_event = { ID = 108 } }
			}
			else = { remove_shadowgate_accessed_switch = yes }
			remove_planet_flag = shadowgate_empire_adjusting_seal
			remove_planet_flag = shadowgate_sealing_country
			remove_planet_flag = shadowgate_amplifying_seal
			remove_planet_flag = shadowgate_dampening_seal
		}
	}
}

##################################################################
# Shadowrift Summoning Final Confirmation
##################################################################
planet_event = {
	id = shadowgate_pilgrimage.1000
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = {
			if = { limit = { hidden_trigger = { NOT = { has_planet_flag = shadowgate_summon_dialog_only } } }
				success_text = { text = shadowgate.ap.final.25.desc NOT = { event_target:shadowgate_owner = { has_origin = origin_shadow_remnant } } event_target:shadowgate_ap_country = { trust = { who = event_target:shadowgate_owner value < 50 } } }
				success_text = { text = shadowgate.ap.final.50.desc OR = { event_target:shadowgate_owner = { has_origin = origin_shadow_remnant } event_target:shadowgate_ap_country = { trust = { who = event_target:shadowgate_owner value >= 50 } } } event_target:shadowgate_ap_country = { trust = { who = event_target:shadowgate_owner value < 75 } } }
				success_text = { text = shadowgate.ap.final.100.desc event_target:shadowgate_ap_country = { trust = { who = event_target:shadowgate_owner value >= 75 } } }
				# -Origin-
				if = { limit = { hidden_trigger = { has_planet_flag = shadowgate_sp_effect } }
					success_text = { event_target:shadowgate_origin_system = { has_star_flag = shadowgate_solar_system } text = shadowgate.open.shadowrift.origin.sp.default.desc }
					success_text = { event_target:shadowgate_origin_system = { NOT = { has_star_flag = shadowgate_solar_system } } text = shadowgate.open.shadowrift.origin.sp.chosen.desc }
				}
				# -Destination-
				if = { limit = { hidden_trigger = { NOR = { event_target:shadowgate_destination_system = { has_star_flag = shadowgate_solar_system } system_has_active_shadow_anchor = yes system_has_shadow_remnant = yes has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_adjacent } } }
					success_text = { OR = { has_planet_flag = open_shadowgate_to_caravaneer has_planet_flag = open_shadowgate_to_lcluster has_planet_flag = open_shadowgate_to_specific has_planet_flag = open_shadowgate_to_anchor } text = shadowgate.open.shadowrift.cost.default.desc }
					success_text = { has_planet_flag = open_shadowgate_to_fleet text = shadowgate.open.shadowrift.cost.fleet.desc }
					success_text = { has_planet_flag = open_shadowgate_to_ship text = shadowgate.open.shadowrift.cost.ship.desc }
					success_text = { has_planet_flag = open_shadowgate_to_starbase text = shadowgate.open.shadowrift.cost.starbase.desc }
					success_text = { OR = { has_planet_flag = open_shadowgate_to_inhabited has_planet_flag = open_shadowgate_to_uninhabited } text = shadowgate.open.shadowrift.cost.empire.desc }
				}
				else_if = { limit = { hidden_trigger = { OR = { system_has_active_shadow_anchor = yes system_has_shadow_remnant = yes } } }
					success_text = { NOT = { system_has_shadow_remnant = yes } system_has_active_shadow_anchor = yes text = shadowgate.open.shadowrift.cost.anchor.desc }
					success_text = { system_has_shadow_remnant = yes text = shadowgate.open.shadowrift.cost.remnant.desc }
				}
				else_if = { limit = { hidden_trigger = { NOR = { event_target:shadowgate_destination_system = { has_star_flag = shadowgate_solar_system } has_planet_flag = open_shadowgate_to_adjacent } } }
					success_text = { has_planet_flag = open_shadowgate_to_random_galactic text = shadowgate.open.shadowrift.cost.random.galactic.desc }
					success_text = { has_planet_flag = open_shadowgate_to_lcluster_random text = shadowgate.open.shadowrift.cost.random.lcluster.desc }
					success_text = { has_planet_flag = open_shadowgate_to_empire_random text = shadowgate.open.shadowrift.cost.random.empire.desc }
				}
				else = {
					success_text = { text = shadowgate.open.shadowrift.cost.default.desc }
				}
				# -System Access Level-
				if = { limit = { hidden_trigger = { event_target:shadowgate_destination_system = { OR = { NOT = { exists = space_owner } AND = { exists = space_owner space_owner = { NOR = { is_same_value = event_target:shadowgate_owner has_communications = event_target:shadowgate_owner } } } } } } }
					if = { limit = { hidden_trigger = { OR = { has_planet_flag = open_shadowgate_to_random_galactic event_target:shadowgate_owner = { intel_level = { level <= medium system = event_target:shadowgate_destination_system } } } } }
						success_text = { text = shadowgate.open.shadowrift.cost.borders.unknown.desc }
					}
					else = { success_text = { text = shadowgate.open.shadowrift.cost.borders.unclaimed.desc } }
				}
				else = {
					if = { limit = { hidden_trigger = { event_target:shadowgate_destination_system = { space_owner = { is_same_value = event_target:shadowgate_owner } } } } success_text = { text = shadowgate.open.shadowrift.cost.borders.owned.desc } }
					else = {
						if = { limit = { hidden_trigger = { event_target:shadowgate_destination_system = { space_owner = { OR = { is_hostile = event_target:shadowgate_owner is_country_type = dormant_marauders } } } } } success_text = { text = shadowgate.open.shadowrift.cost.borders.hostile.desc } }
						else = {
							success_text = { event_target:shadowgate_destination_system = { space_owner = { has_closed_borders = event_target:shadowgate_owner NOT = { is_country_type = caravaneer_home } } } text = shadowgate.open.shadowrift.cost.borders.closed.desc }
							success_text = { event_target:shadowgate_destination_system = { space_owner = { OR = { NOT = { has_closed_borders = event_target:shadowgate_owner } is_country_type = caravaneer_home } } } text = shadowgate.open.shadowrift.cost.borders.open.desc }
						}
					}
				}
				# -Stabilization-
				if = { limit = { hidden_trigger = { OR = { system_has_active_shadow_anchor = yes AND = { has_planet_flag = shadowgate_dup_effect NOT = { has_planet_flag = shadowgate_dup_off } } } } }
					success_text = { system_has_active_shadow_anchor = yes text = shadowgate.open.shadowrift.cost.time.anchor.desc }
					success_text = { NOT = { system_has_active_shadow_anchor = yes } text = shadowgate.open.shadowrift.cost.time.dup.desc }
				}
				else = {
					success_text = { num_districts = { type = district_spectral_projection_array value = 0 } text = shadowgate.open.shadowrift.cost.time.0.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 1 } text = shadowgate.open.shadowrift.cost.time.1.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 2 } text = shadowgate.open.shadowrift.cost.time.2.desc }
					success_text = { num_districts = { type = district_spectral_projection_array value = 3 } text = shadowgate.open.shadowrift.cost.time.3.desc }
				}
				# -Ruinous Potency-
				success_text = { text = shadowgate.open.shadowrift.cost.rp.desc }
				# -Cooldown-
				success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 0 } text = shadowgate.open.shadowrift.cost.cooldown.0.desc }
				success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } text = shadowgate.open.shadowrift.cost.cooldown.1.desc }
				success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } text = shadowgate.open.shadowrift.cost.cooldown.2.desc }
				success_text = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } text = shadowgate.open.shadowrift.cost.cooldown.3.desc }
				# -Warnings-
				if = { limit = { hidden_trigger = { event_target:shadowgate_destination_system = { exists = space_owner space_owner = { NOT = { is_same_value = event_target:shadowgate_owner } has_communications = event_target:shadowgate_owner } } } }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { shadowgate_is_fe = yes } } text = shadowgate.open.shadowrift.cost.fe.warning.desc }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { shadowgate_is_ae = yes } } text = shadowgate.open.shadowrift.cost.ae.warning.desc }
					success_text = { event_target:shadowgate_destination_system = { space_owner = { OR = { is_country_type = dormant_marauders is_country_type = awakened_marauders } } } text = shadowgate.open.shadowrift.cost.marauder.warning.desc }
				}
				success_text = { event_target:shadowgate_destination_system = { OR = { any_system_planet = { is_planet_class = pc_pulsar } has_modifier = space_storm has_modifier = turbulent_nebula } } text = shadowgate.open.shadowrift.cost.shield.warning.desc }
			}
			# -Special-
			else = {
				if = { limit = { hidden_trigger = { NOR = { event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes } event_target:shadowgate_destination_system = { shadowgate_antiresonant_void_check = yes } } } }
					success_text = { text = shadowgate.ap.dimensionalseal.final }
				}
				else = { success_text = { text = shadowgate.ap.open.shadowrift.cost.error } }
			}
		}
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_windup_ap

	immediate = {
		if = { limit = { NOT = { exists = event_target:shadowgate_target_country } event_target:shadowgate_destination_system = { exists = space_owner } }
			event_target:shadowgate_destination_system = { space_owner = { save_event_target_as = shadowgate_target_country } }
		}
		if = { limit = { NOT = { has_planet_flag = shadowgate_dimensional_shift } }
			if = { limit = { OR = { event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes } event_target:shadowgate_destination_system = { OR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } } } }
				set_planet_flag = shadowgate_summon_dialog_only
				event_target:shadowgate_origin_system = {
					if = { limit = { shadowgate_antiresonant_void_check = yes }
						random_system = { limit = { distance = { source = prev max_jumps <= 5 } exists = space_owner space_owner = { is_country_type = ai_empire } OR = { has_star_flag = AI_hub has_star_flag = AI_lair } any_system_planet = { is_planet_class = pc_ai } }
							save_event_target_as = shadowgate_void_zone_origin
						}
						if = { limit = { NOT = { exists = event_target:shadowgate_void_zone_origin } } event_target:shadowgate_origin_system = { save_event_target_as = shadowgate_void_zone_origin } }
						save_event_target_as = shadowgate_void_zone_system
					}
				}
				event_target:shadowgate_destination_system = {
					if = { limit = { shadowgate_antiresonant_void_check = yes }
						random_system = { limit = { distance = { source = prev max_jumps <= 5 } exists = space_owner space_owner = { is_country_type = ai_empire } OR = { has_star_flag = AI_hub has_star_flag = AI_lair } any_system_planet = { is_planet_class = pc_ai } }
							save_event_target_as = shadowgate_void_zone_origin
						}
						if = { limit = { NOT = { exists = event_target:shadowgate_void_zone_origin } } event_target:shadowgate_destination_system = { save_event_target_as = shadowgate_void_zone_origin } }
						save_event_target_as = shadowgate_void_zone_system
					}
				}
			}
			else = { remove_planet_flag = shadowgate_summon_dialog_only }
		}
		switch = {
			trigger = has_planet_flag
			shadowgate_a = { update_shadowgate_origin_system = { SHADOWGATE = a } }
			shadowgate_b = { update_shadowgate_origin_system = { SHADOWGATE = b } }
			shadowgate_c = { update_shadowgate_origin_system = { SHADOWGATE = c } }
			shadowgate_d = { update_shadowgate_origin_system = { SHADOWGATE = d } }
			shadowgate_e = { update_shadowgate_origin_system = { SHADOWGATE = e } }
		}

		calculate_shadowgate_rp_amount = yes
		calculate_shadowgate_ether_cost = yes
	}
	
	option = {
		name = shadowgate.open.shadowrift.ap
		custom_gui = "shadowgate_option_summon"
		custom_tooltip = shadowgate.open.shadowrift.cost.tooltip
		trigger = {
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowrift_active }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			OR = { system_has_shadow_remnant = yes NOT = { system_has_active_shadow_anchor = yes } }
		}
		allow = { shadowgate_summon_normal_allow_check = yes }
		hidden_effect = {
			remove_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { summon_shadowrift = { SHADOWGATE = a } }
				shadowgate_b = { summon_shadowrift = { SHADOWGATE = b } }
				shadowgate_c = { summon_shadowrift = { SHADOWGATE = c } }
				shadowgate_d = { summon_shadowrift = { SHADOWGATE = d } }
				shadowgate_e = { summon_shadowrift = { SHADOWGATE = e } }
			}
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ap.queue
		custom_gui = "shadowgate_option_banish"
		custom_tooltip = shadowgate.open.shadowrift.cost.queue.tooltip
		trigger = {
			has_planet_flag = shadowrift_active
			NOT = { has_planet_flag = shadowgate_dimensional_shift }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			OR = { system_has_shadow_remnant = yes NOT = { system_has_active_shadow_anchor = yes } }
		}
		allow = { shadowgate_summon_normal_allow_check = yes }
		hidden_effect = {
			remove_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			event_target:shadowgate_owner = { save_global_event_target_as = shadowgate_ap_queued_summoner }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { summon_shadowrift = { SHADOWGATE = a } }
				shadowgate_b = { summon_shadowrift = { SHADOWGATE = b } }
				shadowgate_c = { summon_shadowrift = { SHADOWGATE = c } }
				shadowgate_d = { summon_shadowrift = { SHADOWGATE = d } }
				shadowgate_e = { summon_shadowrift = { SHADOWGATE = e } }
			}
			event_target:shadowgate_ap_last_summoner = { if = { limit = { NOT = { is_same_value = event_target:shadowgate_owner } } country_event = { id = shadowgate_pilgrimage.1110 } } }
		}
	}

	option = {
		name = shadowgate.open.shadowrift.ap.anchor
		custom_gui = "shadowgate_option_summon"
		custom_tooltip = shadowgate.open.shadowrift.cost.anchor.tooltip
		trigger = {
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowrift_active }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			system_has_active_shadow_anchor = yes
		}
		allow = { shadowgate_summon_anchor_allow_check = yes }
		hidden_effect = {
			set_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { summon_shadowrift = { SHADOWGATE = a } }
				shadowgate_b = { summon_shadowrift = { SHADOWGATE = b } }
				shadowgate_c = { summon_shadowrift = { SHADOWGATE = c } }
				shadowgate_d = { summon_shadowrift = { SHADOWGATE = d } }
				shadowgate_e = { summon_shadowrift = { SHADOWGATE = e } }
			}
		}
	}
	option = {
		name = shadowgate.open.shadowrift.ap.anchor.queue
		custom_gui = "shadowgate_option_banish"
		custom_tooltip = shadowgate.open.shadowrift.cost.anchor.queue.tooltip
		trigger = {
			has_planet_flag = shadowrift_active
			NOT = { has_planet_flag = shadowgate_dimensional_shift }
			event_target:shadowgate_origin_system = { NOT = { shadowgate_antiresonant_void_check = yes } }
			event_target:shadowgate_destination_system = { NOR = { has_star_flag = shadowgate_unique_system_sealed shadowgate_antiresonant_void_check = yes } }
			system_has_active_shadow_anchor = yes
		}
		allow = { shadowgate_summon_anchor_allow_check = yes }
		hidden_effect = {
			set_planet_flag = valid_shadow_anchor_target
			remove_planet_flag = shadowgate_special_function
			remove_planet_flag = open_shadowgate_to_adjacent
			event_target:shadowgate_owner = { save_global_event_target_as = shadowgate_ap_queued_summoner }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { summon_shadowrift = { SHADOWGATE = a } }
				shadowgate_b = { summon_shadowrift = { SHADOWGATE = b } }
				shadowgate_c = { summon_shadowrift = { SHADOWGATE = c } }
				shadowgate_d = { summon_shadowrift = { SHADOWGATE = d } }
				shadowgate_e = { summon_shadowrift = { SHADOWGATE = e } }
			}
			event_target:shadowgate_ap_last_summoner = { if = { limit = { NOT = { is_same_value = event_target:shadowgate_owner } } country_event = { id = shadowgate_pilgrimage.1110 } } }
		}
	}

	option = {
		name = shadowgate.ap.dimensionalseal
		trigger = {
			NOR = {
				event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes }
				event_target:shadowgate_destination_system = { shadowgate_antiresonant_void_check = yes }
			}
			event_target:shadowgate_destination_system = { has_star_flag = shadowgate_unique_system_sealed }
		}
		is_dialog_only = yes
		response_text = shadowgate.ap.dimensionalseal.response
	}
	option = {
		name = shadowgate.ap.ai.crisis
		trigger = { 
			OR = {
				event_target:shadowgate_origin_system = { shadowgate_antiresonant_void_check = yes }
				event_target:shadowgate_destination_system = { shadowgate_antiresonant_void_check = yes }
			}
		}
		is_dialog_only = yes
		response_text = shadowgate.ap.ai.crisis.response
	}
	option = {
		name = shadowgate.adjacent.systems
		custom_tooltip = shadowgate.adjacent.systems.tooltip
		trigger = { NOR = { has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = shadowgate_dimensional_shift } event_target:shadowgate_destination_system = { any_neighbor_system = { exists = this has_hyperlane_to = prev system_is_valid_shadowrift_target = yes } } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = open_shadowgate_to_adjacent
			shadowgate_ap_event = { ID = 1050 }
		}
	}
	option = {
		name = shadowgate.sp.set.origin
		custom_tooltip = shadowgate.sp.set.origin.tooltip
		trigger = {
			has_planet_flag = shadowgate_sp_effect
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_a_sp_origin } } }
				shadowgate_b = { event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_b_sp_origin } } }
				shadowgate_c = { event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_c_sp_origin } } }
				shadowgate_d = { event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_d_sp_origin } } }
				shadowgate_e = { event_target:shadowgate_destination_system = { NOT = { has_star_flag = shadowrift_e_sp_origin } } }
			}
			NOR = { has_planet_flag = open_shadowgate_to_random_galactic has_planet_flag = open_shadowgate_to_empire_random has_planet_flag = open_shadowgate_to_lcluster_random has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only }
		}
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_a_sp_origin } event_target:shadowgate_destination_system = { set_star_flag = shadowrift_a_sp_origin } }
				shadowgate_b = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_b_sp_origin } event_target:shadowgate_destination_system = { set_star_flag = shadowrift_b_sp_origin } }
				shadowgate_c = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_c_sp_origin } event_target:shadowgate_destination_system = { set_star_flag = shadowrift_c_sp_origin } }
				shadowgate_d = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_d_sp_origin } event_target:shadowgate_destination_system = { set_star_flag = shadowrift_d_sp_origin } }
				shadowgate_e = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin } event_target:shadowgate_destination_system = { set_star_flag = shadowrift_e_sp_origin } }
			}
			set_planet_flag = shadowgate_sp_origin_set
			shadowgate_ap_event = { ID = 101 }
			remove_planet_flag = open_shadowgate_to_neutral
			remove_planet_flag = open_shadowgate_to_hostile
			remove_planet_flag = open_shadowgate_to_allied
			remove_planet_flag = open_shadowgate_to_fallenawakened
			remove_planet_flag = open_shadowgate_to_marauder
			remove_planet_flag = open_shadowgate_to_inhabited
			remove_planet_flag = open_shadowgate_to_uninhabited
			remove_planet_flag = open_shadowgate_to_owned_anchor
			remove_planet_flag = open_shadowgate_to_foreign_anchor
			remove_planet_flag = open_shadowgate_to_specific
			remove_planet_flag = open_shadowgate_to_adjacent
			remove_planet_flag = open_shadowgate_to_random_galactic
			remove_planet_flag = open_shadowgate_to_remnant
			remove_planet_flag = open_shadowgate_to_caravaneer
			remove_planet_flag = open_shadowgate_to_lcluster
			remove_planet_flag = open_shadowgate_to_lcluster_random
			remove_planet_flag = open_shadowgate_to_empire_random
			remove_planet_flag = open_shadowgate_to_asset
			remove_planet_flag = open_shadowgate_to_fleet
			remove_planet_flag = open_shadowgate_to_ship
			remove_planet_flag = open_shadowgate_to_starbase
			remove_planet_flag = open_shadowgate_to_anchor
		}
	}
	option = {
		name = shadowgate.sp.reset.origin
		custom_tooltip = shadowgate.sp.reset.origin.tooltip
		trigger = {
			has_planet_flag = shadowgate_sp_effect
			solar_system = { NOR = { is_same_value = event_target:shadowgate_origin_system is_same_value = event_target:shadowgate_destination_system } }
			NOR = { has_planet_flag = shadowgate_dimensional_shift has_planet_flag = shadowgate_summon_dialog_only }
		}
		allow = {
			hidden_trigger = { has_planet_flag = shadowgate_sp_effect }
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			set_planet_flag = shadowgate_special_function
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_a_sp_origin } solar_system = { set_star_flag = shadowrift_a_sp_origin } }
				shadowgate_b = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_b_sp_origin } solar_system = { set_star_flag = shadowrift_b_sp_origin } }
				shadowgate_c = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_c_sp_origin } solar_system = { set_star_flag = shadowrift_c_sp_origin } }
				shadowgate_d = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_d_sp_origin } solar_system = { set_star_flag = shadowrift_d_sp_origin } }
				shadowgate_e = { event_target:shadowgate_origin_system = { remove_star_flag = shadowrift_e_sp_origin } solar_system = { set_star_flag = shadowrift_e_sp_origin } }
			}
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			remove_planet_flag = shadowgate_summon_dialog_only
			remove_planet_flag = shadowgate_special_function
			if = { limit = { is_current_shadowgate_owner = yes }
				switch = {
					trigger = has_planet_flag
					default = { shadowgate_ap_event = { ID = 100 } }
					open_shadowgate_to_random_galactic = { shadowgate_ap_event = { ID = 103 } }
					open_shadowgate_to_caravaneer = { shadowgate_ap_event = { ID = 104 } }
					open_shadowgate_to_lcluster = { shadowgate_ap_event = { ID = 105 } }
					open_shadowgate_to_lcluster_random = { shadowgate_ap_event = { ID = 105 } }
					open_shadowgate_to_specific = { shadowgate_ap_event = { ID = 106 } }
					open_shadowgate_to_empire = { shadowgate_ap_event = { ID = 109 } }
					open_shadowgate_to_empire_random = { shadowgate_ap_event = { ID = 109 } }
					open_shadowgate_to_inhabited = { if = { limit = { event_target:shadowgate_target_country = { exists = capital_scope capital_scope = { NOT = { has_planet_flag = shadowgate_planet } } } } set_planet_flag = shadowgate_display_inhabited_capital } shadowgate_ap_event = { ID = 110 } }
					open_shadowgate_to_uninhabited = { shadowgate_ap_event = { ID = 110 } }
					open_shadowgate_to_fleet = { shadowgate_ap_event = { ID = 112 } }
					open_shadowgate_to_ship = { shadowgate_ap_event = { ID = 113 } }
					open_shadowgate_to_starbase = { shadowgate_ap_event = { ID = 114 } }
					open_shadowgate_to_anchor = { shadowgate_ap_event = { ID = 116 } }
				}
				remove_planet_flag = open_shadowgate_to_specific
				remove_planet_flag = open_shadowgate_to_adjacent
				remove_planet_flag = open_shadowgate_to_random_galactic
				remove_planet_flag = open_shadowgate_to_remnant
				remove_planet_flag = open_shadowgate_to_caravaneer
				remove_planet_flag = open_shadowgate_to_lcluster
				remove_planet_flag = open_shadowgate_to_lcluster_random
				remove_planet_flag = open_shadowgate_to_empire_random
				remove_planet_flag = open_shadowgate_to_asset
				remove_planet_flag = open_shadowgate_to_fleet
				remove_planet_flag = open_shadowgate_to_ship
				remove_planet_flag = open_shadowgate_to_starbase
				remove_planet_flag = open_shadowgate_to_anchor
			}
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
	option = {
		name = shadowgate.exit
		hidden_effect = {
			remove_shadowgate_accessed_switch = yes
		}
	}
	after = {
		hidden_effect = {
			if = { limit = { NOT = { has_global_flag = shadowgate_unique_opened } event_target:shadowgate_destination_system = { has_star_flag = shadowgate_unique_system_sealed } } event_target:shadowgate_owner = { set_country_flag = shadowgate_seen_unique } }
			if = { limit = { NOR = { has_planet_flag = shadowgate_special_function has_planet_flag = shadowgate_summon_dialog_only has_planet_flag = open_shadowgate_to_adjacent } }
				remove_planet_flag = open_shadowgate_to_specific
				remove_planet_flag = open_shadowgate_to_random_galactic
				remove_planet_flag = open_shadowgate_to_remnant
				remove_planet_flag = open_shadowgate_to_caravaneer
				remove_planet_flag = open_shadowgate_to_lcluster
				remove_planet_flag = open_shadowgate_to_lcluster_random
				remove_planet_flag = open_shadowgate_to_empire_random
				remove_planet_flag = open_shadowgate_to_asset
				remove_planet_flag = open_shadowgate_to_fleet
				remove_planet_flag = open_shadowgate_to_ship
				remove_planet_flag = open_shadowgate_to_starbase
				remove_planet_flag = open_shadowgate_to_anchor
				if = { limit = { is_variable_set = ShadowgateSMRPChange } clear_variable = ShadowgateSMRPChange }
				if = { limit = { is_variable_set = ShadowgateEtherCost } clear_variable = ShadowgateEtherCost }
				if = { limit = { is_variable_set = ShadowgateSMEtherCost } clear_variable = ShadowgateSMEtherCost }
				if = { limit = { is_variable_set = ShadowgateRPProjected } clear_variable = ShadowgateRPProjected }
				if = { limit = { is_variable_set = ShadowgateEtherProjected } clear_variable =  ShadowgateEtherProjected }
			}
		}
	}
}

##################################################################
# Adjacent Systems to Destination - Allows selection of adjacent systems when a destination is locked in.
##################################################################

planet_event = {
	id = shadowgate_pilgrimage.1050
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.1.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.2.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.3.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.4.desc
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.ap.5.desc
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03
	
	immediate = {
		set_variable = { which = ShadowgateListedCount value = 0 }
		event_target:shadowgate_destination_system = {
			every_neighbor_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes }
				root = { change_variable = { which = ShadowgateListedCount value = 1 } }
			}
			random_neighbor_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes }
				list_as_shadowgate_target_1 = yes
			}
			random_neighbor_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes }
				list_as_shadowgate_target_2 = yes
			}
			random_neighbor_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes }
				list_as_shadowgate_target_3 = yes
			}
			random_neighbor_system = { limit = { not_listed_as_shadowgate_target = yes system_is_valid_shadowrift_target = yes }
				list_as_shadowgate_target_4 = yes
			}
		}
	}

	option = {
		name = shadowgate.open.shadowrift.specific.system1
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { listed_shadowgate_target_1_exists = yes check_variable = { which = ShadowgateListedCount value > 0 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_1 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_adjacent
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system2
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { listed_shadowgate_target_2_exists = yes check_variable = { which = ShadowgateListedCount value > 1 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_2 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_adjacent
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system3
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { listed_shadowgate_target_3_exists = yes check_variable = { which = ShadowgateListedCount value > 2 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_3 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_adjacent
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system4
		custom_tooltip = shadowgate.open.shadowrift.adjacent.system.tooltip
		trigger = { listed_shadowgate_target_4_exists = yes check_variable = { which = ShadowgateListedCount value > 3 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			event_target:shadowgate_target_4 = { set_listed_target_as_shadowgate_destination = { FINAL = yes } }
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			set_planet_flag = open_shadowgate_to_adjacent
			shadowgate_ap_event = { ID = 1000 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.next
		custom_tooltip = shadowgate.open.shadowrift.specific.system.next.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value > 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			shadowgate_ap_event = { ID = 1050 }
		}
	}
	option = {
		name = shadowgate.open.shadowrift.specific.system.refresh
		custom_tooltip = shadowgate.open.shadowrift.specific.system.refresh.tooltip
		trigger = { check_variable = { which = ShadowgateListedCount value <= 4 } }
		allow = {
			custom_tooltip = { fail_text = shadowgate.error.all NOT = { shadowgate_is_disabled = yes } }
			custom_tooltip = { fail_text = shadowgate.fail.ownership is_current_shadowgate_owner = yes }
		}
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			shadowgate_ap_event = { ID = 1050 }
		}
	}
	option = {
		name = shadowgate.back
		default_hide_option = yes
		hidden_effect = {
			switch = {
				trigger = has_planet_flag
				shadowgate_a = { reset_shadowgate_system_targets = { SHADOWGATE = a } }
				shadowgate_b = { reset_shadowgate_system_targets = { SHADOWGATE = b } }
				shadowgate_c = { reset_shadowgate_system_targets = { SHADOWGATE = c } }
				shadowgate_d = { reset_shadowgate_system_targets = { SHADOWGATE = d } }
				shadowgate_e = { reset_shadowgate_system_targets = { SHADOWGATE = e } }
			}
			if = { limit = { is_current_shadowgate_owner = yes } shadowgate_ap_event = { ID = 1000 } }
			else = { remove_shadowgate_accessed_switch = yes }
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.1100
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { always = yes }
		text = shadowgate.pilgrimage.opened.1
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.pilgrimage.opened.2
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.pilgrimage.opened.3
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.pilgrimage.opened.4
	}
	desc = {
		trigger = { always = yes }
		text = shadowgate.pilgrimage.opened.5
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_destination_system
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01

	option = {
		name = EXCELLENT
	}
}

event = {
	id = shadowgate_pilgrimage.1101
	hide_window = yes
	is_triggered_only = yes

	trigger = { exists = event_target:shadowgate_ap_country exists = event_target:shadowgate_ap_planet event_target:shadowgate_ap_planet = { NOT = { has_planet_flag = shadowgate_ap_used } } }

	immediate = {
		event_target:shadowgate_ap_country = {
			if = { limit = { NOR = { has_country_flag = shadowgate_ap_accessed any_owned_fleet = { is_in_combat = yes } } event_target:shadowgate_ap_planet = { NOR = { has_planet_flag = shadowrift_nascent shadowgate_is_disabled = yes has_modifier = pm_shadowgate_banishing has_modifier = pm_shadowgate_cooldown } } }
				random_relation = { limit = { is_ai = yes is_country_type = default count_system_within_border = { count >= 10 } NOR = { is_hostile = prev has_relic = r_shadowgate_crwt_active any_owned_planet = { is_colonized_shadowgate = yes } } prev = { trust = { who = prev value >= 75 } } }
					prev = { add_trust = { who = prev amount = -100 } }
					save_event_target_as = shadowgate_ap_owner
					event_target:shadowgate_ap_planet = {
						switch = {
							trigger = has_planet_flag
							shadowgate_a = { planet_event = { id = shadowgate_a.600 } }
							shadowgate_b = { planet_event = { id = shadowgate_b.600 } }
							shadowgate_c = { planet_event = { id = shadowgate_c.600 } }
							shadowgate_d = { planet_event = { id = shadowgate_d.600 } }
							shadowgate_e = { planet_event = { id = shadowgate_e.600 } }
						}
					}
				}
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.1105
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { NOT = { has_country_flag = shadowgate_ap_assaulted } }
		text = shadowgate.pilgrimage.assaulted
	}
	desc = {
		trigger = { has_country_flag = shadowgate_ap_assaulted }
		text = shadowgate.pilgrimage.assaulted.subsequent
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_03

	immediate = { clear_global_event_target = shadowgate_ap_last_summoner }

	option = {
		name = shadowgate.pilgrimage.tribute.answer
		allow = { has_resource = { type = energy amount >= 5000 } }
		add_resource = { energy = -5000 }
		hidden_effect = { set_country_flag = shadowgate_ap_assaulted event_target:shadowgate_ap_country = { change_variable = { which = ShadowgateAPProgress value = 5000 } } }
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = UNFORTUNATE
		event_target:shadowgate_ap_country = { add_trust = { who = root amount = -25 } }
		hidden_effect = { set_country_flag = shadowgate_ap_assaulted }
		ai_chance = {
			factor = 100
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.1106
	title = shadowgate.pilgrimage.title
	desc = {
		trigger = { NOT = { has_country_flag = shadowgate_ap_disabled } }
		text = shadowgate.pilgrimage.disabled
	}
	desc = {
		trigger = { has_country_flag = shadowgate_ap_disabled }
		text = shadowgate.pilgrimage.disbarred
	}
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_02

	immediate = {
		if = { limit = { has_country_flag = shadowgate_ap_disabled }
			remove_country_flag = shadowgate_ap_shadowgate_notify
			remove_country_flag = shadowgate_ap_bazaar_notify
			event_target:shadowgate_ap_country = {
				add_trust = { who = root amount = -100 }
				set_faction_hostility = { target = root set_hostile = yes set_neutral = no set_friendly = no }
			}
		}
		clear_global_event_target = shadowgate_ap_last_summoner
	}

	option = {
		name = shadowgate.pilgrimage.tribute.answer
		trigger = { NOT = { has_country_flag = shadowgate_ap_disabled } }
		allow = { has_resource = { type = energy amount >= 5000 } }
		add_resource = { energy = -5000 }
		event_target:shadowgate_ap_country = { add_trust = { who = root amount = -25 } }
		hidden_effect = { set_country_flag = shadowgate_ap_disabled event_target:shadowgate_ap_country = { change_variable = { which = ShadowgateAPProgress value = 5000 } } }
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = UNFORTUNATE
		trigger = { NOT = { has_country_flag = shadowgate_ap_disabled } }
		event_target:shadowgate_ap_country = { add_trust = { who = root amount = -50 } }
		hidden_effect = { set_country_flag = shadowgate_ap_disabled }
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				has_country_flag = shadowgate_ap_disabled
			}
		}
	}

	option = {
		name = OOPS
		trigger = { has_country_flag = shadowgate_ap_disabled }
		hidden_effect = { set_country_flag = shadowgate_ap_disbarred }
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				NOT = { has_country_flag = shadowgate_ap_disabled }
			}
		}
	}
}

country_event = {
	id = shadowgate_pilgrimage.1110
	title = shadowgate.pilgrimage.title
	desc = shadowgate.pilgrimage.closing
	diplomatic = yes
	custom_gui = "shadowgate_ap_event_window"
	custom_gui_option = "shadowgate_ap_option"
	picture_event_data = {
		portrait = event_target:shadowgate_ap_country
		room = "shadowgate_ap_room"
	}
	location = event_target:shadowgate_ap_planet
	is_triggered_only = yes
	show_sound = shadowgate_ap_loop_01

	option = {
		name = UNDERSTOOD
	}
}