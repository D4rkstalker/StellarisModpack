hyperlane_gaia = {
	name = "Jaanat"						# Name of the system. Use localization tags rather than strings for translation purposes.
	class = "rl_standard_stars"								# system's star class. ["name_of_class"] picks a specific class. ["name_of_random_list"] picks a random class from the specified random_list ( random_list are found in the same files as the star classes )
	asteroid_belt = {
		type = rocky_asteroid_belt
		radius = 60
	}
	flags = { hyperlane_gaia}					# Flags that can be used in triggers and effects.

	init_effect = {
		set_name = "Jaanat"
	}

	# Create the sun first. This is the minimum script required for a sun.
	planet = {
		class = star
		orbit_distance = 0
	}

	# Create a planet
	planet = {
		count = 1					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
		name = "Raj"		# Leave blank to use the games default naming.

		# Set the planet class of the planet.
		class = "pc_gaia"					# Picks the planet class that matches the systems star class.

		orbit_distance = { min = 40 max = 50 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = 1							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.
		size = 25								# Planet size. remember that all numeric values support { min = x max = y } syntax
		has_ring = no

		modifier = "pm_natural_beauty"	# Planet modifier

		home_planet = no					# This is a valid home planet for empires and fallen empires.

		# A moon works the same as planets, with the only exception that they orbit the parent planet instead of the system center
		moon = {
			class = random
			name = "Raja"
			orbit_distance = 10			# Orbit for moons are only relative to other moons around this planet.
			size = 1
		}
	}
}

system_of_sons_1 = {
	name = "Vordin"						# Name of the system. Use localization tags rather than strings for translation purposes.
	class = "rl_dwarf_stars"								# system's star class. ["name_of_class"] picks a specific class. ["name_of_random_list"] picks a random class from the specified random_list ( random_list are found in the same files as the star classes )

	init_effect = {
		set_name = "Vordin"
		random_neighbor_system_euclidean = {
			limit = {
				NOT = {has_hyperlane_to = prev}
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}

	# Create the sun first. This is the minimum script required for a sun.
	planet = {
		class = star
		orbit_distance = 0
	}

	# Create a planet
	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}

	change_orbit = {min = 10 max = 40}

	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}
}

system_of_sons_2 = {
	name = "Seun"						# Name of the system. Use localization tags rather than strings for translation purposes.
	class = "rl_dwarf_stars"								# system's star class. ["name_of_class"] picks a specific class. ["name_of_random_list"] picks a random class from the specified random_list ( random_list are found in the same files as the star classes )

	init_effect = {
		set_name = "Seun"
		random_neighbor_system_euclidean = {
			limit = {
				NOT = {has_hyperlane_to = prev}
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}

	# Create the sun first. This is the minimum script required for a sun.
	planet = {
		class = star
		orbit_distance = 0
	}

	# Create a planet
	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}

	change_orbit = {min = 10 max = 40}

	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}
}

system_of_sons_3 = {
	name = "Wana"						# Name of the system. Use localization tags rather than strings for translation purposes.
	class = "rl_dwarf_stars"								# system's star class. ["name_of_class"] picks a specific class. ["name_of_random_list"] picks a random class from the specified random_list ( random_list are found in the same files as the star classes )

	init_effect = {
		set_name = "Wana"
		random_neighbor_system_euclidean = {
			limit = {
				NOT = {has_hyperlane_to = prev}
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}

	# Create the sun first. This is the minimum script required for a sun.
	planet = {
		class = star
		orbit_distance = 0
	}

	# Create a planet
	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}

	change_orbit = {min = 10 max = 40}

	planet = {
		count = {min = 1 max = 3}					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
													# Leave blank to use the games default naming.
		class = "rl_stars"

		orbit_distance = { min = 20 max = 60 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = {min = 10 max = 180}							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}
}

fatalf_new_colony_init = {
	name = "Prenone"					# Name of the system. Use localization tags rather than strings for translation purposes.
	class = "rl_standard_stars"								# system's star class. ["name_of_class"] picks a specific class. ["name_of_random_list"] picks a random class from the specified random_list ( random_list are found in the same files as the star classes )
	asteroid_belt = {
		type = rocky_asteroid_belt
		radius = 80
	}
	flags = { fatalf_new_colony}					# Flags that can be used in triggers and effects.

	init_effect = {
		set_name = "Prenone"
		spawn_natural_wormhole = {
			bypass_type = wormhole
			random_pos = yes
			orbit_angle = 360
		}
		link_wormholes = from.root.solar_system
	}

	# Create the sun first. This is the minimum script required for a sun.
	planet = {
		class = star
		orbit_distance = 0
	}

	# Create a planet
	planet = {
		count = 1					# Defaults to 1, if you have count = { min = x max = y } then a random number ( between x-y ) of planets will be created.
									# Leave blank to use the games default naming.

		# Set the planet class of the planet.
		class = "pc_gaia"					# Picks the planet class that matches the systems star class.

		orbit_distance = { min = 40 max = 50 }	# Distance from center, relative to previous planets orbit. ( if the previous planet was placed at distance 100 from the center, orbit_distance = 10 would put us 110 from the center ).
		orbit_angle = 1							# Orbit angle from previous planet, in degrees. orbit_distance and orbit_angle together makes the polar coordinate of the planet.
		size = 20								# Planet size. remember that all numeric values support { min = x max = y } syntax
		has_ring = no

		init_effect = {
			prevent_anomaly = yes
			add_modifier = { modifier = "natural_beauty" days = -1 }
			add_modifier = { modifier = "lush_planet" days = -1 }
		}

		home_planet = no					# This is a valid home planet for empires and fallen empires.
	}

	planet = {
		count = { min = 2 max = 5 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}
}
