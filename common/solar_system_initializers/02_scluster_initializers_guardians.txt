# Filename:		02_scluster_initializers_guardians.txt
# Contributors:	SirBlackAxe

# It seems that some unspawned systems will still block their initializers from being used, so I need to use duplicate initializers.

@distance = 50
@jumps = 3
@planet_min_size = 10
@planet_max_size = 25
@base_moon_distance = 10
@moon_min_size = 6
@moon_max_size = 10
@homeworld_min_size = 18
@homeworld_max_size = 24 # 21

##########################################
# distant_stars_initializers.txt
##########################################

####### HATCHLING/VOIDSPAWN SYSTEM ######
	# prevent_anomalies = yes
	# flags = { guardians_hatchling_system guardian hostile_system }
	# save_global_event_target_as = hatchling_egg
scluster_guardians_init_hatchling = {
	class = sc_g
	prevent_anomalies = yes

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 90000
	# 	modifier = {
	# 		factor = 0
	# 		has_distar = no
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	flags = { scluster guardians_hatchling_system guardian hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
	}
	planet = {
		count = { min = 1 max = 2 }
		orbit_distance = 25
		orbit_angle = { min = 90 max = 270 }
	}

	planet = {
		class = rl_voidspawn_egg
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }
		size = 20
		has_ring = no
		modifiers = none

		init_effect = {
			save_global_event_target_as = hatchling_egg
			set_planet_flag = hatchling_egg
			prevent_anomaly = yes
			reroll_random = yes
			random = { chance = 60 set_planet_flag = hatchling_will_trigger }
		}
	}

	planet = {
		count = { min = 2 max = 4 }
		orbit_distance = 30
		orbit_angle = { min = 90 max = 270 }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}
	change_orbit = 15
}

# Scavenger Bot System
	# flags = { scavenger_bot_system guardian hostile_system }
scluster_scavenger_system = {
	class = "sc_m_giant"
	asteroid_belt = {
		type = rocky_asteroid_belt
		radius = 124
	}

	# usage = misc_system_init
	# usage_odds = {
	# 	base = 90000
	# 	modifier = {
	# 		factor = 0
	# 		has_distar = no
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_fe_cluster = yes
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		has_star_flag = empire_cluster
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }
	# scaled_spawn_chance = 8
	max_instances = 1

	flags = { scluster scavenger_bot_system guardian hostile_system }

	planet = {
		class = star
		orbit_distance = 0
		init_effect = {
			prevent_anomaly = yes
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 37
					angle = 30
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 40
					angle = 30
				}
				save_global_event_target_as = debris_field_01
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 43
					angle = 30
				}
			}
			while = {
				count = 2
				create_ambient_object = {
					type = "large_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 65
						angle = random
					}
				}
			}
			while = {
				count = 1
				create_ambient_object = {
					type = "ancient_battlefield_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 65
						angle = random
					}
					save_global_event_target_as = debris_field_02
				}
			}
			create_ambient_object = {
				type = "derelict_ship_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 80
					angle = random
				}
			}
			while = {
				count = 3
				create_ambient_object = {
					type = "medium_debris_01_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 80
						angle = random
					}
				}
			}
			while = {
				count = 4
				create_ambient_object = {
					type = "small_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 90
						angle = random
					}
				}
			}
			while = {
				count = 3
				create_ambient_object = {
					type = "large_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 100
						angle = random
					}
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 97
					angle = 270
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 100
					angle = 265
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 100
					angle = 270
				}
				save_global_event_target_as = debris_field_03
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 100
					angle = 275
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 103
					angle = 270
				}
			}
			while = {
				count = 2
				create_ambient_object = {
					type = "abandoned_ship_2_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 100
						angle = random
					}
				}
			}
			create_ambient_object = {
				type = "derelict_ship_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 110
					angle = random
				}
			}
			while = {
				count = 4
				create_ambient_object = {
					type = "medium_debris_01_object"
					location = solar_system
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 110
						angle = random
					}
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 117
					angle = 180
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 120
					angle = 175
				}
			}
			while = {
				count = 4
				create_ambient_object = {
					type = "large_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 120
						angle = random
					}
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 120
					angle = 180
				}
				save_global_event_target_as = debris_field_04
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 120
					angle = 185
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 123
					angle = 180
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 115
					angle = 0
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 117
					angle = 350
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 117
					angle = 0
				}
				save_global_event_target_as = debris_field_05
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 117
					angle = 10
				}
			}
			create_ambient_object = {
				type = "large_debris_object"
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 120
					angle = 0
				}
			}
		}
	}

	change_orbit = 40

	planet = {
		count = 1
		class = "pc_broken"
		size = { min = 10 max = 15 }

		init_effect = {
			prevent_anomaly = yes
			clear_deposits = yes
			add_deposit = d_minerals_10
			add_deposit = d_minerals_2
		}
	}

	change_orbit = 30

	planet = {
		count = 1
		class = "pc_broken"
		size = { min = 10 max = 25 }
		has_ring = no
		init_effect = {
			prevent_anomaly = yes
			clear_deposits = yes
			add_deposit = d_minerals_8
			add_deposit = d_nanites_deposit
		}
	}

	change_orbit = 27

	planet = {
		count = { min = 1 max = 3 }
		class = pc_asteroid
		orbit_distance = 0
		orbit_angle = { min = 0 max = 360 }
		init_effect = { prevent_anomaly = yes }
	}

	init_effect = {
		create_country = {
			name = "NAME_Autonomous_Repurposer"
			type = guardian_scavenger_bot
			flag = {
				icon = { category = "spherical" file = "flag_spherical_16.dds" }
				background = { category = "backgrounds" file = "00_solid.dds" }
				colors={ "black" "black" "null" "null" }
			}
		}
		last_created_country = {
			set_country_flag = guardian_scavenger_bot
			if = {
				limit = { NOT = { has_modifier = scavenger_bot_power } }
				add_modifier = { modifier = scavenger_bot_power	days = -1 }
			}
			save_global_event_target_as = scavenger_bot_country
		}
		event_target:scavenger_bot_country = {
			create_fleet = {
				name = "NAME_Scavenger_Bot"
				settings = {
					spawn_debris = no
					is_boss = yes
				}
				effect = {
					set_owner = event_target:scavenger_bot_country
					create_ship = {
						name = "NAME_Modulus"
						design = "NAME_Reclaimer"
					}
					set_location = {
						target = event_target:debris_field_01
						distance = 30
						angle = random
					}
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 50
					save_global_event_target_as = scavenger_bot_fleet
					queue_actions = {
						repeat = {
							find_random_planet = {
								trigger = {
									id = scluster.scav.1
									always = yes
								}
								found_planet = {
									move_to = event_target:debris_field_01
									wait = {
										duration = 25
										random = 5
									}
								}
							}
							find_random_planet = {
								trigger = {
									id = scluster.scav.2
									always = yes
								}
								found_planet = {
									move_to = event_target:debris_field_02
									wait = {
										duration = 25
										random = 5
									}
								}
							}
							find_random_planet = {
								trigger = {
									id = scluster.scav.3
									always = yes
								}
								found_planet = {
									move_to = event_target:debris_field_04
									wait = {
										duration = 25
										random = 5
									}
								}
							}
							find_random_planet = {
								trigger = {
									id = scluster.scav.4
									always = yes
								}
								found_planet = {
									move_to = event_target:debris_field_03
									wait = {
										duration = 25
										random = 5
									}
								}
							}
							find_random_planet = {
								trigger = {
									id = scluster.scav.5
									always = yes
								}
								found_planet = {
									move_to = event_target:debris_field_05
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# Elderly Tiyanki System
	# flags = { elderly_tiyanki_system guardian hostile_system }
scluster_elderly_tiyanki_system = {
	class = "rl_all_stars"

	# usage = misc_system_init
	# usage_odds = {
	# 	base = 90000
	# 	modifier = {
	# 		factor = 0
	# 		has_distar = no
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_fe_cluster = yes
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		has_star_flag = empire_cluster
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }
	# scaled_spawn_chance = 8
	max_instances = 1

	flags = { scluster elderly_tiyanki_system guardian hostile_system }

	planet = {
		class = star
		orbit_distance = 0
		init_effect = {
			prevent_anomaly = yes
			while = {
				count = 2
				create_ambient_object = {
					type = "large_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 100
						angle = random
					}
				}
			}
			while = {
				count = 2
				create_ambient_object = {
					type = "medium_debris_01_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 70
						angle = random
					}
				}
			}
			while = {
				count = 2
				create_ambient_object = {
					type = "large_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 90
						angle = random
					}
				}
			}
			while = {
				count = 3
				create_ambient_object = {
					type = "small_debris_object"
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 110
						angle = random
					}
				}
			}
		}
	}

	change_orbit = 45

	planet = {
		count = { min = 1 max = 2 }
		class = "rl_all_normal_planets"
		orbit_distance = 30
		orbit_angle = { min = 0 max = 360 }

		init_effect = { prevent_anomaly = yes }
	}

	change_orbit = 30

	planet = {
		count = 1
		class = "pc_gaia"
		size = { min = 9 max = 25 }

		init_effect = { prevent_anomaly = yes }
	}

	change_orbit = 30

	planet = {
		count = 1
		class = "pc_gas_giant"
		size = { min = 25 max = 30 }

		init_effect = { prevent_anomaly = yes }
	}

	change_orbit = 30

	planet = {
		count = 1
		class = "pc_gas_giant"
		size = { min = 25 max = 30 }
		has_ring = yes

		init_effect = { prevent_anomaly = yes }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 1 max = 4 }
			size = { min = 6 max = 16 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 8
			class = "rl_unhabitable_planets"
			init_effect = { prevent_anomaly = yes }
		}
	}

	change_orbit = 20

	init_effect = {
		create_country = {
			name = "NAME_Tiyanki_Space_Whale_Ancient"
			type = guardian_elderly_tiyanki
			flag = {
				icon = { category = "zoological" file = "flag_zoological_17.dds" }
				background = { category = "backgrounds" file = "00_solid.dds" }
				colors = { "blue" "blue" "null" "null" }
			}
		}
		last_created_country = {
			if = {
				limit = { NOT = { has_modifier = elderly_tiyanki_power } }
				add_modifier = { modifier = elderly_tiyanki_power days = -1 }
			}
			save_global_event_target_as = elderly_tiyanki_country
		}
		random_system_planet = {
			limit = { is_star = no }
			save_event_target_as = new_location
		}
		random_system_planet = {
			limit = { is_star = yes }
			save_event_target_as = start_point
			event_target:elderly_tiyanki_country = {
				create_fleet = {
					name = "NAME_Elderly_Tiyanki"
					settings = {
						spawn_debris = no
						is_boss = yes
					}
					effect = {
						set_owner = event_target:elderly_tiyanki_country
						create_ship = {
							name = "NAME_Elder"
							design = "NAME_Progenitor"
						}
						set_location = event_target:start_point
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_aggro_range = 50
						save_global_event_target_as = elderly_tiyanki_fleet
						auto_move_to_planet = {
							target = event_target:new_location
							clear_auto_move_on_arrival = no		# distar.136 sets a new auto move target
						}
					}
				}
			}
		}
	}

	change_orbit = 20

	planet = {
		count = 1
		class = "pc_gas_giant"
		size = { min = 20 max = 30 }

		init_effect = { prevent_anomaly = yes }
	}
}

##########################################
# leviathans_system_initializers.txt
##########################################
# Game will first pick an initializer using usage_odds, but only use it if it passes the spawn_chance check
# Even if it fails the spawn_chance check it will still count towards the initializer's max_instances

# Stellarites
scluster_guardians_init_stellarites = {
	class = "rl_dwarf_stars"

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	flags = { scluster guardians_stellarite_system guardian hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
	}

	change_orbit = 45

	planet = {
		count = { min = 1 max = 2 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }
		size = { min = 10 max = 25 }
		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			size = { min = 10 max = 14 }
			orbit_distance = 5
		}
	}

	planet = {
		class = pc_frozen
		count = { min = 1 max = 1 }
		orbit_distance = 20
		size = { min = 15 max = 25 }
		orbit_angle = { min = 90 max = 270 }
	}

	planet = {
		count = { min = 1 max = 2 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }
		size = { min = 10 max = 25 }
		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			size = { min = 10 max = 14 }
			orbit_distance = 5
		}
	}

	init_effect = {
		random_system_planet = {
			limit = { is_star = yes }
			change_planet_size = -5
		}
	}
}

### Ether Drake
scluster_guardians_init_dragon = {
	class = sc_k

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	flags = { scluster guardians_dragon_system guardian hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
	}

	change_orbit = 10

	# Hoard
	planet = {
		count = 1
		orbit_distance = 20
		orbit_angle = 20
		size = 5
		has_ring = no

		init_effect = {
			set_name = "NAME_Dragons_Hoard"
			set_planet_flag = hoard_planet
			save_global_event_target_as = guardian_dragon_planet
			prevent_anomaly = yes
			set_deposit = d_guardian_dragon_hoard

			create_country = {
				name = "NAME_Voidwyrm"
				type = guardian_dragon
				flag = {
					icon = { category = "zoological" file = "flag_zoological_5.dds" }
					background = { category = "backgrounds" file = "00_solid.dds" }
					colors={ "red" "red" "null" "null" }
				}
			}
			last_created_country = {
				save_global_event_target_as = guardian_dragon_country
				set_country_flag = dragon_country
			}

			create_fleet = {
				name = "NAME_Ether_Drake"
				settings = {
					spawn_debris = no
					is_boss = yes
				}
				effect = {
					set_owner = event_target:guardian_dragon_country
					create_ship = {
						name = "NAME_Avice"
						design = "NAME_Grand_Dragon"
					}
					set_fleet_flag = dragon_fleet
					set_location = event_target:guardian_dragon_planet
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 500
					queue_actions = {
						repeat = {
							find_closest_planet = {
								trigger = {
									id = scluster.dragon.home.1
									is_star = yes
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = {
										duration = 30
										random = 20
									}
								}
							}
							find_closest_planet = {
								trigger = {
									id = scluster.dragon.home.2
									is_star = no
									NOT = { is_same_value = event_target:guardian_dragon_planet }
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = {
										duration = 30
										random = 20
									}
								}
							}
							find_closest_planet = {
								trigger = {
									id = scluster.dragon.home.3
									is_same_value = event_target:guardian_dragon_planet
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = {
										duration = 30
										random = 20
									}
								}
							}
						}
					}
				}
			}
		}
	}

	change_orbit = 15

	planet = {
		count = { min = 1 max = 4 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}

		init_effect = {  }
	}
}

# Dimensional Horror
	# No planets besides the star!
scluster_guardians_init_horror = {
	class = "sc_black_hole"

	flags = { guardians_horror_system guardian hostile_system }

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
	}
}

# Automated Dreadnought
scluster_guardians_init_dreadnought = {
	class = "rl_standard_stars"
	asteroid_belt = {
		type = rocky_asteroid_belt
		radius = 50
	}

	flags = { scluster guardians_dreadnought_system guardian hostile_system }

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
		flags = { patrol_1 }

		init_effect = {
			save_event_target_as = dreadnought_sun
			create_country = {
				name = "NAME_Automated_Dreadnought"
				type = guardian_dreadnought
				flag = {
					icon = { category = "spherical" file = "flag_spherical_6.dds" }
					background = { category = "backgrounds" file = "00_solid.dds" }
					colors={ "red" "red" "null" "null" }
				}
			}
			last_created_country = {
				if = {
					limit = {
						NOT = { has_modifier = dreadnought_power }
					}
					add_modifier = { modifier = dreadnought_power days = -1 }
				}
				save_global_event_target_as = automated_dreadnought_country
				set_country_flag = automated_dreadnought_country
			}
			create_fleet = {
				name = "NAME_Automated_Dreadnought"
				settings = {
					spawn_debris = no
					is_boss = yes
				}
				effect = {
					set_owner = event_target:automated_dreadnought_country
					save_global_event_target_as = automated_dreadnought
					create_ship = {
						name = "NAME_JuukTidir"
						design = "NAME_Relic"
						graphical_culture = "npf_01_dirty"
					}
					set_location = {
						target = event_target:dreadnought_sun
						distance = 0
						angle = random
					}
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 350

					queue_actions = {
						repeat = {
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.1
									has_planet_flag = patrol_1
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.2
									has_planet_flag = patrol_2
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.3
									has_planet_flag = patrol_3
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.4
									has_planet_flag = patrol_4
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.5
									has_planet_flag = patrol_5
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.6
									has_planet_flag = patrol_6
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.7
									has_planet_flag = patrol_7
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
							find_closest_planet = {
								trigger = {
									id = dreadnought.scluster.patrol.8
									has_planet_flag = patrol_8
								}
								found_planet = {
									move_to = this
									orbit_planet = this
									wait = { duration = 30 }
								}
							}
						}
					}
				}
			}
		}
	}

	change_orbit = 50

	planet = {
		count = 2
		class = pc_asteroid
		orbit_distance = 0
		orbit_angle = { min = 90 max = 270 }
	}

	change_orbit = 30

	planet = {
		class = "pc_molten"
		orbit_distance = 0
		orbit_angle = 85
		size = 15
		has_ring = no
		flags = { patrol_2 }
	}

	change_orbit = 25

	planet = {
		class = "rl_habitable_normal"
		orbit_distance = 0
		orbit_angle = 85
		size = 16
		has_ring = no
		flags = { patrol_3 }

		change_orbit = @base_moon_distance

		moon = {
			class = "pc_toxic"
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}

	change_orbit = 25

	planet = {
		class = "rl_habitable_normal"
		orbit_distance = 0
		orbit_angle = 85
		size = 20
		has_ring = yes
		flags = { patrol_4 }
	}

	planet = {
		class = "pc_barren"
		orbit_distance = 25
		orbit_angle = { min = 90 max = 270 }
		flags = { patrol_5 }

		change_orbit = @base_moon_distance

		moon = {
			class = "pc_barren_cold"
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}

	planet = {
		class = "pc_gas_giant"
		orbit_distance = 30
		orbit_angle = { min = 90 max = 270 }
		size = 25
		has_ring = yes
		flags = { patrol_6 }
	}

	planet = {
		class = "pc_gas_giant"
		orbit_distance = 30
		orbit_angle = { min = 90 max = 270 }
		size = 35
		has_ring = no
		flags = { patrol_7 }

		moon = {
			size = 6
			orbit_distance = 10
			orbit_angle = 115
			has_ring = no
		}
		moon = {
			size = 6
			orbit_distance = 2.5
			orbit_angle = 35
			has_ring = no
		}
		moon = {
			size = 9
			orbit_distance = 2.5
			orbit_angle = 270
			has_ring = no
		}
	}

	planet = {
		class = "pc_frozen"
		orbit_distance = 35
		orbit_angle = { min = 90 max = 270 }
		size = 8
		flags = { patrol_8 }
	}
}

# Hive
scluster_guardians_init_hive = {
	class = "rl_standard_stars"
	asteroid_belt = {
		type = crystal_asteroid_belt
		radius = 160
	}

	flags = { scluster guardians_hive_system guardian hostile_system }

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no

		init_effect = {
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 245
				}
				set_ambient_object_flag = hive_asteroid_1
			}
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 280
				}
				set_ambient_object_flag = hive_asteroid_2
			}
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 320
				}
				set_ambient_object_flag = hive_asteroid_3
			}
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 35
				}
				set_ambient_object_flag = hive_asteroid_4
			}
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 110
				}
				set_ambient_object_flag = hive_asteroid_5
			}
			create_ambient_object = { type = "dormant_hive_base_object" }
			last_created_ambient_object = {
				set_location = {
					target = PREV
					distance = 160
					angle = 180
				}
				set_ambient_object_flag = hive_asteroid_6
			}
		}
	}

	change_orbit = 160

	planet = {
		class = pc_crystal_asteroid
		orbit_distance = 0
		orbit_angle = 75
		flags = { hiver_asteroid_1 }

		init_effect = {
			prevent_anomaly = yes
			set_deposit = d_minerals_6
		}
	}
	planet = {
		class = pc_crystal_asteroid
		orbit_distance = 0
		orbit_angle = 75
		flags = { hiver_asteroid_2 }

		init_effect = {
			prevent_anomaly = yes
			set_deposit = d_minerals_8
		}
	}
	planet = {
		class = pc_crystal_asteroid
		orbit_distance = 0
		orbit_angle = 75
		flags = { hiver_asteroid_3 }

		init_effect = {
			prevent_anomaly = yes
			set_deposit = d_minerals_6
		}
	}
	planet = {
		class = pc_crystal_asteroid
		orbit_distance = 0
		orbit_angle = 75
		flags = { hiver_asteroid_4 }

		init_effect = {
			prevent_anomaly = yes
			set_deposit = d_minerals_8
		}
	}
	planet = {
		class = pc_crystal_asteroid
		orbit_distance = 0
		orbit_angle = 70
		flags = { hiver_asteroid_5 }

		init_effect = {
			prevent_anomaly = yes
			set_deposit = d_minerals_6
		}
	}

	change_orbit = 40

	planet = {
		class = "pc_gas_giant"
		count = { min = 1 max = 3 }
		orbit_distance = 35
		orbit_angle = { min = 90 max = 270 }
	}
}

# Technosphere
scluster_guardians_init_technosphere = {
	name = "NAME_Gargantua"
	class = sc_black_hole

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# }

	flags = { scluster guardians_technosphere_system guardian hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = 35
		has_ring = no

		init_effect = {
			set_name = "NAME_Gargantua"
			#change_planet_size = 20
			prevent_anomaly = yes
		}
	}

	init_effect = {
		random_system_planet = {
			limit = { is_star = yes }
			clear_deposits = yes
			create_country = {
				name = "NAME_Infinity_Machine"
				type = guardian_sphere
				flag = {
					icon = { category = "zoological" file = "flag_zoological_5.dds" }
					background = { category = "backgrounds" file = "00_solid.dds" }
					colors={ "red" "red" "null" "null" }
				}
			}
			last_created_country = {
				save_global_event_target_as = guardian_technosphere_country
				if = {
					limit = {
						NOT = { has_modifier = technosphere_power }
					}
					add_modifier = { modifier = technosphere_power days = -1 }
				}
				set_graphical_culture = techno
				create_fleet = {
					name = "NAME_The_Infinity_Machine"
					settings = {
						spawn_debris = no
						is_boss = yes
					}
					effect = {
						set_owner = event_target:guardian_technosphere_country
						create_ship = {
							name = "NAME_I_O"
							design = "NAME_Infinity_Machine"
						}
						set_fleet_flag = technosphere_fleet
						set_location = {
							target = prevprev
							distance = 80
							angle = 220
						}
						set_fleet_stance = passive
						set_aggro_range_measure_from = self
						set_aggro_range = 100
						save_global_event_target_as = technosphere_ship
					}
				}
			}
		}
	}
}

### Enigmatic Fortress
scluster_guardians_init_fortress = {
	class = sc_a

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		is_bottleneck_system = yes
	# 	}
	# }

	flags = { scluster guardians_fortress_system guardian enigmatic_system hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no

		init_effect = {
			if = {
				limit = {
					NOT = { exists = event_target:fortress_country }
				}
				create_country = {
					name = "NAME_Enigmatic_Fortress"
					type = guardian_fortress
					flag = {
						icon = { category = "zoological" file = "flag_zoological_5.dds" }
						background = { category = "backgrounds" file = "00_solid.dds" }
						colors = { "red" "red" "null" "null" }
					}
					effect = {
						save_global_event_target_as = fortress_country
						set_country_flag = fortress_country
						if = {
							limit = {
								NOT = { has_modifier = enigmatic_power }
							}
							add_modifier = { modifier = enigmatic_power days = -1 }
						}
					}
				}
				create_fleet = {
					name = "NAME_Enigmatic_Fortress"
					settings = {
						spawn_debris = no
						is_boss = yes
					}
					effect = {
						set_owner = event_target:fortress_country
						while = {
							count = 1 #just to show-case that formation will tile
							create_ship = {
								name = ""
								design = "NAME_Ancient_Vault"
								graphical_culture = "ancient"
								effect = {
									set_ship_flag = fortress_vault
									set_disable_at_health = 0.05
									save_global_event_target_as = fortress_vault_core
								}
							}
							create_ship = {
								name = ""
								design = "NAME_Ancient_Guardian"
								graphical_culture = "ancient"
							}
							create_ship = {
								name = ""
								design = "NAME_Ancient_Guardian"
								graphical_culture = "ancient"
							}
							create_ship = {
								name = ""
								design = "NAME_Ancient_Warden"
								graphical_culture = "ancient"
							}
							create_ship = {
								name = ""
								design = "NAME_Ancient_Warden"
								graphical_culture = "ancient"
							}
							while = {
								count = 4
								create_ship = {
									name = ""
									design = "NAME_Ancient_Defender"
									graphical_culture = "ancient"
								}
								create_ship = {
									name = ""
									design = "NAME_Ancient_Defender"
									graphical_culture = "ancient"
								}
								create_ship = {
									name = ""
									design = "NAME_Ancient_Defender"
									graphical_culture = "ancient"
								}
								create_ship = {
									name = ""
									design = "NAME_Ancient_Defender"
									graphical_culture = "ancient"
								}

							}
							while = {
								count = 8
								create_ship = {
									name = ""
									design = "NAME_Ancient_Sentinel"
									graphical_culture = "ancient"
								}
							}
						}
						set_fleet_formation = {
							position = { x = 13.0	y = -7.0 } #17
							position = { x = 11.5	y = -13.0 } #16
							position = { x = 0.0	y = -15.5 } #15
							position = { x = 13.0	y = 7.0	 } #14
							position = { x = -11.8	y = -4.0 } #13
							position = { x = -15.8	y = 6.5	 } #12
							position = { x = -10.0	y = 8.5	 } #11
							position = { x = -1.6	y = 15.0 } #10
							position = { x = 14.0	y = -3.0 } #9
							position = { x = 1.3	y = -11.0 } #8
							position = { x = -10.5	y = 1.0	 } #7
							position = { x = 3.0	y = 8.0	 } #6
							position = { x = -4.3	y = -7.0 } #5
							position = { x = 8.0	y = 9.0	 } #4
							position = { x = -4.0	y = 7.3	 } #3
							position = { x = 7.5	y = -10.5 } #2
							position = { x = 0.0	y = 0.0	 } #1
						}
						set_formation_scale = 0.5
						set_location = {
							target = PREV
							distance = 25
							angle = 150
						}
						set_fleet_flag = fortress_fleet
						save_global_event_target_as = fortress_fleet
					}
				}
			}
		}
	}

	change_orbit = 25

	planet = {
		count = { min = 1 max = 2 }
		orbit_distance = 15
		class = "rl_habitable_normal"
		orbit_angle = { min = 270 max = 359 }
		size = { min = 8 max = 20 }
	}

	planet = {
		count = { min = 1 max = 5 }
		orbit_distance = 20
		class = "rl_unhabitable_planets"
		orbit_angle = { min = 90 max = 270 }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			class = "rl_unhabitable_planets"
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}

	}
}

# Wraith
scluster_guardians_init_wraith = {
	class = "sc_pulsar"

	max_instances = 1
	# scaled_spawn_chance = 8	# scales by galaxy size (1000 stars = 10x base)
	# usage = misc_system_init
	# usage_odds = {
	# 	base = 0
	# 	modifier = {
	# 		has_leviathans = yes
	# 		add = 100
	# 	}
	# 	modifier = {
	# 		factor = 0
	# 		OR = {
	# 			is_fe_cluster = yes
	# 			has_star_flag = empire_cluster
	# 		}
	# 	}
	# }

	flags = { scluster guardians_wraith_system guardian hostile_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		has_ring = no
		flags = { guardians_wraith_pulsar }
	}

	change_orbit = 45

	planet = {
		count = { min = 2 max = 10 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }

		change_orbit = @base_moon_distance

		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}
}
