#_[开局/读档]
#_[领袖]
#_[全局周期]		aar月检/aar奇点峰会/aar铁幕协议半年		/aar年检		/aar海军大建
#_[星基				
#_[建造]
#_[接战]			aar航海接战/aar敌对海域接战/aar防线接战	/aar防线击毁/aar防线失效
#_[入轨]			aar威压入轨/aar网道入轨激活/aar网道入轨维持
#_[入场]			aar网道入场遗珍节点激活		/aar敌对海域入场/aar航海入场
#_[雇佣]			aar敌对海域雇主切换/aar航海雇主切换
#_[特殊]			mcm国家同步




###	开局
on_game_start = {
	events = {
		AAR_evt_CORE.1				#	aar初始化		=aar飞升起源
	}
}
###	读档
on_single_player_save_game_load = {
	events = {
		AAR_evt_CORE.10				#	aar读档debug
	}
}




on_policy_changed = {
	events = {
	}
}

on_tech_increased = {
	events = {
	}
}




###	领袖
on_leader_death = {# Executed as a leader has died
	#	<root>=国家/<from>=领袖
	events = {
	}
}
on_leader_fired = {# Executed as a leader has been fired
	#	<root>=国家/<from>=领袖
	events = {
	}
}
on_leader_spawned = {# a new leader is generated for an empire, to be available for recruitment
	#	<root>=国家/<from>=领袖
	events = {
	}
}
on_leader_assigned = {
	#	<root>=领袖|指派后|
	events = {
	}
}




###	全局周期
VOP_on_monthly_pulse = {
	events = {
		AAR_evt_CORE.20				#	aar月检
		AAR_evt_TECH.4				#	aar奇点峰会
		AAR_evt_VEIL.5				#	aar铁幕协议半年
	}
}
VOP_on_yearly_pulse = {
	events = {
		AAR_evt_CORE.21				#	aar年检
	}
}
VOP_on_five_year_pulse = {
	events = {
		AAR_evt_NAVY.2				#	aar海军大建
	}
}






###	星基
# THIS = construction_ship
# from = starbase?
on_building_starbase_outpost = {
	events = {
		AAR_evt_VIGILANCE.1			#	aar防御ap星基init
	}
}

# Called when a Starbase changes owner
# THIS = Ship (Starbase)
# FROM = Former Owner (Country)
on_starbase_transfer = {
	events = {
		AAR_evt_VIGILANCE.10		#	aar防御ap星基易主
	}
}

# This = starbase being destroyed (not ship!)
# From = fleet that destroyed the starbase
on_starbase_destroyed = {
	events = {
		AAR_evt_LINE.4				#	aar防线星基击毁
	}
}

# This = starbase being disabled (not ship!)
# From = fleet that disabled the starbase
on_starbase_disabled = {
	events = {
		AAR_evt_LINE.40				#	aar防线星基失效
	}
}




###	建造
on_ship_built = {
	#_scopes	<this/root>=船/<from>=星球
	events = {
	}
}



###	接战
on_entering_battle = {
	#_scopes	<this/root>=攻击国家/<from>=目标国家/<fromfrom>=攻击舰队/<fromfromfrom>=目标舰队
	events = {
		AAR_evt_NAVIGATOR.3			#	aar航海接战
		AAR_evt_HOSTILE.3			#	aar敌对海域接战
		AAR_evt_LINE.10				#	aar防线接战
	}
}
on_space_battle_won = {
	#_scopes	<this/root>=获胜国家/<from>=战败国家/<fromfrom>=获胜舰队/<fromfromfrom>=战败舰队
	events = {
	}
}
on_space_battle_lost = {
	#_scopes	<this/root>=战败国家/<from>=获胜国家/<fromfrom>=战败舰队/<fromfromfrom>=获胜舰队
	events = {
	}
}
on_ship_destroyed_victim = {
	#_scopes	<this/root>=击毁国家/<from>=攻击国家/<fromfrom>=击毁舰队/<fromfromfrom>=攻击舰队
	events = {
		AAR_evt_LINE.3				#	aar防线击毁
	}
}
on_ship_disabled = {
	#_scopes	<this/root>=船/<from>=攻击船
	events = {
		AAR_evt_LINE.30				#	aar防线失效
	}
}








###	入轨
on_fleet_enter_orbit = {
	#_scopes	<root/this>=舰队/<from>=星球/星基/巨构
	events = {
		AAR_evt_DOMINION.1			#	aar威压入轨
		AAR_evt_WEBWAY.30			#	aar网道入轨激活
		AAR_evt_WEBWAY.31			#	aar网道入轨维持
	}
}


###	入场
on_entering_system_fleet = {
	#_scopes	<root/this>=舰队/<from>=星系
	events = {
	#	TEST_evt_AAR.20				#	test舰队入场
		AAR_evt_WEBWAY.40			#	aar网道入场遗珍节点激活
		
		AAR_evt_HOSTILE.4			#	aar敌对海域入场
		AAR_evt_NAVIGATOR.4			#	aar航海入场
	}
}

# A fleet executes a move order to exit borders
# Scope = Fleet
# From = Origin System
# FromFrom = Destination System
on_crossing_border = {
	events = {
	}
}

# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# FROMFROM = System jumped from
on_entering_gateway = {
	events = {
	}
}

# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# FROMFROM = System jumped from
on_entering_wormhole = {
	events = {
	}
}

on_jump_drive = {
	#	<this>=ship
	events = {
	}
}




###	雇佣
on_fleet_contract_expired = {# Is fired immediately after fleet contract is expired
	#_scopes	<this/root>=舰队/<from>=租借者/<fromfrom>=所有者
	#_scopes	<FromFromFrom> = country that initiated the ending (the same as owner in a case of expiration)
	events = {
		AAR_evt_HOSTILE.41			#	aar敌对海域雇主切换
		AAR_evt_NAVIGATOR.41		#	aar航海雇主切换
	}
}




# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		AAR_evt_WEBWAY.250			#	aar网道星系易主
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
	}
}




# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
		AAR_misc_evt.2				#	aar神堡清理
	}
}

#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {
		AAR_evt_PREROGATIVE.2		#	aar权巅plnt易主触发
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
		AAR_evt_PREROGATIVE.2		#	aar权巅plnt易主触发
	}
}




###_[特殊]	#####################################################
MCM_on_country_sync = {
	events = {
	}
}