# Triggers when the game starts
on_game_start = {
	events = {
		gamestartdiplo.1
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		diploevent.100
	}
}

# this = country
on_monthly_pulse_country = {
	events = {
		onactiondiplo.4
		onactiondiplo.25
	}
}

# this = country
on_yearly_pulse_country = {
	events = {
		#onactiondiplo.5
		onactiondiplo.6
	}
}

# Triggers when ground combat starts
# This = planet
# From = country attacking
on_ground_combat_started = {
	events = {
		diplospy.174
	}
}

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		diplospy.175
		onactiondiplo.8
		onactiondiplo.10
	}
}

# Triggers country_event for the attacker upon defeat
# This = country, attack leader
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_lose = {
	events = {
		diplospy.175
		onactiondiplo.8
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
		onactiondiplo.3
	}
}

# Triggers when a Special Project to uplift a pre-sapient species is completed.
# Note that this will trigger once for each combination of planet & original
# species (but for uplifting this should be only once).
#
# Scope = planet_event
# This = planet scope
# From = uplifted species (pre-modification)
on_uplift_completion = {
	events = {
		onactiondiplo.7
	}
}

# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		diplospy.173
	}
}

#An army has been killed in ground combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
on_army_killed_in_combat = {
	events = {
		onactiondiplo.26
	}
}

#An army has ceased to exist for any other reason
# This = country
# From = army
on_army_killed_no_combat = {
	events = {
		onactiondiplo.26
	}
}

#Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
#Fired in ADDITION to on_planet_transfer
#From = Country scope (new owner)
#This = Planet scope
on_planet_conquer = {
	events = {
		onactiondiplo.32
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		onactiondiplo.2
	}
}

# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		onactiondiplo.1
		onactiondiplo.17
	}
}

on_destroy_planet_with_PLANET_KILLER_CRACKER = {
	events = {
		onactiondiplo.9
	}
}

on_destroy_planet_with_PLANET_KILLER_SHIELDER = {
	events = {
		onactiondiplo.9
	}
}

on_destroy_planet_with_PLANET_KILLER_NEUTRON = {
	events = {
		onactiondiplo.9
	}
}

on_destroy_planet_with_PLANET_KILLER_GODRAY = {
	events = {
		onactiondiplo.9
	}
}

on_destroy_planet_with_PLANET_KILLER_NANOBOTS = {
	events = {
		onactiondiplo.9
	}
}

# this = country, fired via action.220 from on_five_year_pulse_country
on_five_year_random_pulse_country = {
	random_events = {
		100 = federations2.50	# Federation hegemony challenge
		100 = federations2.100	# Federation military challenge
		50 = envoy_events.4		# Respected Envoy to Galactic Community
		25 = envoy_events.5 	# Irritating Envoy Must Die
		5 = envoy_events.15 	# Galactic Community Wildlife
		25 = envoy_events.1 	# Insulting envoy software event
		125 = action.2211		# on_five_year_random_pulse_country_negative_list
		# Modded
		50 = diploevent.200 # Purchase Enclave (rare circumstances, so more common)
		25 = diploevent.205 # Steal Research
		25 = diploevent.208 # Criminal Syndicate bribes local officials
		20 = diploevent.210 # Invited to Federation Summit (210 - 225)
		2000 = 0
	}
}

# Why do this, you might ask, and not just use a random_list? Because on_actions check the triggers of the event before they try to fire them and exclude them from the list if they are false, so a list with no 0 weight will always fire an event so long as any of them are able to be fired
# Used in operation_diplomatic_incident. Beware when changing.
# this = country, fired via action.2211 from on_five_year_random_pulse_country
on_five_year_random_pulse_country_negative_list = {
	random_events = {
		10 = envoy_events.1001 	# Insulting envoy software event (operation_diplomatic_incident-safe)
		20 = envoy_events.3 	# A Contribution to Galactic Comedy
		10 = envoy_events.100 	# Scandalous Insult
		20 = envoy_events.7 	# Xenophobe Envoy Elopes
		20 = envoy_events.225 	# Salacious Affair
		20 = envoy_events.200 	# Galcom Lobbying
		10 = envoy_events.205 	# Violating Local Norms
		20 = envoy_events.210 	# Straying from own Norms
		20 = envoy_events.215 	# Substance Abuse
		10 = envoy_events.220 	# Offense Taken
		20 = action.2212		# Nothing, done differently because of operation_diplomatic_incident
		# Modded
		20 = diploevent.207 # Caught Stealing Research
	}
}