
on_game_start = {
	events = {
		GAPS_Mod_Flag.1
		Events_GAPS_Light_Levels.1
	}
}
# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		Events_GAPS_Precognitive.0
		Events_GAPS_Traits.13
	}
}
# A district construction has been queued.
# This = Planet
on_district_queued = {
	events = {
		Events_GAPS_Undergrounder.41
	}
}

#A district construction has been completed.
# This = Planet
on_district_complete = {
	events = {
		#Events_GAPS_Undergrounder.41
	}
}

# A district construction has been unqueued.
# This = Planet
on_district_unqueued = {
	events = {
		Events_GAPS_Undergrounder.42
	}
}

# A district construction has demolished.
# This = Planet
on_district_demolished = {
    events = {
       Events_GAPS_Planters.3
	   Events_GAPS_Undergrounder.42
    }
}
on_game_start_country = {
	events = {
		#Events_GAPS_Planters.1
		Events_GAPS_Basker.3
		Events_GAPS_Builders.1
		Events_GAPS_Precognitive.097
		Events_GAPS_Undergrounder.11
		Events_GAPS_Dragon_Hell.1
		#GAME START COUNTRY
		Events_GAPS_The_Unswallowed.1
		Events_GAPS_Ranchers.1
		Events_GAPS_Skybattlers.1
		Events_GAPS_Undergrounder.1
		Events_GAPS_Basker.5
		Events_GAPS_Ancient_Shipwrights.3
		Events_GAPS_Precognitive.1
		Events_GAPS_Wilders.2 #gives starting tech and tracking deposit
		Events_GAPS_Traditionless.1
		Events_GAPS_Sad_Socretes.4 #gives starting tech
		Events_GAPS_Traditionless.2 #gives starting tech
		Events_GAPS_Spaceborn.5 #gives starting tech
		Events_GAPS_Aquaifiers.2
		Events_GAPS_Fracturing_Consciousness.2 #gives starting tech and tracking deposit
		Events_GAPS_Basker.1
		Events_GAPS_Planters.2
		Events_GAPS_Universal_Effects.61
		Events_GAPS_Drone_Replicators.2
		Events_GAPS_Multitaskers.2
		Events_GAPS_Amoeba_Spawners.13
	}
}
# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		Events_GAPS_Sad_Socretes.1 #Socrates sadness increase
		Events_GAPS_Spaceborn.3 #replacement techs
		Events_GAPS_Ancient_Shipwrights.1
		Events_GAPS_Ancient_Shipwrights.2
		Events_GAPS_Ancient_Shipwrights.21
		Events_GAPS_Wilders.1
		Events_GAPS_Planters.1
		Events_GAPS_Fracturing_Consciousness.1
		Events_GAPS_Fracturing_Consciousness.5 #Socrates sadness increase
		Events_GAPS_Sad_Socretes.3 #New Tech Effect
		Events_GAPS_Traditionless.1 #New Tech Effect
		Events_GAPS_Spaceborn.4 #New Tech Effect
		Events_GAPS_The_Unswallowed.11 #New Tech Effect
		Events_GAPS_Aquaifiers.1 #New Tech Effect
		Events_GAPS_Ranchers.4 #New Tech Effect
		Events_GAPS_Skybattlers.2 #New Tech Effect
		Events_GAPS_Skybattlers.3 #New Tech Effect - tech tree progression
		Events_GAPS_Basker.11
		Events_GAPS_Drone_Replicators.1
		Events_GAPS_Undergrounder.2
		Events_GAPS_Multitaskers.1
		Events_GAPS_Amoeba_Spawners.1
		Events_GAPS_Amoeba_Spawners.12
		
	}
}
on_press_begin = {
	events = {
		Events_GAPS_Traits.1
		Events_GAPS_Traits.12
		Events_GAPS_Traits_Delightful.1 #delightful
		Events_GAPS_Traits_Vampire.1
	}
}

# A pop has been added to the planet
# Root = pop
# From = planet
on_pop_added = {
	events = {
		Events_GAPS_Traits_Delightful.11
		Events_GAPS_Traits_Vampire.11
		Events_GAPS_Traits.14
	}
}
# Pop is abducted by raiding stance
# This = Pop scope
# From = planet abducted from
on_pop_abducted  = {
	events = {
		Events_GAPS_Traits_Delightful.11
		Events_GAPS_Traits_Vampire.11
	}
}

# A pop has finished purging
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_purged = {
	events = {
		Events_GAPS_Traits_Delightful.111
		Events_GAPS_Traits_Vampire.111
	}
}

# A pop has finished declining (while not being purged)
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_declined = {
	events = {
		Events_GAPS_Traits_Delightful.111
		Events_GAPS_Traits_Vampire.111
	}
}


# A pop has been displaced
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_displaced = {
	events = {
		Events_GAPS_Traits_Delightful.111
		Events_GAPS_Traits_Vampire.111
	}
}

# No scope, like on_game_start
on_monthly_pulse = {
	events = {
		Events_GAPS_Universal_Effects.4 #checks for sealed systems.
	}
}

# this = country
on_monthly_pulse_country = {
	events = {
		#Events_GAPS_Planters.1
		Events_GAPS_Precognitive.55
		Events_GAPS_Precognitive.56
		Events_GAPS_Ancient_Shipwrights.4
		Events_GAPS_Undergrounder.81
		Events_GAPS_Traits.12 #War/Peace happiness
		Events_GAPS_Ranchers.111
	}
}


# A fleet has entered a system
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		Events_GAPS_Basker.2
		Events_GAPS_The_Unswallowed.3
		Events_GAPS_Ranchers.3
	}
}
# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_victim = {
	events = {
		Events_GAPS_Ranchers.1111
	}
}
# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		Events_GAPS_Universal_Effects.2
		Events_GAPS_Universal_Effects.22
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
		Events_GAPS_Universal_Effects.2
		Events_GAPS_Universal_Effects.22
		Events_GAPS_Universal_Effects.54
	}
}


# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_starbase_outpost = {
	events = {
		Events_GAPS_Universal_Effects.3
		Events_GAPS_Drone_Replicators.3
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		Events_GAPS_Universal_Effects.1
		Events_GAPS_Universal_Effects.53
	}
}


# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		Events_GAPS_Universal_Effects.51
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		Events_GAPS_Drone_Replicators.32
	}
}

#This = Federation leader
#From = Joining member
on_join_federation = {
	events = {
		Events_GAPS_Drone_Replicators.51
	}
}

#This = Federation leader
#From = Leaving member
on_leave_federation = {
	events = {
		Events_GAPS_Drone_Replicators.52
	}
}

# This = subject
# From = subject's overlord
on_becoming_subject = {
	events = {
		Events_GAPS_Drone_Replicators.53
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
		Events_GAPS_Traits.13
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		Events_GAPS_Dragon_Hell.111
		Events_GAPS_Amoeba_Spawners.21
		Events_GAPS_Amoeba_Spawners.22
	}
}
