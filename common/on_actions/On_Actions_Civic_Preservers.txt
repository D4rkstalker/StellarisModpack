
on_game_start_country = {
	events = {
		Events_GAPS_Preservers.1
	}
}

# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		#Events_GAPS_Preservers.2
	}
}


# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
		#Events_GAPS_Preservers.2
	}
}

# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_outpost_station = {
	events = {
		##Events_GAPS_Preservers.3
	}
}

on_building_observation_station = {
	events = {
		#Events_GAPS_Preservers.3
	}
}

on_building_starbase_outpost = {
	events = {
		#Events_GAPS_Preservers.3
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		#Events_GAPS_Preservers.4
	}
}
# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		#Events_GAPS_Preservers.5
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {
		#Events_GAPS_Preservers.5
	}
}


# Scope:
# this/root = planet that have been fired upon
# from = fleet that fired
on_destroy_planet_with_PLANET_KILLER_CRACKER = {
	events = {
		#Events_GAPS_Preservers.6
	}
}

on_destroy_planet_with_PLANET_KILLER_SHIELDER = {
	events = {
		#Events_GAPS_Preservers.6
	}
}

on_destroy_planet_with_PLANET_KILLER_NEUTRON = {
	events = {
		#Events_GAPS_Preservers.7
	}
}

on_destroy_planet_with_PLANET_KILLER_GODRAY = {
	events = {
		#Events_GAPS_Preservers.7
	}
}


# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		#Events_GAPS_Preservers.9
	}
}


#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {
		#Events_GAPS_Preservers.9
	}
}
# Planet has reached 0 pops from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_zero_pops = {
	events = {
		#Events_GAPS_Preservers.10
	}
}
# Initial rebels manage to take control of the planet, happens before the new owner is set, after the war is created.
# This = Rebel Country
# From = Planet
# FromFrom = War
on_rebels_take_planet = {
	events = {
		#Events_GAPS_Preservers.10
	}
}

#Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
#Fired in ADDITION to on_planet_transfer
#From = Country scope (new owner)
#This = Planet scope
on_planet_conquer = {
	events = {
		#Events_GAPS_Preservers.10
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
		#Events_GAPS_Preservers.10
	}
}
