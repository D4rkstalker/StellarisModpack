# Available requirements:
#
#	SKILLS
#	#skill = 2
#
#	LEADER
#	leader = scientist
#	leader = admiral
#	leader = general
#	leader = ruler
#	leader = governor
#	
#	MILITARY SHIPS
#	shipclass_military = 1
#	
#	CIVILIAN SHIPS
#	shipclass_constructor = 2
#	shipclass_science_ship = 1
#	shipclass_colonizer = 2
#	
#	ARMIES
#	shipclass_transport = 1
#	assault_armies = 2
#	defense_armies = 1
#	
#	STATIONS
#	research_station = yes
#	mining_station = yes
#	observation_station = yes
#
#	SCOPES
#	abort_trigger
#	this = country (project owner)
#	from = event scope (planet or ship, MIGHT NOT EXIST)
#	fromfrom = project creation scope (usually equals location)
#	
#	on_success
#	this = event scope (ship or planet)
#	from = project creation scope (usually equals location)
#	
#	on_cancel 
#	this = country (project owner)
#	from = event scope (planet or ship, MIGHT NOT EXIST)
#	fromfrom = project creation scope (usually equals location)
#
#	on_fail
#	this = country (project owner)
#	from = project creation scope (usually equals location)

special_project = {
	key = "MZILLI_RECOVER_SHIP"
	days_to_research = 60
	picture = GFX_evt_face_off_in_space

	timelimit = 720

	event_scope = ship_event

	requirements = {
		shipclass_constructor = 1
	}
	
	on_success = {
		from = {
			if = {
				limit = { higher_capture_chance = yes }
				root = { ship_event = { id = mzilli_capture_ships.6 } }
			}
			set_disabled = no
			remove_modifier = mzilli_disabled_ship_modifier
			fleet = {
				#set_event_locked = no
				set_owner = root.owner
			}
		}
		every_country = {
			limit = { has_special_project = MZILLI_CAPTURE_SHIP }
			abort_special_project = {
				type = MZILLI_CAPTURE_SHIP
				location = from
			}
		}
	}
	
	on_fail = {
		every_country = {
			limit = { has_special_project = MZILLI_CAPTURE_SHIP }
			abort_special_project = {
				type = MZILLI_CAPTURE_SHIP
				location = fromfrom
			}
		}
		fromfrom = { destroy_ship = this }
	}
}

special_project = {
	key = "MZILLI_CAPTURE_SHIP"
	days_to_research = 60
	picture = GFX_evt_face_off_in_space

	timelimit = 720

	event_scope = ship_event

	requirements = {
		shipclass_constructor = 1
	}
	
	on_success = {
		from = {
			if = {
				limit = { higher_capture_chance = yes }
				root = { ship_event = { id = mzilli_capture_ships.7 } }
				random_country = {
					limit = { prev = { has_ship_flag = belonged_to_@prev } }
					country_event = { id = mzilli_capture_ships.8 }
				}
			}
			random_country = {
				limit = { prev = { has_ship_flag = belonged_to_@prev } }
				prev = { remove_ship_flag = belonged_to_@prev }
			}
			set_disabled = no
			remove_modifier = mzilli_disabled_ship_modifier
			fleet = {
				#set_event_locked = no
				set_owner = root.owner
			}
		}
		every_country = {
			limit = { has_special_project = MZILLI_RECOVER_SHIP }
			abort_special_project = {
				type = MZILLI_RECOVER_SHIP
				location = from
			}
		}
	}
	
	on_fail = {
		every_country = {
			limit = { has_special_project = MZILLI_RECOVER_SHIP }
			abort_special_project = {
				type = MZILLI_RECOVER_SHIP
				location = fromfrom
			}
		}
		fromfrom = { destroy_ship = this }
	}
}