# Defaults for solar system strategic value scoring.
@acemod_var_solar_system_target_value_tier1 = 10
@acemod_var_solar_system_target_value_tier2 = 100
@acemod_var_solar_system_target_value_tier3 = 200
@acemod_var_solar_system_target_value_tier4 = 400
# Prevents ACEMOD from piloting marked fleets.
# Scope: fleet ship
acemod_set_fleet_piloted_exclusion_on = {
	set_variable = {
		which = acemod_var_fleet_piloted_exclusion
		value = 1
	}
}

# Resumes default operation.
# Scope: fleet ship
acemod_set_fleet_piloted_exclusion_off = {
	set_variable = {
		which = acemod_var_fleet_piloted_exclusion
		value = 0
	}
}

# Prevents ACEMOD from piloting fleets of given country. Use this if you don't want vanilla crisis country to be piloted. See acemod_fleet.9 event.
# Scope: country
acemod_set_country_piloted_exclusion_on = {
	set_variable = {
		which = acemod_var_country_piloted_exclusion
		value = 1
	}
	remove_country_flag = acemod_assisted_ai
}

# Removes exclusion *and* enables ACEMOD for given country. Does not activate global ACEMOD fleet AI (acemod_activated flag) if you had it off.
# Scope: country
acemod_set_country_piloted_exclusion_off = {
	set_variable = {
		which = acemod_var_country_piloted_exclusion
		value = 0
	}
	set_country_flag = acemod_assisted_ai
}

# Prevents ACEMOD technologies from rolling for given country (weight_modifier = 0). Overrides country technology_allowed flag.
# Scope: country
acemod_set_country_technology_exclusion_on = {
	set_variable = {
		which = acemod_var_country_technology_exclusion
		value = 1
	}
}

# Resumes default operation.
# Scope: country
acemod_set_country_technology_exclusion_off = {
	set_variable = {
		which = acemod_var_country_technology_exclusion
		value = 0
	}
}

# Prevents ACEMOD from issuing constructor reinforcements.
# Scope: country
acemod_set_country_constructor_reinforcements_exclusion_on = {
	set_variable = {
		which = acemod_var_country_constructor_reinforcements_exclusion
		value = 1
	}
}

# Resumes default operation.
# Scope: country
acemod_set_country_constructor_reinforcements_exclusion_off = {
	set_variable = {
		which = acemod_var_country_constructor_reinforcements_exclusion
		value = 0
	}
}

# Prevents ACEMOD from issuing defensive jumpdrive protocol.
# Scope: country
acemod_set_country_acemod_defensive_jumpdrive_protocol_exclusion_on = {
	set_variable = {
		which = acemod_var_country_defensive_jumpdrive_protocol_exclusion
		value = 1
	}
}

# Resumes default operation.
# Scope: country
acemod_set_country_acemod_defensive_jumpdrive_protocol_exclusion_off = {
	set_variable = {
		which = acemod_var_country_defensive_jumpdrive_protocol_exclusion
		value = 0
	}
}

# Scope: solar_system
acemod_recalculate_solar_system_target_value = {
	set_variable = {
		which = acemod_var_solar_system_target_value
		value = 0
	}
	acemod_calculate_solar_system_target_value = yes
}

# Scope: solar_system
acemod_calculate_solar_system_target_value = {
	if = {
		limit = {
			exists = owner
		}
		change_variable = {
			which = acemod_var_solar_system_target_value
			value = @acemod_var_solar_system_target_value_tier1
		}
	}
	every_system_planet = {
		limit = {
			exists = owner
			OR = {
				is_colony = yes
				is_under_colonization = yes
			}
		}
		prev = {
			change_variable = {
				which = acemod_var_solar_system_target_value
				value = @acemod_var_solar_system_target_value_tier2
			}
		}
		if = {
			limit = {
				is_capital = yes
			}
			prev = {
				change_variable = {
					which = acemod_var_solar_system_target_value
					value = @acemod_var_solar_system_target_value_tier4
				}
			}
		}
	}
}

# Scope: fleet
acemod_response_effect = {
	set_timed_fleet_flag = {
		flag = acemod_fleet_flag_response_team
		days = 240
	}
	clear_orders = yes	# Unstucks fleet if caught in a queued actions loop.
	clear_fleet_actions = this	# Unstucks fleet if caught in a queued actions loop.
	queue_actions = {
		attack_fleet = {
			target = root			# Issues direct order for response fleet to attack perpetrator.
		}
	}
	root.from = {
		set_timed_star_flag = {
			flag = acemod_star_flag_response_issued
			days = 480
		}
		every_fleet_in_system = {
			limit = {
				is_ship_class = shipclass_military
				owner = {
					is_hostile = root.from.owner
				}
			}
			set_timed_fleet_flag = {
				flag = acemod_fleet_flag_response_target				# Marks all perpetrator fleets in the system as targeted. We only need one response per indcident.
				days = 480
			}
		}
	}
}

# Scope: planet, fleet, ship, ambient_object
acemod_spawn_ai_colossus = {
	create_fleet = {
		name = "NAME_ACEMOD_AI_COLOSSUS"
		effect = {
			set_owner = root
			create_ship = {
				name = NAME_ACEMOD_AI_COLOSSUS
				design = "NAME_ACEMOD_AI_COLOSSUS"
				graphical_culture = acemod_ai
			}
			set_location = {
				target = event_target:acemod_event_target_colossus_spawn_point
				distance = 10
				angle = random
			}
			save_event_target_as = acemod_event_target_ai_colossus
			root = {
				change_variable = {
					which = acemod_var_country_num_colossus_spawned					# Debug.
					value = 1
				}
				change_variable = {
					which = acemod_var_country_num_ai_colossus_spawned					# Debug.
					value = 1
				}
			}
			event_target:global_event_country = {
				change_variable = {
					which = acemod_var_country_num_colossus_spawned					# Debug.
					value = 1
				}
				change_variable = {
					which = acemod_var_country_num_ai_colossus_spawned					# Debug.
					value = 1
				}
			}
		}
	}
}

# Scope: country. This effect minimalises error.log spam.
acemod_dmm_add_button_exception = {
	if = {
		limit = {
			is_multiplayer = yes
			NOT = {
				is_same_value = root				# Prevents players from locking themselves out in a multiplayer game.
			}
		}
		if = {
			limit = {
				NOT = {
					event_target:dmm_global_country = {
						any_owned_leader = {
							has_leader_flag = acemod_aggressive_crisis_engine_menu_name_flag
							has_leader_flag = dmm_display_exception_for_@prevprev
						}
					}
				}
			}
			dmm_add_button_exception = {
				DMM_FLAG = acemod_aggressive_crisis_engine_menu_name_flag
			}
			root = {
				country_event = {
					id = acemod_menu.3
					days = 0
					random = 0
				}
			}
		}
		else = {
			dmm_remove_button_exception = {
				DMM_FLAG = acemod_aggressive_crisis_engine_menu_name_flag
			}
			root = {
				country_event = {
					id = acemod_menu.3
					days = 0
					random = 0
				}
			}
		}
	}
	else_if = {
		limit = {
			is_multiplayer = no
		}
		if = {
			limit = {
				NOT = {
					event_target:dmm_global_country = {
						any_owned_leader = {
							has_leader_flag = acemod_aggressive_crisis_engine_menu_name_flag
							has_leader_flag = dmm_display_exception_for_@prevprev
						}
					}
				}
			}
			dmm_add_button_exception = {
				DMM_FLAG = acemod_aggressive_crisis_engine_menu_name_flag
			}
			root = {
				country_event = {
					id = acemod_menu.3
					days = 0
					random = 0
				}
			}
		}
		else = {
			dmm_remove_button_exception = {
				DMM_FLAG = acemod_aggressive_crisis_engine_menu_name_flag
			}
			root = {
				country_event = {
					id = acemod_menu.3
					days = 0
					random = 0
				}
			}
		}
	}
	else = {
		root = {
			country_event = {
				id = acemod_menu.3
				days = 0
				random = 0
			}
		}
	}
}
