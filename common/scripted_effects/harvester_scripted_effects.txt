# This must be run when the crisis is triggered
# Runs in country scope
begin_crisis_harvester = {
	if = {
		limit = { has_global_flag = harvester_allowed }
		set_global_flag = midgame_crisis_ongoing
		set_global_flag = harvester_in_progress
		set_global_flag = harvester_fired
		
		# Fire the event that triggers the crisis
		country_event = { id = harvester.0 } 
	}
}

# Run this once the crisis is finished to clear flags
resolve_crisis_harvester = {
	remove_global_flag  = midgame_crisis_ongoing
	remove_global_flag = harvester_in_progress
	event_target:harvester_country = { destroy_country = yes }	
}


# Country scope, run to spawn the main harvester fleet
spawn_harvester_fleet = {
# First set our variables
	get_galaxy_setup_value = { 
		which = harvester_scaling
		setting = crisis_strength_scale
	}
	if = {
		limit = {
			check_variable = { 
				which = harvester_scaling
				value > 10
			}
		}
		set_variable = {
			which = harvester_scaling
			value = 10
		}
	}
	if = {
		limit = {
			check_variable = { 
				which = harvester_scaling
				value < 1
			}
		}
		set_variable = {
			which = harvester_scaling
			value = 1
		}
	}
	set_variable = {
		which = beamcage_scaling
		value = @harvester_beamcage_ship_count
	}
	set_variable = {
		which = beamcage_boss_scaling
		value = @harvester_beamcage_boss_fleet_ship_count
	}	
	multiply_variable = {
		which = beamcage_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = beamcage_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = beamcage_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = beamcage_scaling
				value < @harvester_beamcage_ship_count
			}
		}
		set_variable = {
			which = beamcage_scaling
			value = @harvester_beamcage_ship_count
		}
	}	
	multiply_variable = {
		which = beamcage_boss_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = beamcage_boss_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = beamcage_boss_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = beamcage_boss_scaling
				value < @harvester_beamcage_boss_fleet_ship_count
			}
		}
		set_variable = {
			which = beamcage_boss_scaling
			value = @harvester_beamcage_boss_fleet_ship_count
		}
	}	
	set_variable = {
		which = escort_scaling
		value = @harvester_escort_ship_count
	}
	set_variable = {
		which = escort_boss_scaling
		value = @harvester_escort_boss_fleet_ship_count
	}	
	multiply_variable = {
		which = escort_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = escort_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = escort_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = escort_scaling
				value < @harvester_escort_ship_count
			}
		}
		set_variable = {
			which = escort_scaling
			value = @harvester_escort_ship_count
		}
	}	
	multiply_variable = {
		which = escort_boss_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = escort_boss_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = escort_boss_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = escort_boss_scaling
				value < @harvester_escort_boss_fleet_ship_count
			}
		}
		set_variable = {
			which = escort_boss_scaling
			value = @harvester_escort_boss_fleet_ship_count
		}
	}	
	set_variable = {
		which = destroyer_scaling
		value = @harvester_destroyer_ship_count
	}
	set_variable = {
		which = destroyer_boss_scaling
		value = @harvester_destroyer_boss_fleet_ship_count
	}	
	multiply_variable = {
		which = destroyer_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = destroyer_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = destroyer_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = destroyer_scaling
				value < @harvester_destroyer_ship_count
			}
		}
		set_variable = {
			which = destroyer_scaling
			value = @harvester_destroyer_ship_count
		}
	}	
	multiply_variable = {
		which = destroyer_boss_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = destroyer_boss_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = destroyer_boss_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = destroyer_boss_scaling
				value < @harvester_destroyer_boss_fleet_ship_count
			}
		}
		set_variable = {
			which = destroyer_boss_scaling
			value = @harvester_destroyer_boss_fleet_ship_count
		}
	}	
	set_variable = {
		which = corvette_scaling
		value = @harvester_corvette_ship_count
	}
	set_variable = {
		which = corvette_boss_scaling
		value = @harvester_corvette_boss_fleet_ship_count
	}	
	multiply_variable = {
		which = corvette_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = corvette_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = corvette_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = corvette_scaling
				value < @harvester_corvette_ship_count
			}
		}
		set_variable = {
			which = corvette_scaling
			value = @harvester_corvette_ship_count
		}
	}	
	multiply_variable = {
		which = corvette_boss_scaling
		value = harvester_scaling
	}
	divide_variable = {
		which = corvette_boss_scaling
		value = 2
	}
	round_variable_to_closest = {
		which = corvette_boss_scaling
		value = 1
	}
	if = {
		limit = {
			check_variable = { 
				which = corvette_boss_scaling
				value < @harvester_corvette_boss_fleet_ship_count
			}
		}
		set_variable = {
			which = corvette_boss_scaling
			value = @harvester_corvette_boss_fleet_ship_count
		}
	}	
	set_variable = {
		which = harvester_fleet_scaling
		value = @harvester_max_rcu_fleet_count
	}
	multiply_variable = {
		which = harvester_fleet_scaling
		value = harvester_scaling
	}
	#Now spawn our fleet
	create_fleet = { 
		name = "harvest_engine_fleet"
		settings = {
			is_boss = yes
			spawn_debris = no
		}		
		effect = { 
			set_owner = event_target:harvester_country
			set_location = event_target:harvester_location
			save_global_event_target_as = harvester_boss_fleet
			set_fleet_flag = "harvest_engine"
			# Create Harvest Engine
			create_ship = {
				name = "harvest_engine_title"
				design = NAME_Harvest_Engine
            }
			# Create its escorts
			spawn_harvester_ships = yes
			set_shiva_admiral = yes
			harvester_ai = yes
		}
	}
}

#Fleet Scope, Creates SHI-VA as admiral
set_shiva_admiral = {
	owner = {
		clone_leader = {
			target = event_target:shiva_ai_ruler
			class = admiral
			skill = 10
			traits = {
				trait = trait_harvester_shiva
			}
			effect = {
				set_leader_flag = shiva_ai
				save_global_event_target_as = shiva_ai_admiral
			}
		}
	}
	assign_leader = event_target:shiva_ai_admiral
}

# Country scope, run to spawn the rcu fleets
spawn_rcu_fleet = {
	create_fleet = { 
		name = "harvest_rcu_fleet"
		settings = {
			spawn_debris = no
		}		
		effect = { 
			set_owner = event_target:harvester_country
			set_location = event_target:harvester_location
			set_fleet_flag = "harvest_rcu"
			save_event_target_as = rcu_fleet
			# Create the rcu
			create_ship = {
				name = "harvest_rcu"
				design = NAME_Harvest_RCU
            }
			# Create its escorts
			spawn_harvester_ships = yes
			set_subai_admiral = yes
			set_rcu_ai = yes
		}
	}
}

#Fleet Scope, Creates Sub-AI Admiral
set_subai_admiral = {
	owner = {
		create_leader = {
			class = admiral
			species = event_target:harvester_species
			name = "SHI-VA Submind"
			skill = 3
			leader_age_min = 1
			leader_age_max = 1
			traits = {
				trait = trait_harvester_subai
			}
		}
	}
	assign_leader = last_created_leader
}

set_subai_loyalist_admiral = {
	owner = {
		create_leader = {
			name = "Loyalist SHI-VA Submind"
			species = event_target:harvester_species
			class = admiral
			skill = 5
			traits = {
				trait = trait_harvester_loyal_subai
			}
		}
	}
	assign_leader = last_created_leader
}

# Fleet scope, run to add ships to fleet
spawn_harvester_ships = {
	
	# Add corvettes
	while = {
		limit = { harvester_need_corvettes = yes}
		create_ship = {
			name = "harvest_corvette"
			design = NAME_Harvest_Combat_Drone
        }
	}
	while = {
		limit = { harvester_need_destroyers = yes}
		create_ship = {
			name = "harvest_destroyer"
			design = NAME_Harvest_Destroyer
        }
	}
	while = {
		limit = { harvester_need_escorts = yes}
		create_ship = {
			name = "harvest_escort"
			design = NAME_Harvest_Escort
		}
	}
	while = {
		limit = { harvester_need_beamcage = yes}
		create_ship = {
			name = "harvest_beamcage"
			design = NAME_Mobile_Siege_Cannon
		}
	}	
}

# Fleet scope, runs the Harvester behaviour

harvester_ai = {
	clear_fleet_actions = this
	clear_orders = yes
	save_global_event_target_as = harvester_boss_fleet
	
	queue_actions = {
		# Find any local planets first, this is important for if we need to reset the AI
		repeat = {
			find_closest_planet = {
				trigger = {
					id = harvester.ai.1
					OR = {
						has_modifier = harvester_beacon
						has_modifier = harvester_priority_beacon
					}
				}
				found_planet = {
					orbit_planet = THIS
					effect = {
						id = harvester.ai.2
						if = {
							limit = { is_colony = yes }
							planet_event = { id = harvester.14 }
						}
						
						add_modifier = {
							modifier = "harvest_in_progress"
							days = 360
						}
						#save_global_event_target_as = harvester_victim
					}
					repeat = {
						while = {
							id = harvester.ai.3
							OR = {
								has_modifier = harvester_beacon
								has_modifier = harvester_priority_beacon
							}
						}
						wait = 45 #45
						effect = {
							id = harvester.ai.4
							if = {
								limit = {
									OR = {
										has_modifier = harvester_beacon
										has_modifier = harvester_priority_beacon
									}
								}
								planet_event = { id = harvester.2001 }
							}
						}
					}
				}
				failed = {
				#find the nearest beacon, priority ones first
					find_closest_system = {
						trigger = {
							id = harvester.ai.5
							distance = {
								source = event_target:harvester_boss_fleet
								min_jumps = 0
								max_jumps = 200
								bypass_empire = event_target:harvester_country
							}
							any_system_planet = {
								has_modifier = harvester_priority_beacon
							}
						}
						found_system = {
							move_to = THIS
						}
						failed = {
							find_closest_system = {
								trigger = {
									id = harvester.ai.6
									distance = {
										source = event_target:harvester_boss_fleet
										min_jumps = 0
										max_jumps = 200
										bypass_empire = event_target:harvester_country
									}
									any_system_planet = {
										has_modifier = harvester_beacon
									}
								}
								found_system = {
									move_to = THIS									
								}
							}
						}
					}				
				}
			}
		}
	}
}

# Fleet Scope, sets default RCU Fleet AI when spawned
set_rcu_ai = {
	clear_orders = yes
	clear_fleet_actions = this
	queue_actions = {
		repeat = {
			# First, lets check for any more crackable worlds in this system. Might as well plant beacons while we're here
			find_closest_planet = {
				trigger = {
					id = harvester.rcuai.1
					AND = {
						harvester_is_crackable = yes
						NOT = { has_modifier = harvester_beacon }
						NOT = { has_modifier = harvester_placing_beacon }
					}
				}
				found_planet = {
					effect = {
						id = harvester.rcuai.2
						#set_planet_flag = rcu_marked
						save_event_target_as = rcu_target
						add_modifier = {
							modifier = "harvester_placing_beacon"
							days = 100
						}
					}
					orbit_planet = THIS
					effect = {
						id = "warn_player" # Nice IDs Arch
						# Warning event
						if = {
							limit = { is_colony = yes }
							planet_event = { id = harvester.18 }
						}	
					}
					wait = {
						duration = 90
					}
					effect = {
						id = harvester.rcuai.3
						add_modifier = {
							modifier = "harvester_beacon"
							days = -1
						}
						# Increment beacons placed
						every_playable_country = {
							add_event_chain_counter = {
								event_chain = harvester_chain
								counter = beacons_placed
								amount = 1
							}
						}
						remove_planet_flag = rcu_target	
						# Warning event
						if = {
							limit = { is_colony = yes }
							planet_event = { id = harvester.17 }
						}					
					}
				}
				failed = {
					# We couldn't find anything in the system, find me a random system within 5 jumps to work with
					find_random_system = {
						trigger = {
							id = harvester.rcuai.4
							distance = { 
								source = PREV
								min_jumps = 1
								max_jumps = 5
								bypass_empire = event_target:harvester_country
							}
							any_system_planet = {
								harvester_is_crackable = yes
								NOT = { has_modifier = harvester_beacon }
								NOT = { has_modifier = harvester_placing_beacon }
							}
							NOT = {
								any_fleet_in_system = {
									has_fleet_flag = harvest_rcu
								}
							}						
						}
						found_system = {
							move_to = THIS
						}
						failed = {
							# Couldn't find anything in 5 jumps, lets just find the closest eligible system
							find_closest_system = {
								trigger = {
									id = harvester.rcuai.5
									distance = { 
										source = PREV
										min_jumps = 1
										max_jumps = 100
										bypass_empire = event_target:harvester_country
									}
									any_system_planet = {
										harvester_is_crackable = yes
										NOT = { has_modifier = harvester_beacon }
										NOT = { has_modifier = harvester_placing_beacon }
									}
									NOT = {
										any_fleet_in_system = {
											has_fleet_flag = harvest_rcu
										}
									}						
								}
								found_system = {
									move_to = THIS
								}
							}								
						}
					}
				}						
			}
		}
	}
}

# Ship Scope, the RCU is dead, so the fleet goes rogue
set_rogue_fleet = {
	fleet = {		
		set_owner = event_target:drone_country
		set_name = "rogue_harvester_fleet"
		clear_orders = yes
		clear_fleet_actions = this
		set_fleet_flag = "rogue_harvest_fleet"
	}
}

# System scope. I think. Adds 2 new hyperlanes
add_hyperlane_links = {
	save_event_target_as = hyperlane_source
	
	# First hyperlane
	random_neighbor_system_euclidean = {
		limit = { NOT = { has_hyperlane_to = event_target:hyperlane_source } }
		save_event_target_as = hyperlane_target
		add_hyperlane = { 
			from = event_target:hyperlane_source 
			to = event_target:hyperlane_target
		}
	}
	
	# Second hyperlane
	random_neighbor_system_euclidean = {
		limit = { NOT = { has_hyperlane_to = event_target:hyperlane_source } }
		save_event_target_as = hyperlane_target
		add_hyperlane = { 
			from = event_target:hyperlane_source 
			to = event_target:hyperlane_target
		}
	}
}

# Country Scope, creates fleet
create_harvester_relic_fleet = {
	capital_scope = {
		create_fleet = {
			name = "NAME_SHIVA_Loyalists"
			effect = {
				while = {
					count = 1
					create_ship = {
						name = "harvest_escort"
						design = NAME_Harvest_Escort
					}
				}
				while = {
					count = 5
					create_ship = {
						name = "harvest_destroyer"
						design = NAME_Harvest_Destroyer
					}
				}
				while = {
					count = 7
					create_ship = {
						name = "harvest_corvette"
						design = NAME_Harvest_Combat_Drone
					}
				}				
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				set_subai_loyalist_admiral = yes
			}
			settings = {
				can_upgrade = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

# Country Scope, creates subai governor
create_harvester_subai_governor = {
	create_leader = {
		name = "Loyalist SHI-VA Submind"
		species = event_target:harvester_species
		class = governor
		skill = 5
		traits = {
			trait = trait_harvester_loyal_subai_governor
		}
	}
}

# Situation Scope, gets the empire's research and sets variable so situation progress is based on actual science income
harvester_situation_get_tech_output = {
	owner = {
		export_resource_income_to_variable = { resource = physics_research variable = harvester_situation_phy_upkeep }
		export_resource_income_to_variable = { resource = society_research variable = harvester_situation_soc_upkeep }
		export_resource_income_to_variable = { resource = engineering_research variable = harvester_situation_eng_upkeep }
		
		set_variable = {
			which = harvester_situation_progress
			value = 0
		}		
		#First, get the science output and turn it into a flat number
		change_variable = {
			which = harvester_situation_progress
			value = harvester_situation_phy_upkeep
		}
		change_variable = {
			which = harvester_situation_progress
			value = harvester_situation_soc_upkeep
		}
		change_variable = {
			which = harvester_situation_progress
			value = harvester_situation_eng_upkeep
		}		
		divide_variable = {
			which = harvester_situation_progress
			value =  1000
		}
		round_variable_to_closest = {
			which = harvester_situation_progress
			value = 0.01
		}
		#Now we get the multiplier for the situation
		#First scope back and get our situation flags
		if = {
			limit = {
				prev = {
					has_situation_flag = fast_harvester
				}
			}
			owner = {
				set_variable = {
					which = situation_harvester_scaling_mult
					value = 0.4
				}
			}
		}
		if = {
			limit = {
				prev = {
					has_situation_flag = normal_harvester
				}
			}
			owner = {
				set_variable = {
					which = situation_harvester_scaling_mult
					value = 0.2
				}
			}
		}
		if = {
			limit = {
				prev = {
					has_situation_flag = slow_harvester
				}
			}
			owner = {
				set_variable = {
					which = situation_harvester_scaling_mult
					value = 0.1
				}
			}
		}			

		multiply_variable = {
			which = harvester_situation_progress
			value = situation_harvester_scaling_mult
		}
		#Now create the upkeep
		multiply_variable = {
			which = harvester_situation_phy_upkeep
			value = situation_harvester_scaling_mult
		}
		multiply_variable = {
			which = harvester_situation_soc_upkeep
			value = situation_harvester_scaling_mult
		}
		multiply_variable = {
			which = harvester_situation_eng_upkeep
			value = situation_harvester_scaling_mult
		}			
	}
}

# Country Scope - Picked up on situation start + monthly update
set_harvester_analysis_upkeep = {
	export_resource_income_to_variable = { resource = physics_research variable = harvester_situation_phy_upkeep }
	export_resource_income_to_variable = { resource = society_research variable = harvester_situation_soc_upkeep }
	export_resource_income_to_variable = { resource = engineering_research variable = harvester_situation_eng_upkeep }
}
