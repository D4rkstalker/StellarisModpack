
ag_beta_psionic_system_effect = {
	optimize_memory
	every_system_ambient_object = {
		limit = { has_ambient_object_flag = ag_beta_psionic_system_effect }
		destroy_ambient_object = this
	}
	if = { limit = { has_star_flag = ag_beta_psionic_system_1 } remove_star_flag = ag_beta_psionic_system_1 remove_modifier = ag_beta_psionic_environment_1 }
	if = { limit = { has_star_flag = ag_beta_psionic_system_2 } remove_star_flag = ag_beta_psionic_system_2 remove_modifier = ag_beta_psionic_environment_2 }
	if = { limit = { has_star_flag = ag_beta_psionic_system_3 } remove_star_flag = ag_beta_psionic_system_3 remove_modifier = ag_beta_psionic_environment_3 }
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = ag_zero_variable value < $ag_level$ } } }
		set_star_flag = ag_beta_psionic_system_$ag_level$
		event_target:global_event_country = { if = {
			limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } check_variable = { which = ag_one_variable value = $ag_level$ } }
			change_variable = { which = ag_beta_num_systems_temp value = 1 }
		} }
		add_modifier = {
			modifier = ag_beta_psionic_environment_$ag_level$
			days = -1
		}
		star = {
			create_ambient_object = {
				type = ag_beta_psionic_system_effect_$ag_level$
				location = this
			}
			last_created_ambient_object = {
				set_ambient_object_flag = ag_beta_psionic_system_effect
				set_ambient_object_flag = ag_beta_psionic_system_effect_$ag_level$
				set_location = {
					target = prev
					distance = 0
					angle = random
				}
			}
		}
	}
	else = { if = {
		limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } }
		event_target:global_event_country = { subtract_variable = { which = ag_beta_num_systems_temp value = 1 } }
	} }
	every_system_planet = {
		limit = { is_star = no is_asteroid = no }
		if = { limit = { has_modifier = ag_atmospheric_aphrodisiac_0 } remove_modifier = ag_atmospheric_aphrodisiac_0 }
		if = { limit = { has_modifier = ag_atmospheric_aphrodisiac_1 } remove_modifier = ag_atmospheric_aphrodisiac_1 }
		if = { limit = { has_modifier = ag_atmospheric_aphrodisiac_2 } remove_modifier = ag_atmospheric_aphrodisiac_2 }
		if = { limit = { has_modifier = ag_atmospheric_aphrodisiac_3 } remove_modifier = ag_atmospheric_aphrodisiac_3 }
		if = { limit = { has_planet_flag = ag_atmospheric_aphrodisiac_1 } remove_planet_flag = ag_atmospheric_aphrodisiac_1 }
		if = { limit = { has_planet_flag = ag_atmospheric_aphrodisiac_2 } remove_planet_flag = ag_atmospheric_aphrodisiac_2 }
		if = { limit = { has_planet_flag = ag_atmospheric_aphrodisiac_3 } remove_planet_flag = ag_atmospheric_aphrodisiac_3 }
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = ag_zero_variable value < $ag_level$ } } }
			add_modifier = { modifier = ag_atmospheric_aphrodisiac_$ag_level$ days = -1 }
			event_target:global_event_country = { if = {
				limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } check_variable = { which = ag_one_variable value = $ag_level$ } }
				change_variable = { which = ag_beta_num_planets_temp value = 1 }
			} }
			set_planet_flag = ag_atmospheric_aphrodisiac_$ag_level$
			set_planet_flag = ag_beta_psionic_affected_planet
			if = {
				limit = {
					NOT = { is_same_value = event_target:ag_ancient_beta_shielded_world }
					exists = owner
					owner = { NOR = {
						has_country_flag = ag_beta_31_fired
						has_country_flag = ag_beta_31_banned
					} }
				}
				owner = {
					if = {
						limit = { NOT = { has_country_flag = ag_beta_31_fired } }
						prev = { planet_event = { id = ag_beta.31 } }
					}
					else = { prev = { planet_event = { id = ag_beta.32 } } }
				}
			}
		}
		else = {
			remove_planet_flag = ag_beta_psionic_affected_planet
			if = {
				limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } }
				event_target:global_event_country = { subtract_variable = { which = ag_beta_num_planets_temp value = 1 } }
			}
		}
	}
}
ag_beta_set_blocker = {
	optimize_memory
	if = {
		limit = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
		while = {
			count = $ag_num_blockers$
			random_list = { 50 = { } 50 = { add_deposit = ag_beta_dense_jungle_deposit_ringworld } }
			reroll_random = yes
		}
	}
	else = {
		if = {
			limit = { ag_is_habitat = yes }
			while = { count = $ag_num_blockers$ add_deposit = ag_beta_dense_jungle_deposit_habitat }
		}
		else = { while = { count = $ag_num_blockers$ add_deposit = ag_beta_dense_jungle_deposit } }
	}
	owner = { change_variable = { which = ag_beta_num_blockers_country value = 1 } }
	if = {
		limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } }
		event_target:global_event_country = { change_variable = { which = ag_beta_num_blockers_temp value = 1 } }
	}
}
ag_beta_kill_pop = {
	optimize_memory
	random_list = {
		25 = { modifier = { factor = 0 NOT = { has_modifier = ag_beta_protection } } }
		75 = { random_owned_pop = { kill_pop = yes } }
	}
	reroll_random = yes
	change_variable = { which = ag_beta_num_victims_planet value = 1 }
	owner = {
		change_variable = { which = ag_beta_num_victims_country value = 1 }
		if = {
			limit = {
				NOR = {
					has_country_flag = ag_beta_41_fired
					has_country_flag = ag_beta_41_trigger_cooldown
				}
				OR = {
					AND = {
						exists = capital_scope
						capital_scope.solar_system = {
							OR = {
								has_star_flag = ag_beta_psionic_system_2
								has_star_flag = ag_beta_psionic_system_3
							}
						}
					}
					check_variable = { which = ag_beta_num_victims_country value >= 8 }
				}
			}
			if = {
				limit = {
					NOR = {
						has_country_flag = ag_beta_41_fired
						has_country_flag = ag_beta_41_trigger_cooldown
					}
					check_variable = { which = ag_beta_num_victims_country value >= 88 }
				}
				country_event = { id = ag_beta.41 days = 30 random = 30 }
			}
			else = {
				random_list = {
					95 = {
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 16 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 24 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 32 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 40 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 48 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 56 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 64 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 72 } }
						modifier = { add = -10 check_variable = { which = ag_beta_num_victims_country value >= 80 } }
						set_timed_country_flag = { flag = ag_beta_41_trigger_cooldown days = 30 }
					}
					5 = {
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 16 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 24 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 32 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 40 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 48 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 56 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 64 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 72 } }
						modifier = { add = 10 check_variable = { which = ag_beta_num_victims_country value >= 80 } }
						country_event = { id = ag_beta.41 days = 30 random = 30 }
					}
				}
				reroll_random = yes
			}
		}
	}
	if = {
		limit = { NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended } }
		event_target:global_event_country = { change_variable = { which = ag_beta_num_victims_temp value = 1 } }
	}
}
ag_beta_planet_debuff_check = {
	optimize_memory
	if = {
		limit = { exists = owner owner = { is_gestalt = no NOT = { has_country_flag = ag_beta_34_cooldown } } }
		random_list = { 3 = { planet_event = { id = ag_beta.34 } } 97 = { } }
		reroll_random = yes
	}
}
ag_beta_destroy_planet_check = {
	optimize_memory
	if = {
		limit = { num_pops < 3 }
		if = { limit = { has_modifier = ag_beta_planet_unstable } remove_modifier = ag_beta_planet_unstable }
		add_planet_devastation = -100
		remove_all_districts = yes
		if = {
			limit = { ag_is_ringworld = yes ag_is_unhabitable_ringworld = no }
			ag_beta_destroy_planet_set_blocker = { ag_planet_class = ringworld }
		}
		else_if = {
			limit = { ag_is_habitat = yes }
			ag_beta_destroy_planet_set_blocker = { ag_planet_class = habitat }
		}
		else_if = {
			limit = { always = yes }
			ag_beta_destroy_planet_set_blocker = yes
		}
		planet_event = { id = ag_beta.35 }
	}
}
ag_beta_destroy_planet_set_blocker = {
	optimize_memory
	while = {
		count = trigger:planet_size
		add_deposit = ag_beta_dense_jungle_deposit[[ag_planet_class]_$ag_planet_class$]
	}
}

ag_beta_spawn_signal_station = {
	optimize_memory
	random_system = {
		limit = { NOR = { has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system } }
		save_event_target_as = $ag_system_to_spawn$_loc
	}
	event_target:$ag_system_to_spawn$_loc = {
		spawn_system = {
			min_distance >= 20
			max_distance <= 50
			initializer = $ag_system_to_spawn$
			hyperlane = no
		}
	}
}

ag_beta_signal_station_event_chain_check = {
	optimize_memory
	if = {
		limit = {
			NOT = {
				has_event_chain = "ag_hidden_system_chain"
			}
		}
		begin_event_chain = {
			event_chain = "ag_hidden_system_chain"
			target = root.owner
		}
	}
}

ag_beta_psionic_patten_chain_check = {
	optimize_memory
	if = {
		limit = { NOT = { has_event_chain = "ag_beta_station_chain" } }
		begin_event_chain = {
			event_chain = "ag_beta_station_chain"
			target = root
		}
		create_point_of_interest = {
			id = ag_beta_station_system_1
			name = "ag_beta_station_system_1"
			desc = "ag_beta_station_system_1_desc"
			event_chain = ag_beta_station_chain
			location = event_target:ag_beta_station_system_1_star
		}
		create_point_of_interest = {
			id = ag_beta_station_system_2
			name = "ag_beta_station_system_2"
			desc = "ag_beta_station_system_2_desc"
			event_chain = ag_beta_station_chain
			location = event_target:ag_beta_station_system_2_star
		}
		create_point_of_interest = {
			id = ag_beta_station_system_3
			name = "ag_beta_station_system_3"
			desc = "ag_beta_station_system_3_desc"
			event_chain = ag_beta_station_chain
			location = event_target:ag_beta_station_system_3_star
		}
	}
}
ag_beta_reset_poi = {
	optimize_memory
	save_event_target_as = ag_target_system
	switch = {
		trigger = has_star_flag
		ag_beta_station_system_1 = {
			root.owner = {
				set_country_flag = ag_beta_station_system_1_entered
				remove_point_of_interest = ag_beta_station_system_1
				create_point_of_interest = {
					id = ag_beta_station_system_1
					name = "ag_beta_station_system_1_alt"
					desc = "ag_ancient_coordinate"
					event_chain = "ag_hidden_system_chain"
					location = event_target:ag_beta_station_system_1_star
				}
			}
		}
		ag_beta_station_system_2 = {
			root.owner = {
				set_country_flag = ag_beta_station_system_2_entered
				remove_point_of_interest = ag_beta_station_system_2
				create_point_of_interest = {
					id = ag_beta_station_system_2
					name = "ag_beta_station_system_2_alt"
					desc = "ag_ancient_coordinate"
					event_chain = "ag_hidden_system_chain"
					location = event_target:ag_beta_station_system_2_star
				}
			}
		}
		ag_beta_station_system_3 = {
			root.owner = {
				set_country_flag = ag_beta_station_system_3_entered
				remove_point_of_interest = ag_beta_station_system_3
				create_point_of_interest = {
					id = ag_beta_station_system_3
					name = "ag_beta_station_system_3_alt"
					desc = "ag_ancient_coordinate"
					event_chain = "ag_hidden_system_chain"
					location = event_target:ag_beta_station_system_3_star
				}
			}
		}
	}
	root.owner = {
		add_event_chain_counter = {
			event_chain = "ag_hidden_system_chain"
			counter = ag_ancient_system
			amount = 1
		}
	}
}

ag_beta_psionic_station_effect_spawn = {
	optimize_memory
	if = {
		limit = { check_variable = { which = from.ag_beta_psionic_station_attack_range value = 1 } }
		event_target:ag_beta_psionic_station_target_1 = { ag_beta_psionic_station_effect = { ag_attack_range_index = 1 } }
	}
	else_if = {
		limit = { check_variable = { which = from.ag_beta_psionic_station_attack_range value = 2 } }
		event_target:ag_beta_psionic_station_target_1 = { ag_beta_psionic_station_effect = { ag_attack_range_index = 2 } }
		event_target:ag_beta_psionic_station_target_2 = { ag_beta_psionic_station_effect = { ag_attack_range_index = 2 } }
	}
	else_if = {
		limit = { check_variable = { which = from.ag_beta_psionic_station_attack_range value = 3 } }
		event_target:ag_beta_psionic_station_target_1 = {
			ag_beta_psionic_station_effect = { ag_attack_range_index = 3 }
			every_neighbor_system = { limit = { has_hyperlane_to = prev } ag_beta_psionic_station_effect = { ag_attack_range_index = 3 } }
		}
	}
	else_if = {
		limit = { check_variable = { which = from.ag_beta_psionic_station_attack_range value = 4 } }
		event_target:ag_beta_psionic_station_target_1 = {
			ag_beta_psionic_station_effect = { ag_attack_range_index = 4 }
			every_system = {
				limit = { NOT = { is_same_value = prev } distance = { source = prev use_bypasses = no type = euclidean min_distance = 0 max_distance = 50 } }
				ag_beta_psionic_station_effect = { ag_attack_range_index = 4 }
			}
		}
	}
	else_if = {
		limit = { check_variable = { which = from.ag_beta_psionic_station_attack_range value = 5 } }
		ag_beta_psionic_station_effect = { ag_attack_range_index = 5 }
	}
}
ag_beta_psionic_station_effect = {
	optimize_memory
	if = {
		limit = { NOR = {
			has_star_flag = ag_beta_psionic_system_1
			has_star_flag = ag_beta_psionic_system_2
			has_star_flag = ag_beta_psionic_system_3
		} }
		ag_beta_psionic_system_effect = { ag_level = 3 }
		system_event = { id = ag_beta.161 days = 60 random = 30 }
	}
	if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 1 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 8 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 2 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		floor_variable = ag_beta_psionic_station_var
		set_timed_star_flag = { flag = ag_beta_psionic_station_affected days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_1 days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_1_@root days = ag_beta_psionic_station_var }
		clear_variable = ag_beta_psionic_station_var
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = root
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
				NOT = { any_controlled_ship = { OR = {
					is_ship_class = shipclass_military_station
					is_ship_size = ag_gamma_station_small_moving_hostile
					is_ship_size = ag_epsilon_titan_hostile
					is_ship_size = ag_eta_titan_hostile
					is_ship_size = ag_ancient_wandering_ship_hostile
				} } }
			}
			clear_orders = yes
			clear_fleet_actions = this
			create_ambient_object = { type = "ag_beta_psionic_station_effect_object" }
			last_created_ambient_object = {
				set_ambient_object_flag = ag_beta_psionic_station_effect_1_loc
				set_location = prev
				prev = { set_location = prev fleet_event = { id = ag_beta.151 days = 1 scopes = { from = prev } } }
			}
		}
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 2 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 0 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 10 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = event_target:ag_beta_psionic_station_source_country
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
			}
			ag_reduce_hp_percent = { ag_value = ag_beta_psionic_station_var }
		}
		clear_variable = ag_beta_psionic_station_var
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 3 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 0.1 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 0.1 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		set_timed_star_flag = { flag = ag_beta_psionic_station_affected days = 8 }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_3 days = 8 }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_3_@root days = 8 }
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = event_target:ag_beta_psionic_station_source_country
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
			}
			if = { limit = { NOT = { has_fleet_flag = ag_beta_psionic_station_effect_3 } } set_fleet_flag = ag_beta_psionic_station_effect_3 }
			every_controlled_ship = {
				if = { limit = { has_modifier = "ag_beta_psionic_station_regen_buff_static" } remove_modifier = "ag_beta_psionic_station_regen_buff_static" }
				if = {
					limit = { check_modifier_value = { modifier = ship_hull_regen_add_static value > 0 } }
					export_modifier_to_variable = { modifier = ship_hull_regen_add_static variable = ag_beta_regen_debuff_temp_var }
					multiply_variable = { which = ag_beta_regen_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_regen_buff_static" multiplier = ag_beta_regen_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_regen_buff_perc" } remove_modifier = "ag_beta_psionic_station_regen_buff_perc" }
				if = {
					limit = { check_modifier_value = { modifier = ship_hull_regen_add_perc value > 0 } }
					export_modifier_to_variable = { modifier = ship_hull_regen_add_perc variable = ag_beta_regen_debuff_temp_var }
					multiply_variable = { which = ag_beta_regen_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_regen_buff_perc" multiplier = ag_beta_regen_debuff_temp_var days = -1 }
				}
				if = { limit = { is_variable_set = ag_beta_regen_debuff_temp_var } clear_variable = ag_beta_regen_debuff_temp_var }
			}
			fleet_event = { id = ag_beta.151 days = 1 }
		}
		clear_variable = ag_beta_psionic_station_var
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 4 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 0.075 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 0.025 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		set_timed_star_flag = { flag = ag_beta_psionic_station_affected days = 8 }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_4 days = 8 }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_4_@root days = 8 }
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = event_target:ag_beta_psionic_station_source_country
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
			}
			if = { limit = { NOT = { has_fleet_flag = ag_beta_psionic_station_effect_4 } } set_fleet_flag = ag_beta_psionic_station_effect_4 }
			every_controlled_ship = {
				if = { limit = { has_modifier = "ag_beta_psionic_station_energy_damage" } remove_modifier = "ag_beta_psionic_station_energy_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_energy_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_energy_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_energy_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_energy_fire_rate" } remove_modifier = "ag_beta_psionic_station_energy_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_energy_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_energy_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_energy_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_kinetic_damage" } remove_modifier = "ag_beta_psionic_station_kinetic_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_kinetic_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_kinetic_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_kinetic_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_kinetic_fire_rate" } remove_modifier = "ag_beta_psionic_station_kinetic_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_kinetic_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_kinetic_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_kinetic_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_explosive_damage" } remove_modifier = "ag_beta_psionic_station_explosive_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_explosive_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_explosive_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_explosive_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_explosive_fire_rate" } remove_modifier = "ag_beta_psionic_station_explosive_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_explosive_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_explosive_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_explosive_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_strike_craft_damage" } remove_modifier = "ag_beta_psionic_station_strike_craft_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_strike_craft_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_strike_craft_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_strike_craft_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_strike_craft_fire_rate" } remove_modifier = "ag_beta_psionic_station_strike_craft_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_strike_craft_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_strike_craft_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_strike_craft_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_gravity_damage" } remove_modifier = "ag_beta_psionic_station_gravity_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_gravity_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_gravity_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_gravity_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_gravity_fire_rate" } remove_modifier = "ag_beta_psionic_station_gravity_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_gravity_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_gravity_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_gravity_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_psionic_damage" } remove_modifier = "ag_beta_psionic_station_psionic_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_psionic_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_psionic_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_psionic_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_psionic_fire_rate" } remove_modifier = "ag_beta_psionic_station_psionic_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_psionic_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_psionic_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_psionic_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_anti_psionic_damage" } remove_modifier = "ag_beta_psionic_station_anti_psionic_damage" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_damage_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_anti_psionic_weapon_damage_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_anti_psionic_damage" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { has_modifier = "ag_beta_psionic_station_anti_psionic_fire_rate" } remove_modifier = "ag_beta_psionic_station_anti_psionic_fire_rate" }
				if = {
					limit = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_fire_rate_mult value > 0 } }
					export_modifier_to_variable = { modifier = weapon_type_anti_psionic_weapon_fire_rate_mult variable = ag_beta_weapon_debuff_temp_var }
					multiply_variable = { which = ag_beta_weapon_debuff_temp_var value = prev.ag_beta_psionic_station_var }
					add_modifier = { modifier = "ag_beta_psionic_station_anti_psionic_fire_rate" multiplier = ag_beta_weapon_debuff_temp_var days = -1 }
				}
				if = { limit = { is_variable_set = ag_beta_weapon_debuff_temp_var } clear_variable = ag_beta_weapon_debuff_temp_var }
			}
			fleet_event = { id = ag_beta.151 days = 1 }
		}
		clear_variable = ag_beta_psionic_station_var
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 5 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 6 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 2 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		floor_variable = ag_beta_psionic_station_var
		set_timed_star_flag = { flag = ag_beta_psionic_station_affected days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_5 days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_5_@root days = ag_beta_psionic_station_var }
		random_neighbor_system = {
			limit = {
				has_hyperlane_to = prev
				NOR = {
					has_star_flag = ag_beta_psionic_station_effect_5
					AND = { exists = space_owner prev = { has_star_flag = ag_beta_psionic_station_effect_5_@prev.space_owner } }
				}
			}
			save_event_target_as = ag_fleet_evasion_loc
		}
		if = {
			limit = { NOT = { exists = event_target:ag_fleet_evasion_loc } }
			random_system = {
				limit = {
					NOR = {
						has_star_flag = ag_beta_psionic_station_effect_5
						AND = { exists = space_owner prev = { has_star_flag = ag_beta_psionic_station_effect_5_@prev.space_owner } }
					}
					distance = {
						source = prev
						type = hyperlane
						use_bypasses = yes
						min_jumps >= 3
						max_jumps <= 5
					}
				}
				save_event_target_as = ag_fleet_evasion_loc
			}
			if = {
				limit = { NOT = { exists = event_target:ag_fleet_evasion_loc } }
				random_system = {
					limit = {
						NOR = {
							has_star_flag = ag_beta_psionic_station_effect_5
							AND = { exists = space_owner prev = { has_star_flag = ag_beta_psionic_station_effect_5_@prev.space_owner } }
						}
						distance = {
							source = prev
							type = euclidean
							use_bypasses = no
							min_distance >= 30
							max_distance <= 150
						}
					}
					save_event_target_as = ag_fleet_evasion_loc
				}
				if = {
					limit = { NOT = { exists = event_target:ag_fleet_evasion_loc } }
					random_system = {
						limit = { NOT = { has_star_flag = ag_beta_psionic_station_effect_5 } }
						save_event_target_as = ag_fleet_evasion_loc
					}
					if = {
						limit = { NOT = { exists = event_target:ag_fleet_evasion_loc } }
						random_system = { save_event_target_as = ag_fleet_evasion_loc }
					}
				}
			}
		}
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = root
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
				any_controlled_ship = { OR = {
					is_ship_class = shipclass_military
					is_ship_class = shipclass_military_special
				} }
			}
			clear_orders = yes
			clear_fleet_actions = this
			set_location = { target = event_target:ag_fleet_evasion_loc.star distance = 45 angle = random }
		}
		clear_variable = ag_beta_psionic_station_var
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 6 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 4 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 1 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		floor_variable = ag_beta_psionic_station_var
		set_timed_star_flag = { flag = ag_beta_psionic_station_affected days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_6 days = ag_beta_psionic_station_var }
		set_timed_star_flag = { flag = ag_beta_psionic_station_effect_6_@root days = ag_beta_psionic_station_var }
		every_fleet_in_system = {
			limit = {
				exists = owner
				owner = { NOR = {
					is_same_value = root
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				} }
				any_controlled_ship = { OR = {
					is_ship_class = shipclass_military
					is_ship_class = shipclass_military_special
					NOR = {
						is_ship_size = ag_gamma_station_small_moving_hostile
						is_ship_size = ag_epsilon_titan_hostile
						is_ship_size = ag_eta_titan_hostile
						is_ship_size = ag_ancient_wandering_ship_hostile
					}
				} }
				NOT = { any_controlled_ship = { OR = {
					NOR = {
						is_ship_class = shipclass_military
						is_ship_class = shipclass_military_special
					}
					is_ship_size = ag_gamma_station_small_moving_hostile
					is_ship_size = ag_epsilon_titan_hostile
					is_ship_size = ag_eta_titan_hostile
					is_ship_size = ag_ancient_wandering_ship_hostile
				} } }
			}
			clear_orders = yes
			clear_fleet_actions = this
			create_ambient_object = { type = "ag_beta_psionic_station_effect_object" }
			last_created_ambient_object = {
				set_ambient_object_flag = ag_beta_psionic_station_effect_1_loc
				set_location = prev
				prev = {
					set_location = prev
					fleet_event = { id = ag_beta.151 days = 1 scopes = { from = prev } }
					set_fleet_flag = ag_beta_station_fleet_event_locked
					set_event_locked = yes
				}
			}
		}
		clear_variable = ag_beta_psionic_station_var
	}
	else_if = {
		limit = { from = { check_variable = { which = ag_beta_psionic_station_attack_type value = 7 } } }
		set_variable = { which = ag_beta_psionic_station_var value = 0 }
		while = { count = from.ag_beta_station_requires_attack_type_lvl change_variable = { which = ag_beta_psionic_station_var value = 10 } }
		multiply_variable = { which = ag_beta_psionic_station_var value = @ag_beta_psionic_station_attack_range_$ag_attack_range_index$_factor }
		floor_variable = ag_beta_psionic_station_var
		set_variable = { which = ag_beta_psionic_station_var_invert value = -1 }
		multiply_variable = { which = ag_beta_psionic_station_var_invert value = ag_beta_psionic_station_var }
		every_fleet_in_system = {
			limit = { exists = owner owner = { is_country_type = ag_zeta_crisis_country } has_fleet_flag = ag_zeta_crisis_avatar_fleet }
			every_controlled_ship = {
				random_list = {
					100 = { modifier = { add = ag_beta_psionic_station_var_invert } }
					0 = { modifier = { add = ag_beta_psionic_station_var } destroy_ship = this }
				}
				reroll_random = yes
			}
		}
		clear_variable = ag_beta_psionic_station_var
		clear_variable = ag_beta_psionic_station_var_invert
	}
	if = {
		limit = { exists = space_owner space_owner = { NOR = { is_same_value = root.from has_country_flag = ag_beta_psionic_station_noti } } }
		space_owner = {
			set_timed_country_flag = { flag = ag_beta_psionic_station_noti days = 2 }
			country_event = { id = ag_beta.157 }
		}
	}
}

ag_beta_situation_reward = {
	optimize_memory
	random_list = {
		10 = {
			modifier = { factor = 0 has_country_flag = ag_beta_123_fired }
			set_country_flag = ag_beta_123_fired
			country_event = { id = ag_beta.123 days = 5 random = 5 }
		}
		10 = {
			modifier = {
				factor = 0
				has_country_flag = ag_beta_121_fired
				has_country_flag = ag_beta_170_fired
				has_country_flag = ag_beta_171_fired
			}
			if = {
				limit = { NOT = { has_country_flag = ag_beta_170_fired } }
				set_country_flag = ag_beta_170_fired
				country_event = { id = ag_beta.170 days = 5 random = 5 }
			}
			else = {
				random_list = {
					10 = {
						modifier = { factor = 0 has_country_flag = ag_beta_171_fired }
						set_country_flag = ag_beta_171_fired
						country_event = { id = ag_beta.171 days = 5 random = 5 }
					}
					10 = {
						modifier = { factor = 0 has_country_flag = ag_beta_121_fired }
						set_country_flag = ag_beta_121_fired
						country_event = { id = ag_beta.121 days = 5 random = 5 }
					}
				}
				reroll_random = yes
			}
		}
	}
	reroll_random = yes
}
