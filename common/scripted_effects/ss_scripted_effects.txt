#	Example:
#
#	example_effect = {
#		add_resource = { energy = -100 }
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

create_food_weighted_development = {
	random_list = {
		60 = { add_deposit = ss_d_private_food }
		10 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_civilian }
		10 = { add_deposit = ss_d_private_admin }
		10 = { add_deposit = ss_d_private_research }
	}
}

create_mineral_weighted_development = {
	random_list = {
		60 = { add_deposit = ss_d_private_mining }
		10 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_industry }
		10 = { add_deposit = ss_d_private_military }
		10 = { add_deposit = ss_d_private_research }
	}
}

create_services_weighted_development = {
	random_list = {
		25 = { add_deposit = ss_d_private_trade }
		20 = { add_deposit = ss_d_private_admin }
		10 = { add_deposit = ss_d_private_civilian }
		20 = { add_deposit = ss_d_private_services }
		25 = { add_deposit = ss_d_private_research }
	}
}

create_trade_weighted_development = {
	random_list = {
		60 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_admin }
		10 = { add_deposit = ss_d_private_civilian }
		10 = { add_deposit = ss_d_private_services }
		10 = { add_deposit = ss_d_private_research }
	}
}

create_industry_weighted_development = {
	random_list = {
		5 = { add_deposit = ss_d_private_trade }
		60 = { add_deposit = ss_d_private_industry }
		5 = { add_deposit = ss_d_private_civilian }
		15 = { add_deposit = ss_d_private_military }
		15 = { add_deposit = ss_d_private_research }
	}
}

create_factory_weighted_development = {
	random_list = {
		15 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_industry }
		50 = { add_deposit = ss_d_private_civilian }
		5 = { add_deposit = ss_d_private_military }
		20 = { add_deposit = ss_d_private_research }
	}
}

create_technical_weighted_development = {
	random_list = {
		5 = { add_deposit = ss_d_private_trade }
		5 = { add_deposit = ss_d_private_industry }
		10 = { add_deposit = ss_d_private_services }
		10 = { add_deposit = ss_d_private_civilian }
		70 = { add_deposit = ss_d_private_research }
	}
}

create_war_weighted_development = {
	random_list = {
		35 = { add_deposit = ss_d_private_industry }
		30 = { add_deposit = ss_d_private_military }
		35 = { add_deposit = ss_d_private_research }
	}
}

create_resource_weighted_development = {
	random_list = {
		40 = { add_deposit = ss_d_private_food }
		40 = { add_deposit = ss_d_private_mining }
		10 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_services }
	}
}

create_random_development = {
	random_list = {
		10 = { add_deposit = ss_d_private_trade }
		10 = { add_deposit = ss_d_private_industry }
		10 = { add_deposit = ss_d_private_civilian }
		10 = { add_deposit = ss_d_private_admin }
		10 = { add_deposit = ss_d_private_research }
		10 = { add_deposit = ss_d_private_military }
		10 = { add_deposit = ss_d_private_services }
	}
}

create_sp_foundry_weighted_development = {
	random_list = {
		70 = { add_deposit = ss_d_sp_foundry }
		5 = { add_deposit = ss_d_sp_industry }
		20 = { add_deposit = ss_d_sp_research }
		5 = { add_deposit = ss_d_sp_services }
	}
}

create_sp_industry_weighted_development = {
	random_list = {
		70 = { add_deposit = ss_d_sp_industry }
		5 = { add_deposit = ss_d_sp_foundry }
		20 = { add_deposit = ss_d_sp_research }
		5 = { add_deposit = ss_d_sp_services }
	}
}

create_sp_research_weighted_development = {
	random_list = {
		5 = { add_deposit = ss_d_sp_industry }
		5 = { add_deposit = ss_d_sp_foundry }
		70 = { add_deposit = ss_d_sp_research }
		10 = { add_deposit = ss_d_sp_services }
		10 = { add_deposit = ss_d_sp_leisure }
	}
}

create_sp_services_weighted_development = {
	random_list = {
		10 = { add_deposit = ss_d_sp_research }
		45 = { add_deposit = ss_d_sp_services }
		45 = { add_deposit = ss_d_sp_leisure }
	}
}

create_sp_random_development = {
	random_list = {
		10 = { add_deposit = ss_d_sp_foundry }
		10 = { add_deposit = ss_d_sp_industry }
		15 = { add_deposit = ss_d_sp_research }
		10 = { add_deposit = ss_d_sp_services }
		10 = { add_deposit = ss_d_sp_leisure }
	}
}

SSAB_begin_crisis =	{
	sset_global_flag = SSAB_fired 
	
	event_target:global_event_country = {
		country_event = { id = SSAB.1 days = 5 random = 45 }
	}
}

SSAB_create_random_hyperlane = {
	if = {
		limit = {
			any_system = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 20
				}
				NOT = { has_hyperlane_to = prev }
			}
		}
		random_system = {
			limit = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 20
				}
				NOT = { has_hyperlane_to = prev }
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}
	else_if = {
		limit = {
			any_system = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 40
				}
				NOT = { has_hyperlane_to = prev }
			}
		}
		random_system = {
			limit = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 40
				}
				NOT = { has_hyperlane_to = prev }
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}
	else_if = {
		limit = {
			any_system = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 60
				}
				NOT = { has_hyperlane_to = prev }
			}
		}
		random_system = {
			limit = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 60
				}
				NOT = { has_hyperlane_to = prev }
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}
	else_if = {
		limit = {
			any_system = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 100
				}
				NOT = { has_hyperlane_to = prev }
			}
		}
		random_system = {
			limit = {
				distance = {
					source = prev
					type = euclidean
					min_distance >= 1
					max_distance <= 100
				}
				NOT = { has_hyperlane_to = prev }
			}
			add_hyperlane = {
				from = this
				to = prev
			}
		}
	}
}

SSAB_spawn_large_fleet = {
	event_target:SSAB_ab_country = {
		create_leader = {
			class = admiral
			species = event_target:SSAB_ab_species
			name = random
			skill = 3
			traits = {
				trait = leader_trait_ethereal
			}
		}
		create_fleet = {
			name = "NAME_SSAB_ab_big_fleet"
			settings = {
				spawn_debris = no
				is_boss = no
			}			
			effect = {
				set_owner = event_target:SSAB_ab_country
				while = {
					count = 10
					create_ship = {
						name = "NAME_abyssal_host_pulsar"
						design = "NAME_abyssal_host_pulsar"
					}
				}
				assign_leader = last_created_leader
				while = {
					count = 15
					create_ship = {
						name = "NAME_abyssal_host_scourer"
						design = "NAME_abyssal_host_scourer"
					}
				}
				while = {
					count = 5
					create_ship = {
						name = "NAME_abyssal_host_lance"
						design = "NAME_abyssal_host_lance"
					}
				}
				set_location = prevprev
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 500
				set_fleet_flag = abyssal_host_invader_fleet
				set_fleet_bombardment_stance = armageddon
				if = {
					limit = { has_global_flag = ss_crisis_hardmode }
					add_modifier = {
						modifier = ss_crisis_abyss_hardmode_fleet
						days = -1
					}
				}
				add_modifier = {
					modifier = ss_crisis_abyss_diff_multiplier
					multiplier = event_target:global_event_country.ss_AS_strength
					days = -1
				}
			}
		}
	}
}

SSAB_spawn_medium_fleet = {
	event_target:SSAB_ab_country = {
		create_leader = {
			class = admiral
			species = event_target:SSAB_ab_species
			name = random
			skill = 3
			traits = {
				trait = leader_trait_ethereal
			}
		}
		create_fleet = {
			name = "NAME_SSAB_ab_medium_fleet"
			settings = {
				spawn_debris = no
				is_boss = no
			}			
			effect = {
				set_owner = event_target:SSAB_ab_country
				while = {
					count = 15
					create_ship = {
						name = "NAME_abyssal_host_scourer"
						design = "NAME_abyssal_host_scourer"
					}
				}
				assign_leader = last_created_leader
				while = {
					count = 10
					create_ship = {
						name = "NAME_abyssal_host_lance"
						design = "NAME_abyssal_host_lance"
					}
				}
				set_location = prevprev
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 500
				set_fleet_flag = abyssal_host_invader_fleet
				set_fleet_bombardment_stance = armageddon
				if = {
					limit = { has_global_flag = ss_crisis_hardmode }
					add_modifier = {
						modifier = ss_crisis_abyss_hardmode_fleet
						days = -1
					}
				}
				add_modifier = {
					modifier = ss_crisis_abyss_diff_multiplier
					multiplier = event_target:global_event_country.ss_AS_strength
					days = -1
				}
			}
		}
	}
}

SSAB_spawn_small_fleet = {
	event_target:SSAB_ab_country = {
		create_fleet = {
			name = "NAME_SSAB_ab_small_fleet"
			settings = {
				spawn_debris = no
				is_boss = no
			}			
			effect = {
				set_owner = event_target:SSAB_ab_country
				while = {
					count = 5
					create_ship = {
						name = "NAME_abyssal_host_scourer"
						design = "NAME_abyssal_host_scourer"
					}
				}
				while = {
					count = 15
					create_ship = {
						name = "NAME_abyssal_host_lance"
						design = "NAME_abyssal_host_lance"
					}
				}
				set_location = prevprev
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 500
				set_fleet_flag = abyssal_host_invader_fleet
				set_fleet_bombardment_stance = armageddon
				if = {
					limit = { has_global_flag = ss_crisis_hardmode }
					add_modifier = {
						modifier = ss_crisis_abyss_hardmode_fleet
						days = -1
					}
				}
				add_modifier = {
					modifier = ss_crisis_abyss_diff_multiplier
					multiplier = event_target:global_event_country.ss_AS_strength
					days = -1
				}
			}
		}
	}
}

SSAB_AB_spawn_apparition = {
	event_target:SSAB_ab_country = {
		create_fleet = {
			name = "NAME_SSAB_apparition_fleet"
			settings = {
				spawn_debris = no
				is_boss = yes
			}			
			effect = {
				set_owner = event_target:SSAB_ab_country
				create_ship = {
					name = "NAME_SSAB_apparition_ship"
					design = "NAME_abyssal_father_manifestation"
				}
				set_location = prevprev
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 500
				set_fleet_flag = abyssal_host_invader_fleet
				set_fleet_bombardment_stance = armageddon
				set_fleet_flag = SSAB_apparition
				if = {
					limit = { has_global_flag = ss_crisis_hardmode }
					add_modifier = {
						modifier = ss_crisis_abyss_hardmode_fleet
						days = -1
					}
				}
				add_modifier = {
					modifier = ss_crisis_abyss_diff_multiplier
					multiplier = event_target:global_event_country.ss_AS_strength
					days = -1
				}
			}
		}
	}
}

SSAB_AB_spawn_attack_wave = {
	event_target:SSAB_crisis_system_1 = {
		SSAB_spawn_large_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_2 = {
		SSAB_spawn_large_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_3 = {
		SSAB_spawn_large_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_4 = {
		SSAB_spawn_large_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
}

SSAB_AB_spawn_apparition_wave = {
	event_target:SSAB_crisis_system_1 = {
		SSAB_AB_spawn_apparition = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_2 = {
		SSAB_AB_spawn_apparition = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_3 = {
		SSAB_AB_spawn_apparition = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
	event_target:SSAB_crisis_system_4 = {
		SSAB_AB_spawn_apparition = yes
		SSAB_spawn_medium_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
		SSAB_spawn_small_fleet = yes
	}
}

SSAB_awake_FE = {
	if = {
		limit = {
			AND = {
				OR = {
					has_ethic = ethic_fanatic_materialist
					has_ethic = ethic_fanatic_xenophile
				}
				has_global_flag = abyssal_invasion_ongoing
			}
		}
		set_global_flag = guardians_of_the_galaxy_happened
		set_country_flag = guardians_of_the_galaxy
		country_event = { id = fallen_empires_awakening.3 }

		every_country = {
			limit = {
				AND = {
					is_country_type = default
					NOT = { has_country_flag = SSAB_antagonist }
				}
			}
			random_list = {
				33 = { add_opinion_modifier = { who = root modifier = opinion_crisis_fighter } }
				33 = { add_opinion_modifier = { who = root modifier = opinion_crisis_fighter_small } }
			}
		}

		# Notify
		every_country = {
			limit = {
				is_ai = no
			}
			country_event = { id = abyssalsecrets.561 }
		}
		observer_event = { id = observer.74 }
	}
	else_if = {
		limit = {
			OR = {
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_fanatic_xenophobe
				NOT = { has_global_flag = abyssal_invasion_ongoing }
			}
		}
		set_global_flag = sleepers_awake_happened

		country_event = { id = fallen_empires_awakening.3 }

		# Notify players
		every_country = {
			limit = {
				is_ai = no
			}
			country_event = { id = fallen_empires_awakening.5 }
		}
		observer_event = { id = observer.73 }

		# War in Heaven
		if = {
			limit = { host_has_dlc = "Leviathans Story Pack" }
			random_list = {
				40 = { # War in Heaven with Fallen Empire of opposing ethos
					random_country = {
						limit = {
							NOT = { is_same_value = root }
							is_country_type = fallen_empire
							NOT = { has_ethic = ethic_gestalt_consciousness }
							OR = {
								AND = {
									has_ethic = ethic_fanatic_xenophobe
									root = { has_ethic = ethic_fanatic_xenophile }
								}
								AND = {
									has_ethic = ethic_fanatic_xenophile
									root = { has_ethic = ethic_fanatic_xenophobe }
								}
								AND = {
									has_ethic = ethic_fanatic_spiritualist
									root = { has_ethic = ethic_fanatic_materialist }
								}
								AND = {
									has_ethic = ethic_fanatic_materialist
									root = { has_ethic = ethic_fanatic_spiritualist }
								}
							}
						}
						set_country_flag = sleepers_awake_ancient_rival
						set_timed_country_flag = { flag = timed_ancient_rival days = 3650 }
						set_timed_country_flag = { flag = ai_no_wars days = 3650 }
						root = { set_timed_country_flag = { flag = ai_no_wars days = 3650 } }
						every_country = {
							limit = { is_country_type = default }
							set_timed_country_flag = { flag = ai_no_wars days = 3650 }
						}
					}
				}
				20 = { # War in Heaven with Fallen Empire of different ethos
					random_country = {
						limit = {
							NOT = { is_same_value = root }
							is_country_type = fallen_empire
							NOT = { has_ethic = ethic_gestalt_consciousness }
						}
						set_country_flag = sleepers_awake_ancient_rival
						set_timed_country_flag = { flag = timed_ancient_rival days = 3650 }
						set_timed_country_flag = { flag = ai_no_wars days = 3650 }
						root = { set_timed_country_flag = { flag = ai_no_wars days = 3650 } }
						every_country = {
							limit = {
								is_country_type = default
							}
							set_timed_country_flag = { flag = ai_no_wars days = 3650 }
						}
					}
				}
				40 = { # No War in Heaven
					set_global_flag = no_war_in_heaven
				}
			}
		}
		else = { set_global_flag = no_war_in_heaven }
	}
}

SSAB_spawn_abyssal_storm = {
	star = {
		create_ambient_object = {
			type = "SSAB_abyssal_storm"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = SSAB_abyssal_storm_object
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
	add_modifier = { modifier = SSAB_abyssal_storm }
}

SSAB_effect_take_antagonist = {
	every_country = {
		limit = { any_situation = { is_situation_type = SSAB_the_war } }
		every_situation = { 
			limit = { is_situation_type = SSAB_the_war }
			add_situation_progress = value:SSAB_take_antagonist_system
		}
	}
}

SSAB_effect_take_protagonist = {
	every_country = {
		limit = { any_situation = { is_situation_type = SSAB_the_war } }
		every_situation = { 
			limit = { is_situation_type = SSAB_the_war }
			add_situation_progress = value:SSAB_take_protagonist_system
		}
	}
}

SSAB_antagonist_victory = {
	
}

SSAB_protagonist_victory = {

	remove_global_flag = abyssal_invasion_ongoing
	
	set_global_flag = abyssal_invaders_defeated_endgame
	
	# Spawns portal anchors in the 4 core systems, which can be attacked.
	every_system = {
		limit = { has_star_flag = SSAB_crisis_spawn_system }
		star = {
			create_fleet = {
				name = "NAME_Abyssal_Anchor"
				settings = {
					spawn_debris = no
					is_boss = no
				}			
				effect = {
					set_owner = event_target:SSAB_ab_country
					create_ship = {
						name = "NAME_Abyssal_Anchor"
						design = "NAME_Abyssal_Anchor"
					}
					set_location = prev
					set_fleet_stance = passive
					set_fleet_flag = SSAB_abyssal_host_anchor
					if = {
						limit = { has_global_flag = ss_crisis_hardmode }
						add_modifier = {
							modifier = ss_crisis_abyss_hardmode_fleet
							days = -1
						}
					}
					add_modifier = {
						modifier = ss_crisis_abyss_diff_multiplier
						multiplier = event_target:global_event_country.ss_AS_strength
						days = -1
					}
				}
			}
		}
	}
	
	# Remaining AB fleets b-line to defend portals.
	event_target:SSAB_ab_country = {
		set_country_type = SSAB_ab_remnant
		every_owned_fleet = {
			random_list = {
				1 = { event_target:SSAB_crisis_system_1 = { save_event_target_as = SSAB_retreat_location } }
				1 = { event_target:SSAB_crisis_system_2 = { save_event_target_as = SSAB_retreat_location } }
				1 = { event_target:SSAB_crisis_system_3 = { save_event_target_as = SSAB_retreat_location } }
				1 = { event_target:SSAB_crisis_system_4 = { save_event_target_as = SSAB_retreat_location } }
			}
			auto_move_to_planet = { 
				target = event_target:SSAB_retreat_location
				clear_auto_move_on_arrival = yes 
			}
		}
	}
	
	#Check if any portals are still functional after... 5? years
	event_target:global_event_country = {
		country_event = { id = SSAB.512 days = 1800 }
	}
}

SSAB_protagonist_victory_good_ending = {
	# Abyssal Host Disappear
	# war ends
	# The eyes close
	# The federation splinters
	# Former federation members have a penalty applied to them, everyone dislikes them.
	# A treaty is signed.
	# Give victors a relic, a bonus

	remove_global_flag = abyssal_invaders_defeated_endgame
	
	event_target:SSAB_ab_country = {
		every_owned_fleet = {
			destroy_fleet = this
		}
		every_war = {
			end_war_effect = yes
		}
		destroy_country = yes
	}
	
	every_playable_country = {
		limit = { has_country_flag = SSAB_antagonist }
		every_playable_country = {
			limit = { has_country_flag = SSAB_protagonist }
			set_truce = { 
				target = prev
				type = war
			}
			add_opinion_modifier = { modifier = opinion_abyssal_fools who = prev }
			add_modifier = { modifier = ss_father_is_dead years = 5 }
		}
		add_modifier = { modifier = abyssalsecrets_its_over years = 5 }
		country_event = { id = SSAB.505 } #Sad words from the father.
	}
	
	event_target:SSAB_federation = {
		dissolve_federation = yes
	}
	
	event_target:SSAB_crisis_system_1 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_2 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_3 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_4 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
}


SSAB_protagonist_victory_bad_ending = {
	# Abyssal Host Disappear
	# war ends
	# The eyes close
	# The federation splinters
	# Former federation members have a penalty applied to them, everyone dislikes them.
	# A treaty is signed.
	# Give victors a relic, a bonus

	remove_global_flag = abyssal_invaders_defeated_endgame
	
	set_global_flag = SSAB_antagonists_special_ending
	
	event_target:SSAB_ab_country = {
		every_owned_fleet = {
			destroy_fleet = this
		}
		every_war = {
			end_war_effect = yes
		}
		destroy_country = yes
	}
	
	every_playable_country = {
		limit = { has_country_flag = SSAB_antagonist }
		every_playable_country = {
			limit = { has_country_flag = SSAB_protagonist }
			set_truce = { 
				target = prev
				type = war
			}
			add_opinion_modifier = { modifier = opinion_abyssal_fools who = prev }
			add_modifier = { modifier = ss_father_is_dead years = 5 }
		}
		add_modifier = { modifier = abyssalsecrets_its_over years = 5 }
		country_event = { id = SSAB.506 } #goodbye for now!
	}
	
	event_target:SSAB_federation = {
		dissolve_federation = yes
	}
	
	event_target:SSAB_crisis_system_1 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_2 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_3 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
	event_target:SSAB_crisis_system_4 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			set_mia = mia_return_home
		}
		star = { 
			create_ambient_object = {
				type = "ss_star_shockwave"
				play_animation_once = yes
				location = this
			}
		}
	}
}

SSAB_antagonist_victory_endgame = {
	remove_global_flag = abyssal_invasion_ongoing
	
	set_global_flag = abyssal_invaders_defeated_endgame
	
	#End the war and the Abyssal Host.
	event_target:SSAB_ab_country = {
		every_owned_fleet = {
			destroy_fleet = this
		}
		every_war = {
			end_war_effect = yes
		}
		destroy_country = yes
	}
	
	#Random systems begin turning into abyssal black holes
	
	
}

SSAB_convert_to_ABH = {
	set_star_class = sc_ss_abyss
	star = {
		change_pc = pc_ss_abyssal_black_hole
		create_ambient_object = {
			type = "ss_star_shockwave"
			play_animation_once = yes
			location = this
		}
		create_ambient_object = {
			type = "SSAB_abyssal_storm"
			location = this
		}
		if = {
			limit = { exists = starbase }
			starbase = { destroy_ship = this }
		}
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = { dismantle = yes }
	}
	every_system_planet = {
		limit = { has_owner = no NOT = { is_planet_class = pc_gas_giant } is_star = no }
		random_list = {
			10 = { change_pc = pc_broken reroll_deposits = yes reroll_planet_modifiers = yes }
			10 = { }
		}
	}
	every_fleet_in_system = {
		limit = { owner = { exists = event_target:SSAB_ab_country is_same_value = event_target:SSAB_ab_country } }
		set_mia = mia_return_home
	}
	
}

SSAB_antagonist_victory_finale = {
	set_update_modifiers_batch = begin
	
	remove_global_flag = abyssal_invaders_defeated_endgame
	
	# Convert stars in all systems
	every_system = {
		limit = {
			NAND = {
				has_star_flag = SSAB_crisis_spawn_system
				has_star_flag = lcluster
				has_star_flag = SSAB_exile_cluster
			}
		}
		random_list = {
			5 = { star = { change_pc = pc_a_star } set_star_class = sc_a }
			5 = { star = { change_pc = pc_b_star } set_star_class = sc_b }
			10 = { star = { change_pc = pc_f_star } set_star_class = sc_f }
			10 = { star = { change_pc = pc_g_star } set_star_class = sc_g }
			15 = { star = { change_pc = pc_k_star } set_star_class = sc_k }
			15 = { star = { change_pc = pc_m_star } set_star_class = sc_m }
		}
		every_system_planet = {
			if = {
				limit = {
					AND = {
						is_colonizable = yes
						is_artificial = no
						has_owner = no
					}
				}
				change_pc = pc_gaia
				reset_planet = yes
			}
			else_if = {
				limit = {
					is_artificial = yes
				}
				remove_planet = yes
			}
			else_if = {
				limit = {
					AND = {
						is_star = no
						NOR = {
							is_planet_class = pc_gas_giant
							is_planet_class = pc_molten
							is_planet_class = pc_barren
							is_planet_class = pc_barren_cold
							is_planet_class = pc_toxic
							is_planet_class = pc_frozen
						}
					}
				}
				change_pc = { class = rl_unhabitable_planets }
				reset_planet = yes
				reroll_deposits = yes
			}
			if = {
				limit = { is_colonizable = yes }
				add_modifier = { modifier = SSAB_entropic_abundance days = -1 }
			}
			prevent_anomaly = yes
		}
		every_system_ambient_object = {
			limit = { is_ambient_object_type = SSAB_abyssal_storm }
			destroy_ambient_object = this
		}
		every_system_planet = {
			limit = {
				exists = orbital_station
			}
			orbital_station = { dismantle = yes }
		}
		every_system_megastructure = {
			remove_megastructure = this
		}
		every_fleet_in_system = {
			destroy_fleet = this
		}
	}
	
	# Empty all protagonist colonies, except those outside the galaxy.
	every_system = {
		limit = {
			NAND = {
				has_star_flag = lcluster
				has_star_flag = SSAB_exile_cluster
			}
		}
		every_system_planet = {
			limit = {
				AND = {
					has_owner = yes
					owner = { has_country_flag = SSAB_protagonist }
				}
			}
			destroy_colony = yes
		}
	}
	
	# The Federation Ends.
	event_target:SSAB_federation = {
		dissolve_federation = yes
	}
	
	# Change all the eyes.
	event_target:SSAB_crisis_system_1 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			destroy_fleet = this
		}
	}
	event_target:SSAB_crisis_system_2 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			destroy_fleet = this
		}
	}
	event_target:SSAB_crisis_system_3 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			destroy_fleet = this
		}
	}
	event_target:SSAB_crisis_system_4 = {
		set_star_class = sc_black_hole
		every_system_ambient_object = {
			destroy_ambient_object = this
		}
		every_fleet_in_system = {
			destroy_fleet = this
		}
	}
	
	#If the wormhole exists, disable it for 5 years.
	
	set_update_modifiers_batch = end
}