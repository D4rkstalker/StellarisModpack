# IFO - Iyur' Fleet Overlords
# Author: Iyur, modjam2020
# Custom routines

# This = Planet
# Creates a new federal member from planets
# Heavy references from vanilla effects
ifo_create_member = {

	solar_system = { generate_home_system_resources = yes }
	create_species = {
		name = random
		class = random_non_machine
		portrait = random
		traits = random
		homeworld = this
		effect = {
			save_event_target_as = fed_planet_$i$_species
		}
	}
	create_hegemon_member_$i$ = yes
	create_colony = { owner = last_created_country }
	generate_start_deposits_and_blockers = yes
	generate_start_buildings_and_districts = yes
	generate_start_pops = yes
	solar_system = {
		create_starbase = {
			size = starbase_starport
			module = shipyard
			building = crew_quarters
			owner = last_created_country
			effect = {
				set_starbase_module = {
					slot = 1
					module = trading_hub
				}
			}
		}
	}
	last_created_country = { set_country_flag = ifo_fed_member }
}

# This = Country
# Creates some basic fleets for player
ifo_create_fleets = {
	#science
	create_fleet = {
		effect = {
			set_name = random
			set_owner = last_created_country
			create_ship = {
				name = random
				random_existing_design = science
			}
			set_fleet_stance = evasive
			set_location = event_target:ifo_starting_system.star
			owner = {
				create_leader = {
					class = scientist
					sub_type = survey
					name = random
					species = owner_main_species
				}
			}
			set_leader = last_created_leader
		}
	}
	#constructor
	create_fleet = {
		effect = {
			set_name = random
			set_owner = last_created_country
			create_ship = {
				name = random
				random_existing_design = constructor
			}
			set_fleet_stance = evasive
			set_location = event_target:ifo_starting_system.star
		}
	}
	#military
	#create_fleet = {
	#	set_take_point = yes
	#	effect = {
	#		set_name = random
	#		set_owner = prev
	#		while = {
	#			count = 6
	#			create_ship = {
	#				name = random
	#				random_existing_design = corvette
	#			}
	#		}
	#		create_ship = {
	#			name = random
	#			design = NAME_Ravager
	#		}
	#		set_location = event_target:ifo_starting_system.star
	#	}
	#}
}

# This = Country
# Creates some starting leaders for player
ifo_create_leaders = {

	create_leader = {
		class = scientist
		sub_type = engineering
		species = event_target:fed_planet_1_species
	}

	create_leader = {
		class = scientist
		sub_type = society
		species = event_target:fed_planet_2_species
	}

	create_leader = {
		class = scientist
		sub_type = physics
		species = owner_species
	}

	create_leader = {
		class = admiral
		species = owner_species
	}

}

# This = Country
# Adds some starting resources for player
ifo_create_resources = {
	add_resource = { energy = 100 } 
	add_resource = { minerals = 100 } 
	add_resource = { alloys = 100 } 
	add_resource = { influence = 100 } 
}

# This = Starbase
# Prev = System
# Simulates station jump
# Copies modules and buildings from existing station
ifo_create_modules = {

	prev = { set_variable = { which = ifo_mod_slot value = 0 } }

	ifo_create_module = { obj = shipyard }
	ifo_create_module = { obj = anchorage }
	ifo_create_module = { obj = gun_battery }
	ifo_create_module = { obj = missile_battery }
	ifo_create_module = { obj = hangar_bay }
	ifo_create_module = { obj = solar_panel_network }
	ifo_create_module = { obj = trading_hub }
	ifo_create_module = { obj = ifo_jump_drive }

	prev = { set_variable = { which = ifo_mod_slot value = 0 } }

}

# This = Starbase (new)
# ifo_station_system.starbase (old)
ifo_create_module = {
	if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 1 } } }
			ifo_create_structure = { type = module obj = $obj$ }
	}
	else_if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 2 } } }
			while = { count = 2 ifo_create_structure = { type = module obj = $obj$ } }
	}
	else_if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 3 } } }		
			while = { count = 3 ifo_create_structure = { type = module obj = $obj$ } }
	}
	else_if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 4 } } }		
			while = { count = 4 ifo_create_structure = { type = module obj = $obj$ } }
	}
	else_if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 5 } } }
			while = { count = 5 ifo_create_structure = { type = module obj = $obj$ } }
	}
	else_if = {
		limit = { event_target:ifo_station_system.starbase = { count_starbase_modules = { type = $obj$ count = 6 } } }
			while = { count = 6 ifo_create_structure = { type = module obj = $obj$ } }
	}
}

# This = Starbase (new)
# ifo_station_system.starbase (old)
ifo_create_structure = {
	if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 0 } } }
			set_starbase_$type$ = { slot = 0 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 1 } } }
			set_starbase_$type$ = { slot = 1 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 2 } } }
			set_starbase_$type$ = { slot = 2 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 3 } } }
			set_starbase_$type$ = { slot = 3 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 4 } } }
			set_starbase_$type$ = { slot = 4 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 5 } } }
			set_starbase_$type$ = { slot = 5 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
	else_if = {
		limit = { prev = { check_variable = { which = ifo_mod_slot value = 6 } } }
			set_starbase_$type$ = { slot = 6 $type$ = $obj$ }
			prev = { change_variable = { which = ifo_mod_slot value = 1 } }
	}
}

# This = Starbase (new)
# ifo_station_system.starbase (old)
ifo_create_buildings = {

	prev = { change_variable = { which = ifo_mod_slot value = 0 } }

	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = crew_quarters } }
			ifo_create_structure = { type = building obj = crew_quarters }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = hydroponics_bay } }
			ifo_create_structure = { type = building obj = hydroponics_bay }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = resource_silo } }
			ifo_create_structure = { type = building obj = resource_silo }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = nebula_refinery } }
			ifo_create_structure = { type = building obj = nebula_refinery }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = listening_post } }
			ifo_create_structure = { type = building obj = listening_post }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = offworld_trading_company } }
			ifo_create_structure = { type = building obj = offworld_trading_company }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = fleet_academy } }
			ifo_create_structure = { type = building obj = fleet_academy }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = naval_logistics_office } }
			ifo_create_structure = { type = building obj = naval_logistics_office }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = titan_yards } }
			ifo_create_structure = { type = building obj = titan_yards }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = colossus_yards } }
			ifo_create_structure = { type = building obj = colossus_yards }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = black_hole_observatory } }
			ifo_create_structure = { type = building obj = black_hole_observatory }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = target_uplink_computer } }
			ifo_create_structure = { type = building obj = target_uplink_computer }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = defense_grid } }
			ifo_create_structure = { type = building obj = defense_grid }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = deep_space_black_site } }
			ifo_create_structure = { type = building obj = deep_space_black_site }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = curator_think_tank } }
			ifo_create_structure = { type = building obj = curator_think_tank }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = art_college } }
			ifo_create_structure = { type = building obj = art_college }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = communications_jammer } }
			ifo_create_structure = { type = building obj = communications_jammer }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = disruption_field } }
			ifo_create_structure = { type = building obj = disruption_field }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = warp_fluctuator } }
			ifo_create_structure = { type = building obj = warp_fluctuator }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = command_center } }
			ifo_create_structure = { type = building obj = command_center }
	}
	if = {
		limit = { event_target:ifo_station_system.starbase = { has_starbase_building = trader_proxy_office } }
			ifo_create_structure = { type = building obj = trader_proxy_office }
	}

	prev = { change_variable = { which = ifo_mod_slot value = 0 } }

}

# This = Country
# Make a leader pool based on federation species
ifo_select_leaders = {
		while = {
			count = ifo_fed_members
			federation = {
				random_member = {
					limit = {
						is_federation_leader = no
						not = { has_country_flag = ifo_selected_$class$s }
					}
					prevprev = {
						create_leader = {
							class = $class$
							species = prev.owner_species
							effect = { recruitable = no }
						}
						last_created_leader = { recruitable = yes }
					}
					set_timed_country_flag = { flag = ifo_selected_$class$s days = 1 }
				}
			}
		}
}

# This = Country (Owner)
# From = Planet
ifo_create_transport = {
	root = {
		switch = {
			trigger = is_ship_size
				ifo_transport_assault = { ifo_create_transport2 = { culture = $culture$ type = assault_army } }
				ifo_transport_slave = { ifo_create_transport2 = { culture = $culture$ type = slave_army } }
				ifo_transport_clone = { ifo_create_transport2 = { culture = $culture$ type = clone_army } }
				ifo_transport_robotic = { ifo_create_transport2 = { culture = $culture$ type = robotic_army } }
				ifo_transport_psionic = { ifo_create_transport2 = { culture = $culture$ type = psionic_army } }
				ifo_transport_xenomorph = { ifo_create_transport2 = { culture = $culture$ type = xenomorph_army } }
				ifo_transport_gene = { ifo_create_transport2 = { culture = $culture$ type = gene_warrior_army } }
				ifo_transport_mach1 = { ifo_create_transport2 = { culture = $culture$ type = machine_assault_1 } }
				ifo_transport_mach2 = { ifo_create_transport2 = { culture = $culture$ type = machine_assault_2 } }
				ifo_transport_mach3 = { ifo_create_transport2 = { culture = $culture$ type = machine_assault_3 } }
		}
	}
}

# ^
ifo_create_transport2 = {
	create_fleet = {
		effect = {
			set_owner = from.space_owner
			set_fleet_stance = passive
			create_army_transport = {
				ship_name = random
				graphical_culture = $culture$
				army_name = random
				army_type = $type$
				species = event_target:ifo_army_country.owner_species
			}
			set_location = { target = from }
		}
	}
}

# This = Federation
# Prev = Country (President)
# Simulates election, just rotating the species for leader
ifo_elect_leader = {
	random_member = {
		limit = { is_federation_leader = no }
			owner_species = { save_event_target_as = ifo_president_species }
	}
	prev = {
		set_federation_leader = root
		create_leader = {
			class = ruler
			species = event_target:ifo_president_species
		}
		assign_leader = last_created_leader
	}
}