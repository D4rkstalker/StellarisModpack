cybertronian_game_start_condition_adjustments_effect = {
	if = {
		limit = { owner = { cybertronian_synth_empire_trigger = yes } }
		add_resource = {
			energy = 200
			food = -200
		}
		give_technology = { tech = tech_energon_mining message = no }
		give_technology = { tech = tech_energon_mining_1 message = no }
		add_tradition = tr_cybertronians_adopt
	}
	random_owned_planet = {
		limit = { is_capital = yes }
		if = {
			limit = { owner = { is_cybertronian = yes } }
			while = {
				limit = { has_district = district_farming }
				remove_district = district_farming
				add_district = district_mining
				add_district = district_generator
			}
			add_building = building_energon_mine
			add_building = building_cybertronian_energon_refinery
		}
	}
}
cybertronian_game_start_dominant_species_changes_effect = {
	owner = {
		if = {
			limit = { cybertronian_synth_empire_trigger = yes }
			set_country_flag = synthetic_empire
			set_country_flag = cybertronian_synth_empire
	
			give_technology = { tech = tech_powered_exoskeletons message = no }
			give_technology = { tech = tech_robotic_workers message = no }
			give_technology = { tech = tech_droid_workers message = no }
			give_technology = { tech = tech_robomodding message = no }
			give_technology = { tech = tech_robomodding_m message = no }
			give_technology = { tech = tech_synthetic_workers message = no }
			give_technology = { tech = tech_synthetic_leaders message = no }
			give_technology = { tech = tech_energon_mining message = no }
			give_technology = { tech = tech_energon_mining_1 message = no }
			give_technology = { tech = tech_mine_living_metal message = no }
			give_technology = { tech = tech_gateway_activation message = no }
			give_technology = { tech = tech_cybertronian_technology message = no }
			give_technology = { tech = tech_cybermatter_harvesting message = no }
			
			set_policy = { policy = cybertronian_synth_right option = cybertronian_synth_full_rights cooldown = no }
			
			every_owned_pop = {
				limit = {
					is_same_species = root
				}
				save_event_target_as = cybertronian_owner_species
			}
			set_built_species = event_target:cybertronian_owner_species
			
			every_owned_leader = {
				limit = {
					species = { has_trait = trait_cybertronian }
					NOR = {
						has_trait = leader_trait_admiral_cybertronian
						has_trait = leader_trait_general_cybertronian
						has_trait = leader_trait_governor_cybertronian
						has_trait = leader_trait_scientist_cybertronian
						has_trait = leader_trait_ruler_cybertronian
					}
				}
				switch = {
					trigger = leader_class
					admiral = {
						add_trait = leader_trait_admiral_cybertronian
						add_ruler_trait = leader_trait_ruler_cybertronian
						remove_trait = leader_trait_admiral_synthetic
						remove_ruler_trait = leader_trait_ruler_synthetic
					}
					general = {
						add_trait = leader_trait_general_cybertronian
						add_ruler_trait = leader_trait_ruler_cybertronian
						remove_trait = leader_trait_general_synthetic
						remove_ruler_trait = leader_trait_ruler_synthetic
					}
					governor = {
						add_trait = leader_trait_governor_cybertronian
						add_ruler_trait = leader_trait_ruler_cybertronian
						remove_trait = leader_trait_governor_synthetic
						remove_ruler_trait = leader_trait_ruler_synthetic
					}
					scientist = {
						add_trait = leader_trait_scientist_cybertronian
						add_ruler_trait = leader_trait_ruler_cybertronian
						remove_trait = leader_trait_scientist_synthetic
						remove_ruler_trait = leader_trait_ruler_synthetic
					}
					ruler = {
						add_trait = leader_trait_ruler_cybertronian
						add_ruler_trait = leader_trait_ruler_cybertronian
						remove_trait = leader_trait_ruler_synthetic
					}
				}
			}
			set_policy = { policy = cybertronian_synth_right option = cybertronian_synth_full_rights cooldown = no }
		}
	}
}


buildings_has_energon_crystals = {
	exists = owner
	OR = {
		owner = {
			has_monthly_income = {
				resource = energon_crystals
				value >= 3
			}
		}
		AND = {
			free_building_slots > 1
			owner = {
				has_monthly_income = {
					resource = energon_crystals
					value > 0
				}
			}
		}
	}
}#Used in the buildings file to determine if the country has the needed Strategic Resource.

buildings_has_dark_energon_crystals = {
	exists = owner
	OR = {
		owner = {
			has_monthly_income = {
				resource = dark_energon_crystals
				value >= 3
			}
		}
		AND = {
			free_building_slots > 1
			owner = {
				has_monthly_income = {
					resource = dark_energon_crystals
					value > 0
				}
			}
		}
	}
}#Used in the buildings file to determine if the country has the needed Strategic Resource.

buildings_no_energon_crystals = {
	exists = owner
	owner = {
		is_ai = yes
		has_deficit = energon_crystals
		resource_stockpile_compare = { #can buy on market
			resource = energy
			value < 1500
		}
	}
}#Used to destroy buildings that require the SR but lack it.

buildings_no_dark_energon_crystals = {
	exists = owner
	owner = {
		is_ai = yes
		has_deficit = dark_energon_crystals
		resource_stockpile_compare = { #can buy on market
			resource = energy
			value < 1500
		}
	}
}#Used to destroy buildings that require the SR but lack it.

generate_start_cybertronian_districts = {
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_pax_cybertronia
					has_origin = origin_cybertron
					has_origin = origin_war_for_cybertron
					has_origin = origin_transformer_colony
					has_origin = origin_de_transformer_colony
					has_origin = origin_bw_cybertron
					has_planet_flag = cybertron_homeworld
				}
			}
		}
		while = {
			count = 3
			add_district_and_planet_size_if_needed_effect = {
				district = district_cybertronian_city
			}
		}
		# 8 artisan/metallurgist jobs
		while = {
			count = 2
			add_district_and_planet_size_if_needed_effect = {
				district = district_cybertronian_industrial
			}
		}
		# 6 mining jobs
		while = {
			count = 3
			add_district_and_planet_size_if_needed_effect = {
				district = district_cybertronian_mining_uncapped
			}
		}
		# 4 generator jobs
		while = {
			count = 3
			add_district_and_planet_size_if_needed_effect = {
				district = district_cybertronian_generator_uncapped
			}
		}
		while = {
			count = 1
			add_district_and_planet_size_if_needed_effect = {
				district = district_cybertronian_energon_mining
			}
		}
	}
}