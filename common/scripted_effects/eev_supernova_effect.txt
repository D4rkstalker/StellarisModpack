eev_supernova_start = {
	if = {
		limit = { exists = event_target:crisis_country }
		fire_on_action = {
			on_action = on_destroy_star_system
			scopes = { from = event_target:crisis_country }
		}
	}
	else = {
		fire_on_action = { on_action = on_destroy_star_system }
	}
	set_star_class = sc_black_hole
	every_system_ambient_object = {
		limit = {
			# Preserve Unbidden crisis effects
			NOR = {
				has_ambient_object_flag = extradimensional_system_effect
				has_ambient_object_flag = extradimensional_system_effect_2
			}
		}
		destroy_ambient_object = this
	}
	every_system_planet = {
		limit = { is_star = yes }
		create_ambient_object = {
			type = "star_explosion"
			play_animation_once = yes
			location = this
		}
		last_created_ambient_object = {
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
		change_pc = pc_black_hole
		reset_planet = yes
	}
	# Handle Contingency Machine Worlds
	every_system_planet = {
		limit = {
			is_planet_class = pc_ai
			NOT = { has_planet_flag = machine_lair }
		}
		destroy_machine_world = yes
	}
	random_system_planet = {
		limit = {
			is_planet_class = pc_ai
			has_planet_flag = machine_lair
		}
		from.owner = { save_event_target_as = final_machine_world_destroyer }
		stop_crisis_sound = yes
		planet_event = { id = crisis.2046 }
	}
	every_system_planet = {
		limit = {
			is_star = no
			is_asteroid = no
			NOR = {
				is_planet_class = pc_shattered
				is_planet_class = pc_shattered_2
				is_planet_class = pc_shielded
				is_ringworld = yes
			}
		}
		if = {
			limit = { eev_is_habitat = yes } # uncolonized
			spawn_habitat_cracker_effect = yes
			remove_planet = yes
		}
		if = {
			limit = { is_colony = yes }
			remove_all_buildings = yes
			destroy_colony = yes
			if = {
				limit = { eev_is_habitat = yes }
				spawn_habitat_cracker_effect = yes
				remove_planet = yes
			}
			else_if = {
				limit = { is_ringworld = yes }
				spawn_ringworld_cracker_effect = yes
				change_pc = pc_ringworld_habitable_damaged
			}
			else = {
				change_pc = pc_shattered
				reset_planet = yes
			}
		}
		else_if = {
			limit = { is_ringworld = yes }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_habitable_damaged
		}
		else = {
			change_pc = pc_shattered
			reset_planet = yes
		}
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = { dismantle = yes }
	}
	every_system_planet = {
		clear_deposits = yes
		reset_planet = yes
		prevent_anomaly = yes
	}
	every_system_planet = {
		limit = { is_asteroid = yes }
		clear_deposits = yes
	}
	every_fleet_in_system = {
		limit = {
			NOR = {
				is_same_value = from
				# except Extradimensionals
				AND = {
					exists = owner
					owner = {
						OR = {
							is_country_type = portal_holder
							is_country_type = extradimensional
							is_country_type = extradimensional_2
							is_country_type = extradimensional_3
						}
					}
				}
			}
		}
		if = {
			limit = {
				exists = event_target:crisis_country #i.e. not final destruction of all matter
				is_mobile = yes
			}
			set_mia = mia_emergency_ftl
		}
		else = { destroy_fleet = this }
	}
	every_system_megastructure = {
		if = {
			limit = {
				OR = {
					is_megastructure_type = ring_world_restored
					is_megastructure_type = ring_world_ruined
					is_megastructure_type = ring_world_2
				}
			}
			solar_system = {
				spawn_planet = {
					class = "pc_ringworld_tech_damaged"
					location = prev
					orbit_angle_offset = 30
				}
				spawn_planet = {
					class = "pc_ringworld_seam_damaged"
					location = prev
				}
				spawn_planet = {
					class = "pc_ringworld_habitable_damaged"
					location = prev
					orbit_angle_offset = -30
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = spy_orb_1
					is_megastructure_type = spy_orb_2
					is_megastructure_type = spy_orb_3
					is_megastructure_type = spy_orb_4
					is_megastructure_type = spy_orb_ruined
					is_megastructure_type = spy_orb_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "spy_orb_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = think_tank_1
					is_megastructure_type = think_tank_2
					is_megastructure_type = think_tank_3
					is_megastructure_type = think_tank_4
					is_megastructure_type = think_tank_ruined
					is_megastructure_type = think_tank_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "think_tank_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = strategic_coordination_center_1
					is_megastructure_type = strategic_coordination_center_2
					is_megastructure_type = strategic_coordination_center_3
					is_megastructure_type = strategic_coordination_center_ruined
					is_megastructure_type = strategic_coordination_center_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "strategic_coordination_center_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_art_installation_1
					is_megastructure_type = mega_art_installation_2
					is_megastructure_type = mega_art_installation_3
					is_megastructure_type = mega_art_installation_4
					is_megastructure_type = mega_art_installation_ruined
					is_megastructure_type = mega_art_installation_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "mega_art_installation_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = interstellar_assembly_1
					is_megastructure_type = interstellar_assembly_2
					is_megastructure_type = interstellar_assembly_3
					is_megastructure_type = interstellar_assembly_4
					is_megastructure_type = interstellar_assembly_ruined
					is_megastructure_type = interstellar_assembly_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "interstellar_assembly_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = mega_shipyard_1
					is_megastructure_type = mega_shipyard_2
					is_megastructure_type = mega_shipyard_3
					is_megastructure_type = mega_shipyard_ruined
					is_megastructure_type = mega_shipyard_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "mega_shipyard_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = {
				OR = {
					is_megastructure_type = matter_decompressor_1
					is_megastructure_type = matter_decompressor_2
					is_megastructure_type = matter_decompressor_3
					is_megastructure_type = matter_decompressor_4
					is_megastructure_type = matter_decompressor_ruined
					is_megastructure_type = matter_decompressor_restored
				}
			}
			solar_system = {
				spawn_megastructure = {
					type = "matter_decompressor_permanently_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { is_crisis_sphere = yes }
			solar_system = {
				spawn_megastructure = {
					type = crisis_sphere_ruined
					coords_from = prev
					init_effect = {
						random_country = {
							limit = {
								prevprev = { has_megastructure_flag = crisis_sphere_of@prev }
							}
							save_event_target_as = former_owner
						}
						set_megastructure_flag = crisis_sphere_of@event_target:former_owner
					}
				}
			}
			remove_megastructure = this
		}
		else = {
			remove_megastructure = this
		}
	}
	star = {
		create_ambient_object = {
			type = "destroyed_system"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = destroyed_system_effect
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
}