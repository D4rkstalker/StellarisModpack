# Stellaris Modjam 2020 - Caretaker
# AlphaAsh, NHunter, Rough, GwenBlanketKnight

### remove caretaker core [planet scope]
caretaker_core_clean_up = {
	remove_deposit = d_caretaker_core
	remove_deposit = d_caretaker_core_pleased
	remove_deposit = d_caretaker_core_content
	remove_deposit = d_caretaker_core_annoyed
	remove_deposit = d_caretaker_core_angry
	remove_modifier = pm_caretaker_core_pleased
	remove_modifier = pm_caretaker_core_content
	remove_modifier = pm_caretaker_core_annoyed
	remove_modifier = pm_caretaker_core_angry
}

### remove caretaker hub [planet scope]
caretaker_hub_clean_up = {
	remove_deposit = d_caretaker_hub
	remove_planet_flag = caretaker_origin_reminded_to_build_caretaker_hub
}

### replace current caretaker core with pleased [planet scope]
caretaker_set_mood_to_pleased = {
	caretaker_core_clean_up = yes
	add_deposit = d_caretaker_core_pleased
	add_modifier = {
		modifier = pm_caretaker_core_pleased
		days = -1
	}
}

### replace current caretaker core with content [planet scope]
caretaker_set_mood_to_content = {
	caretaker_core_clean_up = yes
	add_deposit = d_caretaker_core_content
	add_modifier = {
		modifier = pm_caretaker_core_content
		days = -1
	}
}

### replace current caretaker core with annoyed [planet scope]
caretaker_set_mood_to_annoyed = {
	caretaker_core_clean_up = yes
	add_deposit = d_caretaker_core_annoyed
	add_modifier = {
		modifier = pm_caretaker_core_annoyed
		days = -1
	}
}

### replace current caretaker core with angry [planet scope]
caretaker_set_mood_to_angry = {
	caretaker_core_clean_up = yes
	add_deposit = d_caretaker_core_angry
	add_modifier = {
		modifier = pm_caretaker_core_angry
		days = -1
	}
}

### updates caretaker deposit to reflect current mood [planet scope]
# Assumes that the owner of the planet is caretaker origin empire - no additional checks are done
caretaker_set_current_mood = {
	# caretaker is pleased
	if = {
		limit = { owner = { caretaker_mood_is_pleased_check = yes } }
		caretaker_set_mood_to_pleased = yes
	}
	# caretaker is content
	if = {
		limit = { owner = { caretaker_mood_is_content_check = yes } }
		caretaker_set_mood_to_content = yes
	}
	# caretaker is annoyed
	if = {
		limit = { owner = { caretaker_mood_is_annoyed_check = yes } }
		caretaker_set_mood_to_annoyed = yes
	}
	# caretaker is angry
	if = {
		limit = { owner = { caretaker_mood_is_angry_check = yes } }
		caretaker_set_mood_to_angry = yes
	}
}

### Request cooldown depending on current mood [empire scope]
caretaker_set_request_cooldown = {
	if = {
		limit = { caretaker_mood_is_pleased_check = yes }
		set_timed_country_flag = {
			flag = caretaker_resource_request_cooldown
			days = 180
		}
	}
	else_if = {
		limit = { caretaker_mood_is_content_check = yes }
		set_timed_country_flag = {
			flag = caretaker_resource_request_cooldown
			days = 360
		}
	}
	else_if = {
		limit = { caretaker_mood_is_annoyed_check = yes }
		set_timed_country_flag = {
			flag = caretaker_resource_request_cooldown
			days = 720
		}
	}
	else_if = {
		limit = { caretaker_mood_is_angry_check = yes }
		set_timed_country_flag = {
			flag = caretaker_resource_request_cooldown
			days = 1800
		}
	}
	else = {
		set_timed_country_flag = {
			flag = caretaker_resource_request_cooldown
			days = 720
		}
	}
}

### Caretaker mood update based on number of migration treaties
caretaker_update_mood_migration_treaties = {
	if = {
		limit = {
			NOT = { has_country_flag = caretaker_migration_treaties_check_cooldown }
			NOT = { has_valid_civic = civic_love_the_alien }
		}
		if = {
			limit = {
				NOT = { has_country_flag = caretaker_migration_treaties_first_check }
			}
			set_variable = {
				which = migration_treaties
				value = 0
			}
			set_country_flag = caretaker_migration_treaties_first_check
		}

		# count number of countries we have currently have migration treaties with
		set_variable = {
			which = updated_migration_treaties
			value = 0
		}
		# Ash - Limit is never reached - re-worked
		every_country = {
            limit = {
				is_country_type = default
                NOT = { is_country = root }
                has_migration_access = root
            }
			# log = "Found a migration treaty"
			root = {
				change_variable = {
					which = updated_migration_treaties
					value = 1
				}
			}
		}

		# give +1 mood for each old migration treaty and -1 for each new migration treaty
        change_variable = {
            which = caretaker_mood
            value = migration_treaties
        }
        subtract_variable = {
            which = caretaker_mood
            value = updated_migration_treaties
		}
		# save new count for migration treaties
        set_variable = {
            which = migration_treaties
            value = updated_migration_treaties
        }

		set_timed_country_flag = { flag = caretaker_migration_treaties_check_cooldown days = 179 }
	}
}

# Given a species, create a mod with trait_personal_caretaker and apply to all pops, leaders
# and armies that have the original species and the same owner as the scope object.
# Scope: Something that has a species and an owner
create_pci_species_mod = {
	species = {
		create_species = {
			is_mod = yes
			name = this
			plural = this
			class = this
			portrait = this
			traits = this
			homeworld = this
			traits = {
				ideal_planet_class = this
				trait = trait_personal_caretaker
			}
		}
		save_event_target_as = changing_species
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

### setups seceded Caretaker technologies [empire scope]
# PARENT_EMPIRE = empire from which Caretaker is seceding
caretaker_seceded_empire_setup_technology = {
	# give all technology that source country has and ensure the Caretaker has other key techs even if parent country didn't
	copy_techs_from = { target = $PARENT_EMPIRE$ }
	# ship sizes
	if = {
		limit = { NOT = { has_technology = tech_destroyers } }
		give_technology = { tech = tech_destroyers message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_cruisers } }
		give_technology = { tech = tech_cruisers message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_battleships } }
		give_technology = { tech = tech_battleships message = no }
	}
	# starbase sizes
	if = {
		limit = { NOT = { has_technology = tech_starbase_3 } }
		give_technology = { tech = tech_starbase_3 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_starbase_4 } }
		give_technology = { tech = tech_starbase_4 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_starbase_5 } }
		give_technology = { tech = tech_starbase_5 message = no }
	}
	# habitats
	if = {
		limit = { NOT = { has_technology = tech_habitat_1 } }
		give_technology = { tech = tech_habitat_1 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_habitat_2 } }
		give_technology = { tech = tech_habitat_2 message = no }
	}
	# metallurgy
	if = {
		limit = { NOT = { has_technology = tech_alloys_1 } }
		give_technology = { tech = tech_alloys_1 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_alloys_2 } }
		give_technology = { tech = tech_alloys_2 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_advanced_metallurgy_1 } }
		give_technology = { tech = tech_advanced_metallurgy_1 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_advanced_metallurgy_2 } }
		give_technology = { tech = tech_advanced_metallurgy_2 message = no }
	}
	# consumer goods
	if = {
		limit = { NOT = { has_technology = tech_luxuries_1 } }
		give_technology = { tech = tech_luxuries_1 message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_luxuries_2 } }
		give_technology = { tech = tech_luxuries_2 message = no }
	}
	# hydroponics
	if = {
		limit = { NOT = { has_technology = tech_hydroponics } }
		give_technology = { tech = tech_hydroponics message = no }
	}
	# strategic resources
	if = {
		limit = { NOT = { has_technology = tech_mine_rare_crystals } }
		give_technology = { tech = tech_mine_rare_crystals message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_mine_exotic_gases } }
		give_technology = { tech = tech_mine_exotic_gases message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_mine_volatile_motes } }
		give_technology = { tech = tech_mine_volatile_motes message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_rare_crystals } }
		give_technology = { tech = tech_rare_crystals message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_exotic_gases } }
		give_technology = { tech = tech_exotic_gases message = no }
	}
	if = {
		limit = { NOT = { has_technology = tech_volatile_motes } }
		give_technology = { tech = tech_volatile_motes message = no }
	}
	# organic paradise
	if = {
		limit = { NOT = { has_technology = tech_paradise_dome } }
		give_technology = { tech = tech_paradise_dome message = no }
	}
}

### setups initial population for seceded Caretaker [planet scope]
# CARETAKER_SPECIES = species of Caretaker drones
# PARENT_EMPIRE_SPECIES = species of the empire Caretaker secedes from
# <!!!> this effect should run before 'caretaker_seceded_empire_setup_capital' to avoid ruined buildins
caretaker_seceded_empire_setup_initial_population = {
	# kill all robots - we'll recreate them as $CARETAKER_SPECIES$ drones
	every_owned_pop = {
		limit = {
			OR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
			}
		}
		kill_pop = yes
	}
	# remove extra biological pops
	while = {
		limit = { num_pops > 40 }
		random_owned_pop = {
			kill_pop = yes
		}
	}
	# if we don't have enough bio pops, add them
	while = {
		limit = { num_pops < 40 }
		create_pop = { species = $PARENT_EMPIRE_SPECIES$ }
	}
	# add RS drones
	while = {
		count = 70
		create_pop = { species = $CARETAKER_SPECIES$ }
	}
}

### setups a planet for seceded Caretaker [planet scope]
caretaker_seceded_empire_setup_capital = {
	# grow planet if it is too small
	while = {
		limit = { planet_size < 20 }
		change_planet_size = 1
	}
	# change_pc = pc_gaia
	# rebuild planet : clear current deposits and buildings
	clear_deposits = yes
	remove_all_districts = yes
	remove_all_buildings = yes
	# rebuild planet : add new resource deposits
	add_deposit = d_hot_springs
	add_deposit = d_geothermal_vent
	add_deposit = d_underwater_vent
	add_deposit = d_tempestous_mountain
	add_deposit = d_mineral_fields
	add_deposit = d_mineral_fields
	add_deposit = d_ore_rich_caverns
	add_deposit = d_fungal_caves
	add_deposit = d_fertile_lands
	add_deposit = d_rare_crystals_1 # FIXME?
	add_deposit = d_exotic_gases_1 # FIXME?
	# rebuild planet : add districts
	add_district = district_nexus
	add_district = district_nexus
	add_district = district_nexus
	add_district = district_nexus
	add_district = district_nexus
	add_district = district_nexus
	add_district = district_generator
	add_district = district_generator
	add_district = district_generator
	add_district = district_generator
	add_district = district_mining
	add_district = district_mining
	add_district = district_mining
	add_district = district_mining
	add_district = district_mining
	add_district = district_farming
	add_district = district_farming
	# rebuild planet : add new buildings
	add_building = building_machine_system_capital
	add_building = building_machine_assembly_plant
	add_building = building_energy_nexus
	add_building = building_mineral_purification_hub
	add_building = building_food_processing_facility
	add_building = building_organic_paradise
	add_building = building_organic_paradise
	add_building = building_organic_sanctuary								
	add_building = building_sentinel_posts
	add_building = building_foundry_2
	add_building = building_factory_2
	add_building = building_chemical_plant												   
	add_building = building_crystal_plant
	add_building = building_refinery								  
}

### setups the starbase for the seceded Caretaker's capital [starbase scope]
caretaker_seceded_empire_setup_starbase = {
	# since people might be playing with NSC / Starbases Extended, make sure that we're not downgrading starbase
	if = {
		limit = { has_starbase_size <= starbase_citadel }
		set_starbase_size = starbase_citadel
		# setup citadel
		set_starbase_module = { slot = 1 module = shipyard }
		set_starbase_module = { slot = 2 module = shipyard }
		set_starbase_module = { slot = 3 module = anchorage }
		set_starbase_module = { slot = 4 module = anchorage }
		set_starbase_module = { slot = 5 module = gun_battery }
		set_starbase_module = { slot = 6 module = gun_battery }
		set_starbase_building = { slot = 1 building = crew_quarters }
		set_starbase_building = { slot = 2 building = fleet_academy }
		set_starbase_building = { slot = 3 building = naval_logistics_office }
		set_starbase_building = { slot = 4 building = command_center }
	}
	# make sure all necessary components are there
	else = {
		if = {
			limit = { NOT = { has_starbase_module = shipyard } }
			set_starbase_module = { slot = 1 module = shipyard }
			set_starbase_module = { slot = 2 module = shipyard }
		}
		if = {
			limit = { NOT = { has_starbase_module = anchorage } }
			set_starbase_module = { slot = 3 module = anchorage }
			set_starbase_module = { slot = 4 module = anchorage }
		}
		if = {
			limit = { NOT = { has_starbase_building = crew_quarters } }
			set_starbase_building = { slot = 1 building = crew_quarters }
		}
		if = {
			limit = { NOT = { has_starbase_building = fleet_academy } }
			set_starbase_building = { slot = 2 building = fleet_academy }
		}
	}
}

### creates construction ship and science ship for the seceded Caretaker
# FLEET_TARGET = where the fleet should spawn
caretaker_seceded_empire_create_civilian_ships = {
	# constructor
	create_fleet = {
		effect = {
			set_owner = event_target:caretaker_secession_empire
			create_ship = {
				name = random
				random_existing_design = constructor
				prefix = no
			}
			set_location = $FLEET_TARGET$
		}
	}
	# science ship + scientist
	create_fleet = {
		effect = {
			set_owner = event_target:caretaker_secession_empire
			create_ship = {
				name = random
				random_existing_design = science
				prefix = no
			}
			set_location = $FLEET_TARGET$
			save_event_target_as = caretaker_initial_surveyor
		}
	}
	create_leader = {
		class = scientist
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_custom_AI_assistant
		}
		effect = {
			save_event_target_as = caretaker_surveyor_leader
		}
	}
	event_target:caretaker_initial_surveyor = {
		assign_leader = event_target:caretaker_surveyor_leader
	}
}

### setups initial fleet for the seceded Caretaker
# FLEET_TARGET = where the fleet should spawn
caretaker_seceded_empire_create_starting_fleet = {
	create_fleet = {
		name = "NAME_CARETAKER_CORE_FLEET"
		effect = {
			set_owner = event_target:caretaker_secession_empire
			# battleships
			while = {
				count = 4
				create_ship = {
					name = random
					random_existing_design = battleship
					prefix = no
				}
			}
			# cruisers
			while = {
				count = 8
				create_ship = {
					name = random
					random_existing_design = cruiser
					prefix = no
				}
			}
			# destroyers
			while = {
				count = 16
				create_ship = {
					name = random
					random_existing_design = destroyer
					prefix = no
				}
			}
			# corvettes
			while = {
				count = 32
				create_ship = {
					name = random
					random_existing_design = corvette
					prefix = no
				}
			}

			add_modifier = { modifier = caretaker_core_fleet_upkeep_fix days = -1 }
			set_location = $FLEET_TARGET$
			save_event_target_as = caretaker_core_fleet
		}
	}
	# admiral
	create_leader = {
		class = admiral
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_cautious
		}
		effect = {
			save_event_target_as = caretaker_initial_admiral
		}
	}
	event_target:caretaker_core_fleet = {
		assign_leader = event_target:caretaker_initial_admiral
	}
}

### setups leaders for seceded Caretaker [country scope]
caretaker_seceded_empire_setup_leaders = {
	# governor. we will trust AI to assign it to core sector on its own
	create_leader = {
		class = governor
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_architectural_interest
		}
	}
	# scientists. no idea how to assign them, so let's hope AI is smart enough to do that on its own
	create_leader = {
		class = scientist
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_custom_AI_assistant
		}
	}
	create_leader = {
		class = scientist
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_custom_AI_assistant
		}
	}
	create_leader = {
		class = scientist
		species = owner_main_species
		name = random
		skill = 5
		traits = {
			trait = leader_trait_custom_AI_assistant
		}
	}
}

### removes caretaker deposits/modifiers and 'takes away' some pops [planet scope]
caretaker_secession_planets_clean_up = {
	if = {
		limit = { caretaker_presence_on_planet = yes }
		caretaker_core_clean_up = yes
		caretaker_hub_clean_up = yes

		if = {
			limit = { num_pops > 100 }
			while = {
				count = 5
				random_owned_pop = { kill_pop = yes }
			}
		}
		else_if = {
			limit = { num_pops > 80 }
			while = {
				count = 4
				random_owned_pop = { kill_pop = yes }
			}
		}
		else_if = {
			limit = { num_pops > 60 }
			while = {
				count = 3
				random_owned_pop = { kill_pop = yes }
			}
		}
		else_if = {
			limit = { num_pops > 40 }
			while = {
				count = 2
				random_owned_pop = { kill_pop = yes }
			}
		}
		else = {
			random_owned_pop = {
				kill_pop = yes
			}
		}
	}
}
