# ehof_giga_new_set_better_star_flags = {
# 	if = {
# 		limit = {
# 			ehof_giga_new_is_dwarf_contains_system = yes
# 		}
# 		set_star_flag = giga_has_dwarf_system
		
		
# 	}
# 	else_if = {
# 		limit = { 

# 		}
# 	}
# }
ehof_giga_new_set_star_flags = {
	switch = {
		trigger = is_star_class
		sc_ehof_black_hole = {
			set_star_flag = giga_black_hole_system
		}
		# sc_paired_b_b_a_a = {
		# }
		# sc_paired_bs_b_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_a_a_f_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_g_g_k_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_g_k_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_kg_gg_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_as_o_k_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_f_f_m_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_fs_g_m_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_paired_g_k_k_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		sc_trinary_1 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_2 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_3 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_4 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_o_b_b = {
		# }
		# sc_trinary_o_b_a = {
		# }
		# sc_trinary_os_b_b = {
		# }
		# sc_trinary_b_b_b = {
		# }
		# sc_trinary_b_a_a = {
		# }
		# sc_trinary_b_b_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_b_f_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_b_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_b_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_bs_b_b = {
		# }
		# sc_trinary_bs_b_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_bs_kg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_a_a_a = {
		# }
		# sc_trinary_a_f_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_a_a_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_as_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_as_gg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_f_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_k_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_fs_f_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_fs_kg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_g_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_k_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_gg_f_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_gg_mg_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_gs_gg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_gs_f_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_k_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_ks_gg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_ks_b_a = {
		# }
		# sc_trinary_ks_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_m_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_mg_g_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_mg_a_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_ms_b_a = {
		# }
		# sc_trinary_ms_kg_b = {
		# }
		# sc_trinary_ms_mg_mg = {
		# }
		# sc_trinary_b_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_b_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_a_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_a_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_t_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_t_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_m_l_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_m_t_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_m_t_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_b_a_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_bs_mg_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_a_f_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_as_g_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_f_k_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_g_k_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_gs_mg_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_k_m_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_ks_kg_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_m_m_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_mg_a_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_trinary_ms_f_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		sc_binary_1 = {
			set_star_flag = giga_pulsar_system
		}
		sc_binary_2 = {
			set_star_flag = giga_neutron_system
		}
		# sc_binary_3 = {
		# }
		sc_binary_4 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_5 = {
		# }
		sc_binary_6 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_7 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_8 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_9 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_10 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_pl_pl = {
		# }
		# sc_binary_pl_n = {
		# }
		# sc_binary_o_o = {
		# }
		# sc_binary_o_b = {
		# }
		# sc_binary_o_a = {
		# }
		# sc_binary_os_o = {
		# }
		# sc_binary_os_b = {
		# }
		# sc_binary_os_a = {
		# }
		# sc_binary_b_a = {
		# }
		# sc_binary_b_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_bs_b = {
		# # }
		# # sc_binary_a_a = {
		# # }
		# sc_binary_a_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_a_k = {
		# # }
		# sc_binary_a_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_as_a = {
		# # }
		# # sc_binary_as_b = {
		# # }
		# sc_binary_as_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_f_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_fs_b = {
		# # }
		# # sc_binary_fs_a = {
		# # }
		# sc_binary_fs_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_gg_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_gg_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_gg_f = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_gs_gg = {
		# # }
		# # sc_binary_gs_mg = {
		# # }
		# sc_binary_k_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_k_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_kg_a = {
		# # }
		# sc_binary_kg_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_kg_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_kg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_ks_b = {
		# # }
		# # sc_binary_kg_gg = {
		# # }
		# # sc_binary_ks_kg = {
		# # }
		# # sc_binary_ks_mg = {
		# # }
		# sc_binary_m_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_mg_mg = {
		# # }
		# sc_binary_mg_m = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_mg_g = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_mg_k = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# # sc_binary_ms_gg = {
		# # }
		# # sc_binary_ms_mg = {
		# # }
		# sc_binary_o_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_b_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_a_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_f_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_k_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_m_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_o_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_b_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_f_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_m_t = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_o_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_b_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_f_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_k_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_m_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_o_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_b_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_a_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_f_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_g_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_k_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_m_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_binary_ms_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }

		sc_microquasar_1 = {
			set_star_flag = giga_black_hole_system
		}
		sc_microquasar_2 = {
			set_star_flag = giga_black_hole_system
		}
		# sc_o = {
		# }
		# sc_o_super = {
		# }
		# sc_o_hyper = {
		# }
		# sc_b = {
		# }
		# sc_b_super = {
		# }
		# sc_a = {
		# }
		# sc_a_super = {
		# }
		sc_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_f_super = {
		# }
		sc_g = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_g_giant = {
		# }
		# sc_g_super = {
		# }
		sc_k = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_k_giant = {
		# }
		# sc_k_super = {
		# }
		sc_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_m_giant = {
		# }
		# sc_m_super = {
		# }
		# sc_m_hyper = {
		# }
		# sc_l = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		sc_t = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_y = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		# sc_d = {
		# 	set_star_flag = giga_has_dwarf_system
		# }
		sc_black_hole = {
			set_star_flag = giga_black_hole_system
		}
		sc_neutron_star = {
			set_star_flag = giga_neutron_system
		}
		sc_pulsar = {
			set_star_flag = giga_pulsar_system
		}
		# sc_c_giant = {
		# }
		# sc_s_giant = {
		# }
		# sc_w_azure = {
		# }
		# sc_w_red = {
		# }
		# sc_w_green = {
		# }
		# sc_w_purple = {
		# }
		# sc_nova_1 = {
		# }
		# sc_nova_2 = {
		# }
		# sc_collapsar = {
		# }
		# sc_protostar = {
		# }
		# sc_lbv_blue = {
		# }
		# sc_lbv_green = {
		# }
		# sc_lbv_red = {
		# }
		# sc_tt_red = {
		# }
		# sc_tt_orange = {
		# }
		# sc_tt_white = {
		# }
		# sc_ae = {
		# }
		# sc_p_purple = {
		# }
		# sc_p_green = {
		# }
		# sc_p_red = {
		# }
		# sc_magnetar = {
		# }
	}
}
ehof_giga_new_set_star_flags_rs = {
	switch = {
		trigger = is_star_class
		sc_ehof_black_hole = {
			set_star_flag = giga_black_hole_system
		}
		# sc_paired_b_b_a_a = {
		# }
		sc_paired_bs_b_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_paired_a_a_f_f = {
		# }
		sc_paired_g_g_k_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_g_k_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_kg_gg_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_as_o_k_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_f_f_m_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_fs_g_m_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_paired_g_k_k_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_1 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_2 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_3 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_4 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_o_b_b = {
		# }
		# sc_trinary_o_b_a = {
		# }
		# sc_trinary_os_b_b = {
		# }
		# sc_trinary_b_b_b = {
		# }
		# sc_trinary_b_a_a = {
		# }
		# sc_trinary_b_b_f = {
		# }
		sc_trinary_b_f_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_b_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_b_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_bs_b_b = {
		# }
		sc_trinary_bs_b_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_bs_kg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_a_a_a = {
		# }
		sc_trinary_a_f_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_a_a_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_as_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_as_gg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_f_f = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_k_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_fs_f_f = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_fs_kg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_g_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_k_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_gg_f_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_gg_mg_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_gs_gg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_gs_f_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_k_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_ks_gg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_ks_b_a = {
		# }
		sc_trinary_ks_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_m_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_mg_g_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_mg_a_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_trinary_ms_b_a = {
		# }
		# sc_trinary_ms_kg_b = {
		# }
		# sc_trinary_ms_mg_mg = {
		# }
		sc_trinary_b_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_b_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_a_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_a_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_t_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_t_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_m_l_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_m_t_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_m_t_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_b_a_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_bs_mg_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_a_f_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_as_g_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_f_k_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_g_k_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_gs_mg_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_k_m_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_ks_kg_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_m_m_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_mg_a_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_trinary_ms_f_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_1 = {
			set_star_flag = giga_pulsar_system
		}
		sc_binary_2 = {
			set_star_flag = giga_neutron_system
		}
		# sc_binary_3 = {
		# }
		sc_binary_4 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_5 = {
		# }
		sc_binary_6 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_7 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_8 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_9 = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_10 = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_pl_pl = {
		# }
		# sc_binary_pl_n = {
		# }
		# sc_binary_o_o = {
		# }
		# sc_binary_o_b = {
		# }
		# sc_binary_o_a = {
		# }
		# sc_binary_os_o = {
		# }
		# sc_binary_os_b = {
		# }
		# sc_binary_os_a = {
		# }
		# sc_binary_b_a = {
		# }
		sc_binary_b_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_bs_b = {
		# }
		# sc_binary_a_a = {
		# }
		sc_binary_a_g = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_a_k = {
		# }
		sc_binary_a_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_as_a = {
		# }
		# sc_binary_as_b = {
		# }
		sc_binary_as_f = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_f_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_fs_b = {
		# }
		# sc_binary_fs_a = {
		# }
		sc_binary_fs_f = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_gg_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_gg_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_gg_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_gs_gg = {
		# }
		# sc_binary_gs_mg = {
		# }
		sc_binary_k_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_k_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_kg_a = {
		# }
		sc_binary_kg_k = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_kg_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_kg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_ks_b = {
		# }
		# sc_binary_kg_gg = {
		# }
		# sc_binary_ks_kg = {
		# }
		# sc_binary_ks_mg = {
		# }
		sc_binary_m_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_mg_mg = {
		# }
		sc_binary_mg_m = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_mg_g = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_mg_k = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_binary_ms_gg = {
		# }
		# sc_binary_ms_mg = {
		# }
		sc_binary_o_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_b_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_a_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_f_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_k_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_m_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_o_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_b_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_f_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_m_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_o_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_b_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_f_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_k_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_m_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_o_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_b_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_a_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_f_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_g_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_k_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_m_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_binary_ms_d = {
			set_star_flag = giga_has_dwarf_system
		}

		sc_microquasar_1 = {
			set_star_flag = giga_black_hole_system
		}
		sc_microquasar_2 = {
			set_star_flag = giga_black_hole_system
		}
		# sc_o = {
		# }
		# sc_o_super = {
		# }
		# sc_o_hyper = {
		# }
		# sc_b = {
		# }
		# sc_b_super = {
		# }
		# sc_a = {
		# }
		# sc_a_super = {
		# }
		sc_f = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_f_super = {
		# }
		sc_g = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_g_giant = {
		# }
		# sc_g_super = {
		# }
		sc_k = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_k_giant = {
		# }
		# sc_k_super = {
		# }
		sc_m = {
			set_star_flag = giga_has_dwarf_system
		}
		# sc_m_giant = {
		# }
		# sc_m_super = {
		# }
		# sc_m_hyper = {
		# }
		sc_l = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_t = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_y = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_d = {
			set_star_flag = giga_has_dwarf_system
		}
		sc_black_hole = {
			set_star_flag = giga_black_hole_system
		}
		sc_neutron_star = {
			set_star_flag = giga_neutron_system
		}
		sc_pulsar = {
			set_star_flag = giga_pulsar_system
		}
		# sc_c_giant = {
		# }
		# sc_s_giant = {
		# }
		# sc_w_azure = {
		# }
		# sc_w_red = {
		# }
		# sc_w_green = {
		# }
		# sc_w_purple = {
		# }
		# sc_nova_1 = {
		# }
		# sc_nova_2 = {
		# }
		# sc_collapsar = {
		# }
		# sc_protostar = {
		# }
		# sc_lbv_blue = {
		# }
		# sc_lbv_green = {
		# }
		# sc_lbv_red = {
		# }
		# sc_tt_red = {
		# }
		# sc_tt_orange = {
		# }
		# sc_tt_white = {
		# }
		# sc_ae = {
		# }
		# sc_p_purple = {
		# }
		# sc_p_green = {
		# }
		# sc_p_red = {
		# }
		# sc_magnetar = {
		# }
	}
}

ehof_giga_new_spawn_guardian = {
	
	random_list = {
		1 = {
			modifier = {
				factor = 0
				OR = {
					NOT = {
						has_global_flag = ehof_can_spawn_guardian_dragon
					}
					has_star_flag = giga_black_hole_system
					has_star_flag = giga_neutron_system
					has_star_flag = giga_pulsar_system
					
					NOT = {
						any_system_planet = {
							is_star = no
							is_asteroid = no
							planet_size > 4
						}
					}
					num_planets_in_system < 3
				}
			}
			ehof_giga_new_spawn_ether_dragon = yes
		}
		1 = {
			modifier = {
				weight = 0
				
					NAND = {
						has_global_flag = ehof_can_spawn_guardian_sphere
						has_star_flag = giga_black_hole_system
						
					}
				
			}
			ehof_giga_new_spawn_technosphere = yes
		}
		1 = {
			modifier = {
				weight = 0
				NAND = {
					has_global_flag = ehof_can_spawn_guardian_wraith
					has_star_flag = giga_pulsar_system
					
				}
			}
			ehof_giga_new_spawn_wraith = yes
		}
		1 = {
			modifier = {
				weight = 0
				NAND = {
					has_global_flag = ehof_can_spawn_guardian_horror
					has_star_flag = giga_black_hole_system
					
				}
			}
			ehof_giga_new_spawn_eldritch_horror = yes
		}
		1 = {
			modifier = {
				factor = 0
				NOT = {
					has_global_flag = ehof_can_spawn_guardian_fortress
				}
			}
			ehof_giga_new_spawn_guardian_fortress = yes
		}
		1 = {
			modifier = {
				weight = 0
				NAND = {
					has_global_flag = ehof_can_spawn_guardian_stellarite
					has_star_flag = giga_has_dwarf_system
					
				}
			}
			ehof_giga_new_spawn_stellarite_devourer = yes
		}
		1 = {
			modifier = {
				weight = 0
				NOT = {
					has_global_flag = ehof_can_spawn_guardian_dreadnought
				}
			}
			ehof_giga_new_spawn_ancient_dreadnought = yes
		}
	}
}

ehof_giga_new_spawn_ether_dragon = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_dragon_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	random_system_planet = {
		limit = {
			planet_size >= 5
			is_star = no
			is_moon = no
			is_asteroid = no
		}
		change_pc = pc_barren
		clear_deposits = yes
		set_name = "NAME_Dragons_Hoard"
		set_planet_flag = hoard_planet
		save_global_event_target_as = guardian_dragon_planet
		prevent_anomaly = yes
		set_deposit = d_guardian_dragon_hoard
		create_country = {
			name = "NAME_Voidwyrm"
			type = guardian_dragon
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_5.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			save_global_event_target_as = guardian_dragon_country
			set_country_flag = dragon_country
		}
		create_fleet = {
			name = "NAME_Ether_Drake"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_owner = event_target:guardian_dragon_country
				create_ship = {
					name = "NAME_Avice"
					design = "NAME_Grand_Dragon"
				}
				set_fleet_flag = dragon_fleet
				set_location = event_target:guardian_dragon_planet
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 500
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = giga_dragon.home.1
								is_star = yes
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
									random = 20
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dragon.home.2
								is_star = no
								NOT = {
									is_same_value = event_target:guardian_dragon_planet
								}
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
									random = 20
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dragon.home.3
								is_same_value = event_target:guardian_dragon_planet
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
									random = 20
								}
							}
						}
					}
				}
			}
		}
	}
}

ehof_giga_new_spawn_technosphere = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_technosphere_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	set_name = "NAME_Gargantua"
	star = {
		set_name = "NAME_Gargantua"
		prevent_anomaly = yes
		clear_deposits = yes
		create_country = {
			name = "NAME_Infinity_Machine"
			type = guardian_sphere
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_5.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			save_global_event_target_as = guardian_technosphere_country
			if = {
				limit = {
					NOT = {
						has_modifier = technosphere_power
					}
				}
				add_modifier = {
					modifier = technosphere_power
					days = -1
				}
			}
			set_graphical_culture = techno
			create_fleet = {
				name = "NAME_The_Infinity_Machine"
				settings = {
					spawn_debris = no
					is_boss = yes
				}
				effect = {
					set_owner = event_target:guardian_technosphere_country
					create_ship = {
						name = "NAME_I_O"
						design = "NAME_Infinity_Machine"
					}
					set_fleet_flag = technosphere_fleet
					set_location = {
						target = prevprev
						distance = 80
						angle = 220
					}
					set_fleet_stance = passive
					set_aggro_range_measure_from = self
					set_aggro_range = 100
					save_global_event_target_as = technosphere_ship
				}
			}
		}
	}
}

ehof_giga_new_spawn_wraith = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_wraith_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	star = {
		save_event_target_as = wraith_star
		create_country = {
			name = "NAME_Wraith"
			type = guardian_wraith
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_5.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			set_country_flag = wraith_country
			save_global_event_target_as = wraith_country
			create_fleet = {
				name = "NAME_Specter"
				settings = {
					spawn_debris = no
					is_boss = yes
				}
				effect = {
					set_owner = event_target:wraith_country
					random_list = {
						33 = {
							create_ship = {
								name = "NAME_Wraith_650THz"
								design = "NAME_Spectral_Wraith_650THz"
								effect = {
									set_ship_flag = wraith_ship
									set_ship_flag = wraith_freq_blue
								}
							}
						}
						33 = {
							create_ship = {
								name = "NAME_Wraith_450THz"
								design = "NAME_Spectral_Wraith_450THz"
								effect = {
									set_ship_flag = wraith_ship
									set_ship_flag = wraith_freq_red
								}
							}
						}
						33 = {
							create_ship = {
								name = "NAME_Wraith_520THz"
								design = "NAME_Spectral_Wraith_520THz"
								effect = {
									set_ship_flag = wraith_ship
									set_ship_flag = wraith_freq_yellow
								}
							}
						}
					}
					save_global_event_target_as = wraith_fleet
					set_fleet_flag = wraith_fleet
					set_location = event_target:wraith_star
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 20
					queue_actions = {
						repeat = {
							find_closest_system = {
								trigger = {
									id = giga_wraith.1.trigger.1
									NOR = {
										exists = space_owner
										any_fleet_in_system = {
											is_same_value = event_target:wraith_fleet
										}
										has_star_flag = guardians_wraith_visited
									}
								}
								found_system = {
									move_to = this
									find_closest_planet = {
										trigger = {
											id = giga_wraith.1.trigger.2
											is_star = yes
										}
										found_planet = {
											move_to = this
											wait = {
												duration = 10
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		from = {
			country_event = {
				id = leviathans.2012
			}
		}
	}
}

ehof_giga_new_spawn_eldritch_horror = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_horror_system
	set_star_flag = guardian
	set_star_flag = hostile_system
}

ehof_giga_new_spawn_guardian_fortress = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_fortress_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	star = {
		create_country = {
			name = "NAME_Enigmatic_Fortress"
			type = guardian_fortress
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_5.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = fortress_country
				set_country_flag = fortress_country
				if = {
					limit = {
						NOT = {
							has_modifier = enigmatic_power
						}
					}
					add_modifier = {
						modifier = enigmatic_power
						days = -1
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Enigmatic_Fortress"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_owner = event_target:fortress_country
				while = {
					count = 1					#just to show-case that formation will tile
					create_ship = {
						name = ""
						design = "NAME_Ancient_Vault"
						graphical_culture = "ancient"
						effect = {
							set_ship_flag = fortress_vault
							set_disable_at_health = 0.05
							save_global_event_target_as = fortress_vault_core
						}
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Guardian"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Guardian"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Guardian"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Guardian"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Defender"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Defender"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Defender"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Defender"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
					create_ship = {
						name = ""
						design = "NAME_Ancient_Sentinel"
						graphical_culture = "ancient"
					}
				}
				set_fleet_formation = {
					position = {
						x = 13
						y = -7
					}
					#17
					position = {
						x = 11.5
						y = -13
					}
					#16
					position = {
						x = 0
						y = -15.5
					}
					#15
					position = {
						x = 13
						y = 7
					}
					#14
					position = {
						x = -11.8
						y = -4
					}
					#13
					position = {
						x = -15.8
						y = 6.5
					}
					#12
					position = {
						x = -10
						y = 8.5
					}
					#11
					position = {
						x = -1.6
						y = 15
					}
					#10
					position = {
						x = 14
						y = -3
					}
					#9
					position = {
						x = 1.3
						y = -11
					}
					#8
					position = {
						x = -10.5
						y = 1
					}
					#7
					position = {
						x = 3
						y = 8
					}
					#6
					position = {
						x = -4.3
						y = -7
					}
					#5
					position = {
						x = 8
						y = 9
					}
					#4
					position = {
						x = -4
						y = 7.3
					}
					#3
					position = {
						x = 7.5
						y = -10.5
					}
					#2
					position = {
						x = 0
						y = 0
					}
					#1
				}
				set_formation_scale = 0.5
				set_location = {
					target = PREV
					distance = 25
					angle = 150
				}
				set_fleet_flag = fortress_fleet
				save_global_event_target_as = fortress_fleet
			}
		}
	}
}

ehof_giga_new_spawn_stellarite_devourer = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_stellarite_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	star = {
		change_planet_size = -5
	}
}

ehof_giga_new_spawn_ancient_dreadnought = {
	from = {
		set_timed_country_flag = {
			flag = ehof_recently_spawned_guardian
			years = 5
		}
	}
	set_star_flag = guardians_dreadnought_system
	set_star_flag = guardian
	set_star_flag = hostile_system
	while = {
		count = 7
		random_system_planet = {
			limit = {
				NOR = {
					is_star = yes
					has_planet_flag = patrol_2
					has_planet_flag = patrol_3
					has_planet_flag = patrol_4
					has_planet_flag = patrol_5
					has_planet_flag = patrol_6
					has_planet_flag = patrol_7
					has_planet_flag = patrol_8
				}
			}
			if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_2
							}
						}
					}
				}
				set_planet_flag = patrol_2
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_3
							}
						}
					}
				}
				set_planet_flag = patrol_3
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_4
							}
						}
					}
				}
				set_planet_flag = patrol_4
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_5
							}
						}
					}
				}
				set_planet_flag = patrol_5
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_6
							}
						}
					}
				}
				set_planet_flag = patrol_6
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_7
							}
						}
					}
				}
				set_planet_flag = patrol_7
			}
			else_if = {
				limit = {
					solar_system = {
						NOT = {
							any_system_planet = {
								has_planet_flag = patrol_8
							}
						}
					}
				}
				set_planet_flag = patrol_8
			}
		}
	}
	star = {
		set_planet_flag = patrol_1
		save_event_target_as = dreadnought_sun
		create_country = {
			name = "NAME_Automated_Dreadnought"
			type = guardian_dreadnought
			flag = {
				icon = {
					category = "spherical"
					file = "flag_spherical_6.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			if = {
				limit = {
					NOT = {
						has_modifier = dreadnought_power
					}
				}
				add_modifier = {
					modifier = dreadnought_power
					days = -1
				}
			}
			save_global_event_target_as = automated_dreadnought_country
			set_country_flag = automated_dreadnought_country
		}
		create_fleet = {
			name = "NAME_Automated_Dreadnought"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_owner = event_target:automated_dreadnought_country
				save_global_event_target_as = automated_dreadnought
				create_ship = {
					name = "NAME_JuukTidir"
					design = "NAME_Relic"
					graphical_culture = "npf_01_dirty"
				}
				set_location = {
					target = event_target:dreadnought_sun
					distance = 0
					angle = random
				}
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 350
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.1
								has_planet_flag = patrol_1
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.2
								has_planet_flag = patrol_2
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.3
								has_planet_flag = patrol_3
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.4
								has_planet_flag = patrol_4
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.5
								has_planet_flag = patrol_5
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.6
								has_planet_flag = patrol_6
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.7
								has_planet_flag = patrol_7
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
						find_closest_planet = {
							trigger = {
								id = giga_dreadnought.patrol.8
								has_planet_flag = patrol_8
							}
							found_planet = {
								move_to = this
								orbit_planet = this
								wait = {
									duration = 30
								}
							}
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_blue_1 = {
	set_star_flag = blue_system
	set_star_flag = hostile_system

	create_crystal_country = yes
	random_system_planet = {
		limit = { is_star = no }
		event_target:crystal_country = {
			create_fleet = {
				name = "NAME_Sapphire_Lurkers"
				effect = {
					set_owner = event_target:crystal_country
					while = {
						count = 7
						create_ship = {
							name = ""
							design = "NAME_Large_Crystal_Entity_Blue"
						}
					}
					while = {
						count = 9
						create_ship = {
							name = ""
							design = "NAME_Medium_Crystal_Entity_Blue"
						}
					}
					while = {
						count = 20
						create_ship = {
							name = ""
							design = "NAME_Small_Crystal_Entity_Blue"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 150
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_blue_2 = {
	set_star_flag = blue2_system
	set_star_flag = hostile_system

	create_crystal_country = yes
	random_system_planet = {
		limit = { is_star = no }
		save_event_target_as = blue2_trigger_1
	}
	random_system_planet = {
		limit = {
			is_star = no
			NOT = { is_same_value = event_target:blue2_trigger_1 }
		}
		save_event_target_as = blue2_trigger_2
	}
	random_system_planet = {
		limit = {
			is_star = no
			NOR = {
				is_same_value = event_target:blue2_trigger_1
				is_same_value = event_target:blue2_trigger_2
			}
		}
		save_event_target_as = blue2_trigger_3
	}
	event_target:crystal_country = {
		if = {
			limit = { exists = event_target:blue2_trigger_3 }
			create_fleet = {
				name = "NAME_Sapphire_Lurkers"
				effect = {
					set_owner = event_target:crystal_country
					while = {
						count = 14
						create_ship = {
							name = ""
							design = "NAME_Small_Crystal_Entity_Blue"
						}
					}
					set_location = event_target:blue2_trigger_3
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 150
				}
			}
		}
		if = {
			limit = { exists = event_target:blue2_trigger_2 }
			create_fleet = {
				name = "NAME_Sapphire_Lurkers"
				effect = {
					set_owner = event_target:crystal_country
					while = {
						count = 3
						create_ship = {
							name = ""
							design = "NAME_Medium_Crystal_Entity_Blue"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = ""
							design = "NAME_Small_Crystal_Entity_Blue"
						}
					}
					set_location = event_target:blue2_trigger_2
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 150
				}
			}
		}
		if = {
			limit = { exists = event_target:blue2_trigger_1 }
			create_fleet = {
				name = "NAME_Sapphire_Lurkers"
				effect = {
					set_owner = event_target:crystal_country
					while = {
						count = 3
						create_ship = {
							name = ""
							design = "NAME_Medium_Crystal_Entity_Blue"
						}
					}
					while = {
						count = 6
						create_ship = {
							name = ""
							design = "NAME_Small_Crystal_Entity_Blue"
						}
					}
					set_location = event_target:blue2_trigger_1
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 150
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_green_1 = {
	set_star_flag = green_system
	set_star_flag = hostile_system

	create_crystal_country = yes
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
		}
		save_event_target_as = green_trigger_1
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOT = { is_same_value = event_target:green_trigger_1 }
		}
		save_event_target_as = green_trigger_2
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOR = {
				is_same_value = event_target:green_trigger_1
				is_same_value = event_target:green_trigger_2
			}
		}
		save_event_target_as = green_trigger_3
	}
	event_target:crystal_country = {
		create_fleet = {
			name = "NAME_Emerald_Roamers"
			effect = {
				set_owner = event_target:crystal_country
				create_ship = {
					name = ""
					design = "NAME_Large_Crystal_Entity_Green"
				}
				while = {
					count = 2
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Green"
					}
				}
				while = {
					count = 8
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Green"
					}
				}
				set_location = event_target:green_trigger_3
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 100
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = "giga_greenC.1.trigger.1"
								is_planet = event_target:green_trigger_1
							}
							found_planet = {
								move_to = this
								orbit_planet = THIS
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC.1.trigger.2"
								is_planet = event_target:green_trigger_2
							}
							found_planet = {
								move_to = this
								orbit_planet = THIS
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC.1.trigger.3"
								is_planet = event_target:green_trigger_3
							}
							found_planet = {
								move_to = this
								orbit_planet = THIS
							}
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_green_2 = {
	set_star_flag = green2_system
	set_star_flag = hostile_system

	create_crystal_country = yes
	random_system_planet = {
		limit = { is_star = no }
		save_event_target_as = green2_trigger_1
	}
	random_system_planet = {
		limit = {
			is_star = no
			NOT = { is_same_value = event_target:green2_trigger_1 }
		}
		save_event_target_as = green2_trigger_2
	}
	random_system_planet = {
		limit = {
			is_star = no
			NOR = {
				is_same_value = event_target:green2_trigger_1
				is_same_value = event_target:green2_trigger_2
			}
		}
		save_event_target_as = green2_trigger_3
	}
	event_target:crystal_country = {
		save_event_target_as = green2_owner
		create_fleet = {
			name = "NAME_Emerald_Roamers"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 5
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Green"
					}
				}
				set_location = event_target:green2_trigger_3
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 40
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.1.trigger.1"
								is_planet = event_target:green2_trigger_1
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.1.trigger.2"
								is_planet = event_target:green2_trigger_2
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.1.trigger.3"
								is_planet = event_target:green2_trigger_3
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Emerald_Roamers"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 3
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Green"
					}
				}
				while = {
					count = 2
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Green"
					}
				}
				while = {
					count = 3
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Green"
					}
				}
				set_location = event_target:green2_trigger_1
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 40
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.2.trigger.2"
								is_planet = event_target:green2_trigger_2
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.2.trigger.3"
								is_planet = event_target:green2_trigger_3
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.2.trigger.1"
								is_planet = event_target:green2_trigger_1
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Emerald_Roamers"
			effect = {
				set_owner = event_target:crystal_country
				create_ship = {
					name = ""
					design = "NAME_Medium_Crystal_Entity_Green"
				}
				while = {
					count = 6
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Green"
					}
				}
				set_location = event_target:green2_trigger_2
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 40
				queue_actions = {
					repeat = {
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.3.trigger.3"
								is_planet = event_target:green2_trigger_3
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.3.trigger.1"
								is_planet = event_target:green2_trigger_1
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
						find_closest_planet = {
							trigger = {
								id = "giga_greenC2.3.trigger.2"
								is_planet = event_target:green2_trigger_2
							}
							found_planet = {
								move_to = this
								orbit_planet = this
							}
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_red_1 = {
	set_star_flag = red_system
	set_star_flag = hostile_system

	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
		}
		save_event_target_as = red_trigger_1
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOT = { is_same_value = event_target:red_trigger_1 }
		}
		save_event_target_as = red_trigger_2
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOR = {
				is_same_value = event_target:red_trigger_1
				is_same_value = event_target:red_trigger_2
			}
		}
		save_event_target_as = red_trigger_3
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOR = {
				is_same_value = event_target:red_trigger_1
				is_same_value = event_target:red_trigger_2
				is_same_value = event_target:red_trigger_3
			}
		}
		save_event_target_as = red_trigger_4
	}
	create_crystal_country = yes
	event_target:crystal_country = {
		save_event_target_as = red_crystals
		create_fleet = {
			name = "NAME_Ruby_Stack"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 3
					create_ship = {
						name = ""
						design = "NAME_Large_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red_trigger_1
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 40
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Stack"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 4
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red_trigger_2
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 30
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Stack"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 11
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red_trigger_3
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 40
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Stack"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 3
					create_ship = {
						name = ""
						design = "NAME_Large_Crystal_Entity_Red"
					}
				}
				while = {
					count = 6
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red_trigger_4
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 30
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_crystal_red_2 = {
	set_star_flag = red2_system
	set_star_flag = hostile_system

	create_crystal_country = yes
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
		}
		save_event_target_as = red2_trigger_1
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOT = { is_same_value = event_target:red2_trigger_1 }
		}
		save_event_target_as = red2_trigger_2
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOR = {
				is_same_value = event_target:red2_trigger_1
				is_same_value = event_target:red2_trigger_2
			}
		}
		save_event_target_as = red2_trigger_3
	}
	random_system_planet = {
		limit = {
			is_star = no
			is_moon = no
			NOR = {
				is_same_value = event_target:red2_trigger_1
				is_same_value = event_target:red2_trigger_2
				is_same_value = event_target:red2_trigger_3
			}
		}
		save_event_target_as = red2_trigger_4
	}
	event_target:crystal_country = {
		save_event_target_as = red2_crystals
		create_fleet = {
			name = "NAME_Ruby_Swarm"
			effect = {
				set_owner = event_target:crystal_country
				create_ship = {
					name = "NAME_Kappa"
					design = "NAME_Large_Crystal_Entity_Red"
				}
				create_ship = {
					name = ""
					design = "NAME_Large_Crystal_Entity_Red"
				}
				while = {
					count = 6
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Red"
					}
				}
				while = {
					count = 19
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red2_trigger_1
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 100
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Swarm"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 9
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Red"
					}
				}
				while = {
					count = 6
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red2_trigger_2
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 100
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Swarm"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 24
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red2_trigger_3
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 100
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
		create_fleet = {
			name = "NAME_Ruby_Swarm"
			effect = {
				set_owner = event_target:crystal_country
				while = {
					count = 11
					create_ship = {
						name = ""
						design = "NAME_Large_Crystal_Entity_Red"
					}
				}
				while = {
					count = 2
					create_ship = {
						name = ""
						design = "NAME_Medium_Crystal_Entity_Red"
					}
				}
				while = {
					count = 7
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Red"
					}
				}
				set_location = event_target:red2_trigger_4
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 100
				queue_actions = {
					repeat = {
						wait = {
							duration = 9999
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_cloud = {
	set_star_flag = void_system
	set_star_flag = hostile_system

	create_cloud_country = yes
	random_system_planet = {
		limit = { is_star = yes }
		set_deposit = d_energy_2
		event_target:cloud_country = {
			set_aggro_range = 500
			create_fleet = {
				name = "NAME_Void_Cloud"
				effect = {
					set_owner = event_target:cloud_country
					create_ship = {
						name = ""
						design = "NAME_Cloud_Entity"
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 500
				}
			}
		}
	}
}
ehof_giga_new_spawn_large_pack = {
	set_star_flag = amoeba_1_system
	set_star_flag = hostile_system

	create_amoeba_country = yes
	random_system_planet = {
		limit = { is_star = no }
		event_target:amoeba_country = {
			create_fleet = {
				name = "NAME_Space_Amoeba_plural"
				settings = { garrison = yes }
				effect = {
					set_owner = event_target:amoeba_country
					while = {
						count = 6
						create_ship = {
							name = ""
							design = "NAME_Small_Space_Organism_Zebra"
						}
					}
					while = {
						count = 2
						create_ship = {
							name = ""
							design = "NAME_Large_Space_Organism_Zebra"
						}
					}
					set_formation_scale = 3.0
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 100
				}
			}
		}
	}
}
ehof_giga_new_spawn_small_pack = {
	set_star_flag = amoeba_2_system
	set_star_flag = hostile_system

	create_amoeba_country = yes
	random_system_planet = {
		limit = { is_star = no }
		event_target:amoeba_country = {
			create_fleet = {
				name = "NAME_Space_Amoeba_plural"
				settings = { garrison = yes }
				effect = {
					set_owner = event_target:amoeba_country
					while = {
						count = 4
						create_ship = {
							name = ""
							design = "NAME_Small_Space_Organism_Teal"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = ""
							design = "NAME_Large_Space_Organism_Teal"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 100
				}
			}
		}
	}
}
ehof_giga_new_spawn_amoeba_roamers = {
	set_star_flag = amoeba_3_system
	set_star_flag = hostile_system

	create_amoeba_country = yes
	random_system_planet = {
		limit = { is_star = no }
		save_event_target_as = grazing_grounds
		event_target:amoeba_country = {
			create_fleet = {
				name = "NAME_Space_Amoeba_Hunters"
				effect = {
					set_owner = event_target:amoeba_country
					random_list = {
						20 = { set_fleet_flag = tiyanki_hunter }
						70 = { set_fleet_flag = empty_system }
					}
					while = {
						count = 4
						create_ship = {
							name = ""
							design = "NAME_Small_Space_Organism_Orange"
						}
					}
					while = {
						count = 1
						create_ship = {
							name = ""
							design = "NAME_Large_Space_Organism_Orange"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 20

					if = {
						limit = { has_fleet_flag = tiyanki_hunter }
						save_event_target_as = hunting_amoeba
						queue_actions = {
							wait = { # Cooldown until they start moving
								duration = 500
								random = 100
							}
						}
					}
					else = {
						queue_actions = {
							wait = { # Cooldown until they start moving
								duration = 500
								random = 100
							}
						}
					}
				}
			}
		}
	}
}
ehof_giga_new_spawn_mining_drones_1 = {
	set_star_flag = drone_system_1
	set_star_flag = hostile_system

	create_drone_country = yes
	random_system_planet = {
		limit = {
			has_deposit_for = shipclass_mining_station
			is_star = no
			NOT = { giga_is_gas_giant = yes }
		}
		set_deposit = d_minerals_4
		event_target:drone_country = {
			save_event_target_as = mining_drones
			create_fleet = {
				name = "NAME_Ancient_Mining_Drones"
				effect = {
					set_owner = event_target:drone_country
					while = {
						count = 10
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Drone"
						}
					}
					while = {
						count = 4
						create_ship = {
							name = ""
							design = "NAME_Ancient_Combat_Drone"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 150
					queue_actions = {
						repeat = {
							wait = {
								duration = 999
								random = 10
							}
						}
					}
				}
			}
		}
		create_mining_station = {
			owner = event_target:mining_drones
		}
	}
}
ehof_giga_new_spawn_mining_drones_2 = {

	set_star_flag = drone_system_2
	set_star_flag = hostile_system

	create_drone_country = yes
	random_system_planet = {
		limit = {
			has_deposit_for = shipclass_mining_station
			is_star = no
			NOT = { giga_is_gas_giant = yes }
		}
		set_deposit = d_minerals_8
		event_target:drone_country = {
			save_event_target_as = mining_drones
			create_fleet = {
				name = "NAME_Ancient_Mining_Drones"
				effect = {
					set_owner = event_target:drone_country
					while = {
						count = 8
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Drone"
						}
					}
					while = {
						count = 4
						create_ship = {
							name = ""
							design = "NAME_Ancient_Combat_Drone"
						}
					}
					while = {
						count = 2
						create_ship = {
							name = ""
							design = "NAME_Ancient_Destroyer"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 150
					queue_actions = {
						repeat = {
							wait = {
								duration = 999
								random = 10
							}
						}
					}
				}
			}
		}
		create_mining_station = {
			owner = event_target:mining_drones
		}
	}
} 

ehof_giga_new_spawn_mining_drones_destro = {
	set_star_flag = drone_destroyer_system
	set_star_flag = hostile_system

	create_drone_country = yes
	random_system_planet = {
		limit = { has_deposit_for = shipclass_mining_station }
		set_deposit = d_minerals_8
		event_target:drone_country = {
			save_event_target_as = mining_drones
			create_fleet = {
				name = "NAME_Asset_Protection_Unit"
				effect = {
					set_owner = event_target:drone_country
					while = {
						count = 7
						create_ship = {
							name = ""
							design = "NAME_Ancient_Combat_Drone"
						}
					}
					while = {
						count = 3
						create_ship = {
							name = ""
							design = "NAME_Ancient_Destroyer"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 150
					queue_actions = {
						repeat = {
							wait = {
								duration = 999
								random = 10
							}
						}
					}
				}
			}
		}
		create_mining_station = {
			owner = event_target:mining_drones
		}
	}
}
ehof_giga_new_spawn_mining_drones_3 = {
	set_star_flag = drone_system_3
	set_star_flag = hostile_system

	create_drone_country = yes
	random_system_planet = {
		limit = { has_deposit_for = shipclass_mining_station }
		set_deposit = d_minerals_8
		event_target:drone_country = {
			create_fleet = {
				name = "NAME_Ancient_Mining_Drones"
				effect = {
					set_owner = event_target:drone_country
					while = {
						count = 10
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Drone"
						}
					}
					while = {
						count = 3
						create_ship = {
							name = ""
							design = "NAME_Ancient_Combat_Drone"
						}
					}
					set_location = PREVPREV
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 200
				}
			}
		}
		create_mining_station = {
			owner = event_target:drone_country
		}
	}
}
