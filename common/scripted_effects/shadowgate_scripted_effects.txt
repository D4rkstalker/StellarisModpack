set_shadowgate_build_date = {
    event_target:global_event_country = {
        set_variable = { which = ShadowgateDate$DATE$ value = $NUM$ }
        every_system = {
            prev = {
                random_list = {
                    2 = { change_variable = { which = ShadowgateDate$DATE$ value = 1 } }
                    2 = { subtract_variable = { which = ShadowgateDate$DATE$ value = 1 } }
                    1 = { }
                }
                if = { limit = { OR = { check_variable = { which = ShadowgateDate$DATE$ value < $MIN$ } check_variable = { which = ShadowgateDate$DATE$ value > $MAX$ } } }
                    set_variable = { which = ShadowgateDate$DATE$ value = $NUM$ }
                }
            }
        }
    }
}

set_shadowgate_accessed = {
    set_planet_flag = shadowgate_accessed
    switch = {
        trigger = has_planet_flag
        shadowgate_a = { owner = { set_country_flag = shadowgate_a_accessed } }
        shadowgate_b = { owner = { set_country_flag = shadowgate_b_accessed } }
        shadowgate_c = { owner = { set_country_flag = shadowgate_c_accessed } }
        shadowgate_d = { owner = { set_country_flag = shadowgate_d_accessed } }
        shadowgate_e = { owner = { set_country_flag = shadowgate_e_accessed } }
    }
    owner = { set_country_flag = shadowgate_accessed }
    event_target:global_event_country = { set_variable = { which = ShadowgateGalaxyNum value = prev } }
}

open_shadowgate_interface_from_diplomacy = {
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        if = {
            limit = {
                exists = owner
                is_owned_by = root
                is_controlled_by = root
                NOR = { has_planet_flag = shadowgate_accessed has_planet_flag = shadowgate_d_compass_open has_modifier = pm_shadowgate_dimensional_shift has_planet_flag = shadowgate_ashen_pilgrimage }
            }
            planet_event = { id = shadowgate_$SHADOWGATE$.100 }
        }
        else_if = { limit = { exists = owner owner = { is_country_type = shadowgate_ap has_communications = root } }
            root = {
                set_country_flag = shadowgate_ap_rift_clicked
                country_event = { id = shadowgate_pilgrimage.0 }
                remove_country_flag = shadowgate_ap_rift_clicked
            }
        }
    }
}

remove_shadowgate_accessed_switch = {
    switch = {
        trigger = has_planet_flag
        shadowgate_a = { remove_shadowgate_accessed = { SHADOWGATE = a } }
        shadowgate_b = { remove_shadowgate_accessed = { SHADOWGATE = b } }
        shadowgate_c = { remove_shadowgate_accessed = { SHADOWGATE = c } }
        shadowgate_d = { remove_shadowgate_accessed = { SHADOWGATE = d } }
        shadowgate_e = { remove_shadowgate_accessed = { SHADOWGATE = e } }
    }
}

remove_shadowgate_accessed = {
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        remove_planet_flag = shadowgate_accessed
        remove_planet_flag = shadowgate_still_here
        remove_planet_flag = shadowgate_dimensional_shift
        remove_planet_flag = shadowgate_special_function
        remove_planet_flag = shadowgate_summon_dialog_only
        remove_planet_flag = open_shadowgate_to_neutral
        remove_planet_flag = open_shadowgate_to_hostile
        remove_planet_flag = open_shadowgate_to_allied
        remove_planet_flag = open_shadowgate_to_fallenawakened
        remove_planet_flag = open_shadowgate_to_marauder
        remove_planet_flag = open_shadowgate_to_inhabited
        remove_planet_flag = open_shadowgate_to_uninhabited
        remove_planet_flag = open_shadowgate_to_owned_anchor
        remove_planet_flag = open_shadowgate_to_foreign_anchor
        remove_planet_flag = open_shadowgate_to_specific
        remove_planet_flag = open_shadowgate_to_adjacent
        remove_planet_flag = open_shadowgate_to_random_galactic
        remove_planet_flag = open_shadowgate_to_remnant
        remove_planet_flag = open_shadowgate_to_caravaneer
        remove_planet_flag = open_shadowgate_to_lcluster
        remove_planet_flag = open_shadowgate_to_lcluster_random
        remove_planet_flag = open_shadowgate_to_empire_random
        remove_planet_flag = open_shadowgate_to_asset
        remove_planet_flag = open_shadowgate_to_fleet
        remove_planet_flag = open_shadowgate_to_ship
        remove_planet_flag = open_shadowgate_to_starbase
        remove_planet_flag = open_shadowgate_to_anchor
    }
    event_target:shadowgate_owner = {
        if = { limit = { has_country_flag = shadowgate_ap_accessed }
            remove_country_flag = shadowgate_ap_accessed
            if = { limit = { exists = event_target:shadowgate_ap_country }
                event_target:shadowgate_ap_country = { remove_country_flag = shadowgate_ap_accessed }
                event_target:shadowgate_planet_$SHADOWGATE$ = { set_owner = event_target:shadowgate_ap_country }
                country_event = { id = shadowgate_pilgrimage.10 }
            }
            else = {
                remove_country_flag = shadowgate_ap_diplomacy
                remove_country_flag = shadowgate_still_here
            }
        }
        remove_country_flag = shadowgate_$SHADOWGATE$_accessed
        remove_country_flag = shadowgate_accessed
        remove_country_flag = shadowgate_d_compass_saved
        remove_country_flag = shadowgate_force_destabilization
    }
}

list_as_shadowgate_target_1 = {
    save_event_target_as = shadowgate_target_1
    root = { list_as_shadowgate_target_switch = yes }
}

list_as_shadowgate_target_2 = {
    save_event_target_as = shadowgate_target_2
    root = { list_as_shadowgate_target_switch = yes }
}

list_as_shadowgate_target_3 = {
    save_event_target_as = shadowgate_target_3
    root = { list_as_shadowgate_target_switch = yes }
}

list_as_shadowgate_target_4 = {
    save_event_target_as = shadowgate_target_4
    root = { list_as_shadowgate_target_switch = yes }
}

list_as_shadowgate_target_switch = {
    switch = {
        trigger = has_planet_flag
        shadowgate_a = { prev = { list_as_shadowgate_target = { SHADOWGATE = a } } }
        shadowgate_b = { prev = { list_as_shadowgate_target = { SHADOWGATE = b } } }
        shadowgate_c = { prev = { list_as_shadowgate_target = { SHADOWGATE = c } } }
        shadowgate_d = { prev = { list_as_shadowgate_target = { SHADOWGATE = d } } }
        shadowgate_e = { prev = { list_as_shadowgate_target = { SHADOWGATE = e } } }
    }
}

list_as_shadowgate_target = {
    switch = {
        trigger = is_scope_type
        country = { set_country_flag = shadowgate_listed_$SHADOWGATE$ }
        galactic_object = { set_star_flag = shadowgate_listed_$SHADOWGATE$ }
        fleet = { set_fleet_flag = shadowgate_listed_$SHADOWGATE$ }
        ship = { set_ship_flag = shadowgate_listed_$SHADOWGATE$ }
        planet = { set_planet_flag = shadowgate_listed_$SHADOWGATE$ }
    }
}

set_listed_target_as_shadowgate_destination = {
    if = { limit = { always = $FINAL$ }
        switch = {
            trigger = is_scope_type
            galactic_object = { save_event_target_as = shadowgate_destination_system }
            fleet = { solar_system = { save_event_target_as = shadowgate_destination_system } }
            ship = { solar_system = { save_event_target_as = shadowgate_destination_system } }
        }
    }
    switch = {
        trigger = is_scope_type
        country = { save_event_target_as = shadowgate_target_country }
        galactic_object = { save_event_target_as = shadowgate_target_star }
        fleet = { save_event_target_as = shadowgate_target_fleet }
        ship = { save_event_target_as = shadowgate_target_ship }
        planet = { save_event_target_as = shadowgate_target_planet solar_system = { save_event_target_as = shadowgate_target_star } }
    }
}

reset_shadowgate_country_targets = {
    every_country = { limit = { has_country_flag = shadowgate_listed_$SHADOWGATE$ } remove_country_flag = shadowgate_listed_$SHADOWGATE$ }
    reset_listed_shadowgate_targets = yes
}

reset_shadowgate_fleet_targets = {
    event_target:shadowgate_target_country = { every_owned_fleet = { limit = { has_fleet_flag = shadowgate_listed_$SHADOWGATE$ } remove_fleet_flag = shadowgate_listed_$SHADOWGATE$ } }
    reset_listed_shadowgate_targets = yes
}

reset_shadowgate_ship_starbase_targets = {
    event_target:shadowgate_target_country = { every_owned_ship = { limit = { has_ship_flag = shadowgate_listed_$SHADOWGATE$ } remove_ship_flag = shadowgate_listed_$SHADOWGATE$ } }
    reset_listed_shadowgate_targets = yes
}

reset_shadowgate_system_targets = {
    every_system = { limit = { has_star_flag = shadowgate_listed_$SHADOWGATE$ } remove_star_flag = shadowgate_listed_$SHADOWGATE$ }
    reset_listed_shadowgate_targets = yes
}

reset_shadowgate_planet_targets = {
    event_target:shadowgate_destination_system = { every_system_planet = { limit = { has_planet_flag = shadowgate_listed_$SHADOWGATE$ } remove_planet_flag = shadowgate_listed_$SHADOWGATE$ } }
    reset_listed_shadowgate_targets = yes
}

reset_listed_shadowgate_targets = {
    save_event_target_as = shadowgate_target_1
    save_event_target_as = shadowgate_target_2
    save_event_target_as = shadowgate_target_3
    save_event_target_as = shadowgate_target_4
}

set_shadowgate_cargo_drone_owner = {
    set_fleet_flag = shadowgate_$SHADOWGATE$
}

send_shadowgate_seal_revoked_message = {
    if = { limit = { check_variable = { which = ShadowgateSeal value = 0 } }
        set_timed_country_flag = { flag = shadowgate_seal_revoked days = @shadowgate_seal_revoke_cd }
        create_message = {
            type = MESSAGE_TYPE_SHADOWGATE_ADMINISTRATIVE_SEAL_REVOKED
            localization = MESSAGE_SHADOWGATE_ADMINISTRATIVE_SEAL_REVOKED
            days = 15
            target = prev.capital_scope
            variable = {
                type = name
                localization = EMPIRE
                scope = prev
            }
        }
    }
}

regenerate_shadowgate_variables = {
    set_variable = { which = ShadowgateLevel value = 1 }
    set_variable = { which = ShadowgateEtherMax value = 50 }
    set_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
    set_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
    # - Fortifications -
    set_variable = { which = TerminusCoreStrengthBoost value = @shadowgate_fortify_amount }
    set_variable = { which = TerminusBarrierStrengthBoost value = @shadowgate_fortify_amount }
    # - Core -
    set_variable = { which = TerminusCoreBoostCost value = @shadowgate_fortify_cost_p }
    if = { limit = { check_variable = { which = TerminusCoreFortifyCount value > 0 } }
        set_variable = { which = TerminusCoreStrength value = @shadowgate_fortify_amount }
        multiply_variable = { which = TerminusCoreStrength value = TerminusCoreFortifyCount }
        multiply_variable = { which = TerminusCoreBoostCost value = TerminusCoreFortifyCount }
        change_variable = { which = TerminusCoreBoostCost value = @shadowgate_fortify_cost_p }
    }
    else = { set_variable = { which = TerminusCoreStrength value = 0 } }
    change_variable = { which = TerminusCoreStrength value = @shadowrift_terminus_base }
    # - Barrier -
    set_variable = { which = TerminusBarrierBoostCost value = @shadowgate_fortify_cost_p }
    if = { limit = { check_variable = { which = TerminusBarrierFortifyCount value > 0 } }
        set_variable = { which = TerminusBarrierStrength value = @shadowgate_fortify_amount }
        multiply_variable = { which = TerminusBarrierStrength value = TerminusBarrierFortifyCount }
        multiply_variable = { which = TerminusBarrierBoostCost value = TerminusBarrierFortifyCount }
        change_variable = { which = TerminusBarrierBoostCost value = @shadowgate_fortify_cost_p }
    }
    else = { set_variable = { which = TerminusBarrierStrength value = 0 } }
    change_variable = { which = TerminusBarrierStrength value = @shadowrift_terminus_base }
    # - Resonators
    if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } }
        change_variable = { which = ShadowgateLevel value = 3 }
        while = { count = 3
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = TerminusCoreStrength value = @shadowrift_terminus_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
        }
    }
    else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } }
        change_variable = { which = ShadowgateLevel value = 2 }
        while = { count = 2
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = TerminusCoreStrength value = @shadowrift_terminus_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
        }
    }
    else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } }
        change_variable = { which = ShadowgateLevel value = 1 }
        change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
        change_variable = { which = TerminusCoreStrength value = @shadowrift_terminus_district }
        change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
    }
    # - Projection Arrays -
    if = { limit = { num_districts = { type = district_spectral_projection_array value = 3 } }
        change_variable = { which = ShadowgateLevel value = 3 }
        while = { count = 3
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = TerminusBarrierStrength value = @shadowrift_terminus_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
        }
    }
    else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 2 } }
        change_variable = { which = ShadowgateLevel value = 2 }
        while = { count = 2
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = TerminusBarrierStrength value = @shadowrift_terminus_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
        }
    }
    else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 1 } }
        change_variable = { which = ShadowgateLevel value = 1 }
        change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
        change_variable = { which = TerminusBarrierStrength value = @shadowrift_terminus_district }
        change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
    }
    # - Condensers -
    if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 3 } }
        change_variable = { which = ShadowgateLevel value = 3 }
        while = { count = 3
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
            change_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
        }
        multiply_variable = { which = TerminusCoreStrengthBoost value = 2 }
        multiply_variable = { which = TerminusCoreStrength value = 2 }
        multiply_variable = { which = TerminusBarrierStrengthBoost value = 2 }
        multiply_variable = { which = TerminusBarrierStrength value = 2 }
    }
    else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 2 } }
        change_variable = { which = ShadowgateLevel value = 2 }
        while = { count = 2
            change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
            change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
            change_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
        }
        multiply_variable = { which = TerminusCoreStrengthBoost value = 1.66 }
        multiply_variable = { which = TerminusCoreStrength value = 1.66 }
        multiply_variable = { which = TerminusBarrierStrengthBoost value = 1.66 }
        multiply_variable = { which = TerminusBarrierStrength value = 1.66 }
    }
    else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 1 } }
        change_variable = { which = ShadowgateLevel value = 1 }
        change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district }
        change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
        change_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase }
        multiply_variable = { which = TerminusCoreStrengthBoost value = 1.33 }
        multiply_variable = { which = TerminusCoreStrength value = 1.33 }
        multiply_variable = { which = TerminusBarrierStrengthBoost value = 1.33 }
        multiply_variable = { which = TerminusBarrierStrength value = 1.33 }
    }
    # - Ruinous Potency -
    change_variable = { which = ShadowgateRPMinPotential value = ShadowgateRPMinEvent }
    subtract_variable = { which = ShadowgateRPMinPotential value = TerminusCoreFortifyCount }
    if = { limit = { check_variable = { which = ShadowgateRPMinPotential value < 0 } } set_variable = { which = ShadowgateRPMin value = 0 } }
    else = { set_variable = { which = ShadowgateRPMin value = ShadowgateRPMinPotential } }
    if = { limit = { check_variable = { which = ShadowgateRP value <= ShadowgateRPMin } }
        set_variable = { which = ShadowgateRP value = ShadowgateRPMin }
        set_variable = { which = ShadowgateRCHAmount value = 0 }
        if = { limit = { has_planet_flag = shadowrift_active }
            switch = {
                trigger = has_planet_flag
                shadowgate_a = { toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = a ACTIVE = no } }
                shadowgate_b = { toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = b ACTIVE = no } }
                shadowgate_c = { toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = c ACTIVE = no } }
                shadowgate_d = { toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = d ACTIVE = no } }
                shadowgate_e = { toggle_retrograde_counterpoint_harmonics = { SHADOWGATE = e ACTIVE = no } }
            }
        }
    }
    # - Ether -
    if = { limit = { has_planet_flag = shadowgate_dc_effect } change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_max_district } change_variable = { which = ShadowgateEtherIncrease value = @shadowgate_ether_increase } }
    if = { limit = { is_variable_set = ShadowgateSOUSBlessings }
        while = { count = ShadowgateSOUSBlessings change_variable = { which = ShadowgateEtherMax value = @shadowgate_ether_sous_amount } }
    }
    # - Ashen Pilgrimage -
    if = { limit = { has_global_flag = shadowgate_ap_restored has_planet_flag = shadowgate_ashen_pilgrimage exists = event_target:shadowgate_ap_country }
        event_target:shadowgate_ap_country = {
            set_variable = { which = ShadowgateAPUpgrade value = 0 }
            prev = { while = { count = TerminusTotalFortifyCount prev = { change_variable = { which = ShadowgateAPUpgrade value = @shadowgate_ap_fortify_cost } } } }
        }
    }
}

create_shadowrift_country = {
    create_country = {
        name = "NAME_Shadowgate_Shadowrift"
        type = shadowrift
        flag = {
            icon = {
                category = "shadowgate"
                [[A]file = "flag_shadowrune_23.dds"]
                [[B]file = "flag_shadowrune_16.dds"]
                [[C]file = "flag_shadowrune_02.dds"]
                [[D]file = "flag_shadowrune_24.dds"]
                [[E]file = "flag_shadowrune_07.dds"]
                [[VC]file = "flag_shadowrune_12.dds"]
            }
            background= {
                category = "backgrounds"
                file = "00_solid.dds"
            }
            colors = {
                "dark_purple"
                "black"
                "null"
                "null"
            }
        }
    }
    last_created_country = {
        [[SHADOWGATE]
            save_global_event_target_as = shadowrift_country_$SHADOWGATE|0$
            set_country_flag = shadowrift_$SHADOWGATE|0$
        ]
        [[VC]
            set_variable = { which = ShadowgateVCCountry value = event_target:global_event_country }
            set_country_flag = shadowrift_vc
        ]
        give_technology = { tech = tech_shadowrift_lightning }
        every_country = { establish_communications_no_message = prev }
    }
}

spawn_shadowrift_terminus_fleet = {
    if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { has_planet_flag = shadowgate_rch_effect } }
        create_fleet = {
            name = "NAME_Shadowgate_Terminal_Horizon"
            settings = {
                spawn_debris = no
                is_boss = yes
            }
            effect = {
                set_owner = event_target:shadowrift_country_$SHADOWGATE$
                create_ship = {
                    name = "NAME_Shadowgate_Terminal_Horizon"
                    design = "NAME_Shadowgate_Shadowrift_RCH"
                }
                set_location = {
                    target = event_target:shadowrift_terminus_planet
                    distance = 0
                    angle = random
                }
            }
        }
    }
    else = {
        create_fleet = {
            name = "NAME_Shadowgate_Terminal_Horizon"
            settings = {
                spawn_debris = no
            }
            effect = {
                set_owner = event_target:shadowrift_country_$SHADOWGATE$
                create_ship = {
                    name = "NAME_Shadowgate_Terminal_Horizon"
                    design = "NAME_Shadowgate_Shadowrift_Default"
                }
                set_location = {
                    target = event_target:shadowrift_terminus_planet
                    distance = 0
                    angle = random
                }
            }
        }
    }
    last_created_fleet = {
        set_fleet_flag = shadowrift
        solar_system = { set_star_flag = has_shadowrift set_star_flag = has_shadowrift_$SHADOWGATE$ }
        set_fleet_flag = shadowrift_$SHADOWGATE$
        if = { limit = { solar_system = { has_star_flag = shadowgate_shadow_remnant } }
            set_fleet_flag = shadowrift_vc
        }
        save_event_target_as = shadowrift_terminus_fleet
        apply_shadowrift_terminus_district_boost = { SHADOWGATE = $SHADOWGATE$ }
        set_timed_fleet_flag = { flag = shadowrift_owner_safeguard days = 10 }
        fleet_event = { id = shadowgate_galactic.216 days = 1 }
    }
    event_target:shadowrift_terminus_planet = { set_planet_flag = has_shadowrift }
    event_target:global_event_country = {
        change_variable = { which = ShadowgateSTBonus value = 1 }
        country_event = { id = shadowgate_galactic.620 days = 1 }
    }
}

apply_shadowrift_terminus_district_boost = {
    if = { limit = { always = $RESET|no$ }
        event_target:shadowrift_terminus_fleet = {
            remove_modifier = shadowrift_core_strength
            remove_modifier = shadowrift_integrity
            remove_modifier = shadowrift_integrity_max
            remove_modifier = shadowrift_shield_strength
            remove_modifier = shadowrift_core_boost
            remove_modifier = shadowrift_barrier_boost
            remove_modifier = shadowrift_rch_boost
        }
    }
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_core_strength days = -1 } }
        }
        else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_core_strength days = -1 multiplier = 2 } }
        }
        else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_core_strength days = -1 multiplier = 3 } }
        }
        if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 1 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_integrity days = -1 } }
        }
        else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 2 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_integrity days = -1 multiplier = 2 } }
        }
        else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 3 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_integrity_max days = -1 } }
        }
        if = { limit = { num_districts = { type = district_spectral_projection_array value = 1 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_shield_strength days = -1 } }
        }
        else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 2 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_shield_strength days = -1 multiplier = 2 } }
        }
        else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 3 } }
            event_target:shadowrift_terminus_fleet = { add_modifier = { modifier = shadowrift_shield_strength days = -1 multiplier = 3 } }
        }
        event_target:shadowrift_terminus_fleet = {
            set_variable = { which = TerminusCoreFortifyCount value = prev }
            add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount }
            set_variable = { which = TerminusBarrierFortifyCount value = prev }
            add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount }
        }
        if = { limit = { has_planet_flag = shadowgate_rch_effect }
            event_target:shadowrift_terminus_fleet = {
                set_variable = { which = ShadowgateRCHAmount value = prev }
                add_modifier = { modifier = shadowrift_rch_boost days = -1 multiplier = ShadowgateRCHAmount }
            }
        }
    }
}

banish_active_shadowrift = {
    every_system = { limit = { has_star_flag = has_shadowrift_$SHADOWGATE$ }
        random_system_planet = { limit = { has_planet_flag = has_shadowrift }
            create_ambient_object = { type = shadowgate_banish location = this use_3d_location = yes scale = @shadowgate_banish_scale entity_offset_height = @shadowgate_banish_offset duration = -1 }
            last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
        }
    }
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        remove_modifier = pm_shadowgate_summoning
        if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 0 } }
            add_modifier = { modifier = pm_shadowgate_banishing days = @shadowgate_bsh_0 }
            planet_event = { id = shadowgate_$SHADOWGATE$.1004 days = @shadowgate_bsh_0 }
        }
        else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 1 } }
            add_modifier = { modifier = pm_shadowgate_banishing days = @shadowgate_bsh_1 }
            planet_event = { id = shadowgate_$SHADOWGATE$.1004 days = @shadowgate_bsh_1 }
        }
        else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 2 } }
            add_modifier = { modifier = pm_shadowgate_banishing days = @shadowgate_bsh_2 }
            planet_event = { id = shadowgate_$SHADOWGATE$.1004 days = @shadowgate_bsh_2 }
        }
        else_if = { limit = { num_districts = { type = district_shadow_pulse_condenser value = 3 } }
            add_modifier = { modifier = pm_shadowgate_banishing days = @shadowgate_bsh_3 }
            planet_event = { id = shadowgate_$SHADOWGATE$.1004 days = @shadowgate_bsh_3 }
        }
        if = { limit = { NOT = { has_modifier = pm_shadowgate_stabilized_rift } } activate_shadowgate_cooldown = { SHADOWGATE = $SHADOWGATE$ STABLE = UNSTABLE } }
    }
}

remove_active_shadowrift = {
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        if = { limit = { has_planet_flag = shadowrift_active }
            if = { limit = { NOR = { has_planet_flag = restore_shadowgate_as_origin has_planet_flag = remove_shadow_mooring_rifts } }
                if = { limit = { exists = owner } owner = { remove_country_flag = shadowgate_force_destabilization } }
                remove_modifier = pm_shadowgate_summoning
                remove_modifier = pm_shadowgate_banishing
                remove_modifier = pm_shadowgate_stabilized_rift
                remove_planet_flag = shadowgate_sm_denied
                remove_planet_flag = shadowgate_ai_use_cooldown
                remove_planet_flag = shadowrift_active
                remove_planet_flag = shadowrift_nascent
                if = { limit = { is_variable_set = ShadowgateEtherCostLocked } clear_variable = ShadowgateEtherCostLocked }
                if = { limit = { has_planet_flag = shadowgate_dup_on }
                    remove_planet_flag = shadowgate_dup_on
                    remove_planet_flag = shadowgate_dup_open
                    remove_planet_flag = shadowgate_dup_warned
                }
                event_target:shadowrift_country_$SHADOWGATE$ = { every_country = { limit = { is_hostile = prev } prev = { set_faction_hostility = { target = prev set_hostile = no set_neutral = yes set_friendly = no } } } }
                if = { limit = { num_districts = { type = district_spectral_projection_array value = 0 } }
                    set_timed_planet_flag = { flag = shadowrift_duplicate_safeguard days = @shadowgate_stb_0 }
                }
                else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 1 } }
                    set_timed_planet_flag = { flag = shadowrift_duplicate_safeguard days = @shadowgate_stb_1 }
                }
                else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 2 } }
                    set_timed_planet_flag = { flag = shadowrift_duplicate_safeguard days = @shadowgate_stb_2 }
                }
                else_if = { limit = { num_districts = { type = district_spectral_projection_array value = 3 } }
                    set_timed_planet_flag = { flag = shadowrift_duplicate_safeguard days = @shadowgate_stb_3 }
                }
                solar_system = { every_system_ambient_object = { limit = { OR = { has_ambient_object_flag = shadowgate_active has_ambient_object_flag = shadowgate_priming } } destroy_ambient_object = this } }
            }
            if = { limit = { NOT = { has_planet_flag = remove_shadow_mooring_rifts } } solar_system = { every_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_cloud } create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = prev use_3d_location = yes duration = 10 } destroy_ambient_object = this } } }
            every_system = { limit = { has_star_flag = has_shadowrift_$SHADOWGATE$ if = { limit = { prev = { has_planet_flag = restore_shadowgate_as_origin } } has_star_flag = shadowrift_origin } if = { limit = { prev = { has_planet_flag = remove_shadow_mooring_rifts } } has_star_flag = has_shadow_mooring_rift } }
                remove_star_flag = shadowrift_origin
                remove_star_flag = has_shadowrift
                remove_star_flag = has_shadowrift_$SHADOWGATE$
                remove_star_flag = has_shadow_mooring_rift
                remove_star_flag = incoming_shadow_mooring_rift
                every_system_ambient_object = { limit = { OR = { has_ambient_object_flag = shadowrift_priming has_ambient_object_flag = shadowrift_lightning } } destroy_ambient_object = this }
                every_system_megastructure = { limit = { has_megastructure_flag = shadowrift } create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = this use_3d_location = yes duration = 10 } remove_megastructure = this }
                every_fleet_in_system = { limit = { has_fleet_flag = shadowrift } delete_fleet = this }
                every_system_planet = { limit = { has_planet_flag = has_shadowrift }
                    remove_planet_flag = has_shadowrift
                    create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = this entity_offset_height = @shadowgate_remove_shadowrift_offset use_3d_location = yes duration = 10 }
                    if = { limit = { prev = { has_star_flag = shadowgate_shadow_remnant } }
                        create_ambient_object = { type = umbral_remnant location = this use_3d_location = yes scale = @shadowgate_umbral_remnant_system_scale entity_offset_height = @shadowgate_umbral_remnant_system_offset }
                        last_created_ambient_object = { set_ambient_object_flag = shadowgate_shadow_remnant }
                        random_country = { limit = { check_variable = { which = ShadowgateVCCountry value = prevprev } }
                            every_country = { limit = { is_hostile = prev } prev = { set_faction_hostility = { target = prev set_hostile = no set_neutral = yes set_friendly = no } } }
                        }
                    }
                }
                event_target:global_event_country = { subtract_variable = { which = ShadowgateSTBonus value = 1 } }
                if = { limit = { has_star_flag = active_shadow_anchor exists = space_owner exists = prev.owner space_owner = { is_same_value = prevprev.owner } }
                    summon_eligible_mooring_shadowrift = { EXCLUDE = $SHADOWGATE$ }
                }
            }
            shadowgate_st_upgraded_effect = yes
            remove_planet_flag = remove_shadow_mooring_rifts
            remove_planet_flag = restore_shadowgate_as_origin
        }
    }
}

shadowgate_sous_effect = {
    if = { limit = { owner = { has_relic = r_shadowgate_sous } is_variable_set = ShadowgateEtherCostLocked }
        set_variable = { which = ShadowgateSOUSAmount value = ShadowgateEtherCostLocked }
        multiply_variable = { which = ShadowgateSOUSAmount value = 0.33 }
        round_variable = ShadowgateSOUSAmount
        change_variable = { which = ShadowgateEther value = ShadowgateSOUSAmount }
        clear_variable = ShadowgateSOUSAmount
    }
}

shadowgate_ae_effect = {
    every_country = { limit = { has_relic = r_shadowgate_ae NOT = { has_relic = r_shadowgate_crwt_active } }
        set_variable = { which = ShadowgateRP value = prev }
        while = { count = ShadowgateRP
            random_list = {
                1 = { add_resource = { physics_research = 1 } change_variable = { which = ShadowgatePhysics value = 1 } }
                1 = { add_resource = { society_research = 1 } change_variable = { which = ShadowgateSociety value = 1 } }
                1 = { add_resource = { engineering_research = 1 } change_variable = { which = ShadowgateEngineering value = 1 } }
            }
        }
        create_message = {
            type = MESSAGE_TYPE_SHADOWGATE_EDICT_NOTIFICATION
            localization = MESSAGE_SHADOWGATE_EDICT_NOTIFICATION
            days = 20
            target = event_target:shadowgate_destination_system
            variable = {
                type = name
                localization = SHADOWGATE
                scope = prev
            }
            variable = {
                type = name
                localization = ORIGIN
                scope = event_target:shadowgate_origin_system
            }
            variable = {
                type = name
                localization = DESTINATION
                scope = event_target:shadowgate_destination_system
            }
            variable = {
                type = variable
                varname = ShadowgatePhysics
                localization = PHYSICS
                scope = this
            }
            variable = {
                type = variable
                varname = ShadowgateSociety
                localization = SOCIETY
                scope = this
            }
            variable = {
                type = variable
                varname = ShadowgateEngineering
                localization = ENGINEERING
                scope = this
            }
        }
        set_variable = { which = ShadowgatePhysics value = 0 }
        set_variable = { which = ShadowgateSociety value = 0 }
        set_variable = { which = ShadowgateEngineering value = 0 }
        set_variable = { which = ShadowgateRP value = 0 }
    }
}

shadowgate_ae_digsite = {
    switch = {
		trigger = is_site_current_stage_score_no_die
		-8 <= { standard_archaeological_site_on_roll_failed_case = { SCORE=-8 } }
		-7 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-7 } }
		-6 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-6 } }
		-5 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-5 } }
		-4 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-4 } }
		-3 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-3 } }
		-2 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-2 } }
		-1 = { standard_archaeological_site_on_roll_failed_case = { SCORE=-1 } }
		0 = { standard_archaeological_site_on_roll_failed_case = { SCORE=0 } }
		1 = { standard_archaeological_site_on_roll_failed_case = { SCORE=1 } }
		2 = { standard_archaeological_site_on_roll_failed_case = { SCORE=2 } }
		3 = { standard_archaeological_site_on_roll_failed_case = { SCORE=3 } }
		4 = { standard_archaeological_site_on_roll_failed_case = { SCORE=4 } }
		5 = { standard_archaeological_site_on_roll_failed_case = { SCORE=5 } }
		6 = { standard_archaeological_site_on_roll_failed_case = { SCORE=6 } }
		7 = { standard_archaeological_site_on_roll_failed_case = { SCORE=7 } }
		8 = { standard_archaeological_site_on_roll_failed_case = { SCORE=8 } }
		9 = { standard_archaeological_site_on_roll_failed_case = { SCORE=9 } }
		10 = { standard_archaeological_site_on_roll_failed_case = { SCORE=10 } }
		11 = { standard_archaeological_site_on_roll_failed_case = { SCORE=11 } }
		12 = { standard_archaeological_site_on_roll_failed_case = { SCORE=12 } }
		13 = { standard_archaeological_site_on_roll_failed_case = { SCORE=13 } }
		14 >= { standard_archaeological_site_on_roll_failed_case = { SCORE=14 } }
	}
	hidden_effect ={
		switch = {
			trigger = is_site_current_stage_score
			5 <= {
                add_stage_clues = -1
				prev = { leader = { add_experience = 1 } }
			}
			10 <= { add_stage_clues = 1 prev = { leader = { add_experience = 5 } } }
			13 <= { add_stage_clues = 2 prev = { leader = { add_experience = 10 } } }
		}
	}
}

shadowgate_es_effect = {
    every_country = { limit = { has_relic = r_shadowgate_es NOT = { has_relic = r_shadowgate_crwt_active } }
        if = { limit = { check_variable = { which = ShadowgateESStored value < 30 } } change_variable = { which = ShadowgateESStored value = 1 } }
    }
}

shadowgate_st_upgraded_effect = {
    if = { limit = { exists = event_target:shadowgate_st_cpc_upgraded_country }
        event_target:shadowgate_st_cpc_upgraded_country = {
            set_variable = { which = ShadowgateSTBonus value = event_target:global_event_country }
            remove_modifier = shadowgate_cpc_unspoiled
            add_modifier = { modifier = shadowgate_cpc_unspoiled days = -1 multiplier = ShadowgateSTBonus }
            clear_variable = ShadowgateSTBonus
        }
    }
}

summon_shadowrift = {
    remove_planet_flag = open_shadowgate_to_neutral
    remove_planet_flag = open_shadowgate_to_hostile
    remove_planet_flag = open_shadowgate_to_allied
    remove_planet_flag = open_shadowgate_to_fallenawakened
    remove_planet_flag = open_shadowgate_to_marauder
    remove_planet_flag = open_shadowgate_to_inhabited
    remove_planet_flag = open_shadowgate_to_uninhabited
    remove_planet_flag = open_shadowgate_to_owned_anchor
    remove_planet_flag = open_shadowgate_to_foreign_anchor
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        calculate_shadowgate_rp_amount = yes
		calculate_shadowgate_ether_cost = yes
        clear_variable = ShadowgateSMRPChange
        clear_variable = ShadowgateSMEtherCost
        clear_variable = ShadowgateRPProjected
        clear_variable = ShadowgateEtherProjected
        if = { limit = { event_target:shadowgate_owner = { NOT = { has_country_flag = shadowgate_ae_active } } }
            subtract_variable = { which = ShadowgateEther value = ShadowgateEtherCost }
            if = { limit = { check_variable = { which = ShadowgateEther value < 0 } }
                while = { limit = { check_variable = { which = ShadowgateEther value < 0 } }
                    change_variable = { which = ShadowgateEther value = 1 }
                    subtract_variable = { which = ShadowgateEtherCost value = 1 }
                }
            }
            set_variable = { which = ShadowgateEtherCostLocked value = ShadowgateEtherCost }
        }
        clear_variable = ShadowgateEtherCost
        if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage } set_timed_planet_flag = { flag = shadowgate_ap_used days = 4680 } }
        if = { limit = { event_target:shadowgate_owner = { is_ai = no } }
            event_target:shadowgate_owner = { remove_shadowgate_accessed = { SHADOWGATE = $SHADOWGATE$ } }
            if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage }
                event_target:shadowgate_owner = {
                    if = { limit = { has_country_flag = shadowgate_ap_rift_gifted } remove_country_flag = shadowgate_ap_rift_gifted }
                    else = {
                        if = { limit = { has_origin = origin_shadow_remnant }
                            add_resource = { energy = @shadowgate_ap_summon_cost_origin_en }
                        }
                        else = { add_resource = { energy = @shadowgate_ap_summon_cost_en } }
                        change_variable = { which = ShadowgateAPDonated value = 5000 }
                        change_variable = { which = ShadowgateAPTrustBuffer value = 10 }
                        event_target:shadowgate_ap_country = {
                            add_trust = { who = prev amount = 10 }
                            change_variable = { which = ShadowgateAPProgress value = 5000 }
                        }
                    }
                }
            }
        }
        if = { limit = { exists = event_target:shadowrift_queued_origin_$SHADOWGATE$ }
            event_target:shadowrift_queued_origin_$SHADOWGATE$ = { remove_star_flag = shadowrift_queued }
            clear_global_event_target = shadowrift_queued_origin_$SHADOWGATE$
        }
        event_target:shadowgate_origin_system = { save_global_event_target_as = shadowrift_queued_origin_$SHADOWGATE$ }
        if = { limit = { exists = event_target:shadowrift_queued_terminus_$SHADOWGATE$ }
            event_target:shadowrift_queued_terminus_$SHADOWGATE$ = { remove_star_flag = shadowrift_queued }
            clear_global_event_target = shadowrift_queued_terminus_$SHADOWGATE$
        }
        event_target:shadowgate_destination_system = { save_global_event_target_as = shadowrift_queued_terminus_$SHADOWGATE$ }
        if = { limit = { has_modifier = pm_shadowgate_stabilized_rift }
            event_target:shadowgate_origin_system = { set_star_flag = shadowrift_queued }
            event_target:shadowgate_destination_system = { set_star_flag = shadowrift_queued }
            set_planet_flag = shadowrift_queued
            if = { limit = { NOT = { has_modifier = pm_shadowgate_banishing } }
                banish_active_shadowrift = { SHADOWGATE = $SHADOWGATE$ }
            }
        }
        else = {
            planet_event = { id = shadowgate_$SHADOWGATE$.1001 }
        }
    }
}

summon_eligible_mooring_shadowrift = {
    space_owner = {
        random_system_within_border = { limit = { has_star_flag = shadowgate_solar_system has_star_flag = has_shadowrift any_system_planet = { NOT = { is_same_value = event_target:shadowgate_planet_$EXCLUDE$ } has_planet_flag = shadowgate_sm_effect is_colonized_shadowgate = yes } }
            prevprev = { save_event_target_as = mooring_shadowrift_system }
            random_system_planet = {
                switch = {
                    trigger = has_planet_flag
                    shadowgate_a = { planet_event = { id = shadowgate_a.3001 } }
                    shadowgate_b = { planet_event = { id = shadowgate_b.3001 } }
                    shadowgate_c = { planet_event = { id = shadowgate_c.3001 } }
                    shadowgate_d = { planet_event = { id = shadowgate_d.3001 } }
                    shadowgate_e = { planet_event = { id = shadowgate_e.3001 } }
                }
            }
        }
    }
}

check_for_shadowrift_terminus_events = {
    root = {
        if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { has_planet_flag = shadowgate_ashen_pilgrimage } } event_target:shadowgate_ap_last_summoner = { save_event_target_as = shadowgate_owner_terminus_event } }
        else = { owner = { save_event_target_as = shadowgate_owner_terminus_event } }
    }
    if = {
        limit = {
            root = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } }
            exists = space_owner 
            space_owner = {
                NOR = { is_at_war_with = event_target:shadowgate_owner_terminus_event is_same_value = event_target:shadowgate_owner_terminus_event }
                is_ai = yes
                OR = {
                    is_country_type = default 
                    shadowgate_is_fe = yes
                    shadowgate_is_ae = yes
                }
                has_communications = event_target:shadowgate_owner_terminus_event
                OR = {
                    has_closed_borders = event_target:shadowgate_owner_terminus_event
                    AND = { OR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } OR = { has_ethic = ethic_fanatic_materialist has_ethic = ethic_fanatic_spiritualist } }
                }
            }
        }
        space_owner = { save_event_target_as = shadowgate_trespassed_empire }
        save_event_target_as = shadowgate_violated_system
        if = { limit = { space_owner = { NOR = { shadowgate_is_fe = yes shadowgate_is_ae = yes } has_country_flag = encountered_shadowgate } }
            root = { planet_event = { id = shadowgate_$SHADOWGATE$.301 days = 5 } }
        }
        else = {
            root = { planet_event = { id = shadowgate_$SHADOWGATE$.300 days = 5 } }
        }
    }
    else_if = {
        limit = {
            exists = space_owner
            space_owner = {
                is_country_type = dormant_marauders
                has_communications = event_target:shadowgate_owner_terminus_event
            }
        }
        space_owner = { save_event_target_as = raiding_marauder }
        event_target:shadowgate_owner_terminus_event = { country_event = { id = marauder.101 days = 5 } }
    }
    root = { planet_event = { id = shadowgate_galactic.151 days = 5 random = 3 } }
}

shadowgate_ai_searching_shadowrift = {
    solar_system = { set_timed_star_flag = { flag = shadowgate_ai_searching_shadowrift days = 3600 } }
}

evaluate_shadowgate_ai_destination = {
    if = { limit = { any_neighbor_system = { has_star_flag = active_shadow_anchor system_is_valid_random_shadowrift_target = yes } }
        random_neighbor_system = { limit = { has_star_flag = active_shadow_anchor system_is_valid_random_shadowrift_target = yes }
            save_event_target_as = shadowgate_destination_system
        }
    }
    else_if = { limit = { any_neighbor_system = { exists = starbase starbase = { owner = { is_same_value = event_target:shadowgate_owner } has_starbase_size >= starbase_starport } system_is_valid_random_shadowrift_target = yes } }
        random_neighbor_system = { limit = { exists = starbase starbase = { owner = { is_same_value = event_target:shadowgate_owner } has_starbase_size >= starbase_starport } system_is_valid_random_shadowrift_target = yes }
            save_event_target_as = shadowgate_destination_system
        }
    }
    else_if = { limit = { NOT = { any_neighbor_system = { has_any_shadowrift_respect_owner = yes } } system_is_valid_random_shadowrift_target = yes } save_event_target_as = shadowgate_destination_system }
}

mark_system_shadowrift_terminus_planet = {
    if = { limit = { has_star_flag = shadowgate_solar_system }
        random_system_planet = { limit = { has_planet_flag = shadowgate_planet }
            save_event_target_as = shadowrift_terminus_planet
        }
    }
    else_if = { limit = { has_star_flag = active_shadow_anchor }
        random_system_planet = { limit = { has_planet_flag = has_shadow_anchor }
            save_event_target_as = shadowrift_terminus_planet
        }
    }
    else_if = { limit = { any_system_planet = { has_planet_flag = shadowgate_sp_origin } }
        random_system_planet = { limit = { has_planet_flag = shadowgate_sp_origin }
            save_event_target_as = shadowrift_terminus_planet
        }
    }
    else = {
        if = { limit = { any_system_planet = { is_available_target_for_shadowrift = yes } }
            random_system_planet = { limit = { is_available_target_for_shadowrift = yes }
                save_event_target_as = shadowrift_terminus_planet
            }
        }
        else = {
            random_system_planet = {
                save_event_target_as = shadowrift_terminus_planet
            }
        }
    }
    event_target:shadowrift_terminus_planet = { set_planet_flag = has_shadowrift }
}

calculate_shadowgate_ether_cost = {
    root = {
        set_variable = { which = ShadowgateEtherCost value = 0 }
        set_variable = { which = ShadowgateSMEtherCost value = 0 }
        if = { limit = { NOT = { owner = { has_country_flag = shadowgate_ae_active } } }
            event_target:shadowgate_destination_system = { calculate_shadowgate_system_ether_cost = yes }
            event_target:shadowgate_origin_system = { calculate_shadowgate_system_ether_cost = yes }
            if = { limit = { has_planet_flag = shadowgate_sm_effect exists = owner OR = { NOT = { has_planet_flag = shadowgate_dup_effect } has_planet_flag = shadowgate_dup_off } }
                owner = {
                    every_system_within_border = { limit = { has_star_flag = active_shadow_anchor NOR = { has_star_flag = has_shadow_mooring_rift has_any_shadowrift_foreign_owner = yes is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system shadowgate_antiresonant_void_check = yes } }
                        calculate_shadowgate_system_ether_cost = yes
                    }
                }
            }
            if = { limit = { check_variable = { which = ShadowgateEtherCost value < 0 } } set_variable = { which = ShadowgateEtherCost value = 0 } }
            round_variable = ShadowgateEtherCost
            set_variable = { which = ShadowgateEtherProjected value = ShadowgateEtherCost }
            change_variable = { which = ShadowgateEtherProjected value = ShadowgateSMEtherCost }
        }
    }
}

calculate_shadowgate_system_ether_cost = {
    if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } }
        root = { set_variable = { which = ShadowgateSystemEtherCost value = 0 } }
        if = { limit = { is_variable_set = ShadowgateSystemEtherCost NOT = { has_star_flag = shadowgate_ether_additive } }
            root = { change_variable = { which = ShadowgateSystemEtherCost value = prev } }
        }
        else = {
            calculate_shadowgate_ether_cost_distance = yes
            if = { limit = { is_variable_set = ShadowgateSystemEtherCost has_star_flag = shadowgate_ether_additive } root = { change_variable = { which = ShadowgateSystemEtherCost value = prev } } }
        }
        if = { limit = { root = { has_planet_flag = shadowgate_vc_effect } }
            calculate_shadowgate_ether_cost_vc = yes
        }
        every_system_planet = { limit = { NOR = { is_star = yes is_asteroid = yes is_moon = yes } }
            if = { limit = { is_variable_set = ShadowgateSystemEtherCost NOT = { has_planet_flag = shadowgate_ether_additive } }
                root = { change_variable = { which = ShadowgateSystemEtherCost value = prev } }
            }
            else = {
                root = { change_variable = { which = ShadowgateSystemEtherCost value = @shadowgate_planet_ether_cost } }
                if = { limit = { is_variable_set = ShadowgateSystemEtherCost has_planet_flag = shadowgate_ether_additive } root = { change_variable = { which = ShadowgateSystemEtherCost value = prev } } }
            }
        }
        if = { limit = { root = { is_variable_set = ShadowgateSystemEtherCost } }
            if = { limit = { has_star_flag = active_shadow_anchor }
                root = {
                    multiply_variable = { which = ShadowgateSystemEtherCost value = 0.5 }
                    if = { limit = { has_planet_flag = shadowgate_sm_effect check_variable = { which = ShadowgateSystemEtherCost value != 0 } prev = { NOR = { is_same_value = event_target:shadowgate_origin_system is_same_value = event_target:shadowgate_destination_system } } }
                        divide_variable = { which = ShadowgateSystemEtherCost value = { scope = event_target:global_event_country variable = ShadowgateSMAnchorReduction } }
                    }
                }
            }
            root = {
                round_variable = ShadowgateSystemEtherCost
                if = { limit = { has_planet_flag = shadowgate_sm_effect prev = { has_star_flag = active_shadow_anchor is_within_borders_of = root.owner NOR = { is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system } } }
                    change_variable = { which = ShadowgateSMEtherCost value = ShadowgateSystemEtherCost }
                }
                else = { change_variable = { which = ShadowgateEtherCost value = ShadowgateSystemEtherCost } }
                clear_variable = ShadowgateSystemEtherCost
            }
        }
    }
}

calculate_shadowgate_ether_cost_distance = {
    if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 0 max_distance <= 50 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 5 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 50 max_distance <= 100 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 10 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 100 max_distance <= 150 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 15 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 150 max_distance <= 200 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 20 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 200 max_distance <= 250 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 25 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 250 max_distance <= 300 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 30 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 300 max_distance <= 350 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 35 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 350 max_distance <= 400 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 40 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 400 max_distance <= 450 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 45 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 450 max_distance <= 500 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 50 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 500 max_distance <= 550 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 55 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 550 max_distance <= 600 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 60 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 600 max_distance <= 650 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 65 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 650 max_distance <= 700 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 70 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 700 max_distance <= 750 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 75 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 750 max_distance <= 800 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 80 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 800 max_distance <= 850 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 85 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 850 max_distance <= 900 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 90 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 900 max_distance <= 950 } }
        root = { change_variable = { which = ShadowgateSystemEtherCost value = 95 } }
    }
    else = { root = { change_variable = { which = ShadowgateSystemEtherCost value = 100 } } }
}

calculate_shadowgate_ether_cost_vc = {
    closest_system = { limit = { has_star_flag = shadowgate_shadow_remnant } save_event_target_as = shadowgate_nearest_remnant }
    if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 0 max_distance <= 50 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.5 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 50 max_distance <= 100 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.475 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 100 max_distance <= 150 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.45 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 150 max_distance <= 200 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.425 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 200 max_distance <= 250 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.4 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 250 max_distance <= 300 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.375 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 300 max_distance <= 350 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.35 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 350 max_distance <= 400 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.325 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 400 max_distance <= 450 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.3 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 450 max_distance <= 500 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.275 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 500 max_distance <= 550 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.25 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 550 max_distance <= 600 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.225 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 600 max_distance <= 650 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.2 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 650 max_distance <= 700 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.175 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 700 max_distance <= 750 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.15 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 750 max_distance <= 800 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.125 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 800 max_distance <= 850 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.1 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 850 max_distance <= 900 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.075 } }
    }
    else_if = { limit = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 900 max_distance <= 950 } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.05 } }
    }
    else_if = { limit = { NOT = { distance = { type = euclidean use_bypasses = no source = event_target:shadowgate_nearest_remnant min_distance >= 950 max_distance <= 1000 } } }
        root = { multiply_variable = { which = ShadowgateSystemEtherCost value = 0.025 } }
    }
}

calculate_shadowgate_rp_amount = {
    root = {
        if = { limit = { event_target:shadowgate_destination_system = { is_same_value = event_target:shadowgate_origin_system } }
            set_variable = { which = ShadowgateRPChange value = -99999999999999999 }
        }
        else = {
            set_variable = { which = ShadowgateRPChange value = 0 }
            set_variable = { which = ShadowgateSMRPChange value = 0 }
            event_target:shadowgate_destination_system = { calculate_shadowgate_system_rp_amount = yes }
            event_target:shadowgate_origin_system = { calculate_shadowgate_system_rp_amount = yes }
            if = { limit = { has_planet_flag = shadowgate_sm_effect exists = owner }
                owner = {
                    every_system_within_border = { limit = { has_star_flag = active_shadow_anchor NOR = { has_star_flag = has_shadow_mooring_rift has_any_shadowrift_foreign_owner = yes is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system shadowgate_antiresonant_void_check = yes } }
                        calculate_shadowgate_system_rp_amount = yes
                    }
                }
            }
            if = { limit = { has_planet_flag = shadowgate_dup_effect NOR = { has_planet_flag = shadowgate_dup_off system_has_active_shadow_anchor = yes } }
                change_variable = { which = ShadowgateRPChange value = @shadowgate_dup_rp_amount }
            }
        }
        round_variable = ShadowgateRPChange
        round_variable = ShadowgateSMRPChange
        set_variable = { which = ShadowgateRPProjected value = ShadowgateRP }
        change_variable = { which = ShadowgateRPProjected value = ShadowgateRPChange }
        change_variable = { which = ShadowgateRPProjected value = ShadowgateSMRPChange }
    }
}

calculate_shadowgate_system_rp_amount = {
    if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } }
        root = { set_variable = { which = ShadowgateSystemRPChange value = 0 } }
        if = { limit = { is_variable_set = ShadowgateSystemRPChange NOT = { has_star_flag = shadowgate_rp_additive } }
            root = { change_variable = { which = ShadowgateSystemRPChange value = prev } }
        }
        else = {
            if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 0 max_distance <= 50 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 5 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 50 max_distance <= 100 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 10 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 100 max_distance <= 150 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 15 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 150 max_distance <= 200 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 20 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 200 max_distance <= 250 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 25 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 250 max_distance <= 300 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 30 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 300 max_distance <= 350 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 35 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 350 max_distance <= 400 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 40 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 400 max_distance <= 450 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 45 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 450 max_distance <= 500 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 50 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 500 max_distance <= 550 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 55 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 550 max_distance <= 600 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 60 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 600 max_distance <= 650 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 65 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 650 max_distance <= 700 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 70 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 700 max_distance <= 750 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 75 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 750 max_distance <= 800 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 80 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 800 max_distance <= 850 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 85 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 850 max_distance <= 900 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 90 } }
            }
            else_if = { limit = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 900 max_distance <= 950 } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 95 } }
            }
            else_if = { limit = { NOT = { distance = { type = euclidean use_bypasses = no source = root.solar_system min_distance >= 0 max_distance <= 950 } } }
                root = { change_variable = { which = ShadowgateSystemRPChange value = 100 } }
            }
            if = { limit = { is_variable_set = ShadowgateSystemRPChange has_star_flag = shadowgate_rp_additive } root = { change_variable = { which = ShadowgateSystemRPChange value = prev } } }
        }
        if = { limit = { NOT = { any_system_megastructure = { OR = { is_megastructure_type = dyson_sphere_5 is_megastructure_type = dyson_sphere_restored } } } }
            every_system_planet = { limit = { is_star = yes }
                if = { limit = { is_variable_set = ShadowgateSystemRPChange NOT = { has_planet_flag = shadowgate_rp_additive } }
                    root = { change_variable = { which = ShadowgateSystemRPChange value = prev } }
                }
                else = {
                    switch = {
                        trigger = is_planet_class
                        default = { root = { change_variable = { which = ShadowgateSystemRPChange value = 8 } } }
                        pc_black_hole = { }
                        pc_t_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 1 } } }
                        pc_m_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 3 } } }
                        pc_m_giant_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 5 } } }
                        pc_k_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 8 } } }
                        pc_g_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 11 } } }
                        pc_f_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 14 } } }
                        pc_a_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 17 } } }
                        pc_b_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 20 } } }
                        pc_neutron_star = { root = { change_variable = { which = ShadowgateSystemRPChange value = 23 } } }
                        pc_pulsar = { root = { change_variable = { which = ShadowgateSystemRPChange value = 26 } } }
                    }
                    if = { limit = { is_variable_set = ShadowgateSystemRPChange has_planet_flag = shadowgate_rp_additive } root = { change_variable = { which = ShadowgateSystemRPChange value = prev } } }
                }
            }
        }
        if = { limit = { root = { is_variable_set = ShadowgateSystemRPChange } }
            if = { limit = { has_star_flag = active_shadow_anchor }
                root = {
                    multiply_variable = { which = ShadowgateSystemRPChange value = 0.5 }
                    if = { limit = { has_planet_flag = shadowgate_sm_effect check_variable = { which = ShadowgateSystemRPChange value != 0 } prev = { NOR = { is_same_value = event_target:shadowgate_origin_system is_same_value = event_target:shadowgate_destination_system } } }
                        divide_variable = { which = ShadowgateSystemRPChange value = { scope = event_target:global_event_country variable = ShadowgateSMAnchorReduction } }
                    }
                }
            }
            root = {
                if = { limit = { check_variable = { which = ShadowgateSystemRPChange value != 0 } }
                    if = { limit = { has_planet_flag = shadowgate_rch_effect } divide_variable = { which = ShadowgateSystemRPChange value = -3 } }
                    if = { limit = { has_modifier = pm_shadowgate_ap } divide_variable = { which = ShadowgateSystemRPChange value = 2 } }
                }
                round_variable = ShadowgateSystemRPChange
                if = { limit = { has_planet_flag = shadowgate_sm_effect prev = { has_star_flag = active_shadow_anchor is_within_borders_of = root.owner NOR = { is_same_value = event_target:shadowgate_destination_system is_same_value = event_target:shadowgate_origin_system } } }
                    change_variable = { which = ShadowgateSMRPChange value = ShadowgateSystemRPChange }
                }
                else = { change_variable = { which = ShadowgateRPChange value = ShadowgateSystemRPChange } }
                clear_variable = ShadowgateSystemRPChange
            }
        }
    }
}

shadowgate_district_was_built = {
    set_planet_flag = shadowgate_$DISTRICT$
    if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage }
        apply_shadowrift_core_fortification = { AMOUNT = 5 }
        apply_shadowrift_barrier_fortification = { AMOUNT = 5 }
    }
    change_variable = { which = ShadowgateRPMinPotential value = @shadowgate_rp_district_amount }
    if = { limit = { check_variable = { which = ShadowgateRPMinPotential value < 0 } } set_variable = { which = ShadowgateRPMin value = 0 } }
    else = { set_variable = { which = ShadowgateRPMin value = ShadowgateRPMinPotential } }
    if = { limit = { check_variable = { which = ShadowgateRP value < ShadowgateRPMin } } set_variable = { which = ShadowgateRP value = ShadowgateRPMin } }
    if = { limit = { has_planet_flag = shadowrift_active } event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } } }
    switch = {
        trigger = has_planet_flag
        shadowgate_district_harmonic_subspace_resonator = { if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value < 3 } } planet_event = { id = shadowgate_galactic.410 } } }
        shadowgate_district_shadow_pulse_condenser = { if = { limit = { num_districts = { type = district_shadow_pulse_condenser value < 3 } } planet_event = { id = shadowgate_galactic.410 } } }
        shadowgate_district_spectral_projection_array = { if = { limit = { num_districts = { type = district_spectral_projection_array value < 3 } } planet_event = { id = shadowgate_galactic.410 } } }
    }
    if = { limit = { has_planet_flag = shadowrift_active }
        switch = {
            trigger = has_planet_flag
            shadowgate_a = { event_target:shadowrift_country_a = { every_owned_fleet = { save_event_target_as = shadowrift_terminus_fleet apply_shadowrift_terminus_district_boost = { RESET = yes SHADOWGATE = a } } } }
            shadowgate_b = { event_target:shadowrift_country_b = { every_owned_fleet = { save_event_target_as = shadowrift_terminus_fleet apply_shadowrift_terminus_district_boost = { RESET = yes SHADOWGATE = b } } } }
            shadowgate_c = { event_target:shadowrift_country_c = { every_owned_fleet = { save_event_target_as = shadowrift_terminus_fleet apply_shadowrift_terminus_district_boost = { RESET = yes SHADOWGATE = c } } } }
            shadowgate_d = { event_target:shadowrift_country_d = { every_owned_fleet = { save_event_target_as = shadowrift_terminus_fleet apply_shadowrift_terminus_district_boost = { RESET = yes SHADOWGATE = d } } } }
            shadowgate_e = { event_target:shadowrift_country_e = { every_owned_fleet = { save_event_target_as = shadowrift_terminus_fleet apply_shadowrift_terminus_district_boost = { RESET = yes SHADOWGATE = e } } } }
        }
    }
    if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } num_districts = { type = district_shadow_pulse_condenser value = 3 } num_districts = { type = district_spectral_projection_array value = 3 } } planet_event = { id = shadowgate_galactic.410 } }
    regenerate_shadowgate_variables = yes
    remove_planet_flag = shadowgate_$DISTRICT$
}

shadowgate_catastrophic_destabilization = {
    set_variable = { which = ShadowgateLodestonesActive value = 0 }
    if = { limit = { has_planet_flag = shadowgate_dc_effect } set_planet_flag = shadowgate_dc change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_rch_effect } set_planet_flag = shadowgate_rch change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_dup_effect } set_planet_flag = shadowgate_dup change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_sp_effect } set_planet_flag = shadowgate_sp change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_vc_effect } set_planet_flag = shadowgate_vc change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_asp_effect } set_planet_flag = shadowgate_asp change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    if = { limit = { has_planet_flag = shadowgate_sm_effect } set_planet_flag = shadowgate_sm change_variable = { which = ShadowgateLodestonesActive value = 1 } }
    create_ambient_object = { type = "shadowgate_vd" location = this use_3d_location = yes scale = @shadowgate_vd_scale entity_offset_height = @shadowgate_vd_offset duration = -1 }
    last_created_ambient_object = { set_ambient_object_flag = shadowgate_vd }
    if = { limit = { check_variable = { which = ShadowgateDisabledTime value < 1 } } add_modifier = { modifier = pm_shadowgate_disabled days = 1080 } planet_event = { id = shadowgate_galactic.240 days = 1080 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 1 } } add_modifier = { modifier = pm_shadowgate_disabled days = 1800 } planet_event = { id = shadowgate_galactic.240 days = 1800 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 2 } } add_modifier = { modifier = pm_shadowgate_disabled days = 2160 } planet_event = { id = shadowgate_galactic.240 days = 2160 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 3 } } add_modifier = { modifier = pm_shadowgate_disabled days = 2520 } planet_event = { id = shadowgate_galactic.240 days = 2520 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 4 } } add_modifier = { modifier = pm_shadowgate_disabled days = 2880 } planet_event = { id = shadowgate_galactic.240 days = 2880 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 5 } } add_modifier = { modifier = pm_shadowgate_disabled days = 3240 } planet_event = { id = shadowgate_galactic.240 days = 3240 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 6 } } add_modifier = { modifier = pm_shadowgate_disabled days = 3600 } planet_event = { id = shadowgate_galactic.240 days = 3600 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 7 } } add_modifier = { modifier = pm_shadowgate_disabled days = 3960 } planet_event = { id = shadowgate_galactic.240 days = 3960 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 8 } } add_modifier = { modifier = pm_shadowgate_disabled days = 4320 } planet_event = { id = shadowgate_galactic.240 days = 4320 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 9 } } add_modifier = { modifier = pm_shadowgate_disabled days = 4680 } planet_event = { id = shadowgate_galactic.240 days = 4680 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 10 } } add_modifier = { modifier = pm_shadowgate_disabled days = 5040 } planet_event = { id = shadowgate_galactic.240 days = 5040 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 11 } } add_modifier = { modifier = pm_shadowgate_disabled days = 5400 } planet_event = { id = shadowgate_galactic.240 days = 5400 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 12 } } add_modifier = { modifier = pm_shadowgate_disabled days = 5760 } planet_event = { id = shadowgate_galactic.240 days = 5760 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 13 } } add_modifier = { modifier = pm_shadowgate_disabled days = 6120 } planet_event = { id = shadowgate_galactic.240 days = 6120 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 14 } } add_modifier = { modifier = pm_shadowgate_disabled days = 6480 } planet_event = { id = shadowgate_galactic.240 days = 6480 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 15 } } add_modifier = { modifier = pm_shadowgate_disabled days = 6840 } planet_event = { id = shadowgate_galactic.240 days = 6840 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 16 } } add_modifier = { modifier = pm_shadowgate_disabled days = 7200 } planet_event = { id = shadowgate_galactic.240 days = 7200 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 17 } } add_modifier = { modifier = pm_shadowgate_disabled days = 7560 } planet_event = { id = shadowgate_galactic.240 days = 7560 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 18 } } add_modifier = { modifier = pm_shadowgate_disabled days = 7920 } planet_event = { id = shadowgate_galactic.240 days = 7920 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 19 } } add_modifier = { modifier = pm_shadowgate_disabled days = 8280 } planet_event = { id = shadowgate_galactic.240 days = 8280 } }
    else_if = { limit = { check_variable = { which = ShadowgateDisabledTime value = 20 } } add_modifier = { modifier = pm_shadowgate_disabled days = 8640 } planet_event = { id = shadowgate_galactic.240 days = 8640 } }
    else = { add_modifier = { modifier = pm_shadowgate_disabled days = 9000 } planet_event = { id = shadowgate_galactic.240 days = 9000 } }
    subtract_variable = { which = ShadowgateDisabledTime value = 8 }
    if = { limit = { check_variable = { which = ShadowgateDisabledTime value > 0 } }
        multiply_variable = { which = ShadowgateDisabledTime value = 0.5 }
        floor_variable = ShadowgateDisabledTime
        if = { limit = { check_variable = { which = ShadowgateDisabledTime value > 9 } } set_variable = { which = ShadowgateDisabledTime value = 9 } }
        destroy_random_shadowgate_district = { COUNT = ShadowgateDisabledTime }
    }
    clear_variable = ShadowgateDisabledTime
    regenerate_shadowgate_variables = yes
    if = { limit = { has_planet_flag = shadowgate_dc_effect NOT = { has_planet_flag = shadowgate_dc } check_variable = { which = ShadowgateLodestonesActive value > 1 } }
        while = { limit = { if = { limit = { owner = { has_relic = r_shadowgate_shadowforge } } check_variable = { which = ShadowgateLodestonesActive value > 2 } } else = { check_variable = { which = ShadowgateLodestonesActive value > 1 } } }
            random_list = {
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_rch } } remove_planet_flag = shadowgate_rch subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_dup } } remove_planet_flag = shadowgate_dup subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sp } } remove_planet_flag = shadowgate_sp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_vc } } remove_planet_flag = shadowgate_vc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_asp } } remove_planet_flag = shadowgate_asp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sm } } remove_planet_flag = shadowgate_sm subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
            }
        }
    }
    event_target:global_event_country = { save_event_target_as = shadowgate_d_compass_owner }
    switch = {
        trigger = has_planet_flag
        shadowgate_a = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = a } planet_event = { id = shadowgate_a.3011 } }
        shadowgate_b = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = b } planet_event = { id = shadowgate_b.3011 } }
        shadowgate_c = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = c } planet_event = { id = shadowgate_c.3011 } }
        shadowgate_d = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = d } planet_event = { id = shadowgate_d.3011 } }
        shadowgate_e = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = e } planet_event = { id = shadowgate_e.3011 } }
    }
}

destroy_random_shadowgate_district = {
    if = { limit = { NOT = { has_planet_flag = shadowgate_ashen_pilgrimage } }
        while = { count = $COUNT|1$
            random_list = {
                1 = { modifier = { factor = 0 num_districts = { type = district_harmonic_subspace_resonator value = 0 } }
                    remove_district = district_harmonic_subspace_resonator
                    if = { limit = { has_planet_flag = shadowgate_dc } remove_planet_flag = shadowgate_dc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_sp num_districts = { type = district_harmonic_subspace_resonator value < 2 } } remove_planet_flag = shadowgate_sp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_sm num_districts = { type = district_harmonic_subspace_resonator value = 0 } } remove_planet_flag = shadowgate_sm subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { check_variable = { which = ShadowgateDisabledTime value >= 10 } }
                        random_list = {
                            1 = { }
                            1 = { modifier = { factor = 0 has_deposit = d_untuned_subspace_resonators has_deposit = d_depressurized_windchests }
                                if = { limit = { NOT = { has_deposit = d_untuned_subspace_resonators } } add_deposit = d_untuned_subspace_resonators }
                                else_if = { limit = { NOT = { has_deposit = d_depressurized_windchests } } add_deposit = d_depressurized_windchests }
                            }
                        }
                    }
                }
                1 = { modifier = { factor = 0 num_districts = { type = district_shadow_pulse_condenser value = 0 } }
                    remove_district = district_shadow_pulse_condenser
                    if = { limit = { has_planet_flag = shadowgate_dc } remove_planet_flag = shadowgate_dc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_rch num_districts = { type = district_shadow_pulse_condenser value < 2 } } remove_planet_flag = shadowgate_rch subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_asp num_districts = { type = district_shadow_pulse_condenser value = 0 } } remove_planet_flag = shadowgate_asp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { check_variable = { which = ShadowgateDisabledTime value >= 10 } }
                        random_list = {
                            1 = { }
                            1 = { modifier = { factor = 0 has_deposit = d_defunct_containment_field_nodes has_deposit = d_faulty_ignition_chambers }
                                if = { limit = { NOT = { has_deposit = d_defunct_containment_field_nodes } } add_deposit = d_defunct_containment_field_nodes }
                                else_if = { limit = { NOT = { has_deposit = d_faulty_ignition_chambers } } add_deposit = d_faulty_ignition_chambers }
                            }
                        }
                    }
                }
                1 = { modifier = { factor = 0 num_districts = { type = district_spectral_projection_array value = 0 } }
                    remove_district = district_spectral_projection_array
                    if = { limit = { has_planet_flag = shadowgate_dc } remove_planet_flag = shadowgate_dc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_dup num_districts = { type = district_spectral_projection_array value < 2 } } remove_planet_flag = shadowgate_dup subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { has_planet_flag = shadowgate_vc num_districts = { type = district_spectral_projection_array value = 0 } } remove_planet_flag = shadowgate_vc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } }
                    if = { limit = { check_variable = { which = ShadowgateDisabledTime value >= 10 } }
                        random_list = {
                            1 = { }
                            1 = { modifier = { factor = 0 has_deposit = d_warped_polarizing_lenses has_deposit = d_fractured_projector_prisms }
                                if = { limit = { NOT = { has_deposit = d_warped_polarizing_lenses } } add_deposit = d_warped_polarizing_lenses }
                                else_if = { limit = { NOT = { has_deposit = d_fractured_projector_prisms } } add_deposit = d_fractured_projector_prisms }
                            }
                        }
                    }
                }
                1 = { modifier = { factor = 0 OR = { num_districts = { type = district_harmonic_subspace_resonator value > 0 } num_districts = { type = district_shadow_pulse_condenser value > 0 } num_districts = { type = district_spectral_projection_array value > 0 } } } }
            }
        }
    }
}

set_shadowrift_global_event_targets = {
    event_target:shadowgate_origin_system = { save_global_event_target_as = shadowrift_current_origin_$SHADOWGATE$ }
    event_target:shadowgate_destination_system = { save_global_event_target_as = shadowrift_current_terminus_$SHADOWGATE$ }
}

spawn_shadowrift = {
    if = { limit = { any_system_planet = { has_planet_flag = has_shadowrift } } random_system_planet = { limit = { has_planet_flag = has_shadowrift } save_event_target_as = shadowrift_terminus_planet } }
    else = { mark_system_shadowrift_terminus_planet = yes }
    random_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_priming } destroy_ambient_object = this }
    if = { limit = { NOT = { has_any_shadowrift_respect_owner = yes } } spawn_shadowrift_terminus_fleet = { SHADOWGATE = $SHADOWGATE$ } }
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        if = { limit = { has_planet_flag = shadowrift_nascent }
            if = { limit = { has_planet_flag = shadowgate_vc_effect }
                create_ambient_object = { type = umbral_remnant location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 }
                prev = { if = { limit = { has_star_flag = shadowgate_shadow_remnant } every_system_ambient_object = { limit = { has_ambient_object_flag = shadowgate_shadow_remnant } destroy_ambient_object = this } } }
            }
            else = { create_ambient_object = { type = shadowrift_priming location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 } }
            last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
            create_ambient_object = { type = blue_sun_grow_particle_object location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_explosion_scale entity_offset_height = @shadowgate_priming_explosion_offset duration = 10 }
        }
        else = {
            create_ambient_object = { type = blue_sun_grow_particle_object location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_stabilized_explosion_scale entity_offset_height = @shadowgate_stabilized_explosion_offset duration = 10 }
            if = { limit = { has_planet_flag = shadowgate_vc_effect }
                prev = {
                    spawn_megastructure = { type = shadowrift_db owner = event_target:shadowgate_global_country planet = event_target:shadowrift_terminus_planet init_effect = { set_megastructure_flag = shadowrift } }
                    if = { limit = { has_star_flag = shadowgate_shadow_remnant }
                        every_system_ambient_object = { limit = { has_ambient_object_flag = shadowgate_shadow_remnant } destroy_ambient_object = this }
                        if = { limit = { prev = { NOT = { has_planet_flag = shadowgate_dup_on } } }
                            set_star_flag = has_shadowrift_vc
                            remove_star_flag = has_shadowrift_$SHADOWGATE$
                            random_fleet_in_system = { limit = { has_fleet_flag = shadowrift_$SHADOWGATE$ }
                                remove_fleet_flag = shadowrift_$SHADOWGATE$
                                owner = { country_event = { id = shadowgate_galactic.330 days = 1 } }
                                random_country = { limit = { check_variable = { which = ShadowgateVCCountry value = prev.solar_system } }
                                    prev = { set_owner = prev }
                                }
                                set_timed_fleet_flag = { flag = shadowrift_owner_safeguard days = 10 }
                                fleet_event = { id = shadowgate_galactic.216 days = 1 }
                                if = { limit = { is_in_combat = yes }
                                    every_combatant_fleet = { limit = { exists = owner }
                                        owner = { prevprev.owner = { set_faction_hostility = { target = prev set_hostile = yes set_neutral = no set_friendly = no } } }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else = { prev = { spawn_megastructure = { type = shadowrift_$SHADOWGATE$ owner = event_target:shadowgate_global_country planet = event_target:shadowrift_terminus_planet init_effect = { set_megastructure_flag = shadowrift } } } }
            if = { limit = { has_planet_flag = shadowgate_dup_on }
                create_ambient_object = { type = shadowgate_dup location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_dup_scale entity_offset_height = @shadowgate_dup_offset duration = -1 }
                last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
            }
        }
    }
}

spawn_shadow_mooring_rift_with_cost = {
    if = { limit = { NOR = { root.owner = { has_country_flag = shadowgate_ae_active } has_star_flag = shadowgate_solar_system has_star_flag = shadowrift_recently_moored } }
        root = {
            set_variable = { which = ShadowgateSMRPChange value = 0 }
            set_variable = { which = ShadowgateSMEtherCost value = 0 }
            if = { limit = { owner = { has_country_flag = shadow_mooring_on_demand } }
                event_target:shadowrift_current_origin_$SHADOWGATE$ = { save_event_target_as = shadowgate_origin_system }
                event_target:shadowrift_current_terminus_$SHADOWGATE$ = { save_event_target_as = shadowgate_destination_system }
            }
            prev = {
                calculate_shadowgate_system_rp_amount = yes
                if = { limit = { root = { NOR = { has_planet_flag = shadowgate_dup_effect has_planet_flag = shadowgate_dup_on } } } calculate_shadowgate_system_ether_cost = yes }
            }
            round_variable = ShadowgateSMEtherCost
            round_variable = ShadowgateSMRPChange
            if = { limit = { OR = { check_variable_arithmetic = { which = ShadowgateEther by = ShadowgateSMEtherCost mode = subtract value < 0 } check_variable_arithmetic = { which = ShadowgateRP by = ShadowgateSMRPChange mode = add value < 0 } } }
                if = { limit = { NOT = { has_planet_flag = shadowgate_sm_denied } }
                    owner = {
                        create_message = {
                            type = MESSAGE_TYPE_SHADOWRIFT_SM_ALERT
                            localization = MESSAGE_SHADOWRIFT_SM_ALERT
                            days = 15
                            target = prevprev
                            variable = {
                                type = name
                                localization = SHADOWGATE
                                scope = root
                            }
                        }
                    }
                }
                set_timed_planet_flag = { flag = shadowgate_sm_denied days = 361 }
            }
            else = {
                round_variable = ShadowgateSMEtherCost
                subtract_variable = { which = ShadowgateEther value = ShadowgateSMEtherCost }
                change_variable = { which = ShadowgateRP value = ShadowgateSMRPChange }
                prev = { spawn_shadow_mooring_rift = { SHADOWGATE = $SHADOWGATE$ } }
                if = { limit = { check_variable = { which = ShadowgateRP value <= ShadowgateRPMin } }
                    set_variable = { which = ShadowgateRP value = ShadowgateRPMin }
                    set_variable = { which = ShadowgateRCHAmount value = 0 }
                }
                if = { limit = { check_variable = { which = ShadowgateRP value > @shadowgate_rp_max_amount } } set_variable = { which = ShadowgateRP value = @shadowgate_rp_max_amount } }
            }
            clear_variable = ShadowgateSMRPChange
            clear_variable = ShadowgateSMEtherCost
        }
        if = { limit = { NOT = { has_any_shadowrift_respect_owner = yes } } spawn_shadowrift_terminus_fleet = { SHADOWGATE = $SHADOWGATE$ } }
    }
    else = { spawn_shadow_mooring_rift = { SHADOWGATE = $SHADOWGATE$ } }
}

spawn_shadow_mooring_rift = {
    random_system_planet = { limit = { OR = { has_planet_flag = shadowgate_planet has_planet_flag = has_shadow_anchor } } save_event_target_as = shadowrift_terminus_planet }
    random_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_priming } destroy_ambient_object = this }
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        if = { limit = { has_planet_flag = shadowrift_nascent }
            if = { limit = { has_planet_flag = shadowgate_vc_effect } create_ambient_object = { type = umbral_remnant location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 } }
            else = { create_ambient_object = { type = shadowrift_priming location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 } }
            last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
            prev = { set_star_flag = incoming_shadow_mooring_rift }
            create_ambient_object = { type = blue_sun_grow_particle_object location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_priming_explosion_scale entity_offset_height = @shadowgate_priming_explosion_offset duration = 10 }
        }
        else = {
            create_ambient_object = { type = blue_sun_grow_particle_object location = event_target:shadowrift_terminus_planet use_3d_location = yes scale = @shadowgate_stabilized_explosion_scale entity_offset_height = @shadowgate_stabilized_explosion_offset duration = 10 }
            if = { limit = { has_planet_flag = shadowgate_vc_effect } prev = { spawn_megastructure = { type = shadowrift_db owner = event_target:shadowgate_global_country planet = event_target:shadowrift_terminus_planet init_effect = { set_megastructure_flag = shadowrift } } } }
            else = { prev = { spawn_megastructure = { type = shadowrift_$SHADOWGATE$ owner = event_target:shadowgate_global_country planet = event_target:shadowrift_terminus_planet init_effect = { set_megastructure_flag = shadowrift } } } }
            prev = { remove_star_flag = incoming_shadow_mooring_rift }
        }
    }
    set_star_flag = has_shadow_mooring_rift
    if = { limit = { NOT = { has_any_shadowrift_respect_owner = yes } } spawn_shadowrift_terminus_fleet = { SHADOWGATE = $SHADOWGATE$ } }
}

remove_system_shadowrift = {
    remove_star_flag = has_shadowrift
    remove_star_flag = has_shadowrift_a
    remove_star_flag = has_shadowrift_b
    remove_star_flag = has_shadowrift_c
    remove_star_flag = has_shadowrift_d
    remove_star_flag = has_shadowrift_e
    remove_star_flag = has_shadowrift_vc
    remove_star_flag = has_shadow_mooring_rift
    remove_star_flag = incoming_shadow_mooring_rift
    every_system_ambient_object = { limit = { OR = { has_ambient_object_flag = shadowrift_priming has_ambient_object_flag = shadowrift_lightning } } destroy_ambient_object = this }
    every_system_planet = { limit = { has_planet_flag = has_shadowrift } remove_planet_flag = has_shadowrift create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = this entity_offset_height = @shadowgate_remove_shadowrift_offset use_3d_location = yes duration = 10 } }
    every_fleet_in_system = { limit = { has_fleet_flag = shadowrift } delete_fleet = this }
    every_system_megastructure = { limit = { has_megastructure_flag = shadowrift } create_ambient_object = { type = red_sun_grow_particle_object scale = @shadowgate_remove_shadowrift_scale location = this use_3d_location = yes duration = 10 } remove_megastructure = this }
}

update_shadowgate_origin_system = {
    if = { limit = { has_planet_flag = shadowgate_sp_effect solar_system = { NOT = { has_star_flag = shadowrift_$SHADOWGATE$_sp_origin } } }
        random_system = { limit = { has_star_flag = shadowrift_$SHADOWGATE$_sp_origin } save_event_target_as = shadowgate_origin_system }
    }
    else = { solar_system = { save_event_target_as = shadowgate_origin_system } }
    event_target:shadowgate_origin_system = { save_global_event_target_as = shadowrift_queued_origin_$SHADOWGATE$ }
}

restore_shadowgate_as_origin = {
    if = { limit = { NOT = { has_planet_flag = shadowgate_dup_open } }
        if = { limit = { solar_system = { NOT = { has_star_flag = shadowrift_origin } } }
            save_event_target_as = shadowgate_planet
            save_event_target_as = shadowrift_terminus_planet
            if = { limit = { has_planet_flag = shadowgate_sm_effect exists = owner event_target:shadowrift_current_origin_$SHADOWGATE$ = { has_star_flag = active_shadow_anchor is_within_borders_of = prev.owner } }
                event_target:shadowrift_current_origin_$SHADOWGATE$ = { remove_star_flag = shadowrift_origin set_star_flag = has_shadow_mooring_rift if = { limit = { prev = { NOT = { has_modifier = pm_shadowgate_stabilized_rift } } } set_star_flag = incoming_shadow_mooring_rift } }
            }
            if = { limit = { solar_system = { OR = { NOT = { has_star_flag = has_shadowrift } has_star_flag = has_shadow_mooring_rift } } }
                set_planet_flag = restore_shadowgate_as_origin
                remove_active_shadowrift = { SHADOWGATE = $SHADOWGATE$ }
            }
            else = {
                event_target:shadowrift_current_origin_$SHADOWGATE$ = { remove_star_flag = shadowrift_origin save_global_event_target_as = shadowrift_current_terminus_$SHADOWGATE$ }
            }
            if = {
                limit = {
                    has_planet_flag = shadowgate_sm_effect
                    event_target:shadowrift_current_terminus_$SHADOWGATE$ = { NOT = { has_star_flag = active_shadow_anchor } }
                }
                random_system = { limit = { has_star_flag = has_shadowrift_$SHADOWGATE$ NOR = { has_star_flag = shadowgate_solar_system has_star_flag = active_shadow_anchor } } save_global_event_target_as = shadowrift_current_terminus_$SHADOWGATE$ }
            }
            else = { random_system = { limit = { has_star_flag = has_shadowrift_$SHADOWGATE$ NOR = { has_star_flag = shadowgate_solar_system has_star_flag = has_shadow_mooring_rift } } save_global_event_target_as = shadowrift_current_terminus_$SHADOWGATE$ } }
            solar_system = {
                remove_star_flag = incoming_shadow_mooring_rift
                remove_star_flag = has_shadow_mooring_rift
                if = { limit = { NOT = { has_any_shadowrift = yes } }
                    spawn_shadowrift = { SHADOWGATE = $SHADOWGATE$ }
                    prev = {
                        if = { limit = { has_modifier = pm_shadowgate_banishing }
                            create_ambient_object = { type = shadowgate_banish location = this use_3d_location = yes scale = @shadowgate_banish_scale entity_offset_height = @shadowgate_banish_offset duration = -1 }
                            last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
                        }
                    }
                    every_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_cloud } destroy_ambient_object = this }
                }
                save_global_event_target_as = shadowrift_current_origin_$SHADOWGATE$
                set_star_flag = shadowrift_origin
            }
        }
    }
    if = { limit = { has_planet_flag = shadowrift_queued solar_system = { NOT = { has_star_flag = shadowrift_queued } } }
        event_target:shadowrift_queued_origin_$SHADOWGATE$ = { remove_star_flag = shadowrift_queued }
    }
}

update_shadowgate_yearly_change = {
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        set_variable = { which = ShadowgateGalaxyNum value = event_target:global_event_country }
        if = { limit = { NOT = { shadowgate_is_disabled = yes } }
            if = { limit = { check_variable = { which = ShadowgateEther value > ShadowgateEtherMax } }
                subtract_variable = { which = ShadowgateEther value = 1 }
            }
            else = {
                while = { count = ShadowgateEtherIncrease limit = { check_variable = { which = ShadowgateEther value < ShadowgateEtherMax } }
                    change_variable = { which = ShadowgateEther value = 1 }
                }
            }
            while = { count = ShadowgateRPDecay
                if = { limit = { NOT = { has_planet_flag = shadowgate_rch_effect } }
                    if = { limit = { check_variable = { which = ShadowgateRP value > ShadowgateRPMin } } subtract_variable = { which = ShadowgateRP value = 1 } }
                }
                else = { change_variable = { which = ShadowgateRP value = 1 } }
            }
            if = { limit = { has_planet_flag = shadowgate_asp_effect check_variable = { which = ShadowgateRP value > ShadowgateRPMin } }
                if = { limit = { check_variable = { which = ShadowgateRPDecay value < @shadowgate_asp_maximum } }
                    change_variable = { which = ShadowgateRPDecay value = 1 }
                }
                else = {
                    set_variable = { which = ShadowgateRPDecay value = 1 }
                    if = { limit = { check_variable = { which = TerminusCoreFortifyCount value < TerminusBarrierFortifyCount } } apply_shadowrift_core_fortification = yes }
                    else_if = { limit = { check_variable = { which = TerminusBarrierFortifyCount value < TerminusCoreFortifyCount } } apply_shadowrift_barrier_fortification = yes }
                    else = {
                        random_list = {
                            1 = { apply_shadowrift_core_fortification = yes }
                            1 = { apply_shadowrift_barrier_fortification = yes }
                        }
                    }
                }
            }
            if = { limit = { has_planet_flag = shadowgate_sm_denied has_planet_flag = shadowgate_sm_effect has_planet_flag = shadowrift_active NOT = { has_modifier = pm_shadowgate_banishing } shadowgate_is_currently_mooring = yes }
                planet_event = { id = shadowgate_$SHADOWGATE$.3000 }
            }
            if = { limit = { check_variable = { which = ShadowgateRP value > @shadowgate_rp_max_amount } } set_variable = { which = ShadowgateRP value = @shadowgate_rp_max_amount } }
            calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = $SHADOWGATE$ }
            send_shadowgate_ruinous_potency_message = yes
        }
    }
}

send_shadowgate_ruinous_potency_message = {
    if = { limit = { exists = owner has_planet_flag = shadowgate_rp_notifications NOT = { has_planet_flag = shadowgate_rp_notified } }
        set_variable = { which = ShadowgateRPMessage value = ShadowgateRP }
        subtract_variable = { which = ShadowgateRPMessage value = TerminusBarrierFortifyCount }
        if = { limit = { planet_devastation = 0 check_variable = { which = ShadowgateRPMessage value >= 100 } }
            set_planet_flag = shadowgate_rp_notify
        }
        else_if = {
            limit = {
                OR = {
                    AND = { check_variable = { which = ShadowgateRPMessage value >= 100 } planet_devastation > 0 }
                    AND = { check_variable = { which = ShadowgateRPMessage value >= 80 } planet_devastation >= 20 }
                    AND = { check_variable = { which = ShadowgateRPMessage value >= 60 } planet_devastation >= 40 }
                    AND = { check_variable = { which = ShadowgateRPMessage value >= 40 } planet_devastation >= 60 }
                    AND = { check_variable = { which = ShadowgateRPMessage value >= 20 } planet_devastation >= 80 }
                }
            }
            set_planet_flag = shadowgate_rp_notify
        }
        if = { limit = { has_planet_flag = shadowgate_rp_notify }
            remove_planet_flag = shadowgate_rp_notify
            set_timed_planet_flag = { flag = shadowgate_rp_notified days = 1800 }
            create_message = {
                type = MESSAGE_TYPE_SHADOWGATE_RUINOUS_POTENCY
                localization = MESSAGE_SHADOWGATE_RUINOUS_POTENCY
                days = 20
                target = this
                variable = {
                    type = name
                    localization = SHADOWGATE
                    scope = this
                }
                variable = {
                    type = variable
                    varname = ShadowgateRP
                    localization = POTENCY
                    scope = this
                }
                variable = {
                    type = variable
                    varname = TerminusBarrierFortifyCount
                    localization = FORTIFICATIONS
                    scope = this
                }
                variable = {
                    type = variable
                    varname = ShadowgateRPMessage
                    localization = EXPOSURE
                    scope = this
                }
            }
        }
        clear_variable = ShadowgateRPMessage
    }
}

toggle_vestigial_conjuration = {
    every_system = { limit = { has_star_flag = has_shadowrift_$SHADOWGATE$ NOT = { has_star_flag = shadowgate_shadow_remnant } }
        if = { limit = { prev = { has_modifier = pm_shadowgate_stabilized_rift } }
            random_system_megastructure = { limit = { has_megastructure_flag = shadowrift } remove_megastructure = this }
            if = { limit = { always = $ACTIVE$ }
                random_system_planet = { limit = { has_planet_flag = has_shadowrift }
                    solar_system = { spawn_megastructure = { type = shadowrift_db owner = event_target:shadowgate_global_country planet = prev init_effect = { set_megastructure_flag = shadowrift } } }
                }
            }
            else = {
                random_system_planet = { limit = { has_planet_flag = has_shadowrift }
                    solar_system = { spawn_megastructure = { type = shadowrift_$SHADOWGATE$ owner = event_target:shadowgate_global_country planet = prev init_effect = { set_megastructure_flag = shadowrift } } }
                }
            }
        }
        else = {
            every_system_ambient_object = { limit = { has_ambient_object_flag = shadowrift_priming } destroy_ambient_object = this }
            random_system_planet = { limit = { has_planet_flag = has_shadowrift }
                if = { limit = { always = $ACTIVE$ } create_ambient_object = { type = umbral_remnant location = this use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 } }
                else = { create_ambient_object = { type = shadowrift_priming location = this use_3d_location = yes scale = @shadowgate_priming_scale entity_offset_height = @shadowgate_priming_offset duration = -1 } }
                last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
                if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { has_modifier = pm_shadowgate_banishing } }
                    create_ambient_object = { type = shadowgate_banish location = this use_3d_location = yes scale = @shadowgate_banish_scale entity_offset_height = @shadowgate_banish_offset duration = -1 }
                    last_created_ambient_object = { set_ambient_object_flag = shadowrift_priming }
                }
            }
        }
    }
}

calculate_retrograde_counterpoint_harmonic_level = {
    set_variable = { which = ShadowgateRCHAmountPrev value = ShadowgateRCHAmount }
    set_variable = { which = ShadowgateRCHAmount value = ShadowgateRP }
    subtract_variable = { which = ShadowgateRCHAmount value = ShadowgateRPMin }
    if = { limit = { has_planet_flag = shadowrift_active has_planet_flag = shadowgate_rch_effect check_variable = { which = ShadowgateRCHAmount value != ShadowgateRCHAmountPrev } NOT = { has_planet_flag = shadowgate_opening } }
        event_target:shadowrift_country_$SHADOWGATE$ = {
            every_owned_ship = {
                remove_modifier = shadowrift_rch_boost
                set_variable = { which = ShadowgateRCHAmount value = prevprev }
                add_modifier = { modifier = shadowrift_rch_boost days = -1 multiplier = ShadowgateRCHAmount }
            }
        }
    }
    clear_variable = ShadowgateRCHAmountPrev
}

toggle_retrograde_counterpoint_harmonics = {
    event_target:shadowrift_country_$SHADOWGATE$ = {
        every_owned_fleet = { limit = { NOT = { is_in_combat = yes } }
            delete_fleet = this
            solar_system = {
                random_system_planet = { limit = { has_planet_flag = has_shadowrift } save_event_target_as = shadowrift_terminus_planet }
                spawn_shadowrift_terminus_fleet = { SHADOWGATE = $SHADOWGATE$ }
            }
        }
        every_owned_ship = {
            if = { limit = { is_variable_set = ShadowgateRCHAmount } clear_variable = ShadowgateRCHAmount }
            remove_modifier = shadowrift_rch_boost
            if = { limit = { always = $ACTIVE$ }
                set_variable = { which = ShadowgateRCHAmount value = prevprev }
                add_modifier = { modifier = shadowrift_rch_boost days = -1 multiplier = ShadowgateRCHAmount }
            }
        }
    }
}

shadowgate_d_compass_save_changes_effect = {
    if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { check_variable = { which = ShadowgatePendingChanges value > 0 } } }
        custom_tooltip = shadowgate_d_compass_lockin_tooltip
        hidden_effect = {
            set_country_flag = shadowgate_d_compass_saved
            set_variable = { which = ShadowgateLodestoneCost value = 0 }
            event_target:shadowgate_planet_$SHADOWGATE$ = {
                set_variable = { which = ShadowgatePendingChanges value = 0 }
                if = { limit = { has_planet_flag = shadowgate_dc NOT = { has_planet_flag = shadowgate_dc_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_rch NOT = { has_planet_flag = shadowgate_rch_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_dup NOT = { has_planet_flag = shadowgate_dup_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_sp NOT = { has_planet_flag = shadowgate_sp_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_sm NOT = { has_planet_flag = shadowgate_sm_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_asp NOT = { has_planet_flag = shadowgate_asp_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
                if = { limit = { has_planet_flag = shadowgate_vc NOT = { has_planet_flag = shadowgate_vc_effect } } prev = { change_variable = { which = ShadowgateLodestoneCost value = 1 } } }
            }
        }
    }
    else = {
        custom_tooltip = shadowgate_d_compass_revert_button
        hidden_effect = {
            remove_country_flag = shadowgate_d_compass_saved
            set_variable = { which = ShadowgateLodestoneCost value = 0 }
            event_target:shadowgate_planet_$SHADOWGATE$ = {
                set_variable = { which = ShadowgateLodestonesActive value = 0 }
                if = { limit = { has_planet_flag = shadowgate_dc_effect } set_planet_flag = shadowgate_dc change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_dc }
                if = { limit = { has_planet_flag = shadowgate_rch_effect } set_planet_flag = shadowgate_rch change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_rch }
                if = { limit = { has_planet_flag = shadowgate_dup_effect } set_planet_flag = shadowgate_dup change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_dup }
                if = { limit = { has_planet_flag = shadowgate_sp_effect } set_planet_flag = shadowgate_sp change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_sp }
                if = { limit = { has_planet_flag = shadowgate_sm_effect } set_planet_flag = shadowgate_sm change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_sm }
                if = { limit = { has_planet_flag = shadowgate_asp_effect } set_planet_flag = shadowgate_asp change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_asp }
                if = { limit = { has_planet_flag = shadowgate_vc_effect } set_planet_flag = shadowgate_vc change_variable = { which = ShadowgateLodestonesActive value = 1 } } else = { remove_planet_flag = shadowgate_vc }
            }
        }
        if = { limit = { check_variable = { which = ShadowgateLodestonesOwned value < ShadowgateLodestoneCost } } custom_tooltip = shadowgate_d_compass_insufficient } else = { custom_tooltip = shadowgate_d_compass_sufficient }
    }
}

shadowgate_d_compass_dc_e_d_effect = {
    if = { limit = { has_planet_flag = shadowgate_dc_effect } subtract_variable = { which = ShadowgatePendingChanges value = 1 } }
    else = { change_variable = { which = ShadowgatePendingChanges value = 1 } }
    set_planet_flag = shadowgate_dc
    change_variable = { which = ShadowgateLodestonesActive value = 1 }
}

shadowgate_d_compass_dc_f_effect = {
    if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { has_planet_flag = shadowgate_dc_effect } } custom_tooltip = shadowgate_d_compass_dc_f_a }
    else = { custom_tooltip = shadowgate_d_compass_dc_f_p }
    custom_tooltip = shadowgate_d_compass_lodestone_alteration_tooltip
    hidden_effect = {
        event_target:shadowgate_planet_$SHADOWGATE$ = {
            subtract_variable = { which = ShadowgateLodestonesActive value = 1 }
            remove_planet_flag = shadowgate_dc
            if = { limit = { NOT = { has_planet_flag = shadowgate_dc_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } }
            else = { change_variable = { which = ShadowgatePendingChanges value = 1 } }
            if = { limit = { check_variable = { which = ShadowgateLodestonesActive value > 1 } }
                while = { limit = { if = { limit = { owner = { has_relic = r_shadowgate_shadowforge } } check_variable = { which = ShadowgateLodestonesActive value > 2 } } else = { check_variable = { which = ShadowgateLodestonesActive value > 1 } } }
                    random_list = {
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_rch } } unset_d_compass_lodestone = { LODESTONE = rch } }
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_dup } } unset_d_compass_lodestone = { LODESTONE = dup } }
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sp } } unset_d_compass_lodestone = { LODESTONE = sp } }
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_vc } } unset_d_compass_lodestone = { LODESTONE = vc } }
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_asp } } unset_d_compass_lodestone = { LODESTONE = asp } }
                        1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sm } } unset_d_compass_lodestone = { LODESTONE = sm } }
                    }
                }
            }
        }
    }
}

shadowgate_d_compass_general_f_effect = {
    if = { limit = { event_target:shadowgate_planet_$SHADOWGATE$ = { has_planet_flag = shadowgate_$LODESTONE$_effect } } custom_tooltip = shadowgate_d_compass_$LODESTONE$_f_a }
    else = { custom_tooltip = shadowgate_d_compass_$LODESTONE$_f_p }
    custom_tooltip = shadowgate_d_compass_lodestone_alteration_tooltip
    hidden_effect = { event_target:shadowgate_planet_$SHADOWGATE$ = { unset_d_compass_lodestone = { LODESTONE = $LODESTONE$ } } }
}

set_d_compass_lodestone = {
    if = { limit = { NOR = { has_planet_flag = shadowgate_dc owner = { has_relic = r_shadowgate_shadowforge } } }
        while = { limit = { check_variable = { which = ShadowgateLodestonesActive value > 0 } }
            random_list = {
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_rch } } remove_planet_flag = shadowgate_rch subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_rch_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_dup } } remove_planet_flag = shadowgate_dup subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_dup_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sp } } remove_planet_flag = shadowgate_sp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_sp_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_vc } } remove_planet_flag = shadowgate_vc subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_vc_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_asp } } remove_planet_flag = shadowgate_asp subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_asp_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
                1 = { modifier = { factor = 0 NOT = { has_planet_flag = shadowgate_sm } } remove_planet_flag = shadowgate_sm subtract_variable = { which = ShadowgateLodestonesActive value = 1 } if = { limit = { NOT = { has_planet_flag = shadowgate_sm_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } } else = { change_variable = { which = ShadowgatePendingChanges value = 1 } } }
            }
        }
    }
    if = { limit = { shadowgate_d_compass_outer_limit_values = yes }
        set_planet_flag = shadowgate_$LODESTONE$
        change_variable = { which = ShadowgateLodestonesActive value = 1 }
        if = { limit = { has_planet_flag = shadowgate_$LODESTONE$_effect } subtract_variable = { which = ShadowgatePendingChanges value = 1 } }
        else = { change_variable = { which = ShadowgatePendingChanges value = 1 } }
    }
}

unset_d_compass_lodestone = {
    remove_planet_flag = shadowgate_$LODESTONE$
    subtract_variable = { which = ShadowgateLodestonesActive value = 1 }
    if = { limit = { NOT = { has_planet_flag = shadowgate_$LODESTONE$_effect } } subtract_variable = { which = ShadowgatePendingChanges value = 1 } }
    else = { change_variable = { which = ShadowgatePendingChanges value = 1 } }
}

apply_shadowrift_core_fortification = {
    if = { limit = { NOT = { has_global_flag = shadowgate_fortified } } event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } } }
    set_timed_global_flag = { flag = shadowgate_fortified days = 1 }
    remove_planet_flag = shadowgate_fortify_core_failed
    change_variable = { which = TerminusCoreFortifyCount value = $AMOUNT|1$ }
    change_variable = { which = TerminusTotalFortifyCount value = $AMOUNT|1$ }
    while = { count = $AMOUNT|1$
        change_variable = { which = TerminusCoreStrength value = TerminusCoreStrengthBoost }
        change_variable = { which = TerminusCoreBoostCost value = @shadowgate_fortify_cost_p }
    }
    subtract_variable = { which = ShadowgateRPMinPotential value = $AMOUNT|1$ }
    if = { limit = { check_variable = { which = ShadowgateRPMinPotential value < 0 } } set_variable = { which = ShadowgateRPMin value = 0 } }
    else = {
        set_variable = { which = ShadowgateRPMin value = ShadowgateRPMinPotential }
        switch = {
            trigger = has_planet_flag
            shadowgate_a = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = a } }
            shadowgate_b = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = b } }
            shadowgate_c = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = c } }
            shadowgate_d = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = d } }
            shadowgate_e = { calculate_retrograde_counterpoint_harmonic_level = { SHADOWGATE = e } }
        }
    }
    if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage exists = event_target:shadowgate_ap_country }
        event_target:shadowgate_ap_country = { while = { count = $AMOUNT|1$ change_variable = { which = ShadowgateAPUpgrade value = @shadowgate_ap_fortify_cost } } }
    }
    if = { limit = { has_planet_flag = shadowrift_active }
        switch = {
            trigger = has_planet_flag
            shadowgate_a = { event_target:shadowrift_country_a = { every_owned_fleet = { remove_modifier = shadowrift_core_boost set_variable = { which = TerminusCoreFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount } } } }
            shadowgate_b = { event_target:shadowrift_country_b = { every_owned_fleet = { remove_modifier = shadowrift_core_boost set_variable = { which = TerminusCoreFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount } } } }
            shadowgate_c = { event_target:shadowrift_country_c = { every_owned_fleet = { remove_modifier = shadowrift_core_boost set_variable = { which = TerminusCoreFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount } } } }
            shadowgate_d = { event_target:shadowrift_country_d = { every_owned_fleet = { remove_modifier = shadowrift_core_boost set_variable = { which = TerminusCoreFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount } } } }
            shadowgate_e = { event_target:shadowrift_country_e = { every_owned_fleet = { remove_modifier = shadowrift_core_boost set_variable = { which = TerminusCoreFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_core_boost days = -1 multiplier = TerminusCoreFortifyCount } } } }
        }
    }
}

apply_shadowrift_barrier_fortification = {
    if = { limit = { NOT = { has_global_flag = shadowgate_fortified } } event_target:global_event_country = { country_event = { id = shadowgate_galactic.215 } } }
    set_timed_global_flag = { flag = shadowgate_fortified days = 1 }
    remove_planet_flag = shadowgate_fortify_barrier_failed
    change_variable = { which = TerminusBarrierFortifyCount value = $AMOUNT|1$ }
    change_variable = { which = TerminusTotalFortifyCount value = $AMOUNT|1$ }
    while = { count = $AMOUNT|1$
        change_variable = { which = TerminusBarrierStrength value = TerminusBarrierStrengthBoost }
        change_variable = { which = TerminusBarrierBoostCost value = @shadowgate_fortify_cost_p }
    }
    if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage exists = event_target:shadowgate_ap_country }
        event_target:shadowgate_ap_country = { while = { count = $AMOUNT|1$ change_variable = { which = ShadowgateAPUpgrade value = @shadowgate_ap_fortify_cost } } }
    }
    if = { limit = { has_planet_flag = shadowrift_active }
        switch = {
            trigger = has_planet_flag
            shadowgate_a = { event_target:shadowrift_country_a = { every_owned_fleet = { remove_modifier = shadowrift_barrier_boost set_variable = { which = TerminusBarrierFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount } } } }
            shadowgate_b = { event_target:shadowrift_country_b = { every_owned_fleet = { remove_modifier = shadowrift_barrier_boost set_variable = { which = TerminusBarrierFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount } } } }
            shadowgate_c = { event_target:shadowrift_country_c = { every_owned_fleet = { remove_modifier = shadowrift_barrier_boost set_variable = { which = TerminusBarrierFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount } } } }
            shadowgate_d = { event_target:shadowrift_country_d = { every_owned_fleet = { remove_modifier = shadowrift_barrier_boost set_variable = { which = TerminusBarrierFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount } } } }
            shadowgate_e = { event_target:shadowrift_country_e = { every_owned_fleet = { remove_modifier = shadowrift_barrier_boost set_variable = { which = TerminusBarrierFortifyCount value = prevprev } add_modifier = { modifier = shadowrift_barrier_boost days = -1 multiplier = TerminusBarrierFortifyCount } } } }
        }
    }
}

stabilize_shadowgate_shadowrift = {
    set_timed_planet_flag = { flag = shadowrift_duplicate_safeguard days = @shadowgate_stb_$LEVEL$ }
    if = { limit = { NOR = { has_planet_flag = valid_shadow_anchor_target has_planet_flag = shadowgate_dup_on } }
        add_modifier = { modifier = pm_shadowgate_summoning days = @shadowgate_stb_$LEVEL$ }
        planet_event = { id = shadowgate_$SHADOWGATE$.1002 days = @shadowgate_stb_$LEVEL$ }
    }
}

notify_space_owner_of_shadowrift_terminus = {
    event_target:shadowgate_$TERMINUS$_system = {
        if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } prev = { NOR = { has_planet_flag = valid_shadow_anchor_target has_planet_flag = shadowgate_dup_on } } exists = space_owner }
            space_owner = {
                if = { limit = { NOT = { has_relic = r_shadowgate_ae } OR = { NOT = { exists = root.owner } NOT = { is_same_value = root.owner } } }
                    create_message = {
                        type = MESSAGE_TYPE_SHADOWRIFT_DETECTED
                        localization = MESSAGE_SHADOWRIFT_DETECTED
                        days = 30
                        target = event_target:shadowgate_$TERMINUS$_system
                        variable = {
                            type = name
                            localization = SYSTEM
                            scope = event_target:shadowgate_$TERMINUS$_system
                        }
                    }
                }
            }
        }
        run_shadowrift_hostile_ai_fleet_effect = yes
    }
}

run_shadowrift_hostile_ai_fleet_effect = {
    every_fleet_in_system = { limit = { exists = owner owner = { NOT = { has_country_flag = shadowgate_exclude_hostile_ai } is_ai = yes } any_owned_ship = { is_ship_class = shipclass_military } }
        remove_fleet_flag = shadowgate_rift_hunter_cooldown
        fleet_event = { id = shadowgate_galactic.120 }
    }
    every_neighbor_system = {
        every_fleet_in_system = { limit = { exists = owner owner = { NOT = { has_country_flag = shadowgate_exclude_hostile_ai } is_ai = yes } any_owned_ship = { is_ship_class = shipclass_military } }
            fleet_event = { id = shadowgate_galactic.122 }
        }
    }
}

activate_shadowgate_cooldown = {
    if = { limit = { NOT = { has_modifier = pm_shadowgate_cooldown } }
        if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 0 } } shadowgate_cooldown_message = { SHADOWGATE = $SHADOWGATE$ SOUND = $SOUND|DEFAULT$ STABLE = $STABLE|STABLE$ LEVEL = 0 } }
        else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 1 } } shadowgate_cooldown_message = { SHADOWGATE = $SHADOWGATE$ SOUND = $SOUND|DEFAULT$ STABLE = $STABLE|STABLE$ LEVEL = 1 } }
        else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 2 } } shadowgate_cooldown_message = { SHADOWGATE = $SHADOWGATE$ SOUND = $SOUND|DEFAULT$ STABLE = $STABLE|STABLE$ LEVEL = 2 } }
        else_if = { limit = { num_districts = { type = district_harmonic_subspace_resonator value = 3 } } shadowgate_cooldown_message = { SHADOWGATE = $SHADOWGATE$ SOUND = $SOUND|DEFAULT$ STABLE = $STABLE|STABLE$ LEVEL = 3 } }
        if = { limit = { has_modifier = pm_shadowgate_stabilized_rift }
            if = { limit = { exists = owner owner = { NOR = { has_country_flag = shadowgate_first_rift_summoned prev = { shadowgate_shadowrift_is_under_assault = yes } } } }
                owner = {
                    set_country_flag = shadowgate_first_rift_summoned
                    prev = { planet_event = { id = shadowgate_galactic.320 days = 3 } }
                }
            }
            if = { limit = { has_planet_flag = shadowgate_ashen_pilgrimage exists = event_target:shadowgate_ap_country exists = event_target:shadowgate_ap_last_summoner }
                event_target:shadowgate_ap_last_summoner = { country_event = { id = shadowgate_pilgrimage.1100 } }
            }
            event_target:shadowrift_current_origin_$SHADOWGATE$ = {
                if = { limit = { NOT = { has_star_flag = shadowgate_solar_system } exists = space_owner if = { limit = { exists = prev.owner } space_owner = { NOT = { is_same_value = prevprev.owner } } } }
                    space_owner = {
                        create_message = {
                            type = MESSAGE_TYPE_SHADOWRIFT_OPENED
                            localization = MESSAGE_SHADOWRIFT_OPENED
                            days = 30
                            target = event_target:shadowrift_current_origin_$SHADOWGATE$
                            variable = {
                                type = name
                                localization = SYSTEM
                                scope = event_target:shadowrift_current_origin_$SHADOWGATE$
                            }
                        }
                    }
                }
            }
            event_target:shadowrift_current_terminus_$SHADOWGATE$ = {
                if = { limit = { exists = space_owner if = { limit = { exists = prev.owner } space_owner = { NOT = { is_same_value = prevprev.owner } } } }
                    space_owner = {
                        create_message = {
                            type = MESSAGE_TYPE_SHADOWRIFT_OPENED
                            localization = MESSAGE_SHADOWRIFT_OPENED
                            days = 30
                            target = event_target:shadowrift_current_terminus_$SHADOWGATE$
                            variable = {
                                type = name
                                localization = SYSTEM
                                scope = event_target:shadowrift_current_terminus_$SHADOWGATE$
                            }
                        }
                    }
                }
            }
        }
    }
}

shadowgate_cooldown_message = {
    add_modifier = { modifier = pm_shadowgate_cooldown days = @shadowgate_cld_$LEVEL$_$STABLE$ }
    planet_event = { id = shadowgate_galactic.220 days = @shadowgate_cld_$LEVEL$_$STABLE$ }
    create_message = {
        type = MESSAGE_TYPE_SHADOWGATE_ON_COOLDOWN_$SOUND$
        localization = MESSAGE_SHADOWGATE_ON_COOLDOWN_$LEVEL$_$STABLE$
        days = 60
        target = event_target:shadowrift_current_terminus_$SHADOWGATE$
        variable = {
            type = name
            localization = SHADOWGATE
            scope = this
        }
        variable = {
            type = name
            localization = ORIGIN
            scope = event_target:shadowrift_current_origin_$SHADOWGATE$
        }
        variable = {
            type = name
            localization = DESTINATION
            scope = event_target:shadowrift_current_terminus_$SHADOWGATE$
        }
    }
}

shadowgate_cpc_menu = {
    if = { limit = { exists = event_target:shadowgate_planet_$SHADOWGATE$ }
        set_variable = { which = ShadowgateRP value = event_target:shadowgate_planet_$SHADOWGATE$ }
        set_variable = { which = ShadowgateRPMin value = event_target:shadowgate_planet_$SHADOWGATE$ }
        set_variable = { which = ShadowgateCPCStored$VAR$ value = ShadowgateRP }
        subtract_variable = { which = ShadowgateCPCStored$VAR$ value = ShadowgateRPMin }
    }
}

shadowgate_cpc_effect = {
    change_variable = { which = ShadowgateCPCStored value = ShadowgateCPCStored$VAR$ }
    remove_modifier = relic_activation_cooldown
    add_modifier = {
        modifier = "relic_activation_cooldown"
        days = 3600
    }
    set_country_flag = shadowgate_cpc_used
    event_target:shadowgate_planet_$SHADOWGATE$ = {
        set_variable = { which = ShadowgateRP value = ShadowgateRPMin }
        set_variable = { which = ShadowgateRCHAmount value = 0 }
        if = { limit = { has_planet_flag = shadowrift_active has_planet_flag = shadowgate_rch_effect NOT = { has_planet_flag = shadowgate_opening } }
            event_target:shadowrift_country_$SHADOWGATE$ = { every_owned_ship = { remove_modifier = shadowrift_rch_boost } }
        }
    }
}

shadowgate_ap_event = {
    set_owner = event_target:shadowgate_owner
    planet_event = { id = shadowgate_pilgrimage.$ID$ }
    set_owner = event_target:shadowgate_ap_country
}

set_shadowgate_bazaar = {
    set_country_flag = ShadowgateAP$SLOT$
    random_list = {
        50 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 1 } check_variable = { which = ShadowgateAPBazaarMidItem value = 1 } check_variable = { which = ShadowgateAPBazaarRightItem value = 1 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 1 } # Consumer Goods
        }
        50 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 2 } check_variable = { which = ShadowgateAPBazaarMidItem value = 2 } check_variable = { which = ShadowgateAPBazaarRightItem value = 2 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 2 } # Alloys
        }
        50 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 3 } check_variable = { which = ShadowgateAPBazaarMidItem value = 3 } check_variable = { which = ShadowgateAPBazaarRightItem value = 3 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 3 } # Exotic Gases
        }
        50 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 4 } check_variable = { which = ShadowgateAPBazaarMidItem value = 4 } check_variable = { which = ShadowgateAPBazaarRightItem value = 4 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 4 } # Rare Crystals
        }
        50 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 5 } check_variable = { which = ShadowgateAPBazaarMidItem value = 5 } check_variable = { which = ShadowgateAPBazaarRightItem value = 5 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 5 } # Volatile Motes
        }
        40 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 6 } check_variable = { which = ShadowgateAPBazaarMidItem value = 6 } check_variable = { which = ShadowgateAPBazaarRightItem value = 6 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 6 } # Dark Matter
        }
        40 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 7 } check_variable = { which = ShadowgateAPBazaarMidItem value = 7 } check_variable = { which = ShadowgateAPBazaarRightItem value = 7 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 7 } # Living Metal
        }
        40 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 8 } check_variable = { which = ShadowgateAPBazaarMidItem value = 8 } check_variable = { which = ShadowgateAPBazaarRightItem value = 8 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 8 } # Zro
        }
        20 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 9 } check_variable = { which = ShadowgateAPBazaarMidItem value = 9 } check_variable = { which = ShadowgateAPBazaarRightItem value = 9 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 9 } # Minor Artifacts
        }
        5 = { modifier = { factor = 0 OR = { check_variable = { which = ShadowgateAPBazaarLeftItem value = 10 } check_variable = { which = ShadowgateAPBazaarMidItem value = 10 } check_variable = { which = ShadowgateAPBazaarRightItem value = 10 } } }
            set_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 10 } # Dark Lodestones
        }
        4 = { modifier = { factor = 0 OR = { NOT = { has_country_flag = ShadowgateAPMid } check_variable = { which = ShadowgateAPBazaarMidItem value = 11 } } }
            set_variable = { which = ShadowgateAPBazaarMidItem value = 11 } # Songstone
        }
        4 = { modifier = { factor = 0 OR = { NOT = { has_country_flag = ShadowgateAPMid } check_variable = { which = ShadowgateAPBazaarMidItem value = 12 } } }
            set_variable = { which = ShadowgateAPBazaarMidItem value = 12 } # Talisman
        }
        1 = { modifier = { factor = 0 OR = { has_global_flag = shadowgate_transmitter_acquired NOT = { has_country_flag = ShadowgateAPMid } check_variable = { which = ShadowgateAPBazaarMidItem value = 13 } } }
            set_variable = { which = ShadowgateAPBazaarMidItem value = 13 } # Transmitter
        }
        1 = { modifier = { factor = 0 OR = { has_global_flag = shadowgate_converter_acquired NOT = { has_country_flag = ShadowgateAPMid } check_variable = { which = ShadowgateAPBazaarMidItem value = 14 } } }
            set_variable = { which = ShadowgateAPBazaarMidItem value = 14 } # Converter
        }
        1 = { modifier = { factor = 0 OR = { has_global_flag = shadowgate_edict_acquired NOT = { has_country_flag = ShadowgateAPMid } check_variable = { which = ShadowgateAPBazaarMidItem value = 15 } } }
            set_variable = { which = ShadowgateAPBazaarMidItem value = 15 } # Edict
        }
    }
    remove_country_flag = ShadowgateAP$SLOT$
    if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value <= 2 } }
        if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 1 } } set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_cg_cost_p } }
        else = { set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_alloys_cost_p } }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 150 }
        while = { count = 3
            random_list = {
                2 = { }
                1 = {
                    change_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = @shadowgate_ap_bazaar_very_common_amount }
                }
            }
        }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Amount value = @shadowgate_ap_bazaar_very_common_amount }
    }
    else_if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value <= 8 } }
        if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value <= 5 } } set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_common_cost_low_p } }
        else = { set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_common_cost_high_p } }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 100 }
        while = { count = 4
            random_list = {
                2 = { }
                1 = {
                    change_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = @shadowgate_ap_bazaar_common_amount }
                }
            }
        }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Amount value = @shadowgate_ap_bazaar_common_amount }
    }
    else_if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 9 } }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_minor_cost_p }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 10 }
        while = { count = 3
            random_list = {
                1 = { }
                1 = { change_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = @shadowgate_ap_bazaar_minor_amount } }
            }
        }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Amount value = @shadowgate_ap_bazaar_minor_amount }
    }
    else_if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value = 10 } }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Cost value = @shadowgate_ap_bazaar_lesser_relic_cost_p }
        random_list = {
            50 = { set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 1 } }
            5 = { set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 2 } }
            1 = { set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 3 } }
        }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Amount value = @shadowgate_ap_bazaar_relic_amount }
    }
    else_if = { limit = { check_variable = { which = ShadowgateAPBazaar$SLOT$Item value > 10 } }
        set_variable = { which = ShadowgateAPBazaar$SLOT$Stock value = 1 }
    }
}

print_shadowgate_event_targets_in_log = {
    switch = {
        trigger = has_planet_flag
        shadowgate_a = { log = "|| Possible Error! Event Targets: -[This.GetShadowgateName]- -Origin [shadowrift_queued_origin_a.GetName]- -Destination [shadowgate_a_finalized_destination.GetName]- -Summoner [This.Owner.GetName]-" }
        shadowgate_b = { log = "|| Possible Error! Event Targets: -[This.GetShadowgateName]- -Origin [shadowrift_queued_origin_b.GetName]- -Destination [shadowgate_b_finalized_destination.GetName]- -Summoner [This.Owner.GetName]-" }
        shadowgate_c = { log = "|| Possible Error! Event Targets: -[This.GetShadowgateName]- -Origin [shadowrift_queued_origin_c.GetName]- -Destination [shadowgate_c_finalized_destination.GetName]- -Summoner [This.Owner.GetName]-" }
        shadowgate_d = { log = "|| Possible Error! Event Targets: -[This.GetShadowgateName]- -Origin [shadowrift_queued_origin_d.GetName]- -Destination [shadowgate_d_finalized_destination.GetName]- -Summoner [This.Owner.GetName]-" }
        shadowgate_e = { log = "|| Possible Error! Event Targets: -[This.GetShadowgateName]- -Origin [shadowrift_queued_origin_e.GetName]- -Destination [shadowgate_e_finalized_destination.GetName]- -Summoner [This.Owner.GetName]-" }
    }
}