#add the correct modifier based on galactic laws
sleeper_senate_modfiers_add = {
	if = {
		limit = { 
			is_active_resolution = resolution_sleeper_strikes
		}
		add_modifier = { modifier = sleeper_aggressor_reward days = -1 }
		remove_modifier = sleeper_aggressor_sanctions
	}
	if = {
		limit = {
			is_active_resolution = resolution_sleeper_sanctions
		}
		add_modifier = { modifier = sleeper_aggressor_sanctions days = -1 }
		remove_modifier = sleeper_aggressor_reward
	}
}
#add opinion mods for attacking the sleeper to the right countries, triggered from aggressor country
#no longer used, uses triggered opinions instead
sleeper_opinions_for_hostilities = {
	#save_event_target_as = aggresor
	#every_playable_country = {
	#	limit = {
	#		any_neighbor_country = { is_country_type = the_sleeper_fallen }
	#		NOT = { is_homicidal = yes }
	#	}
	#	if = {
	#		limit = {
	#			NOR = {
	#				is_militarist = yes
	#				is_xenophobe = yes
	#			}
	#		}
	#		add_opinion_modifier = {
	#			modifier = opinion_attacked_sleeper_neighbor_negative 
	#			who = event_target:aggresor
	#		}
	#	}
	#	if = {
	#		limit = {
	#			NOR = {
	#				is_militarist = yes
	#				is_xenophobe = yes
	#			}
	#		}
	#		add_opinion_modifier = {
	#			modifier = opinion_attacked_sleeper_neighbor_positive
	#			who = event_target:aggresor
	#		}
	#	}
	#}
	#every_playable_country = {
	#	limit = {
	#		NOR = {
	#			is_homicidal = yes
	#			any_neighbor_country = { is_country_type = the_sleeper_fallen }
	#		}
	#	}
	#	if = {
	#		limit = {
	#			NOR = {
	#				is_militarist = yes
	#				is_xenophobe = yes
	#			}
	#		}
	#		add_opinion_modifier = {
	#			modifier = opinion_attacked_sleeper_others_negative 
	#			who = event_target:aggresor
	#		}
	#	}
	#	if = {
	#		limit = {
	#			NOR = {
	#				is_militarist = yes
	#				is_xenophobe = yes
	#			}
	#		}
	#		add_opinion_modifier = {
	#			modifier = opinion_attacked_sleeper_others_positive
	#			who = event_target:aggresor
	#		}
	#	}
	#}
}
#deposit randomizer for the border planets
create_random_drone_deposit = {
	random_list = {
		30 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_betharian_deposit
		}
		10 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_alien_pets_deposit
		}
		10 = {
			add_deposit = d_dust_caverns
			add_deposit = d_bubbling_swamp
		}
		10 = {
			add_deposit = d_bubbling_swamp
			add_deposit = d_crystalline_caverns
		}
		10 = {
			add_deposit = d_crystalline_caverns
			add_deposit = d_dust_caverns
		}
		10 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_dust_desert
		}
		10 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_fuming_bog
		}
		10 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_crystal_forest
		}
		20 = {
			add_deposit = d_dust_caverns
			add_deposit = d_bubbling_swamp
			add_deposit = d_crystalline_caverns
		}
		5 = {
			add_deposit = d_sleeper_hive_remnants
			add_deposit = d_betharian_deposit
			add_deposit = d_betharian_deposit
		}
		5 = {
			add_deposit = d_crystalline_caverns
			add_deposit = d_fuming_bog
			add_deposit = d_dust_desert
		}
	}
}

#reset citzenship of the entire population to the right ones
sleeper_reset_rights = {
	#hiveminded pops
	every_owned_pop_species = {
		limit = {
			has_trait = trait_hive_mind
			NOT = {
				has_citizenship_type = {
					country = event_target:the_sleeper
					type = citizenship_full
				}
			}
		}
		set_citizenship_type = {
			country = event_target:the_sleeper
			type = citizenship_full
			cooldown = yes
		}
	}
	#food pops
	every_owned_pop_species = {
		limit = {
			NOT = { has_trait = trait_hive_mind }
			NOT = {
				has_citizenship_type = {
					country = event_target:the_sleeper
					type = citizenship_slavery
				}
			}
		}
		set_citizenship_type = {
			country = event_target:the_sleeper
			type = citizenship_slavery
			cooldown = yes
		}
		set_slavery_type = {
			country = event_target:the_sleeper
			type = slavery_livestock
			cooldown = yes
		}
	}
	#machine pops
	every_owned_pop_species = {
		limit = {
			OR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
			}
			NOT = {
				has_citizenship_type = {
					country = event_target:the_sleeper
					type = citizenship_purge
				}
			}
		}
		set_citizenship_type = {
			country = event_target:the_sleeper
			type = citizenship_purge
			cooldown = yes
		}
	}
}

#mission randomizer for TN-3
add_random_tony_mission = {
	set_timed_country_flag = {
		flag = tony_missions_blocked_timed 
		days = 1800
	}
	random_list = {
	#let your biologists collaborate with tony
		10 = {
			country_event = { id = sleeper_tony.03 }
			modifier = {
				factor = 0
				check_variable = { 
					which = num_mission_3
					value > 2
				}
			}
		}
	#special project on a drone planet, if the empire owns one
		30 = {
			country_event = { id = sleeper_tony.06 }
			modifier = {
				factor = 0
				NOT = {
					any_owned_planet = { has_planet_flag = sleeper_border_planet }
				}
			}
			modifier = {
				factor = 0
				has_country_flag = sleeper_did_drone_planet_mission
			}
		}
	#search a random planet. always available.
		10 = {
			country_event = { id = sleeper_tony.08 }
		}
	#TN-3 wants the empire to take in some drones that broke free of the hives will. Unique event.
		5 = {
			country_event = { id = sleeper_tony.10 }
			modifier = {
				factor = 0
				OR = {
					event_target:contact_empire = {
						has_country_flag = sleeper_freed_drone_mission_done
					}
					is_homicidal = yes
				}
			}
		}
	#TN-3 needs some repairs
		10 = {
			country_event = { id = sleeper_tony.17 }
		}
	#TN-3 asks for spare parts
		10 = {
			country_event = { id = sleeper_tony.21 }
		}
	#TN-3 asks a hivemind to test how it thinks
		10 = {
			country_event = { id = sleeper_tony.23 }
			modifier = {
				factor = 0
				NOT = {
					has_authority = auth_hive_mind
				}
			}
		}
	#TN-3 wants to lower the sleepers agitaton
		50 = {
			country_event = { id = sleeper_tony.25 }
			modifier = {
				factor = 0
				event_target:contact_empire = {
					has_country_flag = sleeper_agitation_mission_done
				}
			}
			modifier = {
				factor = 0
				event_target:the_sleeper = {
					check_variable = { which = sleeper_aggro value < 799 }
				}
			}
		}
	}
}

#mission randomizer for TN-3, modified for AI
add_random_tony_mission_ai = {
	random_list = {
	#let your biologists collaborate with tony
		10 = {
			country_event = { id = sleeper_tony.03 }
		}
	#special project on a drone planet, if the empire owns one
		30 = {
			country_event = { id = sleeper_tony.06 }
			modifier = {
				factor = 0
				NOT = {
					any_owned_planet = { has_planet_flag = sleeper_border_planet }
				}
			}
			modifier = {
				factor = 0
				has_country_flag = sleeper_did_drone_planet_mission
			}
		}
	#search a random planet. always available.
		10 = {
			country_event = { id = sleeper_tony.08 }
		}
	#TN-3 wants the empire to take in some drones that broke free of the hives will. Unique event. Modfied for AI to simply give the result of the mission
		3 = {
			random_list = {
				60 = {
					THIS.capital_scope = {
						create_pop = {
							species = event_target:sleeper_species 
						}
					}
					last_created_pop = {
						modify_species = {
							species = this
							remove_trait = trait_hive_mind
							add_trait = trait_former_drones
							add_traits_at_start_of_list = yes
						}
					}
					event_target:the_sleeper = {
						change_variable  = { 
							which = sleeper_agitation 
							value = 10
						}
					}
				}
				40 ={
				}
			}
			modifier = {
				factor = 0
				OR = {
					event_target:hive_enclave_country = { has_country_flag = sleeper_freed_drone_mission_done }
					is_homicidal = yes
				}
			}
		}
	#TN-3 needs some repairs
		10 = {
			country_event = { id = sleeper_tony.17 }
		}
	#TN-3 asks for spare parts
		10 = {
			country_event = { id = sleeper_tony.21 }
		}
	#TN-3 asks a hivemind to test how it thinks
		10 = {
			country_event = { id = sleeper_tony.23 }
			modifier = {
				factor = 0
				NOT = { has_authority = auth_hive_mind }
			}
		}
	#TN-3 wants to lower the sleepers agitaton. Disabled for AI
		#50 = {
		#	country_event = { id = sleeper_tony.25 }
		#	modifier = {
		#		factor = 0
		#		event_target:contact_empire = {
		#			has_country_flag = sleeper_agitation_mission_done
		#		}
		#	}
		#	modifier = {
		#		factor = 0
		#		any_country = {
		#			is_sleeper = yes
		#			check_variable = { which = sleeper_aggro value < 799 }
		#		}
		#	}
		#}
	}
}

#spawn leaders
spawn_sleeper_admiral = {
	event_target:the_sleeper = {
		create_leader = {
			class = admiral
			species = event_target:the_sleeper.species
			name = random
			skill = 4
			leader_age_min = 25
			leader_age_max = 45
			traits = {
				trait = random_trait
				trait = random_trait
			}
		}	
	}
	last_created_leader = {
		save_event_target_as = last_fking_created_leader
	}
}

spawn_sleeper_shit_admiral = {
	event_target:the_sleeper = {
		create_leader = {
			class = admiral
			species = event_target:the_sleeper.species
			name = random
			skill = 2
			leader_age_min = 10
			leader_age_max = 15
			traits = {
				trait = random_trait
			}
		}
	}
}

spawn_sleeper_feral_admiral = {
	event_target:the_sleeper = {
		create_leader = {
			class = admiral
			species = event_target:the_sleeper.species
			name = random
			skill = 2
			leader_age_min = 10
			leader_age_max = 15
			traits = {
				trait = leader_trait_feral_admiral
			}
		}
		last_created_leader = {
			save_event_target_as = last_fking_created_leader
		}
	}
}

#starbases
create_sleeper_platform = {
	create_ship = {
		name = random
		design = "NAME_Eye"
		graphical_culture = owner
	}
}

create_sleeper_outpost = {
	create_starbase = {
		size = "starbase_outpost"
		effect = {
			while = {
				count = 2
				create_sleeper_platform = yes
			}
		}		
	}
}

create_sleeperweak__outpost = {
	create_starbase = {
		size = "starbase_outpost"	
	}
}

create_sleeper_home_citadel = {
	create_starbase = {
		size = "starbase_citadel"

		module = "shipyard"
		module = "shipyard"
		module = "shipyard"			
		module = "hangar_bay"
		module = "gun_battery"
		module = "gun_battery"		

		building = "target_uplink_computer"
		building = "defense_grid"
		building = "colossus_yards"
		building = "titan_yards"
		
		effect = {
			while = {
				count = 10
				create_sleeper_platform = yes
			}
			set_owner = event_target:the_sleeper
		}
	}
}

create_sleeper_citadel = {
	create_starbase = {
		size = "starbase_citadel"

		module = "shipyard"
		module = "anchorage"
		module = "anchorage"
		module = "hangar_bay"
		module = "gun_battery"
		module = "gun_battery"

		building = "crew_quarters"
		building = "command_center"
		building = "target_uplink_computer"
		building = "listening_post"
		
		effect = {
			while = {
				count = 4
				create_sleeper_platform = yes
			}
			set_owner = event_target:the_sleeper
		}			
	}
}

sleeper_spawn_platform = {
	create_ship = {
		name = random
		design = "NAME_Eye"
		graphical_culture = owner
	}						
}


sleeper_spawn_titan = {
	create_ship = {
		name = random
		design = "NAME_Mothership"
		graphical_culture = owner
	}						
}


sleeper_spawn_large_ship = {
	create_ship = {
		name = random
		design = "NAME_Carrier"
		graphical_culture = owner
	}
}

sleeper_spawn_small_ship = {
	create_ship = {
		name = random
		design = "NAME_Fighter_Drone"
		graphical_culture = owner
	}						
}

sleeper_spawn_construction_ship = {
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			create_ship = {
				name = random
				design = "NAME_Construction_drone"
				graphical_culture = owner
			}
			set_location = {
				target = prev
				distance = 60
				angle = random 
			}				
		}
	}
}

spawn_sleeper_fleet = {
	spawn_sleeper_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 6
				sleeper_spawn_large_ship = yes
			}
			while = {
				count = 18
				sleeper_spawn_small_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
	}					
}

spawn_sleeper_fleet_with_titan = {
	spawn_sleeper_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 8
				sleeper_spawn_large_ship = yes
			}
			while = {
				count = 16
				sleeper_spawn_small_ship = yes
			}
			sleeper_spawn_titan = yes
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
	}					
}
spawn_sleeper_colossus = {
	if = {
		limit = { 
			host_has_dlc = "Apocalypse"
		}
		create_fleet = {
			effect = {
				set_owner = event_target:the_sleeper
				create_ship = {
					name = random
					design = "NAME_Integrator"
					graphical_culture = owner
				}
				set_location = {
					target = prev
					distance = 60
					angle = random 
				}
			}
		}
	}
}

#lowtech ships, spawns small, underdeveloped ships
sleeper_lowtech_spawn_small_ship_one = {
	create_ship = {
		name = random
		design = "NAME_Rushed_Fighter_Drone"
		graphical_culture = owner
	}						
}

sleeper_lowtech_spawn_small_ship_two = {
	create_ship = {
		name = random
		design = "NAME_damaged_patrol_ship"
		graphical_culture = owner
	}						
}

sleeper_lowtech_spawn_makeshift_escort = {
	create_ship = {
		name = random
		design = "NAME_Makeshift_Escort"
		graphical_culture = owner
	}						
}

sleeper_lowtech_spawn_makeshift_cruiser = {
	create_ship = {
		name = random
		design = "NAME_Makeshift_Sleeper_Cruiser"
		graphical_culture = owner
	}						
}

sleeper_lowtech_spawn_decrepit_mothership = {
	create_ship = {
		name = random
		design = "NAME_Decrepit_Mothership"
		graphical_culture = owner
	}						
}

#everything exept decrepit mothership
sleeper_spawn_random_lowtech_ship = {
	random_list = {
		40 = {
			sleeper_lowtech_spawn_small_ship_one = yes
		}
		40 = {
			sleeper_lowtech_spawn_small_ship_two = yes
		}
		20 = {
			sleeper_lowtech_spawn_makeshift_escort = yes
		}
		10 = {
			sleeper_lowtech_spawn_makeshift_cruiser = yes
		}
	}

}
#spawn fleets for the berserker
spawn_sleeper_lowtech_fleet_mothership = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			sleeper_lowtech_spawn_decrepit_mothership = yes
			while = {
				count = 4
				sleeper_lowtech_spawn_small_ship_one = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

spawn_sleeper_lowtech_fleet_5 = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 10
				sleeper_spawn_random_lowtech_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

spawn_sleeper_lowtech_fleet_10 = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 10
				sleeper_spawn_random_lowtech_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

spawn_sleeper_lowtech_fleet_15 = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 15
				sleeper_spawn_random_lowtech_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

spawn_sleeper_lowtech_fleet_20 = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 20
				sleeper_spawn_random_lowtech_ship = yes
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

spawn_sleeper_lowtech_fleet_small_ships = {
	spawn_sleeper_feral_admiral = yes
	create_fleet = {
		effect = {
			set_owner = event_target:the_sleeper
			assign_leader = event_target:last_fking_created_leader
			while = {
				count = 20
				random_list = {
					40 = {
						sleeper_lowtech_spawn_small_ship_one = yes
					}
					40 = {
						sleeper_lowtech_spawn_small_ship_two = yes
					}
				}
			}
			random_list = {
				25 = {
					set_location = {
						target = prev
						distance = 30
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 45
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 60
						angle = random 
					}				
				}
				25 = {
					set_location = {
						target = prev
						distance = 75
						angle = random 
					}				
				}				
			}
		}
		settings = {
			can_upgrade = no 
			can_disband = no
			uses_naval_capacity = no
			can_change_composition = no
		}
	}					
}

sleeper_spawn_random_lowtech_fleet = {
	random_owned_planet = {
		limit = {
			OR = {
				has_planet_flag = sleeper_core_world
				has_planet_flag = sleeper_border_planet
			}
		}
		random_list = {
			20 = { spawn_sleeper_lowtech_fleet_5 = yes }
			40 = { spawn_sleeper_lowtech_fleet_10 = yes }
			30 = { spawn_sleeper_lowtech_fleet_15 = yes }
			10 = { spawn_sleeper_lowtech_fleet_20 = yes }
			5 = { spawn_sleeper_lowtech_fleet_small_ships = yes }
			5 = { spawn_sleeper_lowtech_fleet_mothership = yes }
		}
	}
}

