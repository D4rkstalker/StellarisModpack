
# ag_hostile_kill_counter = { ... }
# A counter on Victim's country to count how many ships belong to this country were destroyed, different ship class has different weight.
# this: Victim(Country Scope), owner of distroyed ship.
# prev: Victim(Ship Scope), distroyed ship.
# Parameters: 
# ag_variable_name: Name of the variable that used as the counter, can't be empty.
# ag_effect_corvette_class: Scripted effects that triggered when the victim ship belongs to the corvette class, default is do nothing.
# ag_effect_destroyer_class: Scripted effects that triggered when the victim ship belongs to the destroyer class, default is do nothing.
# ag_effect_cruiser_class: Scripted effects that triggered when the victim ship belongs to the cruiser class, default is do nothing.
# ag_effect_battleship_class: Scripted effects that triggered when the victim ship belongs to the battleship class, default is do nothing.
# ag_effect_titan_class: Scripted effects that triggered when the victim ship belongs to the titan class, default is do nothing.
# ag_effect_colossus_class: Scripted effects that triggered when the victim ship belongs to the colossus class, default is do nothing.
# ag_effect_ancient_class: Scripted effects that triggered when the victim ship is an ancient ship in this mod, default is do nothing.
# ag_effect_constructor_class: Scripted effects that triggered when the victim ship belongs to the constructor class, default is do nothing.
# ag_effect_colonizer_class: Scripted effects that triggered when the victim ship belongs to the colonizer class, default is do nothing.
# ag_effect_science_class: Scripted effects that triggered when the victim ship belongs to the science class, default is do nothing.
# ag_effect_transport_class: Scripted effects that triggered when the victim ship belongs to the transport class, default is do nothing.
# ag_effect_defensive_station_class: Scripted effects that triggered when the victim ship belongs to the defensive_station class, default is do nothing.
# ag_effect_starbase_class: Scripted effects that triggered when the victim ship belongs to the starbase class, default is do nothing.
# ag_effect_civilian_station_class: Scripted effects that triggered when the victim ship belongs to the civilian_station class, default is do nothing.

# Use ag_print_scope = { ag_prifix = <Scope>-[This.GetName] } to print scope.
ag_print_scope = {
	optimize_memory
	switch = {
		trigger = is_scope_type
		megastructure = { log = "[[ag_prifix]$ag_prifix$: ]Megastructure Scope" }
		planet = { log = "[[ag_prifix]$ag_prifix$: ]Planet Scope" }
		country = { log = "[[ag_prifix]$ag_prifix$: ]Country Scope" }
		ship = { log = "[[ag_prifix]$ag_prifix$: ]Ship Scope" }
		pop = { log = "[[ag_prifix]$ag_prifix$: ]Pop Scope" }
		fleet = { log = "[[ag_prifix]$ag_prifix$: ]Fleet Scope" }
		galactic_object = { log = "[[ag_prifix]$ag_prifix$: ]Galactic Object Scope" }
		leader = { log = "[[ag_prifix]$ag_prifix$: ]Leader Scope" }
		army = { log = "[[ag_prifix]$ag_prifix$: ]Army Scope" }
		ambient_object = { log = "[[ag_prifix]$ag_prifix$: ]Ambient Object Scope" }
		species = { log = "[[ag_prifix]$ag_prifix$: ]Species Scope" }
		design = { log = "[[ag_prifix]$ag_prifix$: ]Design Scope" }
		pop_faction = { log = "[[ag_prifix]$ag_prifix$: ]Pop Faction Scope" }
		war = { log = "[[ag_prifix]$ag_prifix$: ]War Scope" }
		alliance = { log = "[[ag_prifix]$ag_prifix$: ]Alliance Scope" }
		starbase = { log = "[[ag_prifix]$ag_prifix$: ]Starbase Scope" }
		deposit = { log = "[[ag_prifix]$ag_prifix$: ]Deposit Scope" }
		observer = { log = "[[ag_prifix]$ag_prifix$: ]Observer Scope" }
		sector = { log = "[[ag_prifix]$ag_prifix$: ]Sector Scope" }
		default = { log = "[[ag_prifix]$ag_prifix$: ]Unknown Scope(Default)" }
	}
}
ag_print_scope_all = {
	optimize_memory
	ag_print_scope = { ag_prifix = THIS - [[ag_prifix]_$ag_prifix$] }
	root = { ag_print_scope = { ag_prifix = ROOT - [[ag_prifix]_$ag_prifix$] } }
	if = { limit = { exists = owner } owner = { ag_print_scope = { ag_prifix = OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = space_owner } space_owner = { ag_print_scope = { ag_prifix = SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = solar_system } solar_system = { ag_print_scope = { ag_prifix = SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = from } from = { ag_print_scope = { ag_prifix = FROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.owner } from.owner = { ag_print_scope = { ag_prifix = FROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.space_owner } from.space_owner = { ag_print_scope = { ag_prifix = FROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.solar_system } from.solar_system = { ag_print_scope = { ag_prifix = FROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfrom } fromfrom = { ag_print_scope = { ag_prifix = FROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.owner } fromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.space_owner } fromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.solar_system } fromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfromfrom } fromfromfrom = { ag_print_scope = { ag_prifix = FROMFROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.owner } fromfromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.space_owner } fromfromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.solar_system } fromfromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfromfromfrom } fromfromfromfrom = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.owner } fromfromfromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.space_owner } fromfromfromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.solar_system } fromfromfromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prev } prev = { ag_print_scope = { ag_prifix = PREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.owner } prev.owner = { ag_print_scope = { ag_prifix = OWNE - R[[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.space_owner } prev.space_owner = { ag_print_scope = { ag_prifix = SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.solar_system } prev.solar_system = { ag_print_scope = { ag_prifix = SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprev } prevprev = { ag_print_scope = { ag_prifix = PREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.owner } prevprev.owner = { ag_print_scope = { ag_prifix = PREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.space_owner } prevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.solar_system } prevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprevprev } prevprevprev = { ag_print_scope = { ag_prifix = PREVPREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.owner } prevprevprev.owner = { ag_print_scope = { ag_prifix = PREVPREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.space_owner } prevprevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.solar_system } prevprevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprevprevprev } prevprevprevprev = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.owner } prevprevprevprev.owner = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.space_owner } prevprevprevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.solar_system } prevprevprevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
}

#######################################
###			Particle Effects
#######################################
@ag_ship_effect_life_span = 10

ag_spawn_buff_effect = {
	optimize_memory
	if = {
		limit = { NOT = { has_global_flag = ag_ancient_empire_mod_no_particle_effect } }
		create_ambient_object = {
			type = ag_ship_ability_buff_effect[[ag_type]_$ag_type$][[ag_color]_$ag_color$][[ag_scale]_$ag_scale$]
			# play_animation_once = yes
			location = this
			duration = @ag_ship_effect_life_span
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_buff_particle_scale
		}
	}
}
ag_spawn_explosion_effect = {
	optimize_memory
	if = {
		limit = { NOT = { has_global_flag = ag_ancient_empire_mod_no_particle_effect } }
		create_ambient_object = {
			type = ag[[ag_scale]_$ag_scale$]_explosion[[ag_color]_$ag_color$]
			# play_animation_once = yes
			location = this
			duration = @ag_ship_effect_life_span
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_explosion_particle_scale
		}
	}
}
ag_spawn_invincible_effect = {
	optimize_memory
	if = {
		limit = { NOR = { has_global_flag = ag_ancient_empire_mod_no_particle_effect has_ship_flag = ag_extra_life_effect_mutex } }
		set_timed_ship_flag = { flag = ag_extra_life_effect_mutex days = @ag_ship_effect_life_span }
		create_ambient_object = {
			type = ag_ship_invincible_aura
			# play_animation_once = yes
			location = this
			duration = @ag_ship_effect_life_span
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = 0.021
		}
	}
}
ag_spawn_extra_lives_effect = {
	optimize_memory
	if = {
		limit = { NOR = { has_global_flag = ag_ancient_empire_mod_no_particle_effect has_ship_flag = ag_extra_life_effect_mutex } }
		set_timed_ship_flag = { flag = ag_extra_life_effect_mutex days = @ag_ship_effect_life_span }
		if = {
			limit = { exists = owner owner = { is_country_type = ag_zeta_crisis_country } }
			if = {
				limit = { OR = {
					is_ship_class = shipclass_starbase
					is_ship_class = shipclass_military_station
				} }
				create_ambient_object = {
					type = ag_shroud_invaders_extra_lives
					# play_animation_once = yes
					location = this
					duration = @ag_ship_effect_life_span
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = -15 max = -15 }
					entity_scale_to_size = yes
					scale = 0.021
				}
			}
			else = {
				create_ambient_object = {
					type = ag_shroud_invaders_extra_lives
					# play_animation_once = yes
					location = this
					duration = @ag_ship_effect_life_span
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					entity_scale_to_size = yes
					scale = 0.030
				}
			}
		}
		else = {
			if = {
				limit = { OR = {
					is_ship_class = shipclass_starbase
					is_ship_class = shipclass_military_station
				} }
				create_ambient_object = {
					type = ag_ship_extra_lives_actived
					# play_animation_once = yes
					location = this
					duration = @ag_ship_effect_life_span
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = -15 max = -15 }
					entity_scale_to_size = yes
					scale = 0.021
				}
			}
			else = {
				create_ambient_object = {
					type = ag_ship_extra_lives_actived
					# play_animation_once = yes
					location = this
					duration = @ag_ship_effect_life_span
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					entity_scale_to_size = yes
					scale = 0.030
				}
			}
		}
	}
}

ag_ancient_planet_killer_windup_star_effect = {
	optimize_memory
	create_ambient_object = {
		type = ag_ancient_star_killer_star_windup_in_range
		location = this
		duration = -1
		use_3d_location = yes
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
		entity_scale_to_size = yes
		scale = 0.025
	}
}
ag_ancient_planet_killer_hit_star_effect = {
	optimize_memory
	create_ambient_object = {
		type = ag_ancient_star_killer_star_hit_in_range
		location = this
		duration = -1
		use_3d_location = yes
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
		entity_scale_to_size = yes
		scale = 0.025
	}
}
ag_ancient_planet_killer_hit_explosion = {
	optimize_memory
	create_ambient_object = {
		type = ag_ancient_planet_killer_hit_explosion
		location = this
		duration = 30
		use_3d_location = yes
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
		entity_scale_to_size = yes
		scale = 0.32
	}
}

ag_spawn_jumpdrive_effect = {
	optimize_memory
	if = {
		limit = { is_scope_type = fleet }
		every_controlled_ship = { create_ambient_object = {
			type = ag_ancient_jump_effect_$ag_color$
			duration = @ag_jumpdrive_effect_duration
			location = this
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_jumpdrive_effect_scale
		} }
	}
	else = {
		create_ambient_object = {
			type = ag_ancient_jump_effect_$ag_color$
			duration = @ag_jumpdrive_effect_duration
			location = this
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_jumpdrive_effect_scale
		}
	}
}

ag_spawn_psi_jumpdrive_effect = {
	optimize_memory
	if = {
		limit = { is_scope_type = fleet }
		every_controlled_ship = { create_ambient_object = {
			type = ag_shroud_jump_effect
			duration = @ag_jumpdrive_effect_duration
			location = this
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_jumpdrive_effect_scale
		} }
	}
	else = {
		create_ambient_object = {
			type = ag_shroud_jump_effect
			duration = @ag_jumpdrive_effect_duration
			location = this
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = @ag_jumpdrive_effect_scale
		}
	}
}

#######################################
###			Common Effects
#######################################

ag_find_spawn_system_source = {
	optimize_memory
	random_system = {
		limit = {
			OR = {
				AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
				NOT = { has_global_flag = ag_system_spawn_in_home }
			}
			NOR = {
				has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
				AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
				AND = {
					always = $ag_avoid_colonies|no$
					OR = {
						any_system_planet = {
							exists = owner
							owner = { is_same_value = event_target:ag_system_discover_country }
							OR = { is_colony = yes is_under_colonization = yes }
						}
						any_neighbor_system = { OR = {
							AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
							has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
							AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
							any_system_planet = {
								exists = owner
								owner = { is_same_value = event_target:ag_system_discover_country }
								OR = { is_colony = yes is_under_colonization = yes }
							}
							any_neighbor_system = { OR = {
								AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
								has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
								AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
								any_system_planet = {
									exists = owner
									owner = { is_same_value = event_target:ag_system_discover_country }
									OR = { is_colony = yes is_under_colonization = yes }
								}
								any_neighbor_system = { OR = {
									AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
									has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
									AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
									any_system_planet = {
										exists = owner
										owner = { is_same_value = event_target:ag_system_discover_country }
										OR = { is_colony = yes is_under_colonization = yes }
									}
									any_neighbor_system = { OR = {
										AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
										has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
										AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
										any_system_planet = {
											exists = owner
											owner = { is_same_value = event_target:ag_system_discover_country }
											OR = { is_colony = yes is_under_colonization = yes }
										}
									} }
								} }
							} }
						} }
					}
				}
			}
		}
		save_event_target_as = ag_target_system_location
	}
	if = {
		limit = { NOT = { exists = event_target:ag_target_system_location } }
		random_system = {
			limit = {
				OR = {
					AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
					NOT = { has_global_flag = ag_system_spawn_in_home }
				}
				NOR = {
					has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
					AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
					AND = {
						always = $ag_avoid_colonies|no$
						OR = {
							any_system_planet = {
								exists = owner
								owner = { is_same_value = event_target:ag_system_discover_country }
								OR = { is_colony = yes is_under_colonization = yes }
							}
							any_neighbor_system = { OR = {
								AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
								has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
								AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
								any_system_planet = {
									exists = owner
									owner = { is_same_value = event_target:ag_system_discover_country }
									OR = { is_colony = yes is_under_colonization = yes }
								}
								any_neighbor_system = { OR = {
									AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
									has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
									AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
									any_system_planet = {
										exists = owner
										owner = { is_same_value = event_target:ag_system_discover_country }
										OR = { is_colony = yes is_under_colonization = yes }
									}
									any_neighbor_system = { OR = {
										AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
										has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
										AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
										any_system_planet = {
											exists = owner
											owner = { is_same_value = event_target:ag_system_discover_country }
											OR = { is_colony = yes is_under_colonization = yes }
										}
									} }
								} }
							} }
						}
					}
				}
			}
			save_event_target_as = ag_target_system_location
		}
		if = {
			limit = { NOT = { exists = event_target:ag_target_system_location } }
			random_system = {
				limit = {
					OR = {
						AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
						NOT = { has_global_flag = ag_system_spawn_in_home }
					}
					NOR = {
						has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
						AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
						AND = {
							always = $ag_avoid_colonies|no$
							OR = {
								any_system_planet = {
									exists = owner
									owner = { is_same_value = event_target:ag_system_discover_country }
									OR = { is_colony = yes is_under_colonization = yes }
								}
								any_neighbor_system = { OR = {
									AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
									has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
									AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
									any_system_planet = {
										exists = owner
										owner = { is_same_value = event_target:ag_system_discover_country }
										OR = { is_colony = yes is_under_colonization = yes }
									}
									any_neighbor_system = { OR = {
										AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
										has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
										AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
										any_system_planet = {
											exists = owner
											owner = { is_same_value = event_target:ag_system_discover_country }
											OR = { is_colony = yes is_under_colonization = yes }
										}
									} }
								} }
							}
						}
					}
				}
				save_event_target_as = ag_target_system_location
			}
			if = {
				limit = { NOT = { exists = event_target:ag_target_system_location } }
				random_system = {
					limit = {
						OR = {
							AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
							NOT = { has_global_flag = ag_system_spawn_in_home }
						}
						NOR = {
							has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
							AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
							AND = {
								always = $ag_avoid_colonies|no$
								OR = {
									any_system_planet = {
										exists = owner
										owner = { is_same_value = event_target:ag_system_discover_country }
										OR = { is_colony = yes is_under_colonization = yes }
									}
									any_neighbor_system = { OR = {
										AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
										has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
										AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
										any_system_planet = {
											exists = owner
											owner = { is_same_value = event_target:ag_system_discover_country }
											OR = { is_colony = yes is_under_colonization = yes }
										}
									} }
								}
							}
						}
					}
					save_event_target_as = ag_target_system_location
				}
				if = {
					limit = { NOT = { exists = event_target:ag_target_system_location } }
					random_system = {
						limit = {
							OR = {
								AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
								NOT = { has_global_flag = ag_system_spawn_in_home }
							}
							NOR = {
								has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
								AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
								AND = {
									always = $ag_avoid_colonies|no$
									any_system_planet = {
										exists = owner
										owner = { is_same_value = event_target:ag_system_discover_country }
										OR = { is_colony = yes is_under_colonization = yes }
									}
								}
							}
						}
						save_event_target_as = ag_target_system_location
					}
					if = {
						limit = { NOT = { exists = event_target:ag_target_system_location } }
						random_system = {
							limit = {
								OR = {
									AND = { has_global_flag = ag_system_spawn_in_home exists = space_owner space_owner = { is_same_value = event_target:ag_system_discover_country } }
									NOT = { has_global_flag = ag_system_spawn_in_home }
								}
								NOR = {
									has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
									AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
								}
							}
							save_event_target_as = ag_target_system_location
						}
						if = {
							limit = { NOT = { exists = event_target:ag_target_system_location } }
							random_system = {
								limit = { NOR = {
									has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system has_star_flag = ag_no_hyperlane_system
									AND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes }
								} }
								save_event_target_as = ag_target_system_location
							}
							if = {
								limit = { NOT = { exists = event_target:ag_target_system_location } }
								random_system = {
									limit = { NAND = { always = $ag_requires_no_wormhole|no$ has_natural_wormhole = yes } }
									save_event_target_as = ag_target_system_location
								}
								if = {
									limit = { NOT = { exists = event_target:ag_target_system_location } }
									random_system = { save_event_target_as = ag_target_system_location }
								}
							}
						}
					}
				}
			}
		}
	}
}

ag_spawn_ancient_system = {
	optimize_memory
	save_event_target_as = ag_system_discover_country
	ag_find_spawn_system_source = { ag_avoid_colonies = $ag_avoid_colonies|no$ }
	event_target:ag_target_system_location = { spawn_system = {
		min_distance >= 20
		max_distance <= 50
		initializer = $ag_system_to_spawn$
		hyperlane = $ag_hyperlane|yes$
	} }
	if = {
		limit = { NOT = { has_event_chain = "ag_hidden_system_chain" } }
		begin_event_chain = { event_chain = "ag_hidden_system_chain" target = root.owner }
	}
}

ag_spawned_system_effect = {
	optimize_memory
	add_event_chain_counter = {
		event_chain = "ag_hidden_system_chain"
		counter = "ag_ancient_system"
		amount = 1
	}
	country_event = { id = ag_spawn.1 }
	country_event = { id = ag_spawn.32 }
	every_country = {
		limit = { NOT = { is_same_value = event_target:ag_system_discover_country } }
		country_event = { id = ag_spawn.33 }
	}
}

ag_spawned_system_hyperlane_fixup = {
	optimize_memory
	every_neighbor_system = {
		limit = { OR = { ag_is_ancient_system = yes has_star_flag = ag_no_hyperlane_system } has_hyperlane_to = prev }
		remove_hyperlane = { from = this to = prev }
		prev = { if = {
			limit = { NOT = { has_star_flag = ag_spawned_system_hyperlane_fixup } }
			set_star_flag = ag_spawned_system_hyperlane_fixup
		} }
	}
	if = {
		limit = { has_star_flag = ag_spawned_system_hyperlane_fixup }
		remove_star_flag = ag_spawned_system_hyperlane_fixup
		if = {
			limit = { NOT = { any_neighbor_system = {
				ag_is_ancient_system = no
				NOR = {
					has_star_flag = sealed_system
					has_star_flag = fallen_sol_system
					has_star_flag = lcluster
					has_star_flag = wg_sealed_system
					has_star_flag = ag_no_jump_in_system
					has_star_flag = Kuat_system
					has_star_flag = Kuat_system_1
					has_star_flag = Kuat_system_2
					has_star_flag = Kuat_system_3
					has_star_flag = outercluster
					has_star_flag = ehof_compound_system
					has_star_flag = katzen_jump_blocked_system
					has_star_flag = nep_Krahen_cluster
					has_star_flag = nep_Scrus_cluster
					has_star_flag = nep_dragon_system
					has_star_flag = nep_heptagram_cluster
					cohesive_system = yes
					urmazin_system = yes
					everchanging_system = yes
					ehof_cohesive_system = yes
					ehof_trader_system = yes
					ehof_creator_system = yes
				}
			} } }
			random_system = {
				limit = {
					ag_is_ancient_system = no
					NOR = {
						has_star_flag = sealed_system
						has_star_flag = fallen_sol_system
						has_star_flag = lcluster
						has_star_flag = wg_sealed_system
						has_star_flag = ag_no_jump_in_system
						has_star_flag = Kuat_system
						has_star_flag = Kuat_system_1
						has_star_flag = Kuat_system_2
						has_star_flag = Kuat_system_3
						has_star_flag = outercluster
						has_star_flag = ehof_compound_system
						has_star_flag = katzen_jump_blocked_system
						has_star_flag = nep_Krahen_cluster
						has_star_flag = nep_Scrus_cluster
						has_star_flag = nep_dragon_system
						has_star_flag = nep_heptagram_cluster
						cohesive_system = yes
						urmazin_system = yes
						everchanging_system = yes
						ehof_cohesive_system = yes
						ehof_trader_system = yes
						ehof_creator_system = yes
					}
					distance = {
						source = prev
						type = euclidean
						use_bypasses = no
						min_distance >= 0
						max_distance <= 50
					}
				}
				save_event_target_as = ag_fallback_system
			}
			if = {
				limit = { exists = event_target:ag_fallback_system }
				add_hyperlane = { from = this to = event_target:ag_fallback_system }
			}
			else = {
				random_system = {
					limit = {
						ag_is_ancient_system = no
						NOR = {
							has_star_flag = sealed_system
							has_star_flag = fallen_sol_system
							has_star_flag = lcluster
							has_star_flag = wg_sealed_system
							has_star_flag = ag_no_jump_in_system
							has_star_flag = Kuat_system
							has_star_flag = Kuat_system_1
							has_star_flag = Kuat_system_2
							has_star_flag = Kuat_system_3
							has_star_flag = outercluster
							has_star_flag = ehof_compound_system
							has_star_flag = katzen_jump_blocked_system
							has_star_flag = nep_Krahen_cluster
							has_star_flag = nep_Scrus_cluster
							has_star_flag = nep_dragon_system
							has_star_flag = nep_heptagram_cluster
							cohesive_system = yes
							urmazin_system = yes
							everchanging_system = yes
							ehof_cohesive_system = yes
							ehof_trader_system = yes
							ehof_creator_system = yes
						}
						distance = {
							source = prev
							type = euclidean
							use_bypasses = no
							min_distance > 50
							max_distance <= 100
						}
					}
					save_event_target_as = ag_fallback_system
				}
				if = {
					limit = { exists = event_target:ag_fallback_system }
					add_hyperlane = { from = this to = event_target:ag_fallback_system }
				}
				else = { random_system = {
					limit = {
						ag_is_ancient_system = no
						NOR = {
							has_star_flag = sealed_system
							has_star_flag = fallen_sol_system
							has_star_flag = lcluster
							has_star_flag = wg_sealed_system
							has_star_flag = ag_no_jump_in_system
							has_star_flag = Kuat_system
							has_star_flag = Kuat_system_1
							has_star_flag = Kuat_system_2
							has_star_flag = Kuat_system_3
							has_star_flag = outercluster
							has_star_flag = ehof_compound_system
							has_star_flag = katzen_jump_blocked_system
							has_star_flag = nep_Krahen_cluster
							has_star_flag = nep_Scrus_cluster
							has_star_flag = nep_dragon_system
							has_star_flag = nep_heptagram_cluster
							cohesive_system = yes
							urmazin_system = yes
							everchanging_system = yes
							ehof_cohesive_system = yes
							ehof_trader_system = yes
							ehof_creator_system = yes
						}
					}
					add_hyperlane = { from = this to = prev }
				} }
			}
		}
	}
}

# Prevent system's planets be removed accidently.
ag_mod_compatibility_effect = {
	optimize_memory
	set_star_flag = bwm_artifact_doom_flag
	set_star_flag = ag_no_broken_gate_site
	every_system_planet = {
		set_planet_flag = cant_build_here
		set_planet_flag = cant_target_this_planet
	}
}

ag_change_pc = {
	optimize_memory
	if = {
		limit = { NOT = { is_planet_class = $ag_planet_class$ } }
		set_planet_flag = ag_changed_planet_class
		change_pc = $ag_planet_class$
		remove_planet_flag = ag_changed_planet_class
	}
}

ag_refresh_ancient_system_poi = {
	optimize_memory
	remove_point_of_interest = [[ag_system_id]$ag_system_id$]
	if = {
		limit = { NOT = { has_event_chain = "ag_hidden_system_chain" } }
		begin_event_chain = { event_chain = "ag_hidden_system_chain" target = root.owner }
	}
	create_point_of_interest = {
		id = [[ag_system_id]$ag_system_id$]_alt
		name = "[[ag_system_id]$ag_system_id$]"
		desc = "ag_ancient_coordinate"
		event_chain = "ag_hidden_system_chain"
		location = from
	}
}

ag_hostile_kill_counter = {
	optimize_memory
	if = {
		limit = { prev = { NOR = {
			ag_is_corvette_class_ship = yes
			ag_is_destroyer_class_ship = yes
			ag_is_cruiser_class_ship = yes
			ag_is_battleship_class_ship = yes
			ag_is_titan_class_ship = yes
			ag_is_colossus_class_ship = yes
			ag_is_constructor_class_ship = yes
			ag_is_colonizer_class_ship = yes
			ag_is_science_class_ship = yes
			ag_is_transport_class_ship = yes
			ag_is_defensive_station_class_ship = yes
			ag_is_starbase_class_ship = yes
			ag_is_civilian_station_class_ship = yes
			ag_is_ancient_ship = yes
			ag_is_ancient_ship_locked = yes
			ag_is_ancient_ship_unlocked = yes
		} } }
		if = {
			limit = { prev = { is_ship_class = shipclass_military } }
			random_list = {
				1 = { [[ag_effect_corvette_class]$ag_effect_corvette_class$ = yes] change_variable = { which = $ag_variable_name$ value = 4 } }
				1 = { [[ag_effect_destroyer_class]$ag_effect_destroyer_class$ = yes] change_variable = { which = $ag_variable_name$ value = 8 } }
				1 = { [[ag_effect_cruiser_class]$ag_effect_cruiser_class$ = yes] change_variable = { which = $ag_variable_name$ value = 16 } }
				1 = { [[ag_effect_battleship_class]$ag_effect_battleship_class$ = yes] change_variable = { which = $ag_variable_name$ value = 32 } }
				1 = { [[ag_effect_titan_class]$ag_effect_titan_class$ = yes] change_variable = { which = $ag_variable_name$ value = 64 } }
				1 = { [[ag_effect_colossus_class]$ag_effect_colossus_class$ = yes] change_variable = { which = $ag_variable_name$ value = 128 } }
				1 = { [[ag_effect_ancient_class]$ag_effect_ancient_class$ = yes] change_variable = { which = $ag_variable_name$ value = 150 } }
			}
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_constructor } }
			[[ag_effect_constructor_class]$ag_effect_constructor_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 1 }
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_colonizer } }
			[[ag_effect_colonizer_class]$ag_effect_colonizer_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 3 }
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_science_ship } }
			[[ag_effect_science_class]$ag_effect_science_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 2 }
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_transport } }
			[[ag_effect_transport_class]$ag_effect_transport_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 2 }
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_military_station } }
			[[ag_effect_defensive_station_class]$ag_effect_defensive_station_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 16 }
		}
		else_if = {
			limit = { prev = { is_ship_class = shipclass_starbase } }
			[[ag_effect_starbase_class]$ag_effect_starbase_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 128 }
		}
		else_if = {
			limit = { prev = { OR = {
				is_ship_class = shipclass_mining_station
				is_ship_class = shipclass_research_station
				is_ship_class = shipclass_observation_station
			} } }
			[[ag_effect_civilian_station_class]$ag_effect_civilian_station_class$ = yes]
			change_variable = { which = $ag_variable_name$ value = 1 }
		}
		else_if = {
			limit = { always = yes }
			random_list = {
				1 = { [[ag_effect_corvette_class]$ag_effect_corvette_class$ = yes] change_variable = { which = $ag_variable_name$ value = 4 } }
				1 = { [[ag_effect_destroyer_class]$ag_effect_destroyer_class$ = yes] change_variable = { which = $ag_variable_name$ value = 8 } }
				1 = { [[ag_effect_cruiser_class]$ag_effect_cruiser_class$ = yes] change_variable = { which = $ag_variable_name$ value = 16 } }
				1 = { [[ag_effect_battleship_class]$ag_effect_battleship_class$ = yes] change_variable = { which = $ag_variable_name$ value = 32 } }
				1 = { [[ag_effect_titan_class]$ag_effect_titan_class$ = yes] change_variable = { which = $ag_variable_name$ value = 64 } }
				1 = { [[ag_effect_colossus_class]$ag_effect_colossus_class$ = yes] change_variable = { which = $ag_variable_name$ value = 128 } }
				1 = { [[ag_effect_constructor_class]$ag_effect_constructor_class$ = yes] change_variable = { which = $ag_variable_name$ value = 1 } }
				1 = { [[ag_effect_colonizer_class]$ag_effect_colonizer_class$ = yes] change_variable = { which = $ag_variable_name$ value = 3 } }
				1 = { [[ag_effect_science_class]$ag_effect_science_class$ = yes] change_variable = { which = $ag_variable_name$ value = 2 } }
				1 = { [[ag_effect_transport_class]$ag_effect_transport_class$ = yes] change_variable = { which = $ag_variable_name$ value = 2 } }
				1 = { [[ag_effect_defensive_station_class]$ag_effect_defensive_station_class$ = yes] change_variable = { which = $ag_variable_name$ value = 16 } }
				1 = { [[ag_effect_starbase_class]$ag_effect_starbase_class$ = yes] change_variable = { which = $ag_variable_name$ value = 128 } }
				1 = { [[ag_effect_civilian_station_class]$ag_effect_civilian_station_class$ = yes] change_variable = { which = $ag_variable_name$ value = 1 } }
				1 = { [[ag_effect_ancient_class]$ag_effect_ancient_class$ = yes] change_variable = { which = $ag_variable_name$ value = 150 } }
			}
		}
	}
	else_if = {
		limit = { prev = { ag_is_corvette_class_ship = yes } }
		[[ag_effect_corvette_class]$ag_effect_corvette_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 4 }
	}
	else_if = {
		limit = { prev = { ag_is_destroyer_class_ship = yes } }
		[[ag_effect_destroyer_class]$ag_effect_destroyer_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 8 }
	}
	else_if = {
		limit = { prev = { ag_is_cruiser_class_ship = yes } }
		[[ag_effect_cruiser_class]$ag_effect_cruiser_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 16 }
	}
	else_if = {
		limit = { prev = { ag_is_battleship_class_ship = yes } }
		[[ag_effect_battleship_class]$ag_effect_battleship_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 32 }
	}
	else_if = {
		limit = { prev = { ag_is_titan_class_ship = yes } }
		[[ag_effect_titan_class]$ag_effect_titan_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 64 }
	}
	else_if = {
		limit = { prev = { ag_is_colossus_class_ship = yes } }
		[[ag_effect_colossus_class]$ag_effect_colossus_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 128 }
	}
	else_if = {
		limit = { prev = { ag_is_constructor_class_ship = yes } }
		[[ag_effect_constructor_class]$ag_effect_constructor_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 1 }
	}
	else_if = {
		limit = { prev = { ag_is_colonizer_class_ship = yes } }
		[[ag_effect_colonizer_class]$ag_effect_colonizer_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 3 }
	}
	else_if = {
		limit = { prev = { ag_is_transport_class_ship = yes } }
		[[ag_effect_science_class]$ag_effect_science_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 2 }
	}
	else_if = {
		limit = { prev = { ag_is_defensive_station_class_ship = yes } }
		[[ag_effect_defensive_station_class]$ag_effect_defensive_station_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 16 }
	}
	else_if = {
		limit = { prev = { ag_is_starbase_class_ship = yes } }
		[[ag_effect_starbase_class]$ag_effect_starbase_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 128 }
	}
	else_if = {
		limit = { prev = { ag_is_civilian_station_class_ship = yes } }
		[[ag_effect_civilian_station_class]$ag_effect_civilian_station_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 1 }
	}
	else_if = {
		limit = { prev = { OR = {
			ag_is_ancient_ship = yes
			ag_is_ancient_ship_locked = yes
			ag_is_ancient_ship_unlocked = yes
		} } }
		[[ag_effect_ancient_class]$ag_effect_ancient_class$ = yes]
		change_variable = { which = $ag_variable_name$ value = 150 }
	}
}

ag_scientist_gain_random_negative_trait = {
	optimize_memory
	random_list = {
		30 = {
			if = {
				limit = {
					owner = {
						is_machine_empire = no
						NOT = { has_country_flag = synthetic_empire }
					}
				}
				add_trait = leader_trait_maimed
			}
			else = { add_trait = ag_leader_trait_increase_upkeep }
		}
		30 = {
			if = {
				limit = {
					owner = {
						is_machine_empire = no
						NOT = { has_country_flag = synthetic_empire }
					}
				}
				if = {
					limit = { NOT = { has_trait_tier1or2 = { TRAIT = leader_trait_substance_abuser } } }
					add_trait = leader_trait_substance_abuser
				}
				else_if = {
					limit = { has_trait = leader_trait_substance_abuser }
					remove_trait = leader_trait_substance_abuser
					add_trait = leader_trait_substance_abuser_2
				}
			}
			else = { add_trait = ag_leader_trait_increase_upkeep }
		}
		30 = {
			if = {
				limit = {
					owner = {
						is_machine_empire = no
						NOT = { has_country_flag = synthetic_empire }
					}
				}
				if = {
					limit = { NOT = { has_trait_tier1or2 = { TRAIT = leader_trait_stubborn } } }
					add_trait = leader_trait_stubborn
				}
				else_if = {
					limit = { has_trait = leader_trait_stubborn }
					remove_trait = leader_trait_stubborn
					add_trait = leader_trait_stubborn_2
				}
			}
			# else = { add_trait = leader_trait_rigid_programming }
		}
		10 = {
			if = {
				limit = { NOT = { has_trait_tier1or2 = { TRAIT = leader_trait_arrested_development } } }
				add_trait = leader_trait_arrested_development
			}
			else_if = {
				limit = { has_trait = leader_trait_arrested_development }
				remove_trait = leader_trait_arrested_development
				add_trait = leader_trait_arrested_development_2
			}
		}
	}
}

ag_all_archaeological_dig_failed_random_events = {
	optimize_memory
	random_list = {
		10 = {
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.11 } }
				10 = { fleet_event = { id = ag_arc_failed.12 } }
				10 = { fleet_event = { id = ag_arc_failed.13 } }
				10 = { fleet_event = { id = ag_arc_failed.14 } }
				10 = { fleet_event = { id = ag_arc_failed.15 } }
				10 = { fleet_event = { id = ag_arc_failed.16 } }
			}
		}
		10 = {
			modifier = {
				factor = 0
				from.planet = { is_planet_class = pc_gas_giant }
			}
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.21 } }
				10 = { fleet_event = { id = ag_arc_failed.22 } }
				10 = { fleet_event = { id = ag_arc_failed.23 } }
				10 = { fleet_event = { id = ag_arc_failed.24 } }
				10 = { fleet_event = { id = ag_arc_failed.25 } }
				10 = { fleet_event = { id = ag_arc_failed.26 } }
			}
		}
		10 = {
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.32 } }
				10 = { fleet_event = { id = ag_arc_failed.33 } }
				10 = { fleet_event = { id = ag_arc_failed.34 } }
				10 = { fleet_event = { id = ag_arc_failed.35 } }
				10 = { fleet_event = { id = ag_arc_failed.36 } }
			}
		}
		10 = {
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.42 } }
				10 = { fleet_event = { id = ag_arc_failed.43 } }
				10 = { fleet_event = { id = ag_arc_failed.44 } }
				10 = { fleet_event = { id = ag_arc_failed.45 } }
				10 = { fleet_event = { id = ag_arc_failed.46 } }
			}
		}
		10 = {
			modifier = {
				factor = 0
				from.planet.solar_system = { has_star_flag = ag_ancient_zeta_system }
			}
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.52 } }
				10 = { fleet_event = { id = ag_arc_failed.53 } }
				10 = { fleet_event = { id = ag_arc_failed.54 } }
				10 = { fleet_event = { id = ag_arc_failed.55 } }
				10 = { fleet_event = { id = ag_arc_failed.56 } }
			}
		}
		10 = {
			modifier = {
				factor = 0
				from.planet = { NOT = { is_planet_class = pc_gas_giant } }
			}
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.62 } }
				10 = { fleet_event = { id = ag_arc_failed.63 } }
				10 = { fleet_event = { id = ag_arc_failed.64 } }
				10 = { fleet_event = { id = ag_arc_failed.65 } }
				10 = { fleet_event = { id = ag_arc_failed.66 } }
			}
		}
		10 = {
			random_list = {
				10 = { fleet_event = { id = ag_arc_failed.71 } }
				10 = { fleet_event = { id = ag_arc_failed.72 } }
				10 = { fleet_event = { id = ag_arc_failed.73 } }
				10 = { fleet_event = { id = ag_arc_failed.74 } }
			}
		}
		10 = {
			random_list = {
				10 = {
					modifier = {
						factor = 0
						from.planet.solar_system = { has_star_flag = ag_ancient_zeta_system }
					}
					fleet_event = { id = ag_arc_failed.81 }
				}
				10 = { fleet_event = { id = ag_arc_failed.82 } }
				10 = { fleet_event = { id = ag_arc_failed.83 } }
			}
		}
	}
}

ag_remove_all_modifier_common = {
	optimize_memory
	if = { limit = { has_modifier = "hazardous_weather" } remove_modifier = "hazardous_weather" }
	if = { limit = { has_modifier = "dangerous_wildlife" } remove_modifier = "dangerous_wildlife" }
	if = { limit = { has_modifier = "wild_storms" } remove_modifier = "wild_storms" }
	if = { limit = { has_modifier = "titanic_life" } remove_modifier = "titanic_life" }
	if = { limit = { has_modifier = "eat_the_titans" } remove_modifier = "eat_the_titans" }
	if = { limit = { has_modifier = "natural_beauty" } remove_modifier = "natural_beauty" }
	if = { limit = { has_modifier = "atmospheric_aphrodisiac" } remove_modifier = "atmospheric_aphrodisiac" }
	if = { limit = { has_modifier = "atmospheric_hallucinogen" } remove_modifier = "atmospheric_hallucinogen" }
	if = { limit = { has_modifier = "atmospheric_hallucinogen_good" } remove_modifier = "atmospheric_hallucinogen_good" }
	if = { limit = { has_modifier = "lush_planet" } remove_modifier = "lush_planet" }
	if = { limit = { has_modifier = "bleak_planet" } remove_modifier = "bleak_planet" }
	if = { limit = { has_modifier = "bunkbeds_deployed" } remove_modifier = "bunkbeds_deployed" }
	if = { limit = { has_modifier = "tupperware_deployed" } remove_modifier = "tupperware_deployed" }
	if = { limit = { has_modifier = "atmospheric_deodorizer_deployed" } remove_modifier = "atmospheric_deodorizer_deployed" }
	if = { limit = { has_modifier = "racket_energy_extractor" } remove_modifier = "racket_energy_extractor" }
	if = { limit = { has_modifier = "racket_generator_regulator" } remove_modifier = "racket_generator_regulator" }
	if = { limit = { has_modifier = "criminal_underworld" } remove_modifier = "criminal_underworld" }
	if = { limit = { has_modifier = "drone_deviancy" } remove_modifier = "drone_deviancy" }
	if = { limit = { has_modifier = "drone_corruption" } remove_modifier = "drone_corruption" }
	if = { limit = { has_modifier = "gang_wars" } remove_modifier = "gang_wars" }
	if = { limit = { has_modifier = "center_of_drug_trade" } remove_modifier = "center_of_drug_trade" }
	if = { limit = { has_modifier = "mob_rule" } remove_modifier = "mob_rule" }
	if = { limit = { has_modifier = "bribed_officials" } remove_modifier = "bribed_officials" }
	if = { limit = { has_modifier = "substance_abuse" } remove_modifier = "substance_abuse" }
	if = { limit = { has_modifier = "smuggler_activity" } remove_modifier = "smuggler_activity" }
	if = { limit = { has_modifier = "crime_wave" } remove_modifier = "crime_wave" }
	if = { limit = { has_modifier = "travel_advisory" } remove_modifier = "travel_advisory" }
	if = { limit = { has_modifier = "cartel_war" } remove_modifier = "cartel_war" }
	if = { limit = { has_modifier = "protection_racket" } remove_modifier = "protection_racket" }
	if = { limit = { has_modifier = "corrupt_administration" } remove_modifier = "corrupt_administration" }
	if = { limit = { has_modifier = "trade_pilfering" } remove_modifier = "trade_pilfering" }
	if = { limit = { has_modifier = "crime_boss_arrested" } remove_modifier = "crime_boss_arrested" }
	if = { limit = { has_modifier = "deviant_interference" } remove_modifier = "deviant_interference" }
	if = { limit = { has_modifier = "drone_signal_interference" } remove_modifier = "drone_signal_interference" }
	if = { limit = { has_modifier = "ringleader_killed" } remove_modifier = "ringleader_killed" }
	if = { limit = { has_modifier = "corrupt_network_terminated" } remove_modifier = "corrupt_network_terminated" }
	if = { limit = { has_modifier = "anticrime_campaign" } remove_modifier = "anticrime_campaign" }
	if = { limit = { has_modifier = "crime_lord_deal" } remove_modifier = "crime_lord_deal" }
	if = { limit = { has_modifier = "crime_lord_deal_broken" } remove_modifier = "crime_lord_deal_broken" }
	if = { limit = { has_modifier = "unemployment_benefits" } remove_modifier = "unemployment_benefits" }
	if = { limit = { has_modifier = "activity_program" } remove_modifier = "activity_program" }
	if = { limit = { has_modifier = "standby_mode" } remove_modifier = "standby_mode" }
	if = { limit = { has_modifier = "numistic_magnetostrips" } remove_modifier = "numistic_magnetostrips" }
	if = { limit = { has_modifier = "planet_culture_shock" } remove_modifier = "planet_culture_shock" }
	if = { limit = { has_modifier = "martial_law" } remove_modifier = "martial_law" }
	if = { limit = { has_modifier = "hunter_killer_drones" } remove_modifier = "hunter_killer_drones" }
	if = { limit = { has_modifier = "compliance_protocols" } remove_modifier = "compliance_protocols" }
	if = { limit = { has_modifier = "planet_food_boost" } remove_modifier = "planet_food_boost" }
	if = { limit = { has_modifier = "planet_luxuries_boost" } remove_modifier = "planet_luxuries_boost" }
	if = { limit = { has_modifier = "pm_study_the_sea" } remove_modifier = "pm_study_the_sea" }
	if = { limit = { has_modifier = "living_sea" } remove_modifier = "living_sea" }
	if = { limit = { has_modifier = "predatory_plants" } remove_modifier = "predatory_plants" }
	if = { limit = { has_modifier = "brainslug_woes" } remove_modifier = "brainslug_woes" }
	if = { limit = { has_modifier = "brainslug_woes_phobe" } remove_modifier = "brainslug_woes_phobe" }
	if = { limit = { has_modifier = "watery_grave" } remove_modifier = "watery_grave" }
	if = { limit = { has_modifier = "exofungus" } remove_modifier = "exofungus" }
	if = { limit = { has_modifier = "planet_population_control" } remove_modifier = "planet_population_control" }
	if = { limit = { has_modifier = "planet_population_control_gestalt" } remove_modifier = "planet_population_control_gestalt" }
	if = { limit = { has_modifier = "planet_robot_assembly_control" } remove_modifier = "planet_robot_assembly_control" }
	if = { limit = { has_modifier = "planet_growth_discouraged" } remove_modifier = "planet_growth_discouraged" }
	if = { limit = { has_modifier = "planet_population_expelled" } remove_modifier = "planet_population_expelled" }
	if = { limit = { has_modifier = "mastery_of_nature" } remove_modifier = "mastery_of_nature" }
	if = { limit = { has_modifier = "divine_algorithm" } remove_modifier = "divine_algorithm" }
	if = { limit = { has_modifier = "criminal_gambling" } remove_modifier = "criminal_gambling" }
	if = { limit = { has_modifier = "festival_aftermath" } remove_modifier = "festival_aftermath" }
	if = { limit = { has_modifier = "slot_machine_bounty" } remove_modifier = "slot_machine_bounty" }
	if = { limit = { has_modifier = "heavy_metal" } remove_modifier = "heavy_metal" }
	if = { limit = { has_modifier = "alloy_relic" } remove_modifier = "alloy_relic" }
	if = { limit = { has_modifier = "minerals_relic" } remove_modifier = "minerals_relic" }
	if = { limit = { has_modifier = "energy_relic" } remove_modifier = "energy_relic" }
	if = { limit = { has_modifier = "artist_monument_erected" } remove_modifier = "artist_monument_erected" }
	if = { limit = { has_modifier = "tissue_growth_stimulants" } remove_modifier = "tissue_growth_stimulants" }
	if = { limit = { has_modifier = "explosive_fungifoam_housing" } remove_modifier = "explosive_fungifoam_housing" }
	if = { limit = { has_modifier = "pm_planetary_mechanocalibrator" } remove_modifier = "pm_planetary_mechanocalibrator" }
	if = { limit = { has_modifier = "planet_museum_exhibits" } remove_modifier = "planet_museum_exhibits" }
	if = { limit = { has_modifier = "planet_manager_awards" } remove_modifier = "planet_manager_awards" }
	if = { limit = { has_modifier = "planet_sanctuary_exhibits" } remove_modifier = "planet_sanctuary_exhibits" }
	if = { limit = { has_modifier = "planet_artifact_relays_hivemind" } remove_modifier = "planet_artifact_relays_hivemind" }
	if = { limit = { has_modifier = "planet_artifact_relays_machine" } remove_modifier = "planet_artifact_relays_machine" }
	if = { limit = { has_modifier = "lithoids_arc_site_minerals" } remove_modifier = "lithoids_arc_site_minerals" }
	if = { limit = { has_modifier = "oracle_software_integration" } remove_modifier = "oracle_software_integration" }
	if = { limit = { has_modifier = "pm_yuht_cleansing" } remove_modifier = "pm_yuht_cleansing" }
	if = { limit = { has_modifier = "the_memorex" } remove_modifier = "the_memorex" }
}

ag_destroy_habitable_ringworld = {
	optimize_memory
	ag_change_pc = { ag_planet_class = pc_ringworld_habitable_damaged }
	if = {
		limit = {
			NOR = {
				has_planet_flag = ag_ancient_ringworld_blue
				has_planet_flag = ag_ancient_ringworld_red
				has_planet_flag = ag_ancient_ringworld_violet
			}
		}
		set_planet_entity = { entity = ringworld_habitable_damaged_entity }
	}
	else = {
		set_planet_entity = { entity = ag_ancient_ringworld_habitable_damaged_entity }
	}
}

ag_set_ancient_ringworld = {
	optimize_memory
	set_planet_flag = megastructure

	remove_planet_flag = ag_ancient_ringworld_blue
	remove_planet_flag = ag_ancient_ringworld_red
	remove_planet_flag = ag_ancient_ringworld_violet
	remove_planet_flag = ag_ancient_ringworld_damaged
	set_planet_flag = ag_ancient_ringworld_$ag_color$

	set_planet_entity = {
		[[ag_picture]picture = $ag_picture$]
		entity = "ag_ancient_ringworld_$ag_type$[[ag_surface_type]_$ag_surface_type$]_$ag_color$[[ag_shield_color]_shielded_$ag_shield_color$]_entity"
	}
	[[ag_set_flag]
		if = {
			limit = { always = $ag_set_flag$ }
			remove_planet_flag = ag_ancient_ringworld_blue
			remove_planet_flag = ag_ancient_ringworld_red
			remove_planet_flag = ag_ancient_ringworld_violet
			remove_planet_flag = ag_ancient_ringworld_damaged
			set_planet_flag = ag_ancient_ringworld_$ag_color$
			# [[ag_surface_type]set_planet_flag = ag_ancient_habitable_section]
		}
	]
	if = { limit = { has_deposit = ag_ancient_shield_deposit_green } remove_deposit = ag_ancient_shield_deposit_green }
	if = { limit = { has_deposit = ag_ancient_shield_deposit_blue } remove_deposit = ag_ancient_shield_deposit_blue }
	if = { limit = { has_deposit = ag_ancient_shield_deposit_red } remove_deposit = ag_ancient_shield_deposit_red }
	if = { limit = { has_modifier = ag_ancient_shield_deposit_green } remove_modifier = ag_ancient_shield_deposit_green }
	if = { limit = { has_modifier = ag_ancient_shield_deposit_blue } remove_modifier = ag_ancient_shield_deposit_blue }
	if = { limit = { has_modifier = ag_ancient_shield_deposit_red } remove_modifier = ag_ancient_shield_deposit_red }
	[[ag_shield_color]
		add_deposit = ag_ancient_shield_deposit_$ag_shield_color$
		add_modifier = {
			modifier = ag_ancient_shield_deposit_$ag_shield_color$
			days = -1
		}
	]
	[[ag_generate_ruins]
		if = {
			limit = { always = $ag_generate_ruins$ }
			while = {
				count = 8
				random_list = { 50 = { } 50 = { add_deposit = ag_ancient_ruins } }
				reroll_random = yes
			}
		}
	]
}

ag_ancient_country_friendly_to_each_other = {
	optimize_memory
	every_country = {
		limit = {
			NOT = { is_same_value = prev }
			ag_is_ancient_country = yes
		}
		if = {
			limit = { NOT = { has_communications = prev } }
			establish_communications_no_message = prev
		}
		if = {
			limit = { is_hostile = prev }
			set_faction_hostility = {
				target = prev
				set_hostile = no
				set_neutral = yes
				set_friendly = no
			}
		}
	}
}

ag_create_ancient_guardian = {
	optimize_memory
	set_update_modifiers_batch = begin
	create_country = {
		name = $ag_country_name$
		type = $ag_country_type$
		flag = {
			icon = {
				category = "special"
				file = "extradimensional_02.dds"
			}
			background = {
				category = "backgrounds"
				file = "circle.dds"
			}
			colors = {
				"dark_grey"
				"red"
				"null"
				"null"
			}
		}
		name_list = ag_ancients
		effect = {
			set_graphical_culture = ag_ancient_01
			set_country_flag = ag_ancient_empire_mod_country
		}
		# ignore_initial_colony_error = yes
	}
	set_update_modifiers_batch = end
}

ag_spawn_ancient_construction_section = {
	optimize_memory
	random_system_planet = {
		limit = { is_primary_star = yes }
		set_planet_flag = ag_ancient_construction_section_actived_star
		set_variable = { which = ag_construction_section_counter value = 0 }
		prev = {
			every_system_planet = {
				limit = {
					OR = {
						has_planet_flag = ag_ancient_construction_section
						has_planet_flag = ag_ancient_construction_section_0
					}
				}
				if = {
					limit = { has_planet_flag = ag_ancient_construction_section_0 }
					remove_planet_flag = ag_ancient_construction_section_0
					set_planet_flag = ag_ancient_construction_section
					set_name = "NAME_ag_ancient_construction_section"
				}
				set_planet_flag = ag_ancient_construction_section_actived
				prev = {
					if = {
						limit = { exists = space_owner }
						spawn_megastructure = {
							type = ag_ancient_construction_section
							planet = prev
							owner = this.space_owner
						}
					}
					else = {
						spawn_megastructure = {
							type = ag_ancient_construction_section
							planet = prev
						}
					}
				}
				prevprev = { change_variable = { which = ag_construction_section_counter value = 1 } }
			}
		}
	}
}
ag_despawn_ancient_construction_section = {
	optimize_memory
	random_system_planet = {
		limit = { is_primary_star = yes }
		remove_planet_flag = ag_ancient_construction_section_actived_star
	}
	every_system_planet = {
		limit = { has_planet_flag = ag_ancient_construction_section_actived }
		remove_planet_flag = ag_ancient_construction_section_actived
	}
	every_system_megastructure = {
		limit = { is_megastructure_type = ag_ancient_construction_section }
		remove_megastructure = this
	}
}

# ag_set_null_ship_disable = {
	# optimize_memory
	# if = { limit = { is_variable_set = disable_time_checkpoint } subtract_variable = { which = disable_time_checkpoint value = 1 } }
# }

ag_ancient_random_system_gas_giant_size = {
	optimize_memory
	if = { limit = { is_planet_class = pc_gas_giant } change_planet_size = 16 }
}
ag_ancient_random_system_spawn_debris = {
	optimize_memory
	random_list = {
		20 = { create_ambient_object = { type = "small_debris_object" location = this } }
		20 = { create_ambient_object = { type = "medium_debris_01_object" location = this } }
		20 = { create_ambient_object = { type = "medium_debris_02_object" location = this } }
		10 = { create_ambient_object = { type = "large_debris_object" location = this } }
		70 = { }
	}
}
ag_ancient_random_system_dry_habitable_world_effect = {
	optimize_memory
	random_list = {
		10 = { ag_change_pc = { ag_planet_class = pc_broken } }
		30 = { ag_change_pc = { ag_planet_class = pc_molten } }
		25 = { ag_change_pc = { ag_planet_class = pc_toxic } }
		25 = { ag_change_pc = { ag_planet_class = pc_barren } }
		10 = { }
	}
}
ag_ancient_random_system_temperate_habitable_world_effect = {
	optimize_memory
	random_list = {
		15 = { ag_change_pc = { ag_planet_class = pc_broken } }
		15 = { ag_change_pc = { ag_planet_class = pc_toxic } }
		30 = { ag_change_pc = { ag_planet_class = pc_barren } }
		30 = { ag_change_pc = { ag_planet_class = pc_barren_cold } }
		10 = { }
	}
}
ag_ancient_random_system_cold_habitable_world_effect = {
	optimize_memory
	random_list = {
		10 = { ag_change_pc = { ag_planet_class = pc_broken } }
		20 = { ag_change_pc = { ag_planet_class = pc_toxic } }
		30 = { ag_change_pc = { ag_planet_class = pc_barren_cold } }
		30 = { ag_change_pc = { ag_planet_class = pc_frozen } }
		10 = { }
	}
}

ag_ancient_event_system_set_name = {
	optimize_memory
	star = { set_name = { key = NAME_ag_event_system variable_string = "\[This.GetName\]" } }
	set_name = star
}
ag_ancient_random_system_set_name = {
	optimize_memory
	star = { set_name = { key = NAME_ag_random_system variable_string = "\[This.GetName\]" } }
	set_name = star
}

ag_set_disable_at_health = {
	optimize_memory
	change_variable = { which = ag_set_disable_at_health_lvl value = 1 }
	[[ag_value]
		set_disable_at_health = $ag_value$
		set_variable = { which = ag_disable_health_var value = $ag_value$ }
	]
	[[!ag_value]
		if = {
			limit = { NOT = { is_variable_set = ag_disable_health_var } }
			set_disable_at_health = @ag_ship_disable_value_default
			set_variable = { which = ag_disable_health_var value = @ag_ship_disable_value_default }
		}
	]
	set_ship_flag = ag_set_disable_at_health
	[[ag_disable_type] change_variable = { which = ag_disable_$ag_disable_type$ value = 1 } ]
	[[!ag_disable_type] change_variable = { which = ag_disable_common value = 1 } ]
}
ag_subtract_disable_at_health = {
	optimize_memory
	[[ag_disable_type]
		if = { limit = { is_variable_set = ag_disable_$ag_disable_type$ } subtract_variable = { which = ag_disable_$ag_disable_type$ value = 1 } }
		if = { limit = { check_variable = { which = ag_disable_$ag_disable_type$ value <= 0 } } clear_variable = ag_disable_$ag_disable_type$ }
		if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } subtract_variable = { which = ag_set_disable_at_health_lvl value = 1 } }
		if = {
			limit = { OR = { NOT = { is_variable_set = ag_set_disable_at_health_lvl } check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } } }
			set_disable_at_health = -1
			if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
			remove_ship_flag = ag_set_disable_at_health
			if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } clear_variable = ag_set_disable_at_health_lvl }
		}
	]
	[[!ag_disable_type]
		if = { limit = { is_variable_set = ag_disable_common } subtract_variable = { which = ag_disable_common value = 1 } }
		if = { limit = { check_variable = { which = ag_disable_common value <= 0 } } clear_variable = ag_disable_common }
		if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } subtract_variable = { which = ag_set_disable_at_health_lvl value = 1 } }
		if = {
			limit = { OR = { NOT = { is_variable_set = ag_set_disable_at_health_lvl } check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } } }
			set_disable_at_health = -1
			if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
			remove_ship_flag = ag_set_disable_at_health
			if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } clear_variable = ag_set_disable_at_health_lvl }
		}
	]
}
ag_clear_disable_at_health = {
	optimize_memory
	[[ag_disable_type]
		while = {
			limit = { is_variable_set = ag_disable_$ag_disable_type$ check_variable = { which = ag_disable_$ag_disable_type$ value >= 0 } }
			if = { limit = { is_variable_set = ag_disable_$ag_disable_type$ } subtract_variable = { which = ag_disable_$ag_disable_type$ value = 1 } }
			if = { limit = { check_variable = { which = ag_disable_$ag_disable_type$ value <= 0 } } clear_variable = ag_disable_$ag_disable_type$ }
			if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } subtract_variable = { which = ag_set_disable_at_health_lvl value = 1 } }
			if = {
				limit = { OR = { NOT = { is_variable_set = ag_set_disable_at_health_lvl } check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } } }
				set_disable_at_health = -1
				if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
				remove_ship_flag = ag_set_disable_at_health
				if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } clear_variable = ag_set_disable_at_health_lvl }
			}
		}
	]
	[[!ag_disable_type]
		while = {
			limit = { is_variable_set = ag_disable_common check_variable = { which = ag_disable_common value >= 0 } }
			if = { limit = { is_variable_set = ag_disable_common } subtract_variable = { which = ag_disable_common value = 1 } }
			if = { limit = { check_variable = { which = ag_disable_common value <= 0 } } clear_variable = ag_disable_common }
			if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } subtract_variable = { which = ag_set_disable_at_health_lvl value = 1 } }
			if = {
				limit = { OR = { NOT = { is_variable_set = ag_set_disable_at_health_lvl } check_variable = { which = ag_set_disable_at_health_lvl value <= 0 } } }
				set_disable_at_health = -1
				if = { limit = { is_variable_set = ag_disable_health_var } clear_variable = ag_disable_health_var }
				remove_ship_flag = ag_set_disable_at_health
				if = { limit = { is_variable_set = ag_set_disable_at_health_lvl } clear_variable = ag_set_disable_at_health_lvl }
			}
		}
	]
}

ag_crystalize_astroid = {
	optimize_memory
	ag_change_pc = { ag_planet_class = pc_ag_crystalized_asteroid_$ag_color$ }
	random_list = {
		36 = { }
		25 = { add_deposit = d_rare_crystals_1 }
		16 = { add_deposit = d_rare_crystals_2 }
		9 = { add_deposit = d_rare_crystals_3 }
		4 = { add_deposit = d_rare_crystals_4 }
		1 = { add_deposit = d_rare_crystals_5 }
	}
}

ag_destroy_ambient_object = {
	optimize_memory
	every_system_ambient_object = {
		if = {
			limit = {
				NOR = {
					has_ambient_object_flag = ag_ancient_station
					has_ambient_object_flag = ag_beta_station_1
					has_ambient_object_flag = ag_beta_station_2
					has_ambient_object_flag = ag_beta_station_3
					has_ambient_object_flag = ag_beta_station_source_1
					has_ambient_object_flag = ag_beta_station_source_2
					has_ambient_object_flag = ag_beta_station_source_3
					has_ambient_object_flag = ag_gamma_station_dirty
					has_ambient_object_flag = ag_gamma_station_active
					has_ambient_object_flag = ag_gamma_station_small_1
					has_ambient_object_flag = ag_gamma_station_small_2
					has_ambient_object_flag = ag_gamma_station_small_3
					has_ambient_object_flag = ag_ancient_delta_platform
					has_ambient_object_flag = ag_ancient_zeta_research_station
					is_ambient_object_type = ag_psionic_portal_stabled_object
					is_ambient_object_type = ag_beta_psionic_structure_object
					is_ambient_object_type = ag_beta_psionic_system_effect_1
					is_ambient_object_type = ag_beta_psionic_system_effect_2
					is_ambient_object_type = ag_beta_psionic_system_effect_3
					is_ambient_object_type = ag_beta_drone_type2_psi_object
				}
			}
			destroy_ambient_object = this
		}
	}
}
ag_destroy_megastructure = {
	optimize_memory
	star = { if = { limit = { has_planet_flag = ag_ancient_construction_section_megashipyard } remove_planet_flag = ag_ancient_construction_section_megashipyard } }
	every_system_megastructure = {
		limit = { exists = this }
		if = {
			limit = { OR = {
				is_megastructure_type = dyson_sphere_0
				is_megastructure_type = dyson_sphere_1
				is_megastructure_type = dyson_sphere_2
				is_megastructure_type = dyson_sphere_3
				is_megastructure_type = dyson_sphere_4
				is_megastructure_type = dyson_sphere_5
				is_megastructure_type = dyson_sphere_ruined
				is_megastructure_type = dyson_sphere_restored
				is_megastructure_type = dyson_sphere_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = dyson_sphere_built }
					remove_star_flag = dyson_sphere_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = dyson_sphere_5
						is_megastructure_type = dyson_sphere_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "dyson_sphere_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "dyson_sphere_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_dyson_sphere } }
				owner = { remove_country_flag = built_dyson_sphere }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = spy_orb_0
				is_megastructure_type = spy_orb_1
				is_megastructure_type = spy_orb_2
				is_megastructure_type = spy_orb_3
				is_megastructure_type = spy_orb_4
				is_megastructure_type = spy_orb_ruined
				is_megastructure_type = spy_orb_restored
				is_megastructure_type = spy_orb_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = spy_orb_built }
					remove_star_flag = spy_orb_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = spy_orb_4
						is_megastructure_type = spy_orb_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "spy_orb_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "spy_orb_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_spyorb } }
				owner = { remove_country_flag = built_spyorb }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = think_tank_0
				is_megastructure_type = think_tank_1
				is_megastructure_type = think_tank_2
				is_megastructure_type = think_tank_3
				is_megastructure_type = think_tank_4
				is_megastructure_type = think_tank_ruined
				is_megastructure_type = think_tank_restored
				is_megastructure_type = think_tank_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = think_tank_built }
					remove_star_flag = think_tank_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = think_tank_3
						is_megastructure_type = think_tank_4
						is_megastructure_type = think_tank_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "think_tank_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "think_tank_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = planet }
				planet = { if = { limit = { has_planet_flag = has_megastructure } remove_planet_flag = has_megastructure } }
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_think_tank } }
				owner = { remove_country_flag = built_think_tank }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = matter_decompressor_0
				is_megastructure_type = matter_decompressor_1
				is_megastructure_type = matter_decompressor_2
				is_megastructure_type = matter_decompressor_3
				is_megastructure_type = matter_decompressor_4
				is_megastructure_type = matter_decompressor_ruined
				is_megastructure_type = matter_decompressor_restored
				is_megastructure_type = matter_decompressor_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = matter_decompressor_built }
					remove_star_flag = matter_decompressor_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = matter_decompressor_4
						is_megastructure_type = matter_decompressor_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "matter_decompressor_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "matter_decompressor_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_matter_decompressor_site } }
				owner = { remove_country_flag = built_matter_decompressor_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = strategic_coordination_center_0
				is_megastructure_type = strategic_coordination_center_1
				is_megastructure_type = strategic_coordination_center_2
				is_megastructure_type = strategic_coordination_center_3
				is_megastructure_type = strategic_coordination_center_ruined
				is_megastructure_type = strategic_coordination_center_restored
				is_megastructure_type = strategic_coordination_center_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = strategic_coordination_center_built }
					remove_star_flag = strategic_coordination_center_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = strategic_coordination_center_3
						is_megastructure_type = strategic_coordination_center_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "strategic_coordination_center_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "strategic_coordination_center_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_strategic_coordination_center_site } }
				owner = { remove_country_flag = built_strategic_coordination_center_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = mega_art_installation_0
				is_megastructure_type = mega_art_installation_1
				is_megastructure_type = mega_art_installation_2
				is_megastructure_type = mega_art_installation_3
				is_megastructure_type = mega_art_installation_4
				is_megastructure_type = mega_art_installation_ruined
				is_megastructure_type = mega_art_installation_restored
				is_megastructure_type = mega_art_installation_restored_2
				is_megastructure_type = mega_art_installation_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = mega_art_installation_built }
					remove_star_flag = mega_art_installation_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = mega_art_installation_3
						is_megastructure_type = mega_art_installation_4
						is_megastructure_type = mega_art_installation_restored
						is_megastructure_type = mega_art_installation_restored_2
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "mega_art_installation_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "mega_art_installation_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_mega_art_installation_site } }
				owner = { remove_country_flag = built_mega_art_installation_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = interstellar_assembly_0
				is_megastructure_type = interstellar_assembly_1
				is_megastructure_type = interstellar_assembly_2
				is_megastructure_type = interstellar_assembly_3
				is_megastructure_type = interstellar_assembly_4
				is_megastructure_type = interstellar_assembly_ruined
				is_megastructure_type = interstellar_assembly_restored
				is_megastructure_type = interstellar_assembly_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = interstellar_assembly_built }
					remove_star_flag = interstellar_assembly_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = interstellar_assembly_4
						is_megastructure_type = interstellar_assembly_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "interstellar_assembly_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "interstellar_assembly_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_interstellar_assembly_site } }
				owner = { remove_country_flag = built_interstellar_assembly_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = mega_shipyard_0
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = mega_shipyard_ruined
				is_megastructure_type = mega_shipyard_restored
				is_megastructure_type = mega_shipyard_permanently_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = mega_shipyard_built }
					remove_star_flag = mega_shipyard_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = mega_shipyard_3
						is_megastructure_type = mega_shipyard_restored
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "mega_shipyard_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "mega_shipyard_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_mega_shipyard_site } }
				owner = { remove_country_flag = built_mega_shipyard_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = quantum_catapult_0
				is_megastructure_type = quantum_catapult_1
				is_megastructure_type = quantum_catapult_2
				is_megastructure_type = quantum_catapult_3
				is_megastructure_type = quantum_catapult_ruined
				is_megastructure_type = quantum_catapult_restored
				is_megastructure_type = quantum_catapult_permanently_ruined
				is_megastructure_type = quantum_catapult_ruined_slingshot
				is_megastructure_type = quantum_catapult_restored_slingshot
				is_megastructure_type = quantum_catapult_improved_slingshot
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = {
				if = {
					limit = { has_star_flag = mega_shipyard_built }
					remove_star_flag = mega_shipyard_built
				}
				if = {
					limit = { prev = { OR = {
						is_megastructure_type = quantum_catapult_3
						is_megastructure_type = quantum_catapult_restored
						is_megastructure_type = quantum_catapult_improved_slingshot
					} } }
					random_list = {
						80 = { spawn_megastructure = { type = "quantum_catapult_permanently_ruined" coords_from = prev.planet } }
						20 = { spawn_megastructure = { type = "quantum_catapult_ruined" coords_from = prev.planet } }
					}
					reroll_random = yes
				}
			}
			if = {
				limit = { exists = owner owner = { has_country_flag = built_quantum_catapult_site } }
				owner = { remove_country_flag = built_quantum_catapult_site }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = ring_world_1
				is_megastructure_type = ring_world_2
				is_megastructure_type = ring_world_ruined
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			solar_system = { if = { limit = { has_star_flag = ring_world_built } remove_star_flag = ring_world_built } }
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = gateway_0
				is_megastructure_type = gateway_final
				is_megastructure_type = gateway_ruined
				is_megastructure_type = gateway_restored
				is_megastructure_type = hyper_relay
				is_megastructure_type = hyper_relay_ruined
				is_megastructure_type = hyper_relay_restored
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = crisis_sphere_0
				is_megastructure_type = crisis_sphere_1
				is_megastructure_type = crisis_sphere_2
				is_megastructure_type = crisis_sphere_3
				is_megastructure_type = crisis_sphere_4
				is_megastructure_type = crisis_sphere_ruined
			} }
			solar_system = { spawn_megastructure = {
				type = crisis_sphere_ruined
				coords_from = prev
				init_effect = { random_country = {
					limit = { prevprev = { has_megastructure_flag = crisis_sphere_of@prev } }
					prev = { set_megastructure_flag = crisis_sphere_of@prev }
				} }
			} }
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = ag_beta_station_type2_megastructure
				is_megastructure_type = ag_delta_titan_megastructure_0
				is_megastructure_type = ag_delta_titan_megastructure_1
				is_megastructure_type = ag_gamma_station_megastructure_0
				is_megastructure_type = ag_gamma_station_megastructure_1
				is_megastructure_type = ag_gamma_station_megastructure_2
				is_megastructure_type = ag_gamma_station_megastructure_3
				is_megastructure_type = ag_gamma_station_megastructure_4
				is_megastructure_type = ag_gamma_station_megastructure_5
				is_megastructure_type = ag_gamma_station_megastructure_6
				is_megastructure_type = ag_gamma_station_megastructure_7
				is_megastructure_type = ag_gamma_station_megastructure_8
				is_megastructure_type = ag_gamma_station_megastructure_9
				is_megastructure_type = ag_gamma_station_megastructure_10
				is_megastructure_type = ag_gamma_station_megastructure_11
				is_megastructure_type = ag_gamma_station_megastructure_12
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
			solar_system = { every_system_planet = {
				# if = {
				# 	limit = { has_planet_flag = ag_using_ancient_construction_section_system }
				# 	remove_planet_flag = ag_using_ancient_construction_section_system
				# }
				if = { limit = { has_planet_flag = has_megastructure } remove_planet_flag = has_megastructure }
			} }
			remove_megastructure = this
		}
		else_if = {
			limit = { OR = {
				is_megastructure_type = ag_ancient_anchor_station_0
				is_megastructure_type = ag_ancient_anchor_station_1
				is_megastructure_type = ag_ancient_anchor_station_2
				is_megastructure_type = ag_ancient_anchor_station_player
			} }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
			if = {
				limit = {
					is_megastructure_type = ag_ancient_anchor_station_1
					exists = event_target:ag_ancient_wandering_ship_fleet
				}
				event_target:ag_ancient_wandering_ship_fleet = { change_variable = { which = ag_num_disabled_anchor_stations value = 1 } }
			}
			every_country = {
				limit = { has_event_chain = ag_ancient_anchor_station_chain }
				add_event_chain_counter = {
					event_chain = ag_ancient_anchor_station_chain
					counter = ag_ancient_anchor_station
					amount = -1
				}
				if = {
					limit = { prev = { OR = { is_megastructure_type = ag_ancient_anchor_station_2 is_megastructure_type = ag_ancient_anchor_station_player } } }
					add_event_chain_counter = {
						event_chain = ag_ancient_anchor_station_chain
						counter = ag_ancient_anchor_station_modified
						amount = -1
					}
				}
			}
			solar_system = {
				remove_star_flag = ag_ancient_anchor_system
				if = { limit = { has_star_flag = ag_ancient_anchor_system_1 } remove_star_flag = ag_ancient_anchor_system_1 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_2 } remove_star_flag = ag_ancient_anchor_system_2 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_3 } remove_star_flag = ag_ancient_anchor_system_3 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_4 } remove_star_flag = ag_ancient_anchor_system_4 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_5 } remove_star_flag = ag_ancient_anchor_system_5 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_6 } remove_star_flag = ag_ancient_anchor_system_6 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_7 } remove_star_flag = ag_ancient_anchor_system_7 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_8 } remove_star_flag = ag_ancient_anchor_system_8 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_9 } remove_star_flag = ag_ancient_anchor_system_9 }
				else_if = { limit = { has_star_flag = ag_ancient_anchor_system_10 } remove_star_flag = ag_ancient_anchor_system_10 }
				random_system_planet = { limit = { has_planet_flag = ag_ancient_anchor_planet } remove_planet_flag = ag_ancient_anchor_planet }
			}
			remove_megastructure = this
		}
		else_if = {
			limit = { is_megastructure_type = ag_ancient_construction_section }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
			solar_system = { random_system_planet = {
				limit = { is_primary_star = yes }
				subtract_variable = {
					which = ag_construction_section_counter
					value = 1
				}
			} }
			remove_megastructure = this
		}
		else_if = {
			limit = { is_megastructure_type = ag_ancient_eta_gateway_control_megastructure_3 }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = red }
			if = {
				limit = { exists = event_target:ag_eta_gateway_controller }
				event_target:ag_eta_gateway_controller = { ag_eta_gateway_flags_cleans_up_effect = { ag_clear_global_event_target = no } }
				clear_global_event_target = ag_eta_gateway_controller
			}
			solar_system = { remove_star_flag = lcluster1 remove_star_flag = lgate }
			remove_megastructure = this
		}
		else_if = {
			limit = { NOR = {
				is_megastructure_type = ag_psionic_portal_megastructure
				is_megastructure_type = ag_psionic_portal_stabled_megastructure
				is_megastructure_type = ag_ancient_anchor_station_0
				is_megastructure_type = ag_ancient_anchor_station_1
				is_megastructure_type = ag_ancient_anchor_station_2
				is_megastructure_type = ag_ancient_astronomy_station
				is_megastructure_type = lgate_base
			} }
			remove_megastructure = this
		}
	}
	every_system_planet = {
		limit = { OR = { is_planet_class = pc_ringworld_seam is_planet_class = pc_ringworld_tech } }
		if = {
			limit = { OR = { is_planet_class = pc_ringworld_seam AND = { is_planet_class = pc_ringworld_tech has_planet_flag = ag_ancient_resource_section_0 } } }
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			ag_change_pc = { ag_planet_class = pc_ringworld_seam_damaged }
			if = { limit = { has_planet_flag = ag_ancient_resource_section_0 } remove_planet_flag = ag_ancient_resource_section_0 }
		}
		else = {
			ag_spawn_explosion_effect = { ag_scale = xl ag_color = orange }
			ag_change_pc = { ag_planet_class = pc_ringworld_tech_damaged }
			if = { limit = { has_planet_flag = ag_ancient_construction_section_0 } remove_planet_flag = ag_ancient_construction_section_0 }
			if = { limit = { has_planet_flag = ag_ancient_construction_section } remove_planet_flag = ag_ancient_construction_section }
		}
	}
}

ag_ship_aura_init_effect = {
	optimize_memory
	set_variable = { which = ag_scaled_difficulty_ship_temp value = value:ag_aura_difficulty_factor }
	if = {
		limit = {
			prevprev = { check_modifier_value = { modifier = ag_shield_hardening_reduction value != 0 } }
			NAND = {
				is_variable_set = ag_anti_hardening_aura_priority
				check_variable = { which = ag_anti_hardening_aura_priority value >= prevprev.modifier:ag_shield_hardening_reduction  }
			}
		}
		set_variable = { which = ag_anti_hardening_aura_priority value = prevprev.modifier:ag_shield_hardening_reduction }
		while = { limit = { has_modifier = "ag_ship_shield_hardening_add_buff" } remove_modifier = "ag_ship_shield_hardening_add_buff" }
		add_modifier = { modifier = "ag_ship_shield_hardening_add_buff" days = -1 multiplier = value:ag_anti_hardening_locked_value|ag_target|shield| }
		set_variable = { which = ag_shield_hardening_locked value = value:ag_anti_hardening_locked_value|ag_target|shield| }
		set_ship_flag = ag_ship_shield_hardening_add_locked
	}
	if = {
		limit = {
			prevprev = { check_modifier_value = { modifier = ag_armor_hardening_reduction value != 0 } }
			NAND = {
				is_variable_set = ag_anti_hardening_aura_priority
				check_variable = { which = ag_anti_hardening_aura_priority value >= prevprev.modifier:ag_armor_hardening_reduction  }
			}
		}
		set_variable = { which = ag_anti_hardening_aura_priority value = prevprev.modifier:ag_armor_hardening_reduction }
		while = { limit = { has_modifier = "ag_ship_armor_hardening_add_buff" } remove_modifier = "ag_ship_armor_hardening_add_buff" }
		add_modifier = { modifier = "ag_ship_armor_hardening_add_buff" days = -1 multiplier = value:ag_anti_hardening_locked_value|ag_target|armor| }
		set_variable = { which = ag_armor_hardening_locked value = value:ag_anti_hardening_locked_value|ag_target|armor| }
		set_ship_flag = ag_ship_armor_hardening_add_locked
	}
	if = {
		limit = {
			NOT = { is_variable_set = ag_ancient_anti_jumpdrive_aura_priority }
			prevprev = { ag_has_anti_jumpdrive_aura = yes }
		}
		set_variable = { which = ag_ancient_anti_jumpdrive_aura_priority value = 1 }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_1" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_2" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_3" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_3" }
		add_modifier = { modifier = "ag_ancient_anti_jumpdrive_aura_1" days = -1 }
		add_modifier = { modifier = "ag_ancient_anti_jumpdrive_aura_2" days = -1 multiplier = modifier:ship_ftl_jumpdrive_range_mult }
		add_modifier = { modifier = "ag_ancient_anti_jumpdrive_aura_3" days = -1 multiplier = modifier:ship_disengage_opportunities_add }
	}
	if = {
		limit = { prevprev = { ag_has_weapon_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_weapon_debuff_aura_priority
					check_variable = { which = ag_ancient_weapon_debuff_aura_priority value >= 4 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_alpha_titan_aura_1
					has_component = ag_ancient_delta_titan_aura_1
					has_component = ag_ancient_delta_platform_aura_1
				} }
			}
			set_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 4 }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_1" } remove_modifier = "ag_ancient_weapon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_2" } remove_modifier = "ag_ancient_weapon_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3" } remove_modifier = "ag_ancient_weapon_debuff_aura_3" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4" } remove_modifier = "ag_ancient_weapon_debuff_aura_4" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5" } remove_modifier = "ag_ancient_weapon_debuff_aura_5" }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_weapon_range_mult_4|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_tracking_add_4| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_4|ag_modifier|ship_shield_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_4|ag_modifier|ship_armor_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_4|ag_modifier|ship_hull_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_3 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_4|ag_modifier|ship_shield_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_4 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_4|ag_modifier|ship_armor_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_5 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_4|ag_modifier|ship_hull_damage_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_weapon_debuff_aura_priority
					check_variable = { which = ag_ancient_weapon_debuff_aura_priority value >= 3 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_weapon_debuff_aura_violet
					has_component = ag_ancient_weapon_debuff_aura_1
					has_component = ag_ancient_alpha_titan_aura_0
					has_component = ag_ancient_delta_titan_aura_0
					has_component = ag_ancient_delta_platform_aura_0
					has_component = ag_zeta_crisis_weapon_debuff_aura
					has_component = ag_ancient_zeta_aura_titan_psi
					has_component = ag_ancient_zeta_aura_station_large_psi
				} }
			}
			set_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 3 }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_1" } remove_modifier = "ag_ancient_weapon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_2" } remove_modifier = "ag_ancient_weapon_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3" } remove_modifier = "ag_ancient_weapon_debuff_aura_3" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4" } remove_modifier = "ag_ancient_weapon_debuff_aura_4" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5" } remove_modifier = "ag_ancient_weapon_debuff_aura_5" }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_weapon_range_mult_3|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_tracking_add_3| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_3|ag_modifier|ship_shield_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_3|ag_modifier|ship_armor_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_3|ag_modifier|ship_hull_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_3 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_3|ag_modifier|ship_shield_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_4 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_3|ag_modifier|ship_armor_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_5 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_3|ag_modifier|ship_hull_damage_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_weapon_debuff_aura_priority
					check_variable = { which = ag_ancient_weapon_debuff_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_weapon_debuff_aura_0
					has_component = ag_aura_battleship_aura_damage_debuff_2
					has_component = ag_player_weapon_debuff_aura_2
					has_component = ag_ancient_zeta_aura_battleship_psi
					has_component = ag_ancient_zeta_aura_destroyer_psi
					has_component = ag_ancient_zeta_aura_station_small_psi
				} }
			}
			set_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_1" } remove_modifier = "ag_ancient_weapon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_2" } remove_modifier = "ag_ancient_weapon_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3" } remove_modifier = "ag_ancient_weapon_debuff_aura_3" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4" } remove_modifier = "ag_ancient_weapon_debuff_aura_4" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5" } remove_modifier = "ag_ancient_weapon_debuff_aura_5" }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_weapon_range_mult_2|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_tracking_add_2| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_2|ag_modifier|ship_shield_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_2|ag_modifier|ship_armor_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_2|ag_modifier|ship_hull_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_3 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_2|ag_modifier|ship_shield_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_4 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_2|ag_modifier|ship_armor_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_5 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_2|ag_modifier|ship_hull_damage_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_weapon_debuff_aura_priority
				check_variable = { which = ag_ancient_weapon_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_1" } remove_modifier = "ag_ancient_weapon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_2" } remove_modifier = "ag_ancient_weapon_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3" } remove_modifier = "ag_ancient_weapon_debuff_aura_3" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4" } remove_modifier = "ag_ancient_weapon_debuff_aura_4" }
			while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5" } remove_modifier = "ag_ancient_weapon_debuff_aura_5" }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_weapon_range_mult_1|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_tracking_add_1| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_1|ag_modifier|ship_shield_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_1|ag_modifier|ship_armor_damage_mult| }
			add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_1|ag_modifier|ship_hull_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_3 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_1|ag_modifier|ship_shield_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_4 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_1|ag_modifier|ship_armor_damage_mult| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_5 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_1|ag_modifier|ship_hull_damage_mult| }
		}
	}
	if = {
		limit = {
			NOT = { is_variable_set = ag_ancient_anti_penetration_aura_priority }
			prevprev = { ag_has_anti_penetration_aura = yes }
		}
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_anti_penetration_aura_priority
					check_variable = { which = ag_ancient_anti_penetration_aura_priority value >= 3 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_zeta_aura_titan_psi
					has_component = ag_ancient_zeta_aura_battleship_psi
					has_component = ag_ancient_zeta_aura_destroyer_psi
					has_component = ag_ancient_zeta_aura_station_small_psi
					has_component = ag_ancient_zeta_aura_station_large_psi
					has_component = ag_zeta_crisis_weapon_debuff_aura
					has_component = ag_ancient_t3_anti_penetration_aura_violet
				} }
			}
			set_variable = { which = ag_ancient_anti_penetration_aura_priority value = 3 }
			set_ship_flag = ag_ship_penetration_mult_locked
			if = {
				limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
				add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
			}
			if = {
				limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
				add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
			}
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_anti_penetration_aura_priority
					check_variable = { which = ag_ancient_anti_penetration_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_t3_anti_penetration_aura_1
					has_component = ag_aura_battleship_aura_anti_penetration_2
					has_component = ag_player_anti_penetration_aura_2
				} }
			}
			set_variable = { which = ag_ancient_anti_penetration_aura_priority value = 2 }
			if = {
				limit = { OR = {
					ag_is_zeta_crisis_ship = yes
					ag_is_ancient_titan_alt = yes
				} }
				random_list = {
					50 = { }
					50 = {
						set_ship_flag = ag_ship_penetration_mult_locked
						if = {
							limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
							add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
						}
						if = {
							limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
							add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
						}
					}
				}
				reroll_random = yes
			}
			else_if = {
				limit = { OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
				} }
				random_list = {
					25 = { }
					75 = {
						set_ship_flag = ag_ship_penetration_mult_locked
						if = {
							limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
							add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
						}
						if = {
							limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
							add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
						}
					}
				}
				reroll_random = yes
			}
			else_if = {
				limit = { always = yes }
				set_ship_flag = ag_ship_penetration_mult_locked
				if = {
					limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
					add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
				}
				if = {
					limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
					add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
				}
			}
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_anti_penetration_aura_priority
				check_variable = { which = ag_ancient_anti_penetration_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_anti_penetration_aura_priority value = 1 }
			if = {
				limit = { NOR = {
					ag_is_zeta_crisis_ship = yes
					ag_is_ancient_titan_alt = yes
				} }
				if = {
					limit = { OR = {
						ag_is_ancient_ship = yes
						ag_is_ancient_ship_unlocked = yes
					} }
					random_list = {
						40 = { }
						60 = {
							set_ship_flag = ag_ship_penetration_mult_locked
							if = {
								limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
								add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
							}
							if = {
								limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
								add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
							}
						}
					}
					reroll_random = yes
				}
				else = {
					set_ship_flag = ag_ship_penetration_mult_locked
					if = {
						limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
						add_modifier = { modifier = "ag_ancient_anti_penetration_aura_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
					}
					if = {
						limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
						add_modifier = { modifier = "ag_ancient_anti_penetration_aura_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
					}
				}
			}
		}
	}
	if = {
		limit = { prevprev = { ag_has_damage_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 7 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_t_damage_aura_1
					has_component = ag_ancient_t_damage_aura_violet
					has_component = ag_zeta_crisis_large_ship_aura
					has_component = ag_zeta_crisis_starbase_aura
					has_component = ag_ancient_zeta_aura_titan_psi
					has_component = ag_ancient_zeta_aura_station_large_psi
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 7 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_7| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 6 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_t_damage_aura_0
					has_component = ag_ancient_xl_damage_aura_1
					has_component = ag_ancient_xl_damage_aura_violet
					has_component = ag_zeta_crisis_medium_ship_aura
					has_component = ag_zeta_crisis_support_ship_aura
					has_component = ag_zeta_crisis_defensive_platform_aura
					has_component = ag_ancient_zeta_aura_battleship_psi
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 6 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_6| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 5 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_xl_damage_aura_0
					has_component = ag_ancient_l_damage_aura_1
					has_component = ag_ancient_l_damage_aura_violet
					has_component = ag_zeta_crisis_small_ship_aura
					has_component = ag_zeta_crisis_avatar_t5_aura
					has_component = ag_ancient_zeta_aura_destroyer_psi
					has_component = ag_ancient_zeta_aura_station_small_psi
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 5 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_5| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 4 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_l_damage_aura_0
					has_component = ag_ancient_m_damage_aura_1
					has_component = ag_ancient_m_damage_aura_violet
					has_component = ag_zeta_crisis_avatar_t4_aura
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 4 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_4| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 3 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_m_damage_aura_0
					has_component = ag_ancient_s_damage_aura_1
					has_component = ag_ancient_s_damage_aura_violet
					has_component = ag_zeta_crisis_avatar_t3_aura
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 3 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_3| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_damage_aura_priority
					check_variable = { which = ag_ancient_damage_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_s_damage_aura_0
					has_component = ag_ancient_xs_damage_aura_1
					has_component = ag_ancient_xs_damage_aura_violet
					has_component = ag_zeta_crisis_avatar_t2_aura
				} }
			}
			set_variable = { which = ag_ancient_damage_aura_priority value = 2 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_2| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_damage_aura_priority
				check_variable = { which = ag_ancient_damage_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_damage_aura_priority value = 1 }
			ag_reduce_hp = { ag_value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ancient_damage_aura_1| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_ship_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_ship_debuff_aura_priority
					check_variable = { which = ag_ancient_ship_debuff_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_aura_battleship_aura_ship_debuff_2
					has_component = ag_player_ship_debuff_aura_2
				} }
			}
			set_variable = { which = ag_ancient_ship_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_1" } remove_modifier = "ag_ancient_ship_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_2" } remove_modifier = "ag_ancient_ship_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_3" } remove_modifier = "ag_ancient_ship_debuff_aura_3" }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier_alt|ag_base_factor|@ag_ship_debuff_ship_shield_reduction_2|ag_modifier|ship_shield_reduction| }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ship_debuff_ship_hull_mult_2|ag_modifier|ship_hull_mult| }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ship_debuff_ship_evasion_mult_2|ag_modifier|ship_evasion_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_ship_debuff_aura_priority
				check_variable = { which = ag_ancient_ship_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_ship_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_1" } remove_modifier = "ag_ancient_ship_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_2" } remove_modifier = "ag_ancient_ship_debuff_aura_2" }
			while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_3" } remove_modifier = "ag_ancient_ship_debuff_aura_3" }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier_alt|ag_base_factor|@ag_ship_debuff_ship_shield_reduction_1|ag_modifier|ship_shield_reduction| }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ship_debuff_ship_hull_mult_1|ag_modifier|ship_hull_mult| }
			add_modifier = { modifier = "ag_ancient_ship_debuff_aura_3" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_ship_debuff_ship_evasion_mult_1|ag_modifier|ship_evasion_mult| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_beta_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_beta_debuff_aura_priority
					check_variable = { which = ag_ancient_beta_debuff_aura_priority value >= 2 }
				}
				prevprev = { has_component = ag_ancient_beta_station_aura_1 }
			}
			set_variable = { which = ag_ancient_beta_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_1" } remove_modifier = "ag_ancient_beta_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_2" } remove_modifier = "ag_ancient_beta_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_beta_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_accuracy_add_2| }
			add_modifier = { modifier = "ag_ancient_beta_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_2|ag_modifier|ship_weapon_damage| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_21 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_2|ag_modifier|ship_weapon_damage| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_beta_debuff_aura_priority
				check_variable = { which = ag_ancient_beta_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_beta_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_1" } remove_modifier = "ag_ancient_beta_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_2" } remove_modifier = "ag_ancient_beta_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_beta_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_accuracy_add_1| }
			add_modifier = { modifier = "ag_ancient_beta_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_1|ag_modifier|ship_weapon_damage| }
			set_variable = { which = ag_ancient_weapon_debuff_aura_21 value = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_1|ag_modifier|ship_weapon_damage| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_gamma_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_gamma_debuff_aura_priority
					check_variable = { which = ag_ancient_gamma_debuff_aura_priority value >= 5 }
				}
				prevprev = { has_component = ag_ancient_gamma_station_debuff_aura_1 }
			}
			set_variable = { which = ag_ancient_gamma_debuff_aura_priority value = 5 }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_speed_mult_5|ag_modifier|ship_speed_mult| }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_evasion_mult_5|ag_modifier|ship_evasion_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_gamma_debuff_aura_priority
					check_variable = { which = ag_ancient_gamma_debuff_aura_priority value >= 4 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_gamma_station_debuff_aura_0
					has_component = ag_ancient_gamma_station_debuff_small_aura_1
					has_component = ag_ancient_gamma_titan_debuff_aura_1
				} }
			}
			set_variable = { which = ag_ancient_gamma_debuff_aura_priority value = 4 }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_speed_mult_4|ag_modifier|ship_speed_mult| }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_evasion_mult_4|ag_modifier|ship_evasion_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_gamma_debuff_aura_priority
					check_variable = { which = ag_ancient_gamma_debuff_aura_priority value >= 3 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_gamma_station_debuff_small_aura_0
					has_component = ag_ancient_gamma_titan_debuff_aura_0
					has_component = ag_ancient_gamma_battlecruiser_debuff_aura_1
				} }
			}
			set_variable = { which = ag_ancient_gamma_debuff_aura_priority value = 3 }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_speed_mult_3|ag_modifier|ship_speed_mult| }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_evasion_mult_3|ag_modifier|ship_evasion_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_gamma_debuff_aura_priority
					check_variable = { which = ag_ancient_gamma_debuff_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_gamma_battlecruiser_debuff_aura_0
					has_component = ag_ancient_gamma_escort_debuff_aura_1
				} }
			}
			set_variable = { which = ag_ancient_gamma_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_speed_mult_2|ag_modifier|ship_speed_mult| }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_evasion_mult_2|ag_modifier|ship_evasion_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_gamma_debuff_aura_priority
				check_variable = { which = ag_ancient_gamma_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_gamma_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_speed_mult_1|ag_modifier|ship_speed_mult| }
			add_modifier = { modifier = "ag_ancient_gamma_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_gamma_debuff_ship_evasion_mult_1|ag_modifier|ship_evasion_mult| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_epsilon_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_epsilon_debuff_aura_priority
					check_variable = { which = ag_ancient_epsilon_debuff_aura_priority value >= 2 }
				}
				prevprev = { has_component = ag_ancient_epsilon_titan_aura_1 }
			}
			set_variable = { which = ag_ancient_epsilon_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_1" } remove_modifier = "ag_ancient_epsilon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_2" } remove_modifier = "ag_ancient_epsilon_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_epsilon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_epsilon_debuff_ship_weapon_range_mult_2|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_epsilon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_epsilon_debuff_ship_accuracy_mult_2|ag_modifier|ship_accuracy_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_epsilon_debuff_aura_priority
				check_variable = { which = ag_ancient_epsilon_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_epsilon_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_1" } remove_modifier = "ag_ancient_epsilon_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_2" } remove_modifier = "ag_ancient_epsilon_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_epsilon_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_epsilon_debuff_ship_weapon_range_mult_1|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_epsilon_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_epsilon_debuff_ship_accuracy_mult_1|ag_modifier|ship_accuracy_mult| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_zeta_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_zeta_debuff_aura_priority
					check_variable = { which = ag_ancient_zeta_debuff_aura_priority value >= 3 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_zeta_aura_titan
					has_component = ag_ancient_zeta_aura_station_large
				} }
			}
			set_variable = { which = ag_ancient_zeta_debuff_aura_priority value = 3 }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_1" } remove_modifier = "ag_ancient_zeta_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_2" } remove_modifier = "ag_ancient_zeta_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_weapon_range_mult_3|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_accuracy_mult_3|ag_modifier|ship_accuracy_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_zeta_debuff_aura_priority
					check_variable = { which = ag_ancient_zeta_debuff_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_zeta_aura_battleship
					has_component = ag_ancient_zeta_aura_station_small
				} }
			}
			set_variable = { which = ag_ancient_zeta_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_1" } remove_modifier = "ag_ancient_zeta_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_2" } remove_modifier = "ag_ancient_zeta_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_weapon_range_mult_2|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_accuracy_mult_2|ag_modifier|ship_accuracy_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_zeta_debuff_aura_priority
				check_variable = { which = ag_ancient_zeta_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_zeta_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_1" } remove_modifier = "ag_ancient_zeta_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_2" } remove_modifier = "ag_ancient_zeta_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_weapon_range_mult_1|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_zeta_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_zeta_debuff_ship_accuracy_mult_1|ag_modifier|ship_accuracy_mult| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_eta_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_eta_debuff_aura_priority
					check_variable = { which = ag_ancient_eta_debuff_aura_priority value >= 4 }
				}
				prevprev = { has_component = ag_ancient_eta_titan_starbase_aura_1 }
			}
			set_variable = { which = ag_ancient_eta_debuff_aura_priority value = 4 }
			while = { limit = { has_modifier = "ag_ancient_eta_debuff_aura" } remove_modifier = "ag_ancient_eta_debuff_aura" }
			add_modifier = { modifier = "ag_ancient_eta_debuff_aura" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_eta_debuff_aura_variable_4| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_eta_debuff_aura_priority
					check_variable = { which = ag_ancient_eta_debuff_aura_priority value >= 3 }
				}
				prevprev = { has_component = ag_ancient_eta_titan_aura_1 }
			}
			set_variable = { which = ag_ancient_eta_debuff_aura_priority value = 3 }
			while = { limit = { has_modifier = "ag_ancient_eta_debuff_aura" } remove_modifier = "ag_ancient_eta_debuff_aura" }
			add_modifier = { modifier = "ag_ancient_eta_debuff_aura" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_eta_debuff_aura_variable_3| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_eta_debuff_aura_priority
					check_variable = { which = ag_ancient_eta_debuff_aura_priority value >= 2 }
				}
				prevprev = { OR = {
					has_component = ag_ancient_eta_titan_aura_0
					has_component = ag_ancient_eta_gateway_aura_1
				} }
			}
			set_variable = { which = ag_ancient_eta_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_eta_debuff_aura" } remove_modifier = "ag_ancient_eta_debuff_aura" }
			add_modifier = { modifier = "ag_ancient_eta_debuff_aura" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_eta_debuff_aura_variable_2| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_eta_debuff_aura_priority
				check_variable = { which = ag_ancient_eta_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_eta_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_eta_debuff_aura" } remove_modifier = "ag_ancient_eta_debuff_aura" }
			add_modifier = { modifier = "ag_ancient_eta_debuff_aura" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_eta_debuff_aura_variable_1| }
		}
	}
	if = {
		limit = { prevprev = { ag_has_wanderer_debuff_aura = yes } }
		if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_wanderer_debuff_aura_priority
					check_variable = { which = ag_ancient_wanderer_debuff_aura_priority value >= 3 }
				}
				prevprev = { has_component = ag_ancient_wandering_ship_aura_1 }
			}
			set_variable = { which = ag_ancient_wanderer_debuff_aura_priority value = 3 }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_1" } remove_modifier = "ag_ancient_wanderer_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_2" } remove_modifier = "ag_ancient_wanderer_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_weapon_range_mult_3|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_tracking_mult_3|ag_modifier|ship_tracking_mult| }
		}
		else_if = {
			limit = {
				NAND = {
					is_variable_set = ag_ancient_wanderer_debuff_aura_priority
					check_variable = { which = ag_ancient_wanderer_debuff_aura_priority value >= 2 }
				}
				prevprev = { has_component = ag_ancient_anchor_station_aura_1 }
			}
			set_variable = { which = ag_ancient_wanderer_debuff_aura_priority value = 2 }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_1" } remove_modifier = "ag_ancient_wanderer_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_2" } remove_modifier = "ag_ancient_wanderer_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_weapon_range_mult_2|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_tracking_mult_2|ag_modifier|ship_tracking_mult| }
		}
		else_if = {
			limit = { NAND = {
				is_variable_set = ag_ancient_wanderer_debuff_aura_priority
				check_variable = { which = ag_ancient_wanderer_debuff_aura_priority value >= 1 }
			} }
			set_variable = { which = ag_ancient_wanderer_debuff_aura_priority value = 1 }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_1" } remove_modifier = "ag_ancient_wanderer_debuff_aura_1" }
			while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_2" } remove_modifier = "ag_ancient_wanderer_debuff_aura_2" }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_1" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_weapon_range_mult_1|ag_modifier|ship_weapon_range_mult| }
			add_modifier = { modifier = "ag_ancient_wanderer_debuff_aura_2" days = -1 multiplier = value:ag_aura_modifier_multiplier|ag_base_factor|@ag_wanderer_debuff_ship_tracking_mult_1|ag_modifier|ship_tracking_mult| }
		}
	}
	if = { limit = { is_variable_set = ag_scaled_difficulty_ship_temp } clear_variable = ag_scaled_difficulty_ship_temp }
}
ag_dummy_aura_shield_damage_effect_fixup = {
	optimize_memory
	if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 4 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_4|ag_modifier|ship_shield_damage_mult|ag_index|3| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 3 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_3|ag_modifier|ship_shield_damage_mult|ag_index|3| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 2 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_2|ag_modifier|ship_shield_damage_mult|ag_index|3| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 1 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_3_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_shield_damage_mult_1|ag_modifier|ship_shield_damage_mult|ag_index|3| }
	}
}
ag_dummy_aura_armor_damage_effect_fixup = {
	optimize_memory
	if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 4 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_4|ag_modifier|ship_armor_damage_mult|ag_index|4| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 3 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_3|ag_modifier|ship_armor_damage_mult|ag_index|4| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 2 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_2|ag_modifier|ship_armor_damage_mult|ag_index|4| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 1 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_4_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_armor_damage_mult_1|ag_modifier|ship_armor_damage_mult|ag_index|4| }
	}
}
ag_dummy_aura_hull_damage_effect_fixup = {
	optimize_memory
	if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 4 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_4|ag_modifier|ship_hull_damage_mult|ag_index|5| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 3 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_3|ag_modifier|ship_hull_damage_mult|ag_index|5| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 2 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_2|ag_modifier|ship_hull_damage_mult|ag_index|5| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_weapon_debuff_aura_priority value = 1 } }
		add_modifier = { modifier = "ag_ancient_weapon_debuff_aura_5_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_ancient_weapon_debuff_aura_ship_hull_damage_mult_1|ag_modifier|ship_hull_damage_mult|ag_index|5| }
	}
}
ag_dummy_aura_weapon_damage_effect_fixup = {
	optimize_memory
	if = {
		limit = { check_variable = { which = ag_ancient_beta_debuff_aura_priority value = 2 } }
		add_modifier = { modifier = "ag_ancient_beta_debuff_aura_1_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_2|ag_modifier|ship_weapon_damage|ag_index|21| }
	}
	else_if = {
		limit = { check_variable = { which = ag_ancient_beta_debuff_aura_priority value = 1 } }
		add_modifier = { modifier = "ag_ancient_beta_debuff_aura_1_alt" days = -1 multiplier = value:ag_aura_modifier_multiplier_fixup|ag_base_factor|@ag_beta_debuff_ship_weapon_damage_1|ag_modifier|ship_weapon_damage|ag_index|21| }
	}
}

ag_ancient_gravity_weapon_ship_effect = {
	optimize_memory
	random_list = {
		182 = {
			modifier = { factor = 2 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value < 1 } } }
			modifier = { factor = 4 has_ship_flag = ag_ancient_gravity_weapon_target }
		}
		# 211 Totally, 181 Available
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_locked = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_1_1" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_1_2" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_1_3" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_locked = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_2_1" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_2_2" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_2_3" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_locked = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_3_1" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_3_2" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_3_3" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_locked = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_4_1" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_4_2" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_4_3" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_locked = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_5_1" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				}
			}
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_5_2" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			ag_spawn_buff_effect = { ag_type = 3 ag_color = red ag_scale = s }
			add_modifier = { modifier = "ag_ancient_gravity_weapon_effect_5_3" days = @ag_ancient_gravity_weapon_unlocked_effect_days }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 6 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 4 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 2 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 100 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 80 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 4000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 60 }
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
		}
		1 = {
			modifier = { factor = 0 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value <= 1 } } }
			modifier = { factor = 0.25 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value < 2 } } }
			modifier = { factor = 0.25 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value < 4 } } }
			modifier = { factor = 1.13 has_hp > 1000000 }
			modifier = { factor = 1.13 has_hp > 2000000 }
			modifier = { factor = 1.13 has_hp > 5000000 }
			modifier = { factor = 1.13 has_hp > 10000000 }
			modifier = { factor = 1.13 has_hp > 20000000 }
			modifier = { factor = 1.13 has_hp > 50000000 }
			modifier = { factor = 1.67 has_hp > 100000000 }
			modifier = { factor = 1.67 has_hp > 200000000 }
			modifier = { factor = 1.75 has_hp > 500000000 }
			modifier = { factor = 0.75 has_ship_flag = ag_ancient_gravity_weapon_target }
			modifier = {
				factor = 0
				OR = {
					has_ship_flag = ag_ship_hull_locked
					owner = { is_country_type = ag_ancient_zeta_guardian }
					AND = {
						solar_system = { NOT = { has_star_flag = ag_gamma_crisis_spawned } }
						fleet = { OR = {
							check_variable = { which = ag_max_ship_locked_ships value = 0 }
							check_variable = { which = ag_num_ship_hull_locked_ships value >= ag_max_ship_locked_ships }
						} }
					}
				}
			}
			set_timed_ship_flag = { flag = ag_ancient_gravity_weapon_target days = 2 }
			if = {
				limit = { NOR = {
					has_ship_flag = ag_ancient_empire_mod_ship
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				} }
				ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = l }
				if = { limit = { has_ship_flag = ag_ship_hull_locked } remove_ship_flag = ag_ship_hull_locked }
				ag_set_ship_hull_locked = { ag_days = 6 ag_value = 64 }
			}
		}
		1 = {
			modifier = { factor = 0 OR = { has_ship_flag = ag_ancient_empire_mod_ship prevprev = { ag_mod_ship_modifier_check = no } } }
			if = {
				limit = { NOR = { has_ship_flag = ag_ancient_empire_mod_ship prevprev = { ag_mod_ship_modifier_check = no } } }
				reroll_random = yes
				random_list = {
					5 = { ag_delayed_destroy_ship = { ag_days = 0 random = 0 ag_fire_on_action = yes ag_who = prevprev } }
					10 = { ag_delayed_destroy_ship = { ag_days = 1 random = 0 ag_fire_on_action = yes ag_who = prevprev } }
					10 = { ag_delayed_destroy_ship = { ag_days = 2 random = 0 ag_fire_on_action = yes ag_who = prevprev } }
					10 = { ag_delayed_destroy_ship = { ag_days = 3 random = 0 ag_fire_on_action = yes ag_who = prevprev } }
					10 = { ag_delayed_destroy_ship = { ag_days = 4 random = 0 ag_fire_on_action = yes ag_who = prevprev } }
				}
			}
		}
	}
	reroll_random = yes
}
ag_ancient_gravity_weapon_kill_effect = {
	optimize_memory
	random_list = {
		200 = { }
		# 100 Totally, 50 Available
		10 = {
			modifier = { factor = 0 has_hp <= 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 5 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 4 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 3 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 2 }
		}
		10 = {
			modifier = { factor = 0 has_hp <= 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp_percent = { ag_value = 1 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 500 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 400 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 300 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 200 }
		}
		10 = {
			modifier = { factor = 0 has_hp > 10000 }
			modifier = { factor = 0 has_ship_flag = ag_ship_hull_locked }
			ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = s }
			ag_reduce_hp = { ag_value = 100 }
		}
		1 = {
			modifier = { factor = 0 event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value <= 2 } } }
			modifier = { factor = 0 has_hp <= 450000 }
			modifier = { factor = 1.13 has_hp > 1000000 }
			modifier = { factor = 1.13 has_hp > 2000000 }
			modifier = { factor = 1.13 has_hp > 5000000 }
			modifier = { factor = 1.13 has_hp > 10000000 }
			modifier = { factor = 1.13 has_hp > 20000000 }
			modifier = { factor = 1.13 has_hp > 50000000 }
			modifier = { factor = 1.67 has_hp > 100000000 }
			modifier = { factor = 1.67 has_hp > 200000000 }
			modifier = { factor = 1.75 has_hp > 500000000 }
			modifier = {
				factor = 0
				OR = {
					has_ship_flag = ag_ancient_gravity_weapon_target
					has_ship_flag = ag_ship_hull_locked
					owner = { is_country_type = ag_ancient_zeta_guardian }
					AND = {
						solar_system = { NOT = { has_star_flag = ag_gamma_crisis_spawned } }
						OR = {
							fleet = { check_variable = { which = ag_max_ship_locked_ships value = 0 } }
							fleet = { check_variable = { which = ag_num_ship_hull_locked_ships value >= ag_max_ship_locked_ships } }
						}
					}
				}
			}
			if = {
				limit = { NOR = {
					has_ship_flag = ag_ancient_empire_mod_ship
					ag_is_ancient_ship = yes
					ag_is_ancient_ship_unlocked = yes
					ag_is_zeta_crisis_ship = yes
				} }
				ag_spawn_buff_effect = { ag_type = 4 ag_color = red ag_scale = l }
				if = { limit = { has_ship_flag = ag_ship_hull_locked } remove_ship_flag = ag_ship_hull_locked }
				ag_set_ship_hull_locked = { ag_days = 6 ag_value = 64 }
			}
		}
		1 = {
			modifier = { factor = 0 OR = { has_ship_flag = ag_ancient_empire_mod_ship root.fromfrom = { ag_mod_ship_modifier_check = no } } }
			if = {
				limit = { NOR = { has_ship_flag = ag_ancient_empire_mod_ship root.fromfrom = { ag_mod_ship_modifier_check = no } } }
				reroll_random = yes
				random_list = {
					5 = { ag_delayed_destroy_ship = { ag_days = 0 random = 0 ag_fire_on_action = yes ag_who = root.fromfrom } }
					10 = { ag_delayed_destroy_ship = { ag_days = 1 random = 0 ag_fire_on_action = yes ag_who = root.fromfrom } }
					10 = { ag_delayed_destroy_ship = { ag_days = 2 random = 0 ag_fire_on_action = yes ag_who = root.fromfrom } }
					10 = { ag_delayed_destroy_ship = { ag_days = 3 random = 0 ag_fire_on_action = yes ag_who = root.fromfrom } }
					10 = { ag_delayed_destroy_ship = { ag_days = 4 random = 0 ag_fire_on_action = yes ag_who = root.fromfrom } }
				}
			}
		}
	}
	reroll_random = yes
}

ag_ancient_anti_psi_weapon_ship_effect = {
	optimize_memory
	set_timed_ship_flag = { flag = ag_anti_psi_weapon_target days = 2 }
	random_list = {
		120 = { }
		10 = {
			set_variable = { which = ag_ancient_anti_psi_weapon_temp value = modifier:ship_shield_reduction }
			subtract_variable = { which = ag_ancient_anti_psi_weapon_temp value = 1 }
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_1_1" days = @ag_ancient_anti_psi_weapon_effect_days multiplier = ag_ancient_anti_psi_weapon_temp }
			clear_variable = ag_ancient_anti_psi_weapon_temp
		}
		10 = {
			set_variable = { which = ag_ancient_anti_psi_weapon_temp value = modifier:ship_shield_reduction }
			subtract_variable = { which = ag_ancient_anti_psi_weapon_temp value = 1 }
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_1_2" days = @ag_ancient_anti_psi_weapon_effect_days multiplier = ag_ancient_anti_psi_weapon_temp }
			clear_variable = ag_ancient_anti_psi_weapon_temp
		}
		10 = {
			set_variable = { which = ag_ancient_anti_psi_weapon_temp value = modifier:ship_shield_reduction }
			subtract_variable = { which = ag_ancient_anti_psi_weapon_temp value = 1 }
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_1_3" days = @ag_ancient_anti_psi_weapon_effect_days multiplier = ag_ancient_anti_psi_weapon_temp }
			clear_variable = ag_ancient_anti_psi_weapon_temp
		}
		# 120 Totally
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_2_1" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_2_2" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = m ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_2_3" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = m ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_3_1" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_3_2" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_3_3" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_4_1" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_4_2" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			modifier = {
				factor = 0
				OR = {
					is_country_type = ag_zeta_crisis_country
					is_country_type = ag_zeta_crisis_portal_holder
					is_country_type = ag_zeta_crisis_relic_country
					is_country_type = shroud
					is_country_type = shroud_spirits
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
				}
			}
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_effect_4_3" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
	}
	reroll_random = yes
}
ag_ancient_anti_psi_weapon_kill_effect = {
	optimize_memory
	random_list = {
		444 = { }
		# 111 Totally
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_1" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_2" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_3" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_4" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_5" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_6" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		1 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_1_7" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_2_1" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_2_2" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_2_3" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_2_4" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_anti_psi_weapon_kill_effect_2_5" days = @ag_ancient_anti_psi_weapon_effect_days }
		}
	}
	reroll_random = yes
}

ag_ancient_psi_weapon_kill_effect = {
	optimize_memory
	random_list = {
		800 = { }
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 25 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 24 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 23 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 22 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 21 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp_percent = { ag_value = 20 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 1100 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 1000 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 900 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 800 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 700 }
		}
		10 = {
			modifier = { factor = 0 ag_is_special_ship = yes }
			ag_spawn_buff_effect = { ag_type = 4 ag_scale = m ag_color = violet }
			ag_reduce_hp = { ag_value = 600 }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_1_1" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_1_2" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_1_3" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_1_4" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_2_1" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_2_2" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_2_3" days = @ag_ancient_psionic_weapon_effect_days }
		}
		10 = {
			ag_spawn_buff_effect = { ag_type = 3 ag_scale = s ag_color = violet }
			add_modifier = { modifier = "ag_ancient_psionic_weapon_effect_2_4" days = @ag_ancient_psionic_weapon_effect_days }
		}
	}
	reroll_random = yes
}
ag_ancient_psi_weapon_death_effect = {
	optimize_memory
	random_list = {
		320 = { }
		# 80 Totally
		20 = { set_ship_flag = ag_ship_penetration_mult_locked remove_ship_flag = ag_ship_pentartion_mult_cooldown }
		# 9 = {
			# if = {
				# limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
				# add_modifier = { modifier = "ag_ancient_psi_ship_killed_debuff_1" days = 360 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
			# }
		# }
		# 1 = {
			# modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			# if = {
				# limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value != -1 } }
				# add_modifier = { modifier = "ag_ancient_psi_ship_killed_debuff_1" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|shield| }
			# }
		# }
		# 9 = {
			# if = {
				# limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
				# add_modifier = { modifier = "ag_ancient_psi_ship_killed_debuff_2" days = 360 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
			# }
		# }
		# 1 = {
			# modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			# if = {
				# limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value != -1 } }
				# add_modifier = { modifier = "ag_ancient_psi_ship_killed_debuff_2" days = -1 multiplier = value:ag_anti_penetration_factor|ag_target|armor| }
			# }
		# }
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_5 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_5 days = 180 }
		}
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_6 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_6 days = 180 }
		}
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_7 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_7 days = 180 }
		}
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_8 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_8 days = 180 }
		}
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_9 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_9 days = 180 }
		}
		9 = { add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_10 days = 30 } }
		1 = {
			modifier = { factor = 0 OR = { ag_is_ancient_ship = yes ag_is_special_ship = yes ag_is_ancient_ship_unlocked = yes } }
			add_modifier = { modifier = ag_ancient_psi_ship_killed_debuff_10 days = 180 }
		}
	}
	reroll_random = yes
}

ag_mod_ship_modifier_fix_up_effect = {
	optimize_memory
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_damage_mult value < @ag_ship_shield_damage_mult_min } NOT = { has_ship_flag = ag_ship_shield_damage_mult_locked } }
		add_modifier = { modifier = ag_ship_shield_damage_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_shield_damage_mult| days = -1 }z
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_damage_mult value < @ag_ship_armor_damage_mult_min } NOT = { has_ship_flag = ag_ship_armor_damage_mult_locked } }
		add_modifier = { modifier = ag_ship_armor_damage_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_armor_damage_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_hull_damage_mult value < @ag_ship_hull_damage_mult_min } NOT = { has_ship_flag = ag_ship_hull_damage_mult_locked } }
		add_modifier = { modifier = ag_ship_hull_damage_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_hull_damage_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_weapon_range_mult value < @ag_ship_weapon_range_mult_min } NOT = { has_ship_flag = ag_ship_weapon_range_mult_locked } }
		add_modifier = { modifier = ag_ship_weapon_range_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_weapon_range_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_penetration_mult value < 0 } NOT = { has_ship_flag = ag_ship_penetration_mult_locked } }
		add_modifier = { modifier = ag_ship_shield_penetration_mult_buff multiplier = modifier:ship_shield_penetration_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_penetration_mult value < 0 } NOT = { has_ship_flag = ag_ship_penetration_mult_locked } }
		add_modifier = { modifier = ag_ship_armor_penetration_mult_buff multiplier = modifier:ship_armor_penetration_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_weapon_damage value < @ag_ship_weapon_damage_min } NOT = { has_ship_flag = ag_ship_weapon_damage_locked } }
		add_modifier = { modifier = ag_ship_weapon_damage_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_weapon_damage| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_fire_rate_mult value < @ag_ship_fire_rate_mult_min } NOT = { has_ship_flag = ag_ship_fire_rate_mult_locked } }
		add_modifier = { modifier = ag_ship_fire_rate_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_fire_rate_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_tracking_mult value < @ag_ship_tracking_mult_min } NOT = { has_ship_flag = ag_ship_tracking_mult_locked } }
		add_modifier = { modifier = ag_ship_tracking_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_tracking_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_accuracy_mult value < @ag_ship_accuracy_mult_min } NOT = { has_ship_flag = ag_ship_accuracy_mult_locked } }
		add_modifier = { modifier = ag_ship_accuracy_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_accuracy_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_tracking_add value < @ag_ship_tracking_add_min } NOT = { has_ship_flag = ag_ship_tracking_add_locked } }
		add_modifier = { modifier = ag_ship_tracking_add_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_tracking_add| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_accuracy_add value < @ag_ship_accuracy_add_min } NOT = { has_ship_flag = ag_ship_accuracy_add_locked } }
		add_modifier = { modifier = ag_ship_accuracy_add_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_accuracy_add| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_evasion_add value < @ag_ship_evasion_add_min } NOT = { has_ship_flag = ag_ship_evasion_add_locked } }
		add_modifier = { modifier = ag_ship_evasion_add_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_evasion_add| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = force_disparity_fire_rate_mult value < @ag_force_disparity_fire_rate_mult_min } NOT = { has_ship_flag = ag_force_disparity_fire_rate_mult_locked } }
		add_modifier = { modifier = ag_force_disparity_fire_rate_mult_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|force_disparity_fire_rate_mult| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_hardening_add value < @ag_ship_shield_hardening_add_min } NOT = { has_ship_flag = ag_ship_shield_hardening_add_locked } }
		add_modifier = { modifier = ag_ship_shield_hardening_add_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_shield_hardening_add| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_hardening_add value < @ag_ship_armor_hardening_add_min } NOT = { has_ship_flag = ag_ship_armor_hardening_add_locked } }
		add_modifier = { modifier = ag_ship_armor_hardening_add_buff multiplier = value:ag_modifier_fixup_multiplier|ag_modifier|ship_armor_hardening_add| days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_shield_regen_add_perc_locked } }
		add_modifier = { modifier = ag_ship_shield_regen_add_perc_buff multiplier = modifier:ship_shield_regen_add_perc days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_shield_regen_add_static_locked } }
		add_modifier = { modifier = ag_ship_shield_regen_add_static_buff multiplier = modifier:ship_shield_regen_add_static days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_armor_regen_add_perc_locked } }
		add_modifier = { modifier = ag_ship_armor_regen_add_perc_buff multiplier = modifier:ship_armor_regen_add_perc days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_armor_regen_add_static_locked } }
		add_modifier = { modifier = ag_ship_armor_regen_add_static_buff multiplier = modifier:ship_armor_regen_add_static days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_hull_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_hull_regen_add_perc_locked } }
		add_modifier = { modifier = ag_ship_hull_regen_add_perc_buff multiplier = modifier:ship_hull_regen_add_perc days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_hull_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_hull_regen_add_static_locked } }
		add_modifier = { modifier = ag_ship_hull_regen_add_static_buff multiplier = modifier:ship_hull_regen_add_static days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_shield_reduction value > 0 } NOT = { has_ship_flag = ag_ship_shield_reduction_locked } }
		add_modifier = { modifier = ag_ship_shield_reduction_buff multiplier = modifier:ship_shield_reduction days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = ship_armor_reduction value > 0 } NOT = { has_ship_flag = ag_ship_armor_reduction_locked } }
		add_modifier = { modifier = ag_ship_armor_reduction_buff multiplier = modifier:ship_armor_reduction days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_energy_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_energy_weapon_damage_mult_buff multiplier = modifier:weapon_type_energy_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_energy_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_energy_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_energy_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_energy_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_energy_speed_mult_buff multiplier = modifier:weapon_type_energy_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_gravity_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_gravity_weapon_damage_mult_buff multiplier = modifier:weapon_type_gravity_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_gravity_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_gravity_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_gravity_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_gravity_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_gravity_speed_mult_buff multiplier = modifier:weapon_type_gravity_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_psionic_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_psionic_weapon_damage_mult_buff multiplier = modifier:weapon_type_psionic_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_psionic_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_psionic_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_psionic_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_psionic_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_psionic_speed_mult_buff multiplier = modifier:weapon_type_psionic_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_anti_psionic_weapon_damage_mult_buff multiplier = modifier:weapon_type_anti_psionic_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_anti_psionic_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_anti_psionic_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_anti_psionic_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_anti_psionic_speed_mult_buff multiplier = modifier:weapon_type_anti_psionic_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_ancient_primary_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_ancient_primary_weapon_damage_mult_buff multiplier = modifier:weapon_type_ancient_primary_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_ancient_primary_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_ancient_primary_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_ancient_primary_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_ancient_primary_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_ancient_primary_speed_mult_buff multiplier = modifier:weapon_type_ancient_primary_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_primary_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_primary_weapon_damage_mult_buff multiplier = modifier:weapon_type_titan_primary_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_primary_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_primary_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_titan_primary_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_primary_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_primary_speed_mult_buff multiplier = modifier:weapon_type_titan_primary_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_secondary_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_secondary_weapon_damage_mult_buff multiplier = modifier:weapon_type_titan_secondary_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_secondary_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_secondary_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_titan_secondary_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_titan_secondary_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_titan_secondary_speed_mult_buff multiplier = modifier:weapon_type_titan_secondary_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_weapon_damage_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_speed_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_alt_weapon_damage_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_alt_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_primary_alt_speed_mult_buff multiplier = modifier:weapon_type_zeta_crisis_primary_alt_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_weapon_damage_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_secondary_weapon_damage_mult_buff multiplier = modifier:weapon_type_zeta_crisis_secondary_weapon_damage_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult_buff multiplier = modifier:weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
	if = {
		limit = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_speed_mult value < 0 } }
		add_modifier = { modifier = ag_weapon_type_zeta_crisis_secondary_speed_mult_buff multiplier = modifier:weapon_type_zeta_crisis_secondary_speed_mult days = -1 }
		prev = { set_fleet_flag = ag_mod_ship_modifier_effect_fired }
	}
}

ag_mod_fleet_modifier_cleans_up_effect = {
	optimize_memory
	if = { limit = { is_variable_set = ag_fleet_combat_days } clear_variable = ag_fleet_combat_days }
	remove_fleet_flag = ag_ancient_ship_modifier_clear_activated
	every_owned_ship = {
		while = { limit = { has_modifier = "ag_ship_shield_damage_mult_buff" } remove_modifier = "ag_ship_shield_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_damage_mult_buff" } remove_modifier = "ag_ship_armor_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_hull_damage_mult_buff" } remove_modifier = "ag_ship_hull_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_weapon_range_mult_buff" } remove_modifier = "ag_ship_weapon_range_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_shield_penetration_mult_buff" } remove_modifier = "ag_ship_shield_penetration_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_penetration_mult_buff" } remove_modifier = "ag_ship_armor_penetration_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_weapon_damage_buff" } remove_modifier = "ag_ship_weapon_damage_buff" }
		while = { limit = { has_modifier = "ag_ship_fire_rate_mult_buff" } remove_modifier = "ag_ship_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_tracking_mult_buff" } remove_modifier = "ag_ship_tracking_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_accuracy_mult_buff" } remove_modifier = "ag_ship_accuracy_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_tracking_add_buff" } remove_modifier = "ag_ship_tracking_add_buff" }
		while = { limit = { has_modifier = "ag_ship_accuracy_add_buff" } remove_modifier = "ag_ship_accuracy_add_buff" }
		while = { limit = { has_modifier = "ag_ship_evasion_add_buff" } remove_modifier = "ag_ship_evasion_add_buff" }
		while = { limit = { has_modifier = "ag_force_disparity_fire_rate_mult_buff" } remove_modifier = "ag_force_disparity_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_ship_shield_hardening_add_buff" } remove_modifier = "ag_ship_shield_hardening_add_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_hardening_add_buff" } remove_modifier = "ag_ship_armor_hardening_add_buff" }
		while = { limit = { has_modifier = "ag_ship_shield_regen_add_perc_buff" } remove_modifier = "ag_ship_shield_regen_add_perc_buff" }
		while = { limit = { has_modifier = "ag_ship_shield_regen_add_static_buff" } remove_modifier = "ag_ship_shield_regen_add_static_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_regen_add_perc_buff" } remove_modifier = "ag_ship_armor_regen_add_perc_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_regen_add_static_buff" } remove_modifier = "ag_ship_armor_regen_add_static_buff" }
		while = { limit = { has_modifier = "ag_ship_hull_regen_add_perc_buff" } remove_modifier = "ag_ship_hull_regen_add_perc_buff" }
		while = { limit = { has_modifier = "ag_ship_hull_regen_add_static_buff" } remove_modifier = "ag_ship_hull_regen_add_static_buff" }
		while = { limit = { has_modifier = "ag_ship_shield_reduction_buff" } remove_modifier = "ag_ship_shield_reduction_buff" }
		while = { limit = { has_modifier = "ag_ship_armor_reduction_buff" } remove_modifier = "ag_ship_armor_reduction_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_energy_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_energy_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_energy_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_energy_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_energy_speed_mult_buff" } remove_modifier = "ag_weapon_type_energy_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_gravity_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_gravity_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_gravity_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_gravity_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_gravity_speed_mult_buff" } remove_modifier = "ag_weapon_type_gravity_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_psionic_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_psionic_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_psionic_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_psionic_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_psionic_speed_mult_buff" } remove_modifier = "ag_weapon_type_psionic_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_anti_psionic_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_anti_psionic_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_anti_psionic_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_anti_psionic_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_anti_psionic_speed_mult_buff" } remove_modifier = "ag_weapon_type_anti_psionic_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_ancient_primary_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_ancient_primary_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_ancient_primary_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_ancient_primary_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_ancient_primary_speed_mult_buff" } remove_modifier = "ag_weapon_type_ancient_primary_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_primary_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_titan_primary_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_primary_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_titan_primary_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_primary_speed_mult_buff" } remove_modifier = "ag_weapon_type_titan_primary_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_secondary_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_titan_secondary_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_secondary_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_titan_secondary_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_titan_secondary_speed_mult_buff" } remove_modifier = "ag_weapon_type_titan_secondary_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_speed_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_alt_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_alt_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_primary_alt_speed_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_primary_alt_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_secondary_weapon_damage_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_secondary_weapon_damage_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult_buff" }
		while = { limit = { has_modifier = "ag_weapon_type_zeta_crisis_secondary_speed_mult_buff" } remove_modifier = "ag_weapon_type_zeta_crisis_secondary_speed_mult_buff" }
		while = { limit = { has_modifier = "ag_ancient_ship_penetration_modifier" } remove_modifier = "ag_ancient_ship_penetration_modifier" }
		while = { limit = { has_modifier = "ag_weapon_instant_kill_buff" } remove_modifier = "ag_weapon_instant_kill_buff" }
		while = { limit = { has_modifier = "ag_weapon_instant_kill_buff_alt" } remove_modifier = "ag_weapon_instant_kill_buff_alt" }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_1" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_2" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_anti_jumpdrive_aura_3" } remove_modifier = "ag_ancient_anti_jumpdrive_aura_3" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_1" } remove_modifier = "ag_ancient_weapon_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_2" } remove_modifier = "ag_ancient_weapon_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3" } remove_modifier = "ag_ancient_weapon_debuff_aura_3" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4" } remove_modifier = "ag_ancient_weapon_debuff_aura_4" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5" } remove_modifier = "ag_ancient_weapon_debuff_aura_5" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_3_alt" } remove_modifier = "ag_ancient_weapon_debuff_aura_3_alt" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_4_alt" } remove_modifier = "ag_ancient_weapon_debuff_aura_4_alt" }
		while = { limit = { has_modifier = "ag_ancient_weapon_debuff_aura_5_alt" } remove_modifier = "ag_ancient_weapon_debuff_aura_5_alt" }
		while = { limit = { has_modifier = "ag_ancient_anti_penetration_aura_1" } remove_modifier = "ag_ancient_anti_penetration_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_anti_penetration_aura_2" } remove_modifier = "ag_ancient_anti_penetration_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_anti_penetration_aura_1_alt" } remove_modifier = "ag_ancient_anti_penetration_aura_1_alt" }
		while = { limit = { has_modifier = "ag_ancient_anti_penetration_aura_2_alt" } remove_modifier = "ag_ancient_anti_penetration_aura_2_alt" }
		while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_1" } remove_modifier = "ag_ancient_ship_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_2" } remove_modifier = "ag_ancient_ship_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_ship_debuff_aura_3" } remove_modifier = "ag_ancient_ship_debuff_aura_3" }
		while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_1" } remove_modifier = "ag_ancient_beta_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_1_alt" } remove_modifier = "ag_ancient_beta_debuff_aura_1_alt" }
		while = { limit = { has_modifier = "ag_ancient_beta_debuff_aura_2" } remove_modifier = "ag_ancient_beta_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_1" } remove_modifier = "ag_ancient_gamma_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_gamma_debuff_aura_2" } remove_modifier = "ag_ancient_gamma_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_1" } remove_modifier = "ag_ancient_epsilon_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_epsilon_debuff_aura_2" } remove_modifier = "ag_ancient_epsilon_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_1" } remove_modifier = "ag_ancient_zeta_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_zeta_debuff_aura_2" } remove_modifier = "ag_ancient_zeta_debuff_aura_2" }
		while = { limit = { has_modifier = "ag_ancient_eta_debuff_aura" } remove_modifier = "ag_ancient_eta_debuff_aura" }
		while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_1" } remove_modifier = "ag_ancient_wanderer_debuff_aura_1" }
		while = { limit = { has_modifier = "ag_ancient_wanderer_debuff_aura_2" } remove_modifier = "ag_ancient_wanderer_debuff_aura_2" }
		if = { limit = { has_modifier = "ag_titan_primary_weapon_power" } remove_modifier = "ag_titan_primary_weapon_power" }
		if = { limit = { has_modifier = "ag_zeta_crisis_primary_weapon_power" } remove_modifier = "ag_zeta_crisis_primary_weapon_power" }
		if = { limit = { has_ship_flag = ag_ship_penetration_mult_locked } remove_ship_flag = ag_ship_penetration_mult_locked }
		if = { limit = { has_ship_flag = ag_mod_ship_modifier_fix_up_target_temp } remove_ship_flag = ag_mod_ship_modifier_fix_up_target_temp }
		if = { limit = { has_ship_flag = ag_ship_pentartion_mult_cooldown } remove_ship_flag = ag_ship_pentartion_mult_cooldown }
		if = { limit = { is_variable_set = ag_num_ship_killed_targets } clear_variable = ag_num_ship_killed_targets }
		if = { limit = { is_variable_set = ag_ancient_anti_jumpdrive_aura_priority } clear_variable = ag_ancient_anti_jumpdrive_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_weapon_debuff_aura_priority } clear_variable = ag_ancient_weapon_debuff_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_anti_penetration_aura_priority } clear_variable = ag_ancient_anti_penetration_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_damage_aura_priority } clear_variable = ag_ancient_damage_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_ship_debuff_aura_priority } clear_variable = ag_ancient_ship_debuff_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_gamma_debuff_aura_priority } clear_variable = ag_ancient_gamma_debuff_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_epsilon_debuff_aura_priority } clear_variable = ag_ancient_epsilon_debuff_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_zeta_debuff_aura_priority } clear_variable = ag_ancient_zeta_debuff_aura_priority }
		if = { limit = { is_variable_set = ag_ancient_wanderer_debuff_aura_priority } clear_variable = ag_ancient_wanderer_debuff_aura_priority }
	}
}

ag_add_randomize_repeatable_factor = {
	optimize_memory
	random_list = {
		10 = { change_variable = { which = $ag_variable$ value = 1.00 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.05 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.10 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.15 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.20 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.25 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.30 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.35 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.40 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.45 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.50 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.55 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.60 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.65 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.70 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.75 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.80 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.85 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.90 } }
		10 = { change_variable = { which = $ag_variable$ value = 1.95 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.00 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.05 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.10 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.15 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.20 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.25 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.30 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.35 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.40 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.45 } }
		10 = { change_variable = { which = $ag_variable$ value = 2.50 } }
	}
	reroll_random = yes
}


ag_ship_action_button_effect = {
	optimize_memory
	if = {
		limit = { ag_any_ship_has_action = yes }
		custom_tooltip = "ag_action_button_title_desc"
		hidden_effect = { fleet_event = { id = ag_ship_action.1 } }
	}
	else = { custom_tooltip = "ag_action_empty" }
}

ag_reduce_hp = {
	optimize_memory
	if = { limit = { has_hp > $ag_value$ } reduce_hp = $ag_value$ }
	else = { reduce_hp = value:ag_subtract_trigger|ag_which|has_hp|ag_value|1| }
}
ag_reduce_hp_percent = {
	optimize_memory
	export_trigger_value_to_variable = { trigger = has_hp variable = ag_reduce_hp_var }
	multiply_variable = { which = ag_reduce_hp_var value = $ag_value$ }
	multiply_variable = { which = ag_reduce_hp_var value = 0.01 }
	if = { limit = { has_hp > ag_reduce_hp_var } reduce_hp = ag_reduce_hp_var }
	else = { reduce_hp = value:ag_subtract_trigger|ag_which|has_hp|ag_value|1| }
	clear_variable = ag_reduce_hp_var
}

ag_set_ship_hull_locked = {
	optimize_memory
	if = {
		limit = { NOT = { has_ship_flag = ag_ship_hull_locked } }
		set_timed_ship_flag = { flag = ag_ship_hull_locked days = $ag_days$ }
		set_variable = { which = ag_ship_hull_value value = $ag_value$ }
		if = { limit = { always = $ag_use_cap|yes$ } fleet = { change_variable = { which = ag_num_ship_hull_locked_ships value = 1 } } }
		else = { set_ship_flag = ag_ship_hull_locked_uncapped }
		ship_event = { id = ag_ancient.42 }
	}
}
ag_clear_ship_hull_locked = {
	optimize_memory
	remove_ship_flag = ag_ship_hull_locked
	clear_variable = ag_ship_locked_value
	if = {
		limit = { NOT = { has_ship_flag = ag_ship_hull_locked_uncapped } }
		fleet = {
			subtract_variable = { which = ag_num_ship_hull_locked_ships value = 1 }
			if = {
				limit = { check_variable = { which = ag_num_ship_hull_locked_ships value <= 0 } }
				clear_variable = ag_num_ship_hull_locked_ships
			}
		}
	}
}

ag_set_ship_hull_locked_percent = {
	optimize_memory
	if = {
		limit = { NOT = { has_ship_flag = ag_ship_hull_locked_percent } }
		set_timed_ship_flag = { flag = ag_ship_hull_locked_percent days = $ag_days$ }
		set_variable = { which = ag_ship_hull_locked_percent_value value = $ag_value$ }
		if = { limit = { always = $ag_use_cap|yes$ } fleet = { change_variable = { which = ag_num_ship_hull_locked_percent_ships value = 1 } } }
		else = { set_ship_flag = ag_ship_hull_locked_percent_uncapped }
		ship_event = { id = ag_ancient.43 }
	}
}
ag_clear_ship_hull_locked_percent = {
	optimize_memory
	remove_ship_flag = ag_ship_hull_locked_percent
	clear_variable = ag_ship_hull_locked_percent_value
	if = {
		limit = { NOT = { has_ship_flag = ag_ship_hull_locked_percent_uncapped } }
		fleet = {
			subtract_variable = { which = ag_num_ship_hull_locked_percent_ships value = 1 }
			if = {
				limit = { check_variable = { which = ag_num_ship_hull_locked_percent_ships value <= 0 } }
				clear_variable = ag_num_ship_hull_locked_percent_ships
			}
		}
	}
}

ag_kill_leader = {
	optimize_memory
	switch = {
		trigger = leader_class
		governor = { kill_leader = { type = governor show_notification = $ag_notification|no$ } }
		scientist = { kill_leader = { type = scientist show_notification = $ag_notification|no$ } }
		admiral = { kill_leader = { type = admiral show_notification = $ag_notification|no$ } }
		general = { kill_leader = { type = general show_notification = $ag_notification|no$ } }
		envoy = { kill_leader = { type = envoy show_notification = $ag_notification|no$ } }
	}
}

ag_set_ship_invincible = {
	optimize_memory
	ag_set_disable_at_health = { ag_disable_type = invincible }
	[[ag_days] set_variable = { which = ag_ship_invincible_debug_var value = $ag_days$ } ship_event = { id = ag_ancient.2005 days = $ag_days$ } ]
}
ag_ship_invincible_debug_effect = {
	optimize_memory
	if = {
		limit = { check_variable = { which = ag_ship_invincible_debug_var value = 8 } }
		prev = { ship_event = { id = ag_ancient.2005 days = 8 } }
	}
	else_if = {
		limit = { check_variable = { which = ag_ship_invincible_debug_var value > 8 } }
		if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value = 12 } }
			prev = { ship_event = { id = ag_ancient.2005 days = 4 } }
		}
		else_if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value > 12 } }
			if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value = 14 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 14 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value > 14 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 15 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value < 14 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 13 } }
			}
		}
		else_if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value < 12 } }
			if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value = 10 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 10 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value > 10 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 11 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value < 10 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 9 } }
			}
		}
	}
	else_if = {
		limit = { check_variable = { which = ag_ship_invincible_debug_var value < 8 } }
		if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value = 4 } }
			prev = { ship_event = { id = ag_ancient.2005 days = 4 } }
		}
		else_if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value > 4 } }
			if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value = 6 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 6 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value > 6 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 7 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value < 6 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 5 } }
			}
		}
		else_if = {
			limit = { check_variable = { which = ag_ship_invincible_debug_var value < 4 } }
			if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value = 2 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 2 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value > 2 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 3 } }
			}
			else_if = {
				limit = { check_variable = { which = ag_ship_invincible_debug_var value < 2 } }
				prev = { ship_event = { id = ag_ancient.2005 days = 1 } }
			}
		}
	}
}

ag_auto_upgrade_megastructure = {
	optimize_memory
	owner = {
		[[ag_resource_1]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_1$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_cost_$ag_resource_1$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_1$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_1$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_2]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_2$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_cost_$ag_resource_2$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_2$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_2$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_3]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_3$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_cost_$ag_resource_3$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_3$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_3$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_4]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_4$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_cost_$ag_resource_4$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_4$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_4$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_5]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_5$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_cost_$ag_resource_5$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_5$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_5$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_extra_1]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_extra_1$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_extra_cost_$ag_resource_extra_1$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_extra_1$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_extra_1$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_extra_2]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_extra_2$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_extra_cost_$ag_resource_extra_2$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_extra_2$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_extra_2$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_extra_3]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_extra_3$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_extra_cost_$ag_resource_extra_3$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_extra_3$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_extra_3$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_extra_4]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_extra_4$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_extra_cost_$ag_resource_extra_4$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_extra_4$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_extra_4$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
		[[ag_resource_extra_5]
			export_modifier_to_variable = { modifier = megastructures_cost_mult variable = ag_auto_upgrade_megastructure_temp }
			export_modifier_to_variable = { modifier = megastructures_$ag_resource_extra_5$_cost_mult variable = ag_auto_upgrade_megastructure_temp_1 }
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = ag_auto_upgrade_megastructure_temp_1 }
			clear_variable = ag_auto_upgrade_megastructure_temp_1
			change_variable = { which = ag_auto_upgrade_megastructure_temp value = 1 }
			multiply_variable = { which = ag_auto_upgrade_megastructure_temp value = @$ag_source_type$_extra_cost_$ag_resource_extra_5$ }
			if = { limit = { check_variable = { which = ag_auto_upgrade_megastructure_temp value < 0 } } set_variable = { which = ag_auto_upgrade_megastructure_temp value = 0 } }
			if = {
				limit = { resource_stockpile_compare = { resource = $ag_resource_extra_5$ value > 1 mult = ag_auto_upgrade_megastructure_temp } }
				add_resource = { $ag_resource_extra_5$ = -1 mult = ag_auto_upgrade_megastructure_temp }
			}
			else = { prev = { set_megastructure_flag = ag_auto_upgrade_megastructure_failed } }
			clear_variable = ag_auto_upgrade_megastructure_temp
		]
	}
	if = { limit = { NOT = { has_megastructure_flag = ag_auto_upgrade_megastructure_failed } } upgrade_megastructure_to = $ag_target_type$ }
	else = {
		remove_megastructure_flag = ag_auto_upgrade_megastructure_failed
		ag_auto_upgrade_megastructure_failed_effect = yes
	}
}
ag_auto_upgrade_megastructure_failed_effect = {
	optimize_memory
	remove_megastructure_flag = ag_auto_upgrade_megastructure
	owner = {
		create_message = {
			type = "message_ag_auto_upgrade_megastructure_failed"
			localization = "message_ag_auto_upgrade_megastructure_failed_desc"
			days = 30
			target = root.from
			variable = {
				type = name
				localization = "ag_megastructure_system"
				scope = root.from.solar_system
			}
			variable = {
				type = name
				localization = "ag_megastructure"
				scope = root.from
			}
		}
	}
}
ag_set_auto_upgrade_megastructure = {
	optimize_memory
	hidden_effect = {
		fromfromfrom = { set_megastructure_flag = ag_auto_upgrade_megastructure }
		from = { system_event = { id = ag_ancient.251 days = 1 scopes = { from = root.fromfromfrom } } }
	}
}

ag_set_leader_skill_variable = {
	optimize_memory
	set_variable = { which = ag_leader_var_temp value = trigger:has_skill }
	if = {
		limit = { check_variable = { which = ag_leader_var_temp value > 10 } }
		subtract_variable = { which = ag_leader_var_temp value = 10 }
		multiply_variable = { which = ag_leader_var_temp value = 0.05 }
		change_variable = { which = ag_leader_var_temp value = 10 }
	}
	ag_randomize_variable = { ag_which = ag_leader_var_temp ag_scale = 10 }
	[[ag_scale]multiply_variable = { which = ag_leader_var_temp value = $ag_scale$ }]
	prev = { set_variable = { which = $ag_which$ value = prev.ag_leader_var_temp } }
	clear_variable = ag_leader_var_temp
}
ag_randomize_variable = {
	optimize_memory
	[[ag_scale]divide_variable = { which = $ag_which$ value = $ag_scale$ }]
	random_list = {
		10 = { }
		10 = { change_variable = { which = $ag_which$ value = 0.05 } }
		10 = { change_variable = { which = $ag_which$ value = 0.04 } }
		10 = { change_variable = { which = $ag_which$ value = 0.03 } }
		10 = { change_variable = { which = $ag_which$ value = 0.02 } }
		10 = { change_variable = { which = $ag_which$ value = 0.01 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.05 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.04 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.03 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.02 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.01 } }
	}
	reroll_random = yes
	random_list = {
		10 = { }
		10 = { change_variable = { which = $ag_which$ value = 0.005 } }
		10 = { change_variable = { which = $ag_which$ value = 0.004 } }
		10 = { change_variable = { which = $ag_which$ value = 0.003 } }
		10 = { change_variable = { which = $ag_which$ value = 0.002 } }
		10 = { change_variable = { which = $ag_which$ value = 0.001 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.005 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.004 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.003 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.002 } }
		10 = { subtract_variable = { which = $ag_which$ value = 0.001 } }
	}
	reroll_random = yes
	[[ag_scale]multiply_variable = { which = $ag_which$ value = $ag_scale$ }]
}

# For unknown reason can't export hyperlane distance, only get euclidean distance.
ag_export_hyperlane_distance_25 = {
	optimize_memory
	closest_system = {
		use_bypasses = yes
		limit = { exists = space_owner space_owner = { is_same_value = root } }
		prev = {
			set_variable = { which = $ag_variable$ value = 0 }
			if = { limit = { distance = { type = hyperlane source = prev min_jumps = 1 max_jumps = 1 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 1 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 2 max_jumps = 2 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 2 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 3 max_jumps = 3 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 3 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 4 max_jumps = 4 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 4 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 5 max_jumps = 5 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 5 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 6 max_jumps = 6 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 6 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 7 max_jumps = 7 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 7 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 8 max_jumps = 8 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 8 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 9 max_jumps = 9 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 9 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 10 max_jumps = 10 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 10 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 11 max_jumps = 11 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 11 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 12 max_jumps = 12 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 12 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 13 max_jumps = 13 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 13 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 14 max_jumps = 14 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 14 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 15 max_jumps = 15 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 15 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 16 max_jumps = 16 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 16 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 17 max_jumps = 17 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 17 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 18 max_jumps = 18 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 18 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 19 max_jumps = 19 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 19 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 20 max_jumps = 20 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 20 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 21 max_jumps = 21 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 21 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 22 max_jumps = 22 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 22 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 23 max_jumps = 23 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 23 } }
			else_if = { limit = { distance = { type = hyperlane source = prev min_jumps = 24 max_jumps = 24 bypass_empire = root } } change_variable = { which = $ag_variable$ value = 24 } }
			else_if = { limit = { always = yes } change_variable = { which = $ag_variable$ value = 25 } }
		}
	}
}

ag_add_ship_design = {
	optimize_memory
	if = {
		limit = { NOT = { exists = event_target:$ag_design$_design } }
		create_ship_design = { design = "NAME_[[ag_design]$ag_design$]" }
		last_created_design = { save_global_event_target_as = $ag_design$_design }
	}
	if = {
		limit = { NOT = { has_country_flag = $ag_design$_design } }
		add_ship_design = event_target:$ag_design$_design
		set_country_flag = $ag_design$_design
	}
}
ag_remove_ship_design = {
	optimize_memory
	if = {
		limit = { NOT = { exists = event_target:$ag_design$_design } }
		create_ship_design = { design = "NAME_[[ag_design]$ag_design$]" }
		last_created_design = { save_global_event_target_as = $ag_design$_design }
	}
	if = {
		limit = { has_country_flag = $ag_design$_design }
		remove_ship_design = event_target:$ag_design$_design
		remove_country_flag = $ag_design$_design
	}
}

ag_delayed_destroy_ship = {
	optimize_memory
	if = {
		limit = { always = $ag_fire_on_action|no$ }
		ship_event = {
			id = ag_ancient.3006
			days = $ag_days$
			random = $ag_random|0$
			[[ag_who]scopes = { from = $ag_who$ }]
		}
	}
	else = { ship_event = { id = ag_ancient.3001 days = $ag_days$ random = $ag_random|0$ } }
}
ag_delayed_delete_ship = {
	optimize_memory
	ship_event = { id = ag_ancient.3002 days = $ag_days$ random = $ag_random|0$ }
}
ag_delayed_destroy_fleet = {
	optimize_memory
	fleet_event = { id = ag_ancient.3003 days = $ag_days$ random = $ag_random|0$ }
}
ag_delayed_delete_fleet = {
	optimize_memory
	fleet_event = { id = ag_ancient.3004 days = $ag_days$ random = $ag_random|0$ }
}
ag_remove_planet = {
	optimize_memory
	if = { limit = { is_star = yes } change_pc = pc_ag_void_star }
	else = { change_pc = pc_ag_void_planet }
	planet_event = { id = ag_ancient.3005 days = 1 }
}

ag_give_psionic_theory = {
	optimize_memory
	if = {
		limit = { NOR = { has_technology = "tech_psionic_theory" has_tech_option = "tech_psionic_theory" } }
		tooltip = { give_technology = { tech = tech_psionic_theory message = yes } }
		hidden_effect = {
			if = {
				limit = { OR = {
					NOT = { has_ethic = ethic_gestalt_consciousness }
					is_active_resolution = resolution_galacticstudies_extradimensional_experimentation
					has_relic = r_zro_crystal
				} }
				give_technology = { tech = tech_psionic_theory message = yes }
			}
			else = {
				add_relic = r_zro_crystal
				give_technology = { tech = tech_psionic_theory message = yes }
				remove_relic = r_zro_crystal
			}
		}
	}
}
ag_give_technology = {
	optimize_memory
	tooltip = { give_technology = { tech = $ag_tech$ message = yes } }
	hidden_effect = { if = {
		limit = { NOT = { has_technology = $ag_tech$ } }
		set_country_flag = $ag_tech$
		give_technology = { tech = $ag_tech$ message = yes }
		remove_country_flag = $ag_tech$
	} }
}
ag_add_research_option = {
	optimize_memory
	tooltip = { add_research_option = $ag_tech$ add_tech_progress = { tech = $ag_tech$ progress = 0.05 } }
	hidden_effect = { if = {
		limit = { NOR = {
			has_tech_option = $ag_tech$
			has_technology = $ag_tech$
		} }
		set_country_flag = $ag_tech$
		add_research_option = $ag_tech$
		add_tech_progress = { tech = $ag_tech$ progress = 0.05 }
	} }
}

ag_add_monthly_research = {
	optimize_memory
	add_monthly_resource_mult = { resource = $ag_area$ value = @tier$ag_tier|1$researchreward min = @tier$ag_tier|1$researchmin max = @tier$ag_tier|1$researchmax }
}
ag_add_monthly_unity = {
	optimize_memory
	add_monthly_resource_mult = { resource = unity value = @tier$ag_tier|1$unityreward min = @tier$ag_tier|1$unitymin max = @tier$ag_tier|1$unitymax }
}

ag_add_extra_hyperlane = {
	optimize_memory
	while = {
		count = $ag_num$
		if = {
			limit = {
				any_system = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 10 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
			}
			random_system = {
				limit = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 10 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
				add_hyperlane = { from = this to = prev }
			}
		}
		else_if = {
			limit = {
				any_system = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 15 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
			}
			random_system = {
				limit = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 15 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
				add_hyperlane = { from = this to = prev }
			}
		}
		else_if = {
			limit = {
				any_system = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 25 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
			}
			random_system = {
				limit = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 25 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
				add_hyperlane = { from = this to = prev }
			}
		}
		else_if = {
			limit = {
				any_system = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 40 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
			}
			random_system = {
				limit = {
					distance = { source = prev type = euclidean min_distance >= 0 max_distance <= 40 }
					NOR = { is_same_value = prev has_hyperlane_to = prev }
				}
				add_hyperlane = { from = this to = prev }
			}
		}
	}
}

ag_destroy_orbital_ring = {
	optimize_memory
	if = {
		limit = { exists = orbital_defence }
		destroy_fleet = orbital_defence
		if = {
			limit = { always = $ag_spawn_debris|no$ }
			planet = {
				set_planet_flag = ruined_orbital_ring_planet
				remove_planet_flag = has_megastructure
				save_event_target_as = ruined_orbital_ring_planet
			}
			solar_system = {
				spawn_megastructure = {
					type = "orbital_ring_ruined"
					planet = event_target:ruined_orbital_ring_planet
					init_effect = {
						set_owner = prev.owner
						create_ambient_object = { type = "medium_debris_01_object" location = this }
						last_created_ambient_object = { set_location = { target = prev distance = 8 angle = 90 } }
						create_ambient_object = { type = "medium_debris_02_object" location = this }
						last_created_ambient_object = { set_location = { target = prev distance = 3 angle = 270 } }
					}
				}
			}
		}
	}
}

ag_auto_starbase_show_construction_failed_noti = {
	optimize_memory
	if = {
		limit = { is_scope_type = fleet NOT = { has_fleet_flag = ag_auto_starbase_construction_failed_noti } }
		set_timed_fleet_flag = { flag = ag_auto_starbase_construction_failed_noti days = 2 }
		create_message = {
			type = "message_ag_auto_starbase_construction_failed"
			localization = "message_ag_auto_starbase_construction_failed_desc"
			days = 20
			target = this
			variable = { type = name localization = "ag_starbase_system" scope = this }
		}
	}
	else_if = {
		limit = { is_scope_type = starbase NOT = { has_starbase_flag = ag_auto_starbase_construction_failed_noti } }
		set_timed_starbase_flag = { flag = ag_auto_starbase_construction_failed_noti days = 2 }
		create_message = {
			type = "message_ag_auto_starbase_construction_failed"
			localization = "message_ag_auto_starbase_construction_failed_desc"
			days = 20
			target = this
			variable = { type = name localization = "ag_starbase_system" scope = this }
		}
	}
}
ag_auto_starbase_dp_cap_check = {
	optimize_memory
	if = {
		limit = { has_country_flag = ag_auto_starbase_settings_starbase }
		set_variable = { which = ag_auto_starbase_dp_starbase_cap value = value:ag_auto_starbase_dp_cap|ag_is_starbase|yes| }
		if = {
			limit = { check_variable = { which = ag_auto_starbase_dp_starbase_use value > ag_auto_starbase_dp_starbase_cap } }
			while = {
				limit = { check_variable = { which = ag_auto_starbase_dp_starbase_use value > ag_auto_starbase_dp_starbase_cap } }
				if = {
					limit = { check_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon value > 0 } }
					subtract_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon value = 1 }
					subtract_variable = { which = ag_auto_starbase_dp_starbase_use value = 8 }
				}
				else = {
					subtract_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small value = 1 }
					subtract_variable = { which = ag_auto_starbase_dp_starbase_use value = 1 }
				}
			}
		}
	}
	else_if = {
		limit = { has_country_flag = ag_auto_starbase_settings_orbital_ring }
		set_variable = { which = ag_auto_starbase_dp_orbital_ring_cap value = value:ag_auto_starbase_dp_cap|ag_is_starbase|no| }
		if = {
			limit = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_use value > ag_auto_starbase_dp_orbital_ring_cap } }
			while = {
				limit = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_use value > ag_auto_starbase_dp_orbital_ring_cap } }
				if = {
					limit = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon value > 0 } }
					subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon value = 1 }
					subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_use value = 8 }
				}
				else = {
					subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small value = 1 }
					subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_use value = 1 }
				}
			}
		}
	}
}
ag_auto_starbase_set_slot = {
	optimize_memory
	if = {
		limit = { has_country_flag = ag_auto_starbase_settings_starbase }
		if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_1 } set_variable = { which = ag_auto_starbase_module_slot_1_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_2 } set_variable = { which = ag_auto_starbase_module_slot_2_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_3 } set_variable = { which = ag_auto_starbase_module_slot_3_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_4 } set_variable = { which = ag_auto_starbase_module_slot_4_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_5 } set_variable = { which = ag_auto_starbase_module_slot_5_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_6 } set_variable = { which = ag_auto_starbase_module_slot_6_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_1 } set_variable = { which = ag_auto_starbase_building_slot_1_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_2 } set_variable = { which = ag_auto_starbase_building_slot_2_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_3 } set_variable = { which = ag_auto_starbase_building_slot_3_starbase value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_4 } set_variable = { which = ag_auto_starbase_building_slot_4_starbase value = @ag_auto_starbase_$ag_component$_id } }
	}
	else = {
		if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_1 } set_variable = { which = ag_auto_starbase_module_slot_1_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_2 } set_variable = { which = ag_auto_starbase_module_slot_2_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_3 } set_variable = { which = ag_auto_starbase_module_slot_3_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_module_4 } set_variable = { which = ag_auto_starbase_module_slot_4_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_1 } set_variable = { which = ag_auto_starbase_building_slot_1_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		else_if = { limit = { has_country_flag = ag_auto_starbase_slot_selector_building_2 } set_variable = { which = ag_auto_starbase_building_slot_2_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
	}
	ag_auto_starbase_dp_cap_check = yes
}

ag_auto_starbase_set_starbase_module_1 = {
	optimize_memory
	if = {
		limit = { owner = { check_variable = { which = ag_auto_starbase_module_slot_$ag_slot_seq$_$ag_type$ value = @ag_auto_starbase_$ag_component$_id } } }
		if = {
			limit = { owner = {
				resource_stockpile_compare = { resource = energy value >= @ag_auto_starbase_$ag_component$_cost_energy }
				resource_stockpile_compare = { resource = minerals value >= @ag_auto_starbase_$ag_component$_cost_minerals }
				resource_stockpile_compare = { resource = food value >= @ag_auto_starbase_$ag_component$_cost_food }
				resource_stockpile_compare = { resource = influence value >= @ag_auto_starbase_$ag_component$_cost_influence }
				resource_stockpile_compare = { resource = unity value >= @ag_auto_starbase_$ag_component$_cost_unity }
				resource_stockpile_compare = { resource = consumer_goods value >= @ag_auto_starbase_$ag_component$_cost_consumer_goods }
				resource_stockpile_compare = { resource = alloys value >= @ag_auto_starbase_$ag_component$_cost_alloys }
				resource_stockpile_compare = { resource = volatile_motes value >= @ag_auto_starbase_$ag_component$_cost_volatile_motes }
				resource_stockpile_compare = { resource = exotic_gases value >= @ag_auto_starbase_$ag_component$_cost_exotic_gases }
				resource_stockpile_compare = { resource = rare_crystals value >= @ag_auto_starbase_$ag_component$_cost_rare_crystals }
				resource_stockpile_compare = { resource = sr_living_metal value >= @ag_auto_starbase_$ag_component$_cost_sr_living_metal }
				resource_stockpile_compare = { resource = sr_zro value >= @ag_auto_starbase_$ag_component$_cost_sr_zro }
				resource_stockpile_compare = { resource = sr_dark_matter value >= @ag_auto_starbase_$ag_component$_cost_sr_dark_matter }
				resource_stockpile_compare = { resource = nanites value >= @ag_auto_starbase_$ag_component$_cost_nanites }
				resource_stockpile_compare = { resource = minor_artifacts value >= @ag_auto_starbase_$ag_component$_cost_minor_artifacts }
			} }
			owner = { add_resource = {
				energy = @ag_auto_starbase_$ag_component$_cost_energy
				minerals = @ag_auto_starbase_$ag_component$_cost_minerals
				food = @ag_auto_starbase_$ag_component$_cost_food
				influence = @ag_auto_starbase_$ag_component$_cost_influence
				unity = @ag_auto_starbase_$ag_component$_cost_unity
				consumer_goods = @ag_auto_starbase_$ag_component$_cost_consumer_goods
				alloys = @ag_auto_starbase_$ag_component$_cost_alloys
				volatile_motes = @ag_auto_starbase_$ag_component$_cost_volatile_motes
				exotic_gases = @ag_auto_starbase_$ag_component$_cost_exotic_gases
				rare_crystals = @ag_auto_starbase_$ag_component$_cost_rare_crystals
				sr_living_metal = @ag_auto_starbase_$ag_component$_cost_sr_living_metal
				sr_zro = @ag_auto_starbase_$ag_component$_cost_sr_zro
				sr_dark_matter = @ag_auto_starbase_$ag_component$_cost_sr_dark_matter
				nanites = @ag_auto_starbase_$ag_component$_cost_nanites
				minor_artifacts = @ag_auto_starbase_$ag_component$_cost_minor_artifacts
				mult = -1
			} }
			set_starbase_module = { slot = $ag_slot_seq$ module = $ag_component$ }
		}
		else = { ag_auto_starbase_show_construction_failed_noti = yes }
	}
}

####################################################################################
# New auto starbase support module/building: (2.m) Register module in scripted effect.
####################################################################################
ag_auto_starbase_set_starbase_module = {
	optimize_memory
	# Add supported modules/buildings here if needed.
	if = {
		limit = { always = $is_starbase|yes$ }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = shipyard }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = anchorage }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = gun_battery }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = missile_battery }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = hangar_bay }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = solar_panel_network }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = trading_hub }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = detection_array }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = starbase ag_component = archaeo_rampart }
	}
	else = {
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_habitation }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_shipyard }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_anchorage }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_gun_battery }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_missile_battery }
		ag_auto_starbase_set_starbase_module_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = orbital_ring ag_component = orbital_ring_hangar_bay }
	}
}

ag_auto_starbase_set_starbase_building_1 = {
	optimize_memory
	if = {
		limit = { owner = { check_variable = { which = ag_auto_starbase_building_slot_$ag_slot_seq$_$ag_type$ value = @ag_auto_starbase_$ag_component$_id } } }
		if = {
			limit = { owner = {
				resource_stockpile_compare = { resource = energy value >= @ag_auto_starbase_$ag_component$_cost_energy }
				resource_stockpile_compare = { resource = minerals value >= @ag_auto_starbase_$ag_component$_cost_minerals }
				resource_stockpile_compare = { resource = food value >= @ag_auto_starbase_$ag_component$_cost_food }
				resource_stockpile_compare = { resource = influence value >= @ag_auto_starbase_$ag_component$_cost_influence }
				resource_stockpile_compare = { resource = unity value >= @ag_auto_starbase_$ag_component$_cost_unity }
				resource_stockpile_compare = { resource = consumer_goods value >= @ag_auto_starbase_$ag_component$_cost_consumer_goods }
				resource_stockpile_compare = { resource = alloys value >= @ag_auto_starbase_$ag_component$_cost_alloys }
				resource_stockpile_compare = { resource = volatile_motes value >= @ag_auto_starbase_$ag_component$_cost_volatile_motes }
				resource_stockpile_compare = { resource = exotic_gases value >= @ag_auto_starbase_$ag_component$_cost_exotic_gases }
				resource_stockpile_compare = { resource = rare_crystals value >= @ag_auto_starbase_$ag_component$_cost_rare_crystals }
				resource_stockpile_compare = { resource = sr_living_metal value >= @ag_auto_starbase_$ag_component$_cost_sr_living_metal }
				resource_stockpile_compare = { resource = sr_zro value >= @ag_auto_starbase_$ag_component$_cost_sr_zro }
				resource_stockpile_compare = { resource = sr_dark_matter value >= @ag_auto_starbase_$ag_component$_cost_sr_dark_matter }
				resource_stockpile_compare = { resource = nanites value >= @ag_auto_starbase_$ag_component$_cost_nanites }
				resource_stockpile_compare = { resource = minor_artifacts value >= @ag_auto_starbase_$ag_component$_cost_minor_artifacts }
			} }
			owner = { add_resource = {
				energy >= @ag_auto_starbase_$ag_component$_cost_energy
				minerals >= @ag_auto_starbase_$ag_component$_cost_minerals
				food >= @ag_auto_starbase_$ag_component$_cost_food
				influence >= @ag_auto_starbase_$ag_component$_cost_influence
				unity >= @ag_auto_starbase_$ag_component$_cost_unity
				consumer_goods >= @ag_auto_starbase_$ag_component$_cost_consumer_goods
				alloys >= @ag_auto_starbase_$ag_component$_cost_alloys
				volatile_motes >= @ag_auto_starbase_$ag_component$_cost_volatile_motes
				exotic_gases >= @ag_auto_starbase_$ag_component$_cost_exotic_gases
				rare_crystals >= @ag_auto_starbase_$ag_component$_cost_rare_crystals
				sr_living_metal >= @ag_auto_starbase_$ag_component$_cost_sr_living_metal
				sr_zro >= @ag_auto_starbase_$ag_component$_cost_sr_zro
				sr_dark_matter >= @ag_auto_starbase_$ag_component$_cost_sr_dark_matter
				nanites >= @ag_auto_starbase_$ag_component$_cost_nanites
				minor_artifacts >= @ag_auto_starbase_$ag_component$_cost_minor_artifacts
				mult = -1
			} }
			set_starbase_building = { slot = $ag_slot_seq$ building = $ag_component$ }
		}
		else = { ag_auto_starbase_show_construction_failed_noti = yes }
	}
}

####################################################################################
# New auto starbase support module/building: (2.b) Register building in scripted effect.
####################################################################################
ag_auto_starbase_set_starbase_building = {
	optimize_memory
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = crew_quarters }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = hydroponics_bay }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = resource_silo }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = nebula_refinery }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = listening_post }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = offworld_trading_company }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = fleet_academy }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = naval_logistics_office }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = titan_yards }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = colossus_yards }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = black_hole_observatory }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = target_uplink_computer }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = defense_grid }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = deep_space_black_site }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = curator_think_tank }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = art_college }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = salvager_workshop }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = shroud_beacon }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = communications_jammer }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = disruption_field }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = warp_fluctuator }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = transit_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = command_center }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = trader_proxy_office }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = dragon_hatchery }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ice_mining_station }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = offspring_outlook }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = mercenary_garrison }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_minerals_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_energy_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_food_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_trade_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_bureaucracy_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_synapse_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_maintenance_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_consumer_goods_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_alloys_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ag_iota_enclave_building }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ag_orbital_ring_building_living_metal }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ag_orbital_ring_building_nanites }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ag_orbital_ring_building_dark_matter }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ag_orbital_ring_building_zro }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = cordyceptic_reanimation_facility }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_psi_corps }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_orbital_shield_generator }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_galactic_stock_exchange }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_embassy_complex }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_noble_estates }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = ring_slave_processing_facility }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = dark_matter_detector }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = dark_matter_listening_post }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = cybrex_mining_hub }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = irassian_naval_yards }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = yuht_detection_array }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = zroni_storm_caster }
	ag_auto_starbase_set_starbase_building_1 = { ag_slot_seq = $ag_slot_seq$ ag_type = $ag_type$ ag_component = archaeo_overcharger }
	# Add supported modules/buildings here if needed.
}

ag_auto_starbase_build_starbase = {
	optimize_memory
	# solar_system.starbase = {
		remove_starbase_module = { slot = all }
		remove_starbase_building = { slot = all }
		if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_starbase value = 4 } } }
			set_starbase_size = starbase_citadel
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 1 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 2 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 3 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 4 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 5 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 6 }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 2 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 3 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 4 ag_type = starbase }
		}
		else_if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_starbase value = 3 } } }
			set_starbase_size = starbase_starfortress
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 1 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 2 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 3 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 4 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 5 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 6 }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 2 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 3 ag_type = starbase }
		}
		else_if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_starbase value = 2 } } }
			set_starbase_size = starbase_starhold
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 1 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 2 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 3 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 4 }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = starbase }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 2 ag_type = starbase }
		}
		else_if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_starbase value = 1 } } }
			set_starbase_size = starbase_starport
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 1 }
			ag_auto_starbase_set_starbase_module = { ag_slot_seq = 2 }
			ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = starbase }
		}
		else_if = { limit = { always = yes } set_starbase_size = starbase_outpost }
		if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon value > 0 } } }
			owner = { set_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon_temp value = ag_auto_starbase_dp_starbase_num_ion_cannon } }
			fleet = {
				every_owned_ship = {
					limit = { is_ship_size = ion_cannon }
					owner = { subtract_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon_temp value = 1 } }
				}
				if = {
					limit = { owner = { check_variable = { which = ag_auto_starbase_dp_starbase_num_ion_cannon_temp value > 0 } } }
					while = {
						count = owner.ag_auto_starbase_dp_starbase_num_ion_cannon_temp
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 1000 } } }
							owner = { add_resource = { alloys = 1000 } }
							create_ship = { random_existing_design = ion_cannon graphical_culture = root.owner name = random }
						}
					}
				}
			}
			owner = { clear_variable = ag_auto_starbase_dp_starbase_num_ion_cannon_temp }
		}
		if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small value > 0 } } }
			owner = { set_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small_temp value = ag_auto_starbase_dp_starbase_num_military_station_small } }
			fleet = {
				every_owned_ship = {
					limit = { is_ship_size = military_station_small }
					owner = { subtract_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small_temp value = 1 } }
				}
				if = {
					limit = { owner = { check_variable = { which = ag_auto_starbase_dp_starbase_num_military_station_small_temp value > 0 } } }
					while = {
						count = owner.ag_auto_starbase_dp_starbase_num_military_station_small_temp
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 100 } } }
							owner = { add_resource = { alloys = 100 } }
							create_ship = { random_existing_design = military_station_small graphical_culture = root.owner name = random }
						}
					}
				}
			}
			owner = { clear_variable = ag_auto_starbase_dp_starbase_num_military_station_small_temp }
		}
	# }
}
ag_auto_starbase_build_orbital_ring = {
	optimize_memory
	if = {
		limit = { has_planet_flag = ruined_orbital_ring_planet }
		remove_planet_flag = ruined_orbital_ring_planet
		solar_system = { random_system_megastructure = {
			limit = { exists = planet planet = { is_same_value = root } }
			remove_megastructure = this
		} }
	}
	if = { limit = { NOT = { has_planet_flag = has_megastructure } } set_planet_flag = has_megastructure }
	if = {
		limit = { exists = orbital_defence orbital_defence = { exists = starbase } }
		orbital_defence.starbase = {
			remove_starbase_module = { slot = all }
			remove_starbase_building = { slot = all }
			if = {
				limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value = 2 } } }
				set_starbase_size = orbital_ring_tier_3
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 3 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 4 }
				ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = orbital_ring }
				ag_auto_starbase_set_starbase_building = { ag_slot_seq = 2 ag_type = orbital_ring }
			}
			else_if = {
				limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value = 1 } } }
				set_starbase_size = orbital_ring_tier_2
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 3 }
				ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = orbital_ring }
			}
			else_if = {
				limit = { always = yes }
				set_starbase_size = orbital_ring_tier_1
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
				ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
			}
			if = {
				limit = { owner = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon value > 0 } } }
				owner = { set_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon_temp value = ag_auto_starbase_dp_orbital_ring_num_ion_cannon } }
				fleet = {
					every_owned_ship = {
						limit = { is_ship_size = ion_cannon }
						owner = { subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon_temp value = 1 } }
					}
					if = {
						limit = { owner = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_num_ion_cannon_temp value > 0 } } }
						while = {
							count = owner.ag_auto_starbase_dp_orbital_ring_num_ion_cannon_temp
							if = {
								limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 1000 } } }
								owner = { add_resource = { alloys = 1000 } }
								create_ship = { random_existing_design = ion_cannon graphical_culture = root.owner name = random }
							}
							else = { ag_auto_starbase_show_construction_failed_noti = yes }
						}
					}
				}
				owner = { clear_variable = ag_auto_starbase_dp_orbital_ring_num_ion_cannon_temp }
			}
			if = {
				limit = { owner = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small value > 0 } } }
				owner = { set_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small_temp value = ag_auto_starbase_dp_orbital_ring_num_military_station_small } }
				fleet = {
					every_owned_ship = {
						limit = { is_ship_size = military_station_small }
						owner = { subtract_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small_temp value = 1 } }
					}
					if = {
						limit = { owner = { check_variable = { which = ag_auto_starbase_dp_orbital_ring_num_military_station_small_temp value > 0 } } }
						while = {
							count = owner.ag_auto_starbase_dp_orbital_ring_num_military_station_small_temp
							if = {
								limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 100 } } }
								owner = { add_resource = { alloys = 100 } }
								create_ship = { random_existing_design = military_station_small graphical_culture = root.owner name = random }
							}
							else = { ag_auto_starbase_show_construction_failed_noti = yes }
						}
					}
				}
				owner = { clear_variable = ag_auto_starbase_dp_orbital_ring_num_military_station_small_temp }
			}
		}
	}
	else = {
		if = { limit = { has_orbital_station = yes } orbital_station = { dismantle = yes } }
		if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value = 2 } } }
			create_starbase = {
				size = orbital_ring_tier_3
				owner = root.owner
				effect = {
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 3 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 4 }
					ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = orbital_ring }
					ag_auto_starbase_set_starbase_building = { ag_slot_seq = 2 ag_type = orbital_ring }
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_ion_cannon
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 1000 } } }
							owner = { add_resource = { alloys = 1000 } }
							create_ship = { random_existing_design = ion_cannon graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_military_station_small
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 100 } } }
							owner = { add_resource = { alloys = 100 } }
							create_ship = { random_existing_design = military_station_small graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
				}
			}
		}
		else_if = {
			limit = { owner = { check_variable = { which = ag_auto_starbase_default_lvl_orbital_ring value = 1 } } }
			create_starbase = {
				size = orbital_ring_tier_2
				owner = root.owner
				effect = {
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 3 }
					ag_auto_starbase_set_starbase_building = { ag_slot_seq = 1 ag_type = orbital_ring }
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_ion_cannon
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 1000 } } }
							owner = { add_resource = { alloys = 1000 } }
							create_ship = { random_existing_design = ion_cannon graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_military_station_small
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 100 } } }
							owner = { add_resource = { alloys = 100 } }
							create_ship = { random_existing_design = military_station_small graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
				}
			}
		}
		else_if = {
			limit = { always = yes }
			create_starbase = {
				size = orbital_ring_tier_1
				owner = root.owner
				effect = {
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 1 }
					ag_auto_starbase_set_starbase_module = { is_starbase = no ag_slot_seq = 2 }
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_ion_cannon
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 1000 } } }
							owner = { add_resource = { alloys = 1000 } }
							create_ship = { random_existing_design = ion_cannon graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
					while = {
						count = owner.ag_auto_starbase_dp_orbital_ring_num_military_station_small
						if = {
							limit = { owner = { resource_stockpile_compare = { resource = alloys value >= 100 } } }
							owner = { add_resource = { alloys = 100 } }
							create_ship = { random_existing_design = military_station_small graphical_culture = root.owner name = random }
						}
						else = { ag_auto_starbase_show_construction_failed_noti = yes }
					}
				}
			}
		}
	}
}

ag_special_species_exisence_check = {
	optimize_memory
	# Starfish.
	if = {
		limit = { NOT = { exists = event_target:ag_primitive_species } }
		create_species = {
			name = "NAME_ag_primitive_species"
			class="MOL"
			portrait="mol17"
			homeworld = this
			namelist = "MOL2"
			traits = {
				trait = "trait_pc_gaia_preference"
				trait = "trait_erudite"
				trait = "trait_intelligent"
				trait = "trait_charismatic"
				trait = "trait_syncretic_proles"
				# trait = "trait_delicious"
				trait = "ag_trait_very_delicious"
				trait = "trait_slow_breeders"
			}
		}
		last_created_species = { set_species_flag = ag_special_species save_global_event_target_as = ag_primitive_species }
	}
	# Scorio.
	if = {
		limit = { NOT = { exists = event_target:ag_alpha_ringworld_primitive_species } }
		create_species = {
			name = "NAME_ag_alpha_ringworld_primitive_species"
			class = "ART"
			portrait = "art18"
			homeworld = this
			namelist = "ART2"
			traits = {
				trait = "trait_pc_ringworld_habitable_preference"
				trait = "trait_erudite"
				trait = "trait_intelligent"
				# trait = "trait_charismatic"
				trait = "ag_trait_very_charismatic"
				trait = "trait_syncretic_proles"
				trait = "trait_delicious"
				trait = "trait_slow_breeders"
			}
		}
		last_created_species = { set_species_flag = ag_special_species save_global_event_target_as = ag_alpha_ringworld_primitive_species }
	}
}

ag_clear_ship_cloaking_effect = {
	optimize_memory
	if = { limit = { is_scope_type = galactic_object } system_event = { id = ag_ancient.1054 } }
	else_if = {
		limit = { OR = {
			is_scope_type = ship
			is_scope_type = fleet
			is_scope_type = starbase
			is_scope_type = megastructure
			is_scope_type = planet
		} }
		solar_system = { system_event = { id = ag_ancient.1054 } }
	}
	else_if = {
		limit = { OR = {
			is_scope_type = sector
			AND = { is_scope_type = country NOT = { is_same_value = event_target:global_event_country } }
		} }
		every_system_within_border = { system_event = { id = ag_ancient.1054 } }
	}
	else_if = {
		limit = { is_same_value = event_target:global_event_country }
		every_system = { system_event = { id = ag_ancient.1054 } }
	}
}

ag_close_action_window = {
	optimize_memory
	hidden_effect = { root = { set_fleet_flag = ag_close_action_window } }
}

ag_add_trait = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable_arithmetic = { which = ag_one_variable multiply = 3 value = $ag_max_level|1$ } } }
		if = {
			limit = { NOR = {
				has_trait = $ag_trait$
				has_trait = $ag_trait$_2
				has_trait = $ag_trait$_3
			} }
			add_trait = $ag_trait$
		}
		else_if = {
			limit = {
				has_trait = $ag_trait$
				NOR = {
					has_trait = $ag_trait$_2
					has_trait = $ag_trait$_3
				}
			}
			remove_trait = $ag_trait$
			add_trait = $ag_trait$_2
		}
		else_if = {
			limit = {
				has_trait = $ag_trait$_2
				NOT = { has_trait = $ag_trait$_3 }
			}
			remove_trait = $ag_trait$_2
			add_trait = $ag_trait$_3
		}
	}
	else_if = {
		limit = { event_target:global_event_country = { check_variable_arithmetic = { which = ag_one_variable multiply = 2 value = $ag_max_level|1$ } } }
		if = {
			limit = { NOR = {
				has_trait = $ag_trait$
				has_trait = $ag_trait$_2
			} }
			add_trait = $ag_trait$
		}
		else_if = {
			limit = {
				has_trait = $ag_trait$
				NOT = { has_trait = $ag_trait$_2 }
			}
			remove_trait = $ag_trait$
			add_trait = $ag_trait$_2
		}
	}
	else_if = {
		limit = { always = yes }
		if = { limit = { NOT = { has_trait = $ag_trait$ } } add_trait = $ag_trait$ }
	}
}

ag_count_leader_subcalss_weight = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable_arithmetic = { which = ag_one_variable multiply = 3 value = $ag_max_level|1$ } } }
		if = { limit = { has_trait = $ag_trait$ } change_variable = { which = $ag_subclass$ value = 1 } }
		if = { limit = { has_trait = $ag_trait$_2 } change_variable = { which = $ag_subclass$ value = 2 } }
		if = { limit = { has_trait = $ag_trait$_3 } change_variable = { which = $ag_subclass$ value = 3 } }
	}
	else_if = {
		limit = { event_target:global_event_country = { check_variable_arithmetic = { which = ag_one_variable multiply = 3 value = $ag_max_level|1$ } } }
		if = { limit = { has_trait = $ag_trait$ } change_variable = { which = $ag_subclass$ value = 1 } }
		if = { limit = { has_trait = $ag_trait$_2 } change_variable = { which = $ag_subclass$ value = 2 } }
	}
	else_if = {
		limit = { always = yes }
		if = { limit = { has_trait = $ag_trait$ } change_variable = { which = $ag_subclass$ value = 1 } }
	}
}
