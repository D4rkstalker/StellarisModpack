spawn_monolith_anomaly_1 = {
	random_system_within_border = {		
			limit = {
				NOR = { 
					has_star_flag = precursor_world 
					has_star_flag = shroud_invasion_target_1	
					has_star_flag = monolith_system
					is_same_value = root.owner.capital_scope.solar_system
				}
				# distance = {
						# source = root.owner.capital_scope.solar_system
						# use_bypasses = no
						# min_jumps = 2
						# max_jumps = 3
				# }
				any_system_planet = {				
					AND = { 	
							#is_colony = yes
							is_capital = no
							is_artificial = no
							NOT = { is_planet_class = pc_city }
					}
					OR = {
						habitable_planet = yes
						uninhabitable_regular_planet = yes	
					}
				}
			}
			set_star_flag = monolith_system
			random_system_planet = {
				limit = {				
					AND = { 	
							#is_colony = yes
							is_capital = no
							is_artificial = no
							NOT = { is_planet_class = pc_city }						
					}
					OR = {
						habitable_planet = yes
						uninhabitable_regular_planet = yes	
					}				
				}
				set_planet_flag = has_shroud_obelisk
				save_event_target_as = monolith_planet_1
				set_planet_flag = monolith_world_1
				enable_special_project = {
					name = "monolith_ARCHEOLOGY_1"				
					location = this
					owner = root
				}
			}		
		
	}
}



spawn_monolith_anomaly_2 = {
	random_system_within_border = {		
		limit = {
			NOR = { 
				has_star_flag = precursor_world 
				has_star_flag = shroud_invasion_target_1	
				has_star_flag = monolith_system				
			}
			any_system_planet = {
				uninhabitable_regular_planet = yes				
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			# distance = {
						# source = root.owner.capital_scope.solar_system
						# use_bypasses = no
						# min_jumps = 0
						# max_jumps = 1
				# }
		}
		set_star_flag = monolith_system
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOR = { has_planet_flag = precursor_world has_planet_flag = monolith_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = monolith_planet_2
			set_planet_flag = monolith_world
			enable_special_project = {
				name = "monolith_ARCHEOLOGY_2"				
				location = this
				owner = root
			}
		}		
	}	
}


spawn_monolith_dig_site = {
	random_system_within_border = {
		limit = {
			NOR = { 
				has_star_flag = precursor_world 
				has_star_flag = shroud_invasion_target_1	
				has_star_flag = monolith_system	
				is_same_value = root.owner.capital_scope.solar_system
			}
			any_system_planet = {
				uninhabitable_regular_planet = yes				
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}			
				NOT = { has_planet_flag = monolith_world } 
			}
		}
		random_system_planet = {
			limit = {
				uninhabitable_regular_planet = yes
				NOR = { has_planet_flag = precursor_world has_planet_flag = monolith_world }
				has_owner = no
				has_anomaly = no
				is_surveyed = {
					who = root
					status = yes
				}
			}
			save_event_target_as = monolith_site_planet_3
			set_planet_flag = monolith_site_world
			create_archaeological_site = shroud_monolith_digsite
		}
	}
}


#Call this from the Situation, at the end
cleanup_cult_uprising_situation = {
	owner = {
		every_owned_planet = {
			limit = { has_modifier = cult_pleasure }
			remove_modifier = cult_pleasure
		}
		every_owned_planet = {
			limit = { has_modifier = cult_disappearances }
			remove_modifier = cult_disappearances
		}
		every_owned_planet = {
			limit = { has_modifier = cult_sacrifices }
			remove_modifier = cult_sacrifices
		}
		every_owned_planet = {
			limit = { has_planet_flag = cult_uprising_planet }
			remove_planet_flag = cult_uprising_planet		
		}
		
	}
	
}

add_random_character_trait = {
	save_event_target_as = corrupted_leader
	random_list = {				
			8 = {				
				add_trait_no_notify = leader_trait_cultist_whisperers
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			8 = {
				add_trait_no_notify = leader_trait_cultist_eater
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			8 = {
				add_trait_no_notify = leader_trait_cultist_composer
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			8 = {
				add_trait_no_notify = leader_trait_cultist_instrument
				#notify of corruption
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			0 = {
				add_trait = leader_trait_loyalist
			}
			0 = {
				add_trait = leader_trait_shroud_inquisitor 
			}
	}
}

add_random_negative_character_trait = {
	save_event_target_as = corrupted_leader
	random_list = {				
			25 = {				
				add_trait_no_notify = leader_trait_cultist_whisperers
				#notify of corruption
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			25 = {
				add_trait_no_notify = leader_trait_cultist_eater
				#notify of corruption
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			25 = {
				add_trait_no_notify = leader_trait_cultist_composer
				#notify of corruption
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}
			25 = {
				add_trait_no_notify = leader_trait_cultist_instrument
				#notify of corruption
				create_message = {
					type = MESSAGE_LEADER_CORRUPTED
					localization =  MESSAGE_LEADER_CORRUPTED_DESC
					days = 20 #@toast_message_days
					target = event_target:corrupted_leader
					variable = {
						type = name
						localization = LEADER
						scope = event_target:corrupted_leader
					}
					variable = {
						key = "border"
						value = "GFX_border_veteran" 
					}
				}
			}			
	}
}

add_random_positive_character_trait = {
	random_list = {				
			70 = {
				add_trait = leader_trait_loyalist
			}
			30 = {
				add_trait = leader_trait_shroud_inquisitor 
			}
	}
}