
Create_GAPS_Replicated_Drones_Country = {
	if = {
		limit = { NOT = { exists = event_target:Event_Target_GAPS_Replicated_Drones } }
		create_country = {
			name = "NAME_Mineral_Extraction_Operation"
			type = Country_Type_GAPS_replicated_drone
			flag = {
				icon = {
					category = "zoological"
					file = "flag_zoological_1.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_event_target_as = Event_Target_GAPS_Replicated_Drones
			}
		}
		event_target:Event_Target_GAPS_Replicated_Drones = {
			set_faction_hostility = {
				set_hostile = no
				#set_neutral = no
				set_friendly = yes
				target = event_target:Country_Target_GAPS_Drone_Replicators
			}
		}
		every_country = {
			limit = {
				OR = {
					has_government = gov_artist_enclave
					has_government = gov_trader_enclave
					has_government = gov_curator_enclave
				}
			}
			event_target:Event_Target_GAPS_Replicated_Drones = {
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = prev
				}
			}
		}
	}
}
Scripted_Planet_Effect_GAPS_Base_Drones_To_Spawn = {
	solar_system = {
		set_variable = { which = "System_Variable_GAPS_Max_Drones_To_Spawn" value = 0 }
		set_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Stations" value = 0 }
		owner = {
			while = {
				count = "Country_Variable_GAPS_Drone_Strength"
				root.solar_system = {
					change_variable = { which = "System_Variable_GAPS_Max_Drones_To_Spawn" value = 1 }
				}
			}
		}
		every_system_planet = {
			limit = {
				has_deposit_for = shipclass_mining_station
				NOR = {
					has_deposit = d_trade_value_1
					has_deposit = d_trade_value_2
					has_deposit = d_trade_value_3
					has_deposit = d_trade_value_4
					has_deposit = d_trade_value_5
					has_deposit = d_trade_value_6
					has_deposit = d_trade_value_7
					has_deposit = d_trade_value_8
					has_deposit = d_trade_value_9
					has_deposit = d_trade_value_10
				}
			}
			root.solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Stations" value = 1 } }
		}
		if = {
			limit = {
				OR = {
					has_star_flag = drone_system_4
					has_star_flag = manufactory_system
					has_star_flag = drone_system_1
					has_star_flag = drone_system_2
					has_star_flag = drone_destroyer_system
					has_star_flag = drone_system_3
					has_star_flag = drone_home_system
					has_star_flag = wenkwort_system
					has_star_flag = drone_home_system
					has_star_flag = manufactory_system
				}
			}
			multiply_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Stations" value = 2 }
		}
		change_variable = { which = "System_Variable_GAPS_Max_Drones_To_Spawn" value = "System_Variable_GAPS_Number_Of_Mining_Stations" }

		set_variable = { which = "System_Variable_GAPS_Max_Mining_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }
		set_variable = { which = "System_Variable_GAPS_Max_Combat_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }
		set_variable = { which = "System_Variable_GAPS_Max_Destroyer_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }
		set_variable = { which = "System_Variable_GAPS_Max_Grinder_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }
		set_variable = { which = "System_Variable_GAPS_Max_Warden_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }
		set_variable = { which = "System_Variable_GAPS_Max_Gardener_Drones_To_Spawn" value = "System_Variable_GAPS_Max_Drones_To_Spawn" }

		multiply_variable = { which = "System_Variable_GAPS_Max_Mining_Drones_To_Spawn" value = 4 }
		multiply_variable = { which = "System_Variable_GAPS_Max_Combat_Drones_To_Spawn" value = 2 }
		multiply_variable = { which = "System_Variable_GAPS_Max_Destroyer_Drones_To_Spawn" value = 1 }
		multiply_variable = { which = "System_Variable_GAPS_Max_Grinder_Drones_To_Spawn" value = 0.1 }
		multiply_variable = { which = "System_Variable_GAPS_Max_Warden_Drones_To_Spawn" value = 0.5 }
		multiply_variable = { which = "System_Variable_GAPS_Max_Gardener_Drones_To_Spawn" value = 8 }
	}
}

Scripted_Planet_Effect_GAPS_Spawn_Mining_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Mining_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Mining_Drones }
				create_ship = {
					name = ""
					design = "NAME_Ancient_Mining_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Mining_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Mining Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Mining_Drones
				create_ship = {
					name = ""
					design = "NAME_Ancient_Mining_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Mining_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Mining_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}
Scripted_Planet_Effect_GAPS_Spawn_Combat_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Combat_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Combat_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Combat_Drones }
				create_ship = {
					name = ""
					design = "NAME_Ancient_Combat_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Combat_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Combat_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Combat_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Combat Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Combat_Drones
				create_ship = {
					name = ""
					design = "NAME_Ancient_Combat_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}
Scripted_Planet_Effect_GAPS_Spawn_Destroyer_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Destroyer_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Destroyer_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Destroyer_Drones }
				create_ship = {
					name = ""
					design = "NAME_Ancient_Destroyer"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Destroyer_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Destroyer_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Destroyer_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Destroyer Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Destroyer_Drones
				create_ship = {
					name = ""
					design = "NAME_Ancient_Destroyer"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}
Scripted_Planet_Effect_GAPS_Spawn_Grinder_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Grinder_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Grinder_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Grinder_Drones }
				create_ship = {
					name = ""
					design = "NAME_Drone_Home_Base"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Grinder_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Grinder_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Grinder_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Grinder Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Grinder_Drones
				create_ship = {
					name = ""
					design = "NAME_Drone_Home_Base"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}

Scripted_Planet_Effect_GAPS_Spawn_Warden_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Warden_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Warden_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Warden_Drones }
				create_ship = {
					name = ""
					design = "NAME_Wenkwort_Enforcer"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Warden_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Warden_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Warden_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Warden Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Warden_Drones
				create_ship = {
					name = ""
					design = "NAME_Wenkwort_Enforcer"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}
Scripted_Planet_Effect_GAPS_Spawn_Gardener_Drone = {
	if = {
		limit = { solar_system = { any_fleet_in_system = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Gardener_Drones } } }
		solar_system = {
			change_variable = { which = "System_Variable_GAPS_Number_Of_Gardener_Drones" value = 1 }
			random_fleet_in_system = {
				limit = { has_fleet_flag = Fleet_Flag_GAPS_Replicated_Gardener_Drones }
				create_ship = {
					name = ""
					design = "NAME_Gardener_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Gardener_Drone_To_Upgrade
						save_event_target_as = Ship_Flag_GAPS_Gardener_Drone_To_Upgrade
					}
				}
			}
		}
	}
	else = {
		solar_system = { change_variable = { which = "System_Variable_GAPS_Number_Of_Gardener_Drones" value = 1 } }
		create_fleet = {
			name = "Replicated Gardener Drones"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:Event_Target_GAPS_Replicated_Drones
				set_fleet_flag = Fleet_Flag_GAPS_Replicated_Gardener_Drones
				create_ship = {
					name = ""
					design = "NAME_Gardener_Drone"
					prefix = no
					upgradable = no
					effect = {
						set_ship_flag = Ship_Flag_GAPS_Drone_To_Upgrade
						save_event_target_as = Ship_Event_GAPS_Drone_To_Upgrade
					}
				}
				set_location = root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 1000
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 10
						duration = 2000
						random = 500
					}
				}
			}
		}
		last_created_fleet = {
			set_event_locked = yes
			hidden_effect = { fleet_event = { id = Events_GAPS_Universal_Effects.21 days = 3 } }
		}
	}
}
