begin_crisis_projcrim = {
	set_global_flag = mid_game_crisis_happened 			# this must be set and not removed
	set_timed_global_flag = {							# this must be set and not removed
		flag = mid_game_crisis_happened_recently
		years = 12
	}
	set_global_flag = projcrim_in_progress 				# must be removed when crisis is resolved
	set_global_flag = projcrim_fired 					# (optional) only set this flag if you want your crisis to fire only once
	set_global_flag = midgame_crisis_ongoing			# must be removed when crisis is resolved

	# BOOM BOOM PEW PEW effects go here
	random_country = {
		limit = {
			is_country_type = global_event
		}
		country_event = { id = projcrim.0 }
	}
}

# Creates Crimson Throng species
create_crimson_throng_species = {
	create_species = {
		name = "Xhyroid"
		plural = "Xhyroids"
		class = MOL
		portrait = mol2
		namelist = "MOL2"
		traits = {
			#trait = trait_crimson_infected
			trait = trait_xhyroid
			trait = trait_nomadic
		}
		immortal = no
	}
	last_created_species = {
		set_species_flag = crimson_throng_species
		save_global_event_target_as = crimson_throng_species
	}
}

# Creates Throng empire for diplomacy and planet ownership
create_crimson_throng_country = {
	create_country = {
		name = "The Crimson Throng"
		adjective = random
		name_list = ROOT
		ship_prefix = "CTS"
		authority = "auth_hive_mind"
		civics = {
			civic = civic_hive_cordyceptic_drones
			civic = civic_projcrim_throng
		}
		ethos = {
			ethic = ethic_gestalt_consciousness
		}
		origin = "origin_default"
		auto_delete = no
		type = throng_country
		species = event_target:crimson_throng_species
		flag = { 
			icon = {
				category = "crimson_throng"
				file = "throng.dds"
			}
			background = {
				category = "backgrounds"
				file = "flag_BG_29.dds"
			}
			colors = {
				"red_orange"
				"red"
				"null"
				"null"
			}
		}

		effect = {
			set_country_flag = crimson_throng_country
			save_global_event_target_as = crimson_throng_country
			#establish_communications_no_message = root
		}
	}
}

# Removes all maluses and negative effects after cure is distributed
projcrim_remove_negative_effects = {
	custom_tooltip = heals_worlds
	hidden_effect = {
		every_owned_planet = {
			limit = {
				controller = {
					NOT = { is_country_type = throng_country }
				}
			}
			remove_modifier = projcrim_initial_crime_1
			remove_modifier = projcrim_initial_crime_2
			remove_modifier = projcrim_initial_crime_3
			remove_modifier = projcrim_pop_unrest
			remove_modifier = projcrim_lockdown
			remove_modifier = projcrim_upset_pops
			remove_deposit = d_projcrim_containment
		}
		# every_owned_planet = {
		# 	limit = {
		# 		is_planet_class = pc_projcrim_afflicted
		# 	}
		# 	randomise_pc = yes
		# }
		every_owned_leader = {
			remove_trait = leader_trait_projcrim_infected_admiral
			remove_trait = leader_trait_projcrim_infected_general
			remove_trait = leader_trait_projcrim_infected_governor
			remove_trait = leader_trait_projcrim_infected_scientist
			remove_trait = leader_trait_projcrim_infected_ruler
		}
	}
}

# Does not select the new world to spread to, must be done in script beforehand
# Infects pops with the Crimson-Infected trait
projcrim_infect_pops = {
	random_owned_species = {
		limit = {
			is_sapient = yes
			#is_robotic = no 	# removed to work for machine empires
		}
		if = {
			limit = {
				# Infected variant exists
				any_galaxy_species = {
					is_subspecies = prev
					has_trait = trait_crimson_infected
				}
			}
			random_galaxy_species = {
				limit = {
					is_subspecies = prev
					has_trait = trait_crimson_infected
				}
				prevprev = {
					create_pop = {
						species = prev
						ethos = random
					}
				}
			}
		}
		else = {
			modify_species = {
				species = this
				base = auto
				add_trait = trait_crimson_infected
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
				effect = {
					set_species_flag = crimson_infected_species
					prevprev = {
						create_pop = {
							species = prev
							ethos = random
						}
					}
					# No worky :(
					#set_colonization_controls = {
					#	country = root
					#	type = no
					#	cooldown = yes
					#}
				}
			}
		}
		prev = {
			random_owned_pop = {
				limit = {
					is_being_purged = no
					is_sapient = yes
					is_same_species = prevprev
					NOT = { pop_has_trait = trait_crimson_infected }
				}
				kill_pop = yes
			}
		}
	}
}

# Executes Throng Queen Synapse relic effect, modifier scaling with distance
throng_relic_effect = {
	add_modifier = {
		modifier = throng_relic_effect
		days = 3600
	}
	owner = {
		every_owned_planet = {
			limit = {
				num_pops > 3
			}
			if = {
				limit = {
					distance = {
						source = root
						min_distance >= 0
						max_distance <= 10
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect1
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance >= 10
						max_distance <= 25
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect2
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 25
						max_distance <= 50
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect3
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 50
						max_distance <= 100
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect4
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 100
						max_distance <= 150
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect5
					days = 3600
				}
			}
			else = {
				if = {
					limit = { NOT = { has_modifier = throng_relic_effect } }
					add_modifier = {
						modifier = throng_relic_effect6
						days = 3600
					}
				}
			}
		}
	}
}

# Executes Throng Queen Synapse relic effect, but for gestalts
throng_relic_effect_gestalt = {
	add_modifier = {
		modifier = throng_relic_effectg
		days = 3600
	}
	owner = {
		every_owned_planet = {
			limit = {
				num_pops > 3
			}
			if = {
				limit = {
					distance = {
						source = root
						min_distance >= 0
						max_distance <= 10
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect1g
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 10
						max_distance <= 25
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect2g
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance >= 25
						max_distance <= 50
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect3g
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 50
						max_distance <= 100
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect4g
					days = 3600
				}
			}
			else_if = {
				limit = {
					distance = {
						source = root
						min_distance > 100
						max_distance <= 150
						type = euclidean
					}
				}
				add_modifier = {
					modifier = throng_relic_effect5g
					days = 3600
				}
			}
			else = {
				if = {
					limit = { NOT = { has_modifier = throng_relic_effectg } }
					add_modifier = {
						modifier = throng_relic_effect6g
						days = 3600
					}
				}
			}
		}
	}
}

# Randomises a planet's type (any habitable or gaia)
randomise_pc = {
	random_list = {
		20 = {
			change_pc = pc_continental
		}
		20 = {
			change_pc = pc_tropical
		}
		20 = {
			change_pc = pc_ocean
		}
		20 = {
			change_pc = pc_arctic
		}
		20 = {
			change_pc = pc_tundra
		}
		20 = {
			change_pc = pc_alpine
		}
		20 = {
			change_pc = pc_arid
		}
		20 = {
			change_pc = pc_desert
		}
		20 = {
			change_pc = pc_savannah
		}
		1 = {
			change_pc = pc_gaia
		}
	}
}

# Creates a fleet: 5 Warships
create_small_throng_fleet = {
	create_fleet = {
		name = "Scarlet Warfleet"
		effect = {
			set_owner = event_target:crimson_throng_country
			while = {
				count = 5
				create_ship = {
					name = "Cardinal Warship"
					design = "NAME_Nanite_Interdictor"
					graphical_culture = "pirate_01"
				}
			}
			set_formation_scale = 2
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 150
			set_location = {
				target = prevprev
				distance = 20
				angle = 20
			}
		}
	}
}

# Creates a fleet: 1 Mothership, 3 Warships
create_medium_throng_fleet = {
	create_fleet = {
		name = "Crimson Warfleet"
		effect = {
			set_owner = event_target:crimson_throng_country
				create_ship = {
					name = "Crimson Mothership"
					design = "NAME_Nanite_Mothership"
					graphical_culture = "pirate_01"
				}
			while = {
				count = 3
				create_ship = {
					name = "Coral Warship"
					design = "NAME_Nanite_Interdictor"
					graphical_culture = "pirate_01"
				}
			}
			set_formation_scale = 2
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 250
			set_location = {
				target = prevprev
				distance = 0
				angle = 0
			}
		}
	}
}

# Creates a fleet: 1 Mothership, 6 Warships
create_large_throng_fleet = {
	create_fleet = {
		name = "Flaming Warfleet"
		effect = {
			set_owner = event_target:crimson_throng_country
			while = {
				count = 1
				create_ship = {
					name = "Crimson Mothership"
					design = "NAME_Nanite_Mothership"
					graphical_culture = "pirate_01"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = "Rose Warship"
					design = "NAME_Nanite_Interdictor"
					graphical_culture = "pirate_01"
				}
			}
			set_formation_scale = 2
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 250
			set_location = {
				target = prevprev
				distance = 0
				angle = 0
			}
		}
	}
}

# Outcome A - Removes all traces of the Throng
remove_throng = {
	event_target:crimson_throng_country = {
		destroy_country = yes
	}
	set_global_flag = throng_country_defeated
}

# Outcome B - Subjugates the Throng
subjugate_throng = {
	event_target:crimson_throng_country = {
		destroy_country = yes
	}
	create_country = {
		name = "Crimson Throng"
		adjective = random
		name_list = ROOT
		ship_prefix = "CTS"
		authority = "auth_hive_mind"
		civics = {
			civic = civic_hive_cordyceptic_drones
			civic = civic_projcrim_throng
		}
		ethos = {
			ethic = ethic_gestalt_consciousness
		}
		origin = "origin_default"
		auto_delete = no
		type = default
		species = event_target:crimson_throng_species
		flag = { 
			icon = {
				category = "crimson_throng"
				file = "throng.dds"
			}
			background = {
				category = "backgrounds"
				file = "flag_BG_29.dds"
			}
			colors = {
				"red_orange"
				"red"
				"null"
				"null"
			}
		}

		effect = {
			every_playable_country = {
				establish_communications_no_message = prev
			}
			event_target:throng_capital = {
				set_owner = prev
				solar_system = {
					starbase = {
						set_owner = prev
					}
				}
			}
			set_subject_of = {
				who = event_target:throng_victor
				preset = preset_vassal
			}
			add_opinion_modifier = {
				modifier = opinion_projcrim_subjugation_throng
				who = event_target:throng_victor
			}
			# Gives systems to the Throng - new systems must border Throng systems and not have a colony/megastructure
			while = {
				count = 10
				random_system = {
					limit = {
						NOT = { is_owned_by = event_target:crimson_throng_country }
						any_neighbor_system = {
							is_owned_by = event_target:crimson_throng_country
						}
						any_system_planet = {
							is_colony = no
						}
						has_any_megastructure = no
					}
					starbase = {
						set_owner = prevprev
					}
				}
			}
			event_target:throng_victor = {
				add_intel = {
					amount = 90
					who = prev
				}
			}
		}
	}
	set_global_flag = throng_country_defeated
}

# Outcome C - Protects the Throng
protect_throng = {
	event_target:crimson_throng_country = {
		destroy_country = yes
	}
	random_planet_within_border = {
		limit = {
			OR = {
				is_planet_class = pc_barren
				is_planet_class = pc_barren_cold
				is_planet_class = pc_toxic
				is_planet_class = pc_frozen
			}
		}
		change_pc = pc_infested
		set_planet_flag = throng_relocated_world
		save_global_event_target_as = throng_relocated_world
		add_modifier = {
			modifier = throng_relocated
		}
		set_planet_name = "New Xhyr"
	}
	set_global_flag = throng_country_defeated
}

# Infects the scoped leader with the Plague; differing traits for each leader type
infect_leader_projcrim = {
	if = {
		limit = { leader_class = scientist }
		add_trait = leader_trait_projcrim_infected_scientist
	}
	else_if = {
		limit = { leader_class = admiral }
		add_trait = leader_trait_projcrim_infected_admiral
	}
	else_if = {
		limit = { leader_class = general }
		add_trait = leader_trait_projcrim_infected_general
	}
	else_if = {
		limit = { leader_class = governor }
		add_trait = leader_trait_projcrim_infected_governor
	}
}

# Saves the planet class for later use
set_pc_flag = {
	if = {
		limit = { is_planet_class = pc_alpine }
		set_planet_flag = projcrim_alpine
	}
	else_if = {
		limit = { is_planet_class = pc_arctic }
		set_planet_flag = projcrim_arctic
	}
	else_if = {
		limit = { is_planet_class = pc_tundra }
		set_planet_flag = projcrim_tundra
	}
	else_if = {
		limit = { is_planet_class = pc_arid }
		set_planet_flag = projcrim_arid
	}
	else_if = {
		limit = { is_planet_class = pc_desert }
		set_planet_flag = projcrim_desert
	}
	else_if = {
		limit = { is_planet_class = pc_savannah }
		set_planet_flag = projcrim_savannah
	}
	else_if = {
		limit = { is_planet_class = pc_continental }
		set_planet_flag = projcrim_continental
	}
	else_if = {
		limit = { is_planet_class = pc_tropical }
		set_planet_flag = projcrim_tropical
	}
	else_if = {
		limit = { is_planet_class = pc_ocean }
		set_planet_flag = projcrim_ocean
	}
	else_if = {
		limit = { is_planet_class = pc_gaia }
		set_planet_flag = projcrim_gaia
	}
	else_if = {
		limit = { is_planet_class = pc_nuked }
		set_planet_flag = projcrim_nuked
	}
	else_if = {
		limit = { is_planet_class = pc_relic }
		set_planet_flag = projcrim_relic
	}
	else_if = {
		limit = { is_planet_class = pc_city }
		set_planet_flag = projcrim_city
	}
	else_if = {
		limit = { is_planet_class = pc_hive }
		set_planet_flag = projcrim_hive
	}
	else_if = {
		limit = { is_planet_class = pc_machine }
		set_planet_flag = projcrim_machine
	}
	else_if = {
		limit = { is_artificial = yes }
		set_planet_flag = projcrim_artificial
	}
	else = {
		set_planet_flag = projcrim_unknown
	}
}

# Restores a planet's class before it was afflicted
restore_pc = {
	if = {
		limit = { has_planet_flag = projcrim_alpine }
		change_pc = pc_alpine
		remove_planet_flag = projcrim_alpine
	}
	else_if = {
		limit = { has_planet_flag = projcrim_arctic }
		change_pc = pc_arctic
		remove_planet_flag = projcrim_arctic
	}
	else_if = {
		limit = { has_planet_flag = projcrim_tundra }
		change_pc = pc_tundra
		remove_planet_flag = projcrim_tundra
	}
	else_if = {
		limit = { has_planet_flag = projcrim_arid }
		change_pc = pc_arid
		remove_planet_flag = projcrim_arid
	}
	else_if = {
		limit = { has_planet_flag = projcrim_desert }
		change_pc = pc_desert
		remove_planet_flag = projcrim_desert
	}
	else_if = {
		limit = { has_planet_flag = projcrim_savannah }
		change_pc = pc_savannah
		remove_planet_flag = projcrim_savannah
	}
	else_if = {
		limit = { has_planet_flag = projcrim_continental }
		change_pc = pc_continental
		remove_planet_flag = projcrim_continental
	}
	else_if = {
		limit = { has_planet_flag = projcrim_tropical }
		change_pc = pc_tropical
		remove_planet_flag = projcrim_tropical
	}
	else_if = {
		limit = { has_planet_flag = projcrim_ocean }
		change_pc = pc_ocean
		remove_planet_flag = projcrim_ocean
	}
	else_if = {
		limit = { has_planet_flag = projcrim_gaia }
		change_pc = pc_gaia
		remove_planet_flag = projcrim_gaia
	}
	else_if = {
		limit = { has_planet_flag = projcrim_nuked }
		change_pc = pc_nuked
		remove_planet_flag = projcrim_nuked
	}
	else_if = {
		limit = { has_planet_flag = projcrim_relic }
		change_pc = pc_relic
		remove_planet_flag = projcrim_relic
	}
	else_if = {
		limit = { has_planet_flag = projcrim_city }
		change_pc = pc_city
		remove_planet_flag = projcrim_city
	}
	else_if = {
		limit = { has_planet_flag = projcrim_hive }
		change_pc = pc_hive
		remove_planet_flag = projcrim_hive
	}
	else_if = {
		limit = { has_planet_flag = projcrim_machine }
		change_pc = pc_machine
		remove_planet_flag = projcrim_machine
	}
	else_if = {
		limit = { has_planet_flag = projcrim_artificial }
		set_planet_flag = projcrim_artificial
		remove_planet_flag = projcrim_artificial
	}
	else = {
		set_planet_flag = projcrim_unknown
		randomise_pc = yes
	}
}