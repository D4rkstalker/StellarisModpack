xvcv_mdlc_dominant_species_changing_effect = {
	optimize_memory #see the '99_advanced_documentation.txt', 'Memory Management' section
	every_owned_pop = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_owned_leader = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_owned_leader = {
		limit = {
			is_councilor = yes
			is_ruler = no
		}
		set_gestalt_node_protrait_effect = yes
	}
	every_envoy = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_pool_leader = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			is_same_species = prev.species
		}
		change_species = last_created_species
	}
	every_owned_army = {
		limit = {
			exists = species
			is_same_species = prev.species
		}
		change_species = last_created_species
	}
	change_dominant_species = { species = last_created_species }
	set_built_species = last_created_species
}
xvcv_mdlc_machine_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_full_machine cooldown = no }
	set_living_standard = { country = prev type = living_standard_hive_mind cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_yes cooldown = no }
	set_military_service_type = { country = prev type = military_service_full cooldown = no }
}
xvcv_mdlc_robot_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_full cooldown = no }
	set_living_standard = { country = prev type = living_standard_good cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_no cooldown = no }
	set_military_service_type = { country = prev type = military_service_full cooldown = no }
}
xvcv_mdlc_organic_trophy_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_organic_trophy cooldown = no }
	set_living_standard = { country = prev type = living_standard_organic_trophy cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_no cooldown = no }
	set_military_service_type = { country = prev type = military_service_none cooldown = no }
}
xvcv_mdlc_modify_species_clear_pc_preference_traits_effect = {
	optimize_memory
	switch = {
		trigger = has_trait
		trait_pc_desert_preference = { modify_species = { base = none remove_trait = trait_pc_desert_preference } }
		trait_pc_arid_preference = { modify_species = { base = none remove_trait = trait_pc_arid_preference } }
		trait_pc_savannah_preference = { modify_species = { base = none remove_trait = trait_pc_savannah_preference } }

		trait_pc_tropical_preference = { modify_species = { base = none remove_trait = trait_pc_tropical_preference } }
		trait_pc_continental_preference = { modify_species = { base = none remove_trait = trait_pc_continental_preference } }
		trait_pc_ocean_preference = { modify_species = { base = none remove_trait = trait_pc_ocean_preference } }

		trait_pc_arctic_preference = { modify_species = { base = none remove_trait = trait_pc_arctic_preference } }
		trait_pc_tundra_preference = { modify_species = { base = none remove_trait = trait_pc_tundra_preference } }
		trait_pc_alpine_preference = { modify_species = { base = none remove_trait = trait_pc_alpine_preference } }

		trait_pc_machine_preference = { modify_species = { base = none remove_trait = trait_pc_machine_preference } }
		trait_pc_ai_preference = { modify_species = { base = none remove_trait = trait_pc_ai_preference } }
		trait_pc_hive_preference = { modify_species = { base = none remove_trait = trait_pc_hive_preference } }

		trait_pc_ringworld_habitable_preference = { modify_species = { base = none remove_trait = trait_pc_ringworld_habitable_preference } }
		trait_pc_shattered_ring_habitable_preference = { modify_species = { base = none remove_trait = trait_pc_shattered_ring_habitable_preference } }
		trait_pc_habitat_preference = { modify_species = { base = none remove_trait = trait_pc_habitat_preference } }

		trait_pc_gaia_preference = { modify_species = { base = none remove_trait = trait_pc_gaia_preference } }
		trait_pc_gaia_preference_terraforming = { modify_species = { base = none remove_trait = trait_pc_gaia_preference_terraforming } }
		trait_pc_relic_preference = { modify_species = { base = none remove_trait = trait_pc_relic_preference } }

		trait_pc_city_preference = { modify_species = { base = none remove_trait = trait_pc_city_preference } }
		trait_pc_nuked_preference = { modify_species = { base = none remove_trait = trait_pc_nuked_preference } }
		#add more planet classes here when vanilla updates
	}
}
xvcv_mdlc_modify_species_change_traits_for_lithoid_effect = {
	optimize_memory
	if = { limit = { has_trait = trait_lithoid } modify_species = { base = none remove_trait = trait_lithoid add_trait = xvcv_mdlc_trait_rock_body } }

	if = { limit = { has_trait = trait_lithoid_scintillating } modify_species = { base = none remove_trait = trait_lithoid_scintillating add_trait = xvcv_mdlc_trait_lithoid_scintillating } }
	if = { limit = { has_trait = trait_lithoid_gaseous_byproducts } modify_species = { base = none remove_trait = trait_lithoid_gaseous_byproducts add_trait = xvcv_mdlc_trait_lithoid_gaseous_byproducts } }
	if = { limit = { has_trait = trait_lithoid_volatile_excretions } modify_species = { base = none remove_trait = trait_lithoid_volatile_excretions add_trait = xvcv_mdlc_trait_lithoid_volatile_excretions } }
}
xvcv_mdlc_civic_trading_machine_target_all_trade_value_calc_effect = {
	optimize_memory
	#clear the variable for recalculating it again
	event_target:xvcv_mdlc_trading_machine_owner = {
		if = {
			limit = { is_variable_set = xvcv_mdlc_target_$ID$_trade_value }
			clear_variable = xvcv_mdlc_target_$ID$_trade_value
		}
	}
	every_system_within_border = {
		limit = { has_system_trade_value > 0 }
		event_target:xvcv_mdlc_trading_machine_owner = { change_variable = { which = xvcv_mdlc_target_$ID$_trade_value value = prev.trigger:has_system_trade_value } }
	}
	event_target:xvcv_mdlc_trading_machine_owner = {
		divide_variable = { which = xvcv_mdlc_target_$ID$_trade_value value = 10 } #10% of the total trade value
		if = { limit = { has_technology = xvcv_mdlc_tech_negotiation_algorithms } multiply_variable = { which = xvcv_mdlc_target_$ID$_trade_value value = 2 } } #20% of the total trade value, with the required tech
		round_variable = xvcv_mdlc_target_$ID$_trade_value #rounds the variable to the closest integer
	}
}
xvcv_mdlc_civic_trading_machine_target_all_energy_income_calc_effect = {
	optimize_memory
	export_resource_income_to_variable = { resource = energy variable = xvcv_mdlc_energy_income_from_target_$ID$ }
	event_target:xvcv_mdlc_trading_machine_owner = {
		#this will reset the previous value to new one
		set_variable = { which = xvcv_mdlc_target_$ID$_energy_income value = prev.xvcv_mdlc_energy_income_from_target_$ID$ }
		divide_variable = { which = xvcv_mdlc_target_$ID$_energy_income value = 10 }
		if = { limit = { has_technology = xvcv_mdlc_tech_negotiation_algorithms } multiply_variable = { which = xvcv_mdlc_target_$ID$_energy_income value = 2 } }
		round_variable = xvcv_mdlc_target_$ID$_energy_income
	}
}
xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = {
	optimize_memory
	if = {
		limit = { is_variable_set = xvcv_mdlc_target_$ID$_trade_value }
		clear_variable = xvcv_mdlc_target_$ID$_trade_value
	}
	if = {
		limit = { is_variable_set = xvcv_mdlc_target_$ID$_energy_income }
		clear_variable = xvcv_mdlc_target_$ID$_energy_income
	}
	if = {
		limit = { has_country_flag = xvcv_mdlc_target_$ID$_trade_value_added_to_all_trade_value }
		remove_country_flag = xvcv_mdlc_target_$ID$_trade_value_added_to_all_trade_value
	}
	if = {
		limit = { has_country_flag = xvcv_mdlc_target_$ID$_energy_income_is_added_to_all_energy_income_from_trade }
		remove_country_flag = xvcv_mdlc_target_$ID$_energy_income_is_added_to_all_energy_income_from_trade
	}
}
xvcv_mdlc_civic_trading_machine_trade_stop_effect = {
	optimize_memory
	random_country = {
		limit = { is_country_type = xvcv_mdlc_trading_machine_controller }
		random_owned_fleet = {
			limit = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_$ID$_owner_id_@root }
			random_country = {
				limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev }
				root = {
					if = {
						limit = { prev = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
						subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_$ID$_trade_value }
						else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_$ID$_energy_income } }
					}
					xvcv_mdlc_civic_trading_machine_resource_deposit_calc_effect = yes
					remove_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prevprev #unassign the fleet's id
					xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = $ID$ }
				}
				remove_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev #unassign the fleet's id
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_$ID$_@root #unassign the fleet owner's id
			}
			destroy_fleet = this
		}
	}
}
xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = {
	add_resource = { energy = 300 alloys = 700 }
	random_country = {
		limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_$ID$_@prev }
		remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_$ID$_@prev
	}
}
xvcv_mdlc_civic_trading_machine_ship_build_projects_effect = {
	random_country = {
		limit = { is_country_type = xvcv_mdlc_trading_machine_controller }
		create_fleet = {
			settings = {
				spawn_debris = no
				uses_naval_capacity = no
			}
			effect = {
				set_owner = prev
				create_ship = {
					name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP"
					design = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_DESIGN"
				}
				set_location = root.capital_scope.starbase
				#below codes are to create different flags based on an internal id of a country or a fleet, avoiding conflicts of multiple players having this civic at the same time
				if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_1_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_1"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_1_owner_id_@root #assign the fleet owner's id
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_1_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev #assign the new fleet's id
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target #this is temporary event target for "xvcv_mdlc.11.desc" event descriptions
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev #assign the new fleet's id
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_1_done
					}
				}
				else_if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_2_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_2"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_2_owner_id_@root
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_2_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_2_done
					}
				}
				else_if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_3_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_3"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_3_owner_id_@root
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_3_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_3_done
					}
				}
				else_if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_4_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_4"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_4_owner_id_@root
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_4_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_4_done
					}
				}
				else_if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_5_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_5"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_5_owner_id_@root
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_5_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_5_done
					}
				}
				else_if = {
					limit = { root = { has_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_6_done } }
					set_name = "NAME_XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_FLEET_6"
					set_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_6_owner_id_@root
					random_country = {
						limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_6_@root }
						set_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
						save_event_target_as = xvcv_mdlc_civic_trading_machine_evt_10_desc_target
						prev = {
							auto_move_to_planet = {
								target = prev.capital_scope
								clear_auto_move_on_arrival = yes
							}
						}
					}
					root = {
						set_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev
						remove_country_flag = xvcv_mdlc_civic_trading_machine_ship_build_project_6_done
					}
				}
			}
		}
		set_faction_hostility = {
			target = root
			set_hostile = no
			set_neutral = no
			set_friendly = yes
		}
	}
}
xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = {
	if = {
		limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
		event_target:xvcv_mdlc_trading_machine_owner = { set_variable = { which = xvcv_mdlc_target_$ID$_trade_value_old value = xvcv_mdlc_target_$ID$_trade_value } }
		xvcv_mdlc_civic_trading_machine_target_all_trade_value_calc_effect = { ID = $ID$ }
		event_target:xvcv_mdlc_trading_machine_owner = {
			change_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_$ID$_trade_value }
			if = {
				limit = { NOT = { has_country_flag = xvcv_mdlc_target_$ID$_trade_value_added_to_all_trade_value } }
				set_country_flag = xvcv_mdlc_target_$ID$_trade_value_added_to_all_trade_value
				else = { subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_$ID$_trade_value_old } }
			}
		}
		else = {
			event_target:xvcv_mdlc_trading_machine_owner = { set_variable = { which = xvcv_mdlc_target_$ID$_energy_income_old value = xvcv_mdlc_target_$ID$_energy_income } }
			xvcv_mdlc_civic_trading_machine_target_all_energy_income_calc_effect = { ID = $ID$ }
			event_target:xvcv_mdlc_trading_machine_owner = {
				change_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_$ID$_energy_income }
				if = {
					limit = { NOT = { has_country_flag = xvcv_mdlc_target_$ID$_energy_income_is_added_to_all_energy_income_from_trade } }
					set_country_flag = xvcv_mdlc_target_$ID$_energy_income_is_added_to_all_energy_income_from_trade
					else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_$ID$_energy_income_old } }
				}
			}
		}
	}
}
xvcv_mdlc_civic_trading_machine_resource_deposit_clear_effect = {
	capital_scope = {
		#clear deposits
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_energy } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_minerals } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_alloys } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_influence } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_unity } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_rares } remove_deposit = yes }
		every_deposit = { limit = { is_deposit_type = xvcv_mdlc_d_civic_trading_machine_energy_alt } remove_deposit = yes }
	}
}
xvcv_mdlc_civic_trading_machine_resource_deposit_calc_effect = {
	xvcv_mdlc_civic_trading_machine_resource_deposit_clear_effect = yes
	switch = {
		trigger = has_policy_flag
		xvcv_mdlc_civic_trading_machine_trade_energy = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_energy } } }
		xvcv_mdlc_civic_trading_machine_trade_minerals = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_minerals } } }
		xvcv_mdlc_civic_trading_machine_trade_alloys = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_alloys } } }
		xvcv_mdlc_civic_trading_machine_trade_influence = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_influence } } }
		xvcv_mdlc_civic_trading_machine_trade_unity = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_unity } } }
		xvcv_mdlc_civic_trading_machine_trade_rares = { while = { count = xvcv_mdlc_all_trade_value_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_rares } } }			
	}
	while = { count = xvcv_mdlc_all_energy_income_from_trade capital_scope = { add_deposit = xvcv_mdlc_d_civic_trading_machine_energy_alt } }
}
xvcv_mdlc_civic_trading_machine_on_civic_lost_effect = {
	#clear variables for reusing them again
	clear_variable = xvcv_mdlc_all_trade_value_from_trade
	clear_variable = xvcv_mdlc_all_energy_income_from_trade
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 1 }
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 2 }
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 3 }
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 4 }
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 5 }
	xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 6 }
	random_country = {
		limit = { is_country_type = xvcv_mdlc_trading_machine_controller }
		#destroy all fleets owned by the trade ship owner empire
		every_owned_fleet = {
			limit = {
				OR = {
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_1_owner_id_@prevprev
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_2_owner_id_@prevprev
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_3_owner_id_@prevprev
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_4_owner_id_@prevprev
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_5_owner_id_@prevprev
					has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_6_owner_id_@prevprev
				}
			}
			#clear all country flags of the opponent empire
			every_country = {
				limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev }
				remove_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_1_@prevprevprev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_2_@prevprevprev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_3_@prevprevprev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_4_@prevprevprev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_5_@prevprevprev
				remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_6_@prevprevprev
			}
			destroy_fleet = this
		}
	}
	xvcv_mdlc_civic_trading_machine_resource_deposit_clear_effect = yes
}
xvcv_mdlc_civic_trading_machine_arrive_on_opponent_capital_effect = {
	random_country = {
		limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev } #the trade ship owner empire
		save_event_target_as = xvcv_mdlc_trading_machine_owner #save 'the trade ship owner empire' as a temporary event target
		prevprev.fromfrom.owner = { #the opponent empire
			if = { #2 steps back, the 'from', the trade ship fleet
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_1_owner_id_@prevprev } } #2 steps back from the fleet, now it's the trade ship owner empire
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 1 }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_2_owner_id_@prevprev } }
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 2 }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_3_owner_id_@prevprev } }
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 3 }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_4_owner_id_@prevprev } }
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 4 }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_5_owner_id_@prevprev } }
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 5 }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_6_owner_id_@prevprev } }
				xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 6 }
			}
			add_opinion_modifier = {
				who = prev #the trade ship owner empire
				modifier = xvcv_mdlc_civic_trading_machine_triggered_opinion
			}
		}
		while = {
			count = xvcv_mdlc_all_trade_value_from_trade
			prevprev.fromfrom.owner = { add_resource = { energy = 10 } } #the opponent empire
		}
		while = {
			count = xvcv_mdlc_all_energy_income_from_trade
			prevprev.fromfrom.owner = { add_resource = { energy = 10 } }
		}
		xvcv_mdlc_civic_trading_machine_resource_deposit_calc_effect = yes
		prev = {
			auto_move_to_planet = {
				target = prev.capital_scope
				clear_auto_move_on_arrival = yes
			}
		}
	}
}
xvcv_mdlc_civic_trading_machine_arrive_on_ship_owner_capital_effect = {
	random_country = {
		limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev } #the opponent empire
		prevprev.fromfrom.owner = { #the trade ship owner empire
			save_event_target_as = xvcv_mdlc_trading_machine_owner
			if = { #'prevprev' means 2 steps back, the 'from', the trade ship fleet
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_1_owner_id_@prev } } #1 step back from the fleet, now it's the trade ship owner empire
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 1 } } #1 step back from the trade ship owner empire, so it's the opponent empire
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_2_owner_id_@prev } }
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 2 } }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_3_owner_id_@prev } }
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 3 } }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_4_owner_id_@prev } }
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 4 } }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_5_owner_id_@prev } }
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 5 } }
			}
			else_if = {
				limit = { prevprev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_6_owner_id_@prev } }
				prev = { xvcv_mdlc_civic_trading_machine_all_trade_value_or_energy_income_from_trade_calc_effect = { ID = 6 } }
			}
			xvcv_mdlc_civic_trading_machine_resource_deposit_calc_effect = yes
			while = {
				count = xvcv_mdlc_all_trade_value_from_trade
				prev = { add_resource = { energy = 10 } } #1 step back from the trade ship owner empire, now it's the opponent empire
			}
			while = {
				count = xvcv_mdlc_all_energy_income_from_trade
				prev = { add_resource = { energy = 10 } }
			}
			add_opinion_modifier = {
				who = prev #the opponent empire
				modifier = xvcv_mdlc_civic_trading_machine_triggered_opinion
			}
		}
		prev = {
			auto_move_to_planet = {
				target = prev.capital_scope
				clear_auto_move_on_arrival = yes
			}
		}
	}
}
xvcv_mdlc_civic_trading_machine_destroyed_while_transit_effect = {
	random_country = {
		limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev } #the opponent empire
		remove_country_flag = xvcv_mdlc_civic_trading_machine_target_country_@prev #unassign the destroyed fleet's id
		save_event_target_as = xvcv_mdlc_civic_trading_machine_trade_stopped_target_country #this is also used in the 'xvcv_mdlc.15' event description
	}
	random_country = {
		limit = { has_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev } #the trade ship owner empire
		if = {
			limit = { is_same_empire = prevprev.from } #if the player empire attacked and destroyed the ship #possible #but why did you do this?
			random_country = {
				limit = { is_country_type = xvcv_mdlc_trading_machine_controller }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
			}
		}
		remove_country_flag = xvcv_mdlc_civic_trading_machine_owner_country_@prev #unassign the destroyed fleet's id
		if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_1_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_1_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_1_energy_income } }
			}
			#the trade ship has been destroyed, need to restart the trade again, so need to clear these variables for later use too
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 1 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_1_@prev } #unassign the fleet owner's id
		}
		else_if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_2_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_2_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_2_energy_income } }
			}
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 2 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_2_@prev }
		}
		else_if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_3_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_3_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_3_energy_income } }
			}
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 3 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_3_@prev }
		}
		else_if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_4_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_4_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_4_energy_income } }
			}
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 4 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_4_@prev }
		}
		else_if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_5_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_5_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_5_energy_income } }
			}
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 5 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_5_@prev }
		}
		else_if = {
			limit = { prev = { has_fleet_flag = xvcv_mdlc_civic_trading_machine_fleet_6_owner_id_@prev } }
			if = {
				limit = { event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
				subtract_variable = { which = xvcv_mdlc_all_trade_value_from_trade value = xvcv_mdlc_target_6_trade_value }
				else = { subtract_variable = { which = xvcv_mdlc_all_energy_income_from_trade value = xvcv_mdlc_target_6_energy_income } }
			}
			xvcv_mdlc_civic_trading_machine_reset_variables_flags_effect = { ID = 6 }
			event_target:xvcv_mdlc_civic_trading_machine_trade_stopped_target_country = { remove_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_6_@prev }
		}
		country_event = { id = xvcv_mdlc.15 }
	}
}
xvcv_mdlc_leader_tied_traits_add_effect = {
	optimize_memory
	every_owned_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory }
		}
		add_trait_no_notify = xvcv_mdlc_leader_trait_shared_memory
	}
	every_pool_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory }
		}
		add_trait_no_notify = xvcv_mdlc_leader_trait_shared_memory
	}
	every_owned_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup }
		}
		add_trait_no_notify = xvcv_mdlc_leader_trait_memory_backup
	}
	every_pool_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup }
		}
		add_trait_no_notify = xvcv_mdlc_leader_trait_memory_backup
	}
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		add_trait_no_notify = xvcv_mdlc_leader_trait_bio_robot
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		add_trait_no_notify = xvcv_mdlc_leader_trait_bio_robot
	}
}
xvcv_mdlc_leader_tied_traits_remove_effect = {
	optimize_memory
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory } }
		remove_trait = xvcv_mdlc_leader_trait_shared_memory
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory } }
		remove_trait = xvcv_mdlc_leader_trait_shared_memory
	}
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup } }
		remove_trait = xvcv_mdlc_leader_trait_memory_backup
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup } }
		remove_trait = xvcv_mdlc_leader_trait_memory_backup
	}
	#usually the bio robot trait will remain under most circumstances but just in case...
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		remove_trait = xvcv_mdlc_leader_trait_bio_robot
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		remove_trait = xvcv_mdlc_leader_trait_bio_robot
	}
}
xvcv_mdlc_leader_trait_shared_memory_main_effect = {
	from = {
		switch = {
			trigger = leader_class
			admiral = {
				switch = {
					trigger = has_skill
					2 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 2 } add_skill = 1 } } }
					3 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 3 } add_skill = 1 } } }
					4 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 4 } add_skill = 1 } } }
					5 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 5 } add_skill = 1 } } }
					6 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 6 } add_skill = 1 } } }
					7 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 7 } add_skill = 1 } } }
					8 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 8 } add_skill = 1 } } }
					9 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 9 } add_skill = 1 } } }
					10 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = admiral has_skill < 10 } add_skill = 1 } } }
				}
			}
			scientist = {
				switch = {
					trigger = has_skill
					2 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 2 } add_skill = 1 } } }
					3 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 3 } add_skill = 1 } } }
					4 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 4 } add_skill = 1 } } }
					5 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 5 } add_skill = 1 } } }
					6 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 6 } add_skill = 1 } } }
					7 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 7 } add_skill = 1 } } }
					8 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 8 } add_skill = 1 } } }
					9 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 9 } add_skill = 1 } } }
					10 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = scientist has_skill < 10 } add_skill = 1 } } }
				}
			}
			governor = {
				switch = {
					trigger = has_skill
					2 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 2 } add_skill = 1 } } }
					3 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 3 } add_skill = 1 } } }
					4 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 4 } add_skill = 1 } } }
					5 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 5 } add_skill = 1 } } }
					6 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 6 } add_skill = 1 } } }
					7 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 7 } add_skill = 1 } } }
					8 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 8 } add_skill = 1 } } }
					9 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 9 } add_skill = 1 } } }
					10 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = governor has_skill < 10 } add_skill = 1 } } }
				}
			}
			general = {
				switch = {
					trigger = has_skill
					2 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 2 } add_skill = 1 } } }
					3 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 3 } add_skill = 1 } } }
					4 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 4 } add_skill = 1 } } }
					5 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 5 } add_skill = 1 } } }
					6 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 6 } add_skill = 1 } } }
					7 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 7 } add_skill = 1 } } }
					8 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 8 } add_skill = 1 } } }
					9 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 9 } add_skill = 1 } } }
					10 = { prev = { every_owned_leader = { limit = { is_councilor = no has_trait = xvcv_mdlc_leader_trait_shared_memory leader_class = general has_skill < 10 } add_skill = 1 } } }
				}
			}
		}
	}
}
xvcv_mdlc_servitor_morale_calc_main_effect = {
	if = {
		limit = { pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.1 } }
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_abysmal days = -1 }
	}
	else_if = {
		limit = {
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.2 }
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.1 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_low days = -1 }
	}
	else_if = {
		limit = {
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.3 }
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.2 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_average days = -1 }
	}
	else_if = {
		limit = {
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.4 }
			pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.3 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_high days = -1 }
	}
	else_if = {
		limit = { pop_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.4 } }
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_max days = -1 }
	}
}
xvcv_mdlc_servitor_morale_clear_effect = {
	switch = {
		trigger = has_modifier
		xvcv_mdlc_servitor_morale_max = { remove_modifier = xvcv_mdlc_servitor_morale_max }
		xvcv_mdlc_servitor_morale_high = { remove_modifier = xvcv_mdlc_servitor_morale_high }
		xvcv_mdlc_servitor_morale_average = { remove_modifier = xvcv_mdlc_servitor_morale_average }
		xvcv_mdlc_servitor_morale_low = { remove_modifier = xvcv_mdlc_servitor_morale_low }
		xvcv_mdlc_servitor_morale_abysmal = { remove_modifier = xvcv_mdlc_servitor_morale_abysmal }
	}
}
xvcv_mdlc_ap_base_code_recompositions_add_civic_machine_terminator_effect = {
	#artist
	if = {
		limit = {
			OR = {
				has_modifier = enclave_artist_patron
				has_country_flag = artist_patron
			}
		}
		remove_modifier = enclave_artist_patron
		remove_country_flag = artist_patron
	}
	set_country_flag = enclave_artist_ignores
	#curator
	set_country_flag = attacked_curators
	if = {
		limit = { has_modifier = curator_insight }
		remove_modifier = curator_insight
	}
	#traders
	set_country_flag = attacked_xuracorp
	if = {
		limit = { has_active_xuracorp_trade = yes }
		remove_xuracorp_trades = yes
		remove_relation_flag = {
			who = FROM
			flag = xuracorp_trade
		}
	}
	set_country_flag = attacked_riggans
	if = {
		limit = { has_active_riggan_trade = yes }
		remove_riggan_trades = yes
		remove_relation_flag = {
			who = FROM
			flag = riggan_trade
		}
	}
	set_country_flag = attacked_muutagans
	if = {
		limit = { has_active_muutagan_trade = yes }
		remove_muutagan_trades = yes
		remove_relation_flag = {
			who = FROM
			flag = muutagan_trade
		}
	}
	#leaves galcom
	if = {
		limit = { is_galactic_emperor = yes }
		set_galactic_emperor = no
	}
	if = {
		limit = { is_galactic_custodian = yes }
		set_galactic_custodian = no
	}
	if = {
		limit = { is_galactic_community_member = yes }
		remove_from_galactic_community = yes
	}
	#changes civic
	if = {
		limit = { has_valid_civic = civic_machine_assimilator }
		force_remove_civic = civic_machine_assimilator
	}
	if = {
		limit = { has_valid_civic = civic_machine_servitor }
		force_remove_civic = civic_machine_servitor
		xvcv_mdlc_servitor_morale_clear_effect = yes
	}
	force_add_civic = civic_machine_terminator
	add_modifier = { modifier = xvcv_mdlc_ap_base_code_recompositions_civic_slot days = -1 }
}
xvcv_mdlc_ap_base_code_recompositions_add_civic_machine_assimilator_effect = {
	if = {
		limit = { has_valid_civic = civic_machine_terminator }
		force_remove_civic = civic_machine_terminator
	}
	if = {
		limit = { has_valid_civic = civic_machine_servitor }
		force_remove_civic = civic_machine_servitor
		xvcv_mdlc_servitor_morale_clear_effect = yes
	}
	force_add_civic = civic_machine_assimilator
	create_species = {
		adjective = "PRESCRIPTED_secondary_species_adjective_tebrid"
		name = "PRESCRIPTED_secondary_species_name_tebrid"
		namelist = "MOL2"
		plural = "PRESCRIPTED_secondary_species_plural_tebrid"
		class = "MOL"
		portrait = "mol8"
		traits = {
			trait = xvcv_mdlc_trait_engineered_organics
			trait = trait_cybernetic
			trait = trait_strong
			trait = trait_industrious
			trait = trait_slow_learners
		}
		homeworld = root.capital_scope
		effect = {
			if = {
				limit = { has_leviathans = yes }
				change_species_portrait = "mol17" #cute starfish :)
			}
		}
	}
	every_owned_planet = { create_pop = { species = last_created_species } }
	every_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_engineered_organics }
		xvcv_mdlc_modify_species_clear_pc_preference_traits_effect = yes
	}
	random_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_engineered_organics }
		xvcv_mdlc_machine_species_rights_adjustments_effect = yes
	}
	add_modifier = { modifier = xvcv_mdlc_ap_base_code_recompositions_civic_slot days = -1 }
}
xvcv_mdlc_ap_base_code_recompositions_add_civic_machine_servitor_effect = {
	if = {
		limit = { has_valid_civic = civic_machine_terminator }
		force_remove_civic = civic_machine_terminator
	}
	if = {
		limit = { has_valid_civic = civic_machine_assimilator }
		force_remove_civic = civic_machine_assimilator
	}
	if = {
		limit = { has_origin = origin_machine }
		set_origin = origin_default
	}
	force_add_civic = civic_machine_servitor
	create_species = {
		adjective = "PRESCRIPTED_species_adjective_humans1"
		name = "PRESCRIPTED_species_name_humans1"
		namelist = "HUMAN1"
		plural = "PRESCRIPTED_species_plural_humans1"
		class = "HUM"
		portrait = "human"
		traits = {
			trait = xvcv_mdlc_trait_engineered_organics_alt
			trait = trait_adaptive
			trait = trait_nomadic
			trait = trait_wasteful
		}
		homeworld = root.capital_scope
	}
	capital_scope = {
		while = { create_pop = { species = last_created_species } count = 5 }
		if = { #if the planet has not enough free building slots
			limit = { free_building_slots = 0 }
			add_deposit = xvcv_mdlc_d_building_slot_plus_1
		}
		add_building = building_organic_sanctuary
	}
	every_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_engineered_organics_alt }
		xvcv_mdlc_modify_species_clear_pc_preference_traits_effect = yes
	}
	random_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_engineered_organics_alt }
		xvcv_mdlc_organic_trophy_species_rights_adjustments_effect = yes
	}
	xvcv_mdlc_servitor_morale_calc_main_effect = yes
	add_modifier = { modifier = xvcv_mdlc_ap_base_code_recompositions_civic_slot days = -1 }
}
xvcv_mdlc_ap_mind_separation_project_main_effect = {
	optimize_memory
	#see 'GOVERNMENT_CHANGE_EMPIRE_SIZE_MULT' in the '00_defines.txt' vanilla file for more info
	#GOVERNMENT_CHANGE_EMPIRE_SIZE_MULT	= 10.0 # It will cost (Empire Size) * X Unity to change Government Type
	export_trigger_value_to_variable = {
		trigger = empire_size
		variable = xvcv_mdlc_gov_reform_cost_var
	}
	add_resource = {
		unity = 10 #cost to reform government
		mult = xvcv_mdlc_gov_reform_cost_var
	}
	clear_variable = xvcv_mdlc_gov_reform_cost_var
	every_owned_pop = { prev = { add_resource = { consumer_goods = 12 } } } #add 12 goods per pop

	#this effect code should be placed above 'change_government' effect
	every_owned_leader = {
		limit = {
			is_councilor = yes
			is_ruler = no
		}
		kill_leader = {
			show_notification = no
			fire = yes #this fires on_leader_fired instead of on_leader_death #I set this 'yes' because of the 'paragon.600' event, which is triggered by 'on_leader_death'
		}
	}

	#to remove "[19:01:58][government_restrictions_solver.cpp:1316]: change_government at  file: events/xvcv_mdlc_events.txt line: 1527: Result origin is not valid" error log #stellaris v3.0.4
	if = {
		limit = {
			OR = {
				has_origin = origin_machine
				#origins from this mod
				has_origin = xvcv_mdlc_origin_start_with_colony
			}
		}
		set_origin = origin_default
	}

	clear_ethos = yes
	country_add_ethic = ethic_materialist
	change_government = {
		authority = auth_dictatorial
		civics = {}
		remove_invalid_civics = yes
		cooldown = no
	}
	unlock_council_slots = 2
	reset_policy_cooldowns = yes

	set_country_flag = flesh_weakened
	set_country_flag = synthetic_empire
	set_country_flag = synth_assimilation

	give_technology = { tech = tech_robotic_workers message = no }
	give_technology = { tech = tech_droid_workers message = no }
	give_technology = { tech = tech_synthetic_workers message = no }
	give_technology = { tech = tech_synthetic_leaders message = no }

	give_technology = { tech = tech_luxuries_1 message = no }
	give_technology = { tech = tech_luxuries_2 message = no }

	#give species modification points with proper techs
	if = {
		limit = { has_technology = tech_robomodding_m }
		give_technology = { tech = tech_robomodding message = no }
	}
	if = {
		limit = { has_technology = tech_binary_motivators }
		give_technology = { tech = tech_robomodding_points_1 message = no }
	}
	if = {
		limit = { has_technology = tech_nanite_assemblers }
		give_technology = { tech = tech_robomodding_points_2 message = no }
	}

	every_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_bio_robot }
		modify_species = {
			add_trait = trait_mechanical
			remove_trait = trait_machine_unit
		}
	}
	this.species = {
		if = {
			limit = { NOT = { has_trait = xvcv_mdlc_trait_bio_robot } }
			create_species = {
				adjective = this
				name = this
				namelist = prev
				plural = this
				class = "ROBOT"
				portrait = this
				traits = { trait = trait_mechanical }
				traits = this
				homeworld = prev.capital_scope
				effect = {
					modify_species = {
						remove_trait = trait_machine_unit
						change_scoped_species = no
					}
				}
			}
		}
	}
	xvcv_mdlc_dominant_species_changing_effect = yes
	every_owned_pop = {
		limit = { has_trait = trait_machine_unit }
		change_species = last_created_species
	}
	random_owned_pop = {
		limit = { is_same_species = prev.species }
		xvcv_mdlc_robot_species_rights_adjustments_effect = yes
	}
	every_owned_army = {
		limit = { is_defensive_army = no }
		modify_army = {
			name = random
			type = "robotic_army"
			species = this
		}
	}
	every_owned_army = {
		limit = { is_defensive_army = yes }
		modify_army = {
			name = random
			type = "robotic_defense_army"
			species = this
		}
	}
	every_owned_leader = {
		limit = {
			is_event_leader = no
			has_ethic = ethic_gestalt_consciousness
		}
		change_background_ethic = ethic_materialist
		if = {
			limit = { NOT = { has_trait = leader_trait_synthetic } }
			add_trait_no_notify = leader_trait_synthetic
		}
	}
	every_envoy = {
		limit = {
			is_event_leader = no
			has_ethic = ethic_gestalt_consciousness
		}
		change_background_ethic = ethic_materialist
	}
	every_pool_leader = {
		limit = {
			is_event_leader = no
			has_ethic = ethic_gestalt_consciousness
		}
		change_background_ethic = ethic_materialist
		if = {
			limit = { NOT = { has_trait = leader_trait_synthetic } }
			add_trait_no_notify = leader_trait_synthetic
		}
	}

	create_message = {
		type = MESSAGE_ALL_GAINED_TRAIT
		localization = MESSAGE_ALL_GAINED_TRAIT_DESC
		days = @toast_message_days
		variable = {
			type = key
			value = leader_trait_synthetic
			localization = TRAIT
		}
		variable = {
			key = TRAIT_KEY
			value = leader_trait_synthetic
		}
		variable = {
			key = "border"
			value = "GFX_invisible" #TODO Common/ no rarity frame
		}
	}

	ruler = {
		remove_all_traits = yes
		add_trait_no_notify = leader_trait_synthetic
	}

	#set the origin again when it's needed
	if = {
		limit = { NOT = { has_authority = auth_dictatorial } }
		set_origin = origin_default
		#and attempt to change the government again
		change_government = {
			authority = auth_dictatorial
			civics = {}
			remove_invalid_civics = yes
			cooldown = no
		}
	}

	random_owned_leader = {
		limit = { leader_class = admiral }
		set_council_position = councilor_defense
	}
	random_owned_leader = {
		limit = { leader_class = scientist }
		set_council_position = councilor_research
	}
}
xvcv_mdlc_ap_mind_separation_project_buildings_conversion_effect = {
	optimize_memory
	every_owned_planet = {
		while = {
			limit = { has_district = district_nexus }
			remove_district = district_nexus
			add_district = district_city
		}
		while = {
			limit = { has_district = district_rw_nexus }
			remove_district = district_rw_nexus
			add_district = district_rw_city
		}
		while = {
			limit = { has_district = xvcv_mdlc_pc_mechanical_district_nexus }
			remove_district = xvcv_mdlc_pc_mechanical_district_nexus
			add_district = xvcv_mdlc_pc_mechanical_district_city
		}
		while = {
			limit = { has_district = xvcv_mdlc_pc_machine_auto_district_nexus }
			remove_district = xvcv_mdlc_pc_machine_auto_district_nexus
			add_district = xvcv_mdlc_pc_machine_auto_district_city
		}

		if = {
			limit = { has_building = building_deployment_post }
			remove_building = building_deployment_post
			add_building = building_colony_shelter
		}
		if = {
			limit = { has_building = building_machine_capital }
			remove_building = building_machine_capital
			add_building = building_capital
		}
		if = {
			limit = { has_building = building_machine_major_capital }
			remove_building = building_machine_major_capital
			add_building = building_major_capital
		}
		if = {
			limit = { has_building = building_machine_system_capital }
			remove_building = building_machine_system_capital
			add_building = building_system_capital
		}

		if = {
			limit = { has_building = building_machine_assembly_plant }
			remove_building = building_machine_assembly_plant
			add_building = building_robot_assembly_plant
		}
		if = {
			limit = { has_building = building_machine_assembly_complex }
			remove_building = building_machine_assembly_complex
			add_building = building_robot_assembly_complex
		}

		if = {
			limit = { has_building = building_production_center }
			remove_building = building_production_center
			add_building = building_ministry_production
		}
		if = {
			limit = { has_building = building_supercomputer }
			remove_building = building_supercomputer
			add_building = building_institute
		}

		if = {
			limit = { has_building = xvcv_mdlc_building_uplink_node_facility }
			remove_building = xvcv_mdlc_building_uplink_node_facility
			add_building = building_noble_estates
		}
		while = {
			limit = { has_building = building_sentinel_posts }
			remove_building = building_sentinel_posts
			add_building = building_precinct_house
		}

		while = {
			limit = { has_building = building_organic_sanctuary }
			remove_building = building_organic_sanctuary
			add_building = building_commercial_zone
		}
		while = {
			limit = { has_building = building_organic_paradise }
			remove_building = building_organic_paradise
			add_building = building_commercial_megaplex
		}

		while = {
			limit = { has_building = building_uplink_node }
			remove_building = building_uplink_node
			add_building = building_bureaucratic_1
		}
		while = {
			limit = { has_building = building_network_junction }
			remove_building = building_network_junction
			add_building = building_bureaucratic_2
		}
		while = {
			limit = { has_building = building_system_conflux }
			remove_building = building_system_conflux
			add_building = building_bureaucratic_3
		}

		while = {
			limit = { has_building = building_simulation_1 }
			remove_building = building_simulation_1
			add_building = building_autochthon_monument
		}
		while = {
			limit = { has_building = building_simulation_2 }
			remove_building = building_simulation_2
			add_building = building_heritage_site
		}
		while = {
			limit = { has_building = building_simulation_3 }
			remove_building = building_simulation_3
			add_building = building_hypercomms_forum
		}
		if = {
			limit = { has_building = building_alpha_hub }
			remove_building = building_alpha_hub
			add_building = building_autocurating_vault
		}
	}
}
xvcv_mdlc_ap_mind_separation_project_temp_modifiers_add_effect = {
	switch = {
		trigger = has_modifier
		xvcv_mdlc_emotional_shock_10 = {
			remove_modifier = xvcv_mdlc_emotional_shock_10
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_9" days = 3240 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_9 = {
			remove_modifier = xvcv_mdlc_emotional_shock_9
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_8" days = 2880 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_8 = {
			remove_modifier = xvcv_mdlc_emotional_shock_8
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_7" days = 2520 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_7 = {
			remove_modifier = xvcv_mdlc_emotional_shock_7
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_6" days = 2160 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_6 = {
			remove_modifier = xvcv_mdlc_emotional_shock_6
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_5" days = 1800 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_5 = {
			remove_modifier = xvcv_mdlc_emotional_shock_5
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_4" days = 1440 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_4 = {
			remove_modifier = xvcv_mdlc_emotional_shock_4
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_3" days = 1080 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_3 = {
			remove_modifier = xvcv_mdlc_emotional_shock_3
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_2" days = 720 }
			country_event = { id = xvcv_mdlc.31 days = 360 }
		}
		xvcv_mdlc_emotional_shock_2 = {
			remove_modifier = xvcv_mdlc_emotional_shock_2
			add_modifier = { modifier = "xvcv_mdlc_emotional_shock_1" days = 360 }
		}
	}
	if = {
		limit = {
			NOR = {
				has_modifier = xvcv_mdlc_emotional_shock_10
				has_modifier = xvcv_mdlc_emotional_shock_9
				has_modifier = xvcv_mdlc_emotional_shock_8
				has_modifier = xvcv_mdlc_emotional_shock_7
				has_modifier = xvcv_mdlc_emotional_shock_6

				has_modifier = xvcv_mdlc_emotional_shock_5
				has_modifier = xvcv_mdlc_emotional_shock_4
				has_modifier = xvcv_mdlc_emotional_shock_3
				has_modifier = xvcv_mdlc_emotional_shock_2
				has_modifier = xvcv_mdlc_emotional_shock_1
			}
		}
		add_modifier = { modifier = "xvcv_mdlc_emotional_shock_10" days = 3600 }
		country_event = { id = xvcv_mdlc.31 days = 360 }
	}
}
xvcv_mdlc_ap_mind_integration_project_main_effect = {
	optimize_memory
	export_trigger_value_to_variable = {
		trigger = empire_size
		variable = xvcv_mdlc_gov_reform_cost_var
	}
	add_resource = {
		unity = 10
		mult = xvcv_mdlc_gov_reform_cost_var
	}
	clear_variable = xvcv_mdlc_gov_reform_cost_var

	if = {
		limit = {
			OR = {
				#jeez, PDX, you are too harsh to Gestalts!
				has_origin = origin_mechanists
				has_origin = origin_syncretic_evolution
				has_origin = origin_life_seeded
				has_origin = origin_post_apocalyptic
				has_origin = origin_void_dwellers
				has_origin = origin_scion
				has_origin = origin_tree_of_life
				has_origin = origin_shoulders_of_giants
				has_origin = origin_lithoid
				has_origin = origin_common_ground
				has_origin = origin_hegemon
				has_origin = origin_lost_colony
				has_origin = origin_necrophage
				has_origin = origin_clone_army
				has_origin = origin_ocean_paradise
				has_origin = origin_progenitor_hive
				has_origin = origin_subterranean
				has_origin = origin_shroudwalker_apprentice
				#origins from this mod
				has_origin = xvcv_mdlc_origin_synth_ascend
				has_origin = xvcv_mdlc_origin_mechanical_heritage
			}
		}
		set_origin = origin_default
	}

	clear_ethos = yes
	country_add_ethic = ethic_gestalt_consciousness
	change_government = {
		authority = auth_machine_intelligence
		civics = {}
		cooldown = no
		remove_invalid_civics = yes
	}
	reset_policy_cooldowns = yes

	if = {
		limit = { has_country_flag = flesh_weakened }
		remove_country_flag = flesh_weakened
	}
	remove_country_flag = synthetic_empire
	remove_country_flag = synth_assimilation

	if = {
		limit = { NOT = { has_technology = tech_bio_reactor } }
		give_technology = { tech = tech_bio_reactor message = no }
	}
	if = {
		limit = { has_technology = tech_robomodding }
		give_technology = { tech = tech_robomodding_m message = no }
	}
	if = {
		limit = { has_technology = tech_robomodding_points_1 }
		give_technology = { tech = tech_binary_motivators message = no }
	}
	if = {
		limit = { has_technology = tech_robomodding_points_2 }
		give_technology = { tech = tech_nanite_assemblers message = no }
	}

	every_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_bio_robot }
		modify_species = {
			add_trait = trait_machine_unit
			remove_trait = trait_mechanical
		}
	}
	this.species = {
		if = {
			limit = { NOT = { has_trait = xvcv_mdlc_trait_bio_robot } }
			create_species = {
				adjective = this
				name = this
				namelist = prev
				plural = this
				class = "MACHINE"
				portrait = this
				traits = { trait = trait_machine_unit }
				traits = this
				homeworld = prev.capital_scope
				effect = {
					modify_species = {
						remove_trait = trait_mechanical
						change_scoped_species = no
					}
				}
			}
		}
	}
	xvcv_mdlc_dominant_species_changing_effect = yes
	every_owned_pop = {
		limit = { has_trait = trait_mechanical }
		change_species = last_created_species
	}
	random_owned_pop = {
		limit = { is_same_species = prev.species }
		xvcv_mdlc_machine_species_rights_adjustments_effect = yes
	}
	every_owned_army = {
		limit = { is_defensive_army = no }
		modify_army = {
			name = random
			type = "machine_assault_1"
			species = this
		}
	}
	every_owned_army = {
		limit = { is_defensive_army = yes }
		modify_army = {
			name = random
			type = "machine_defense"
			species = this
		}
	}
	every_owned_leader = {
		limit = {
			is_event_leader = no
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		change_background_ethic = ethic_gestalt_consciousness
		if = {
			limit = {
				prev = { NOT = { has_active_tradition = tr_synthetics_finish_machine } } #also see: tr_synthetics_finish_machine_desc
				has_trait = leader_trait_synthetic
			}
			remove_trait = leader_trait_synthetic
		}
	}
	every_envoy = {
		limit = {
			is_event_leader = no
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		change_background_ethic = ethic_gestalt_consciousness
	}
	every_pool_leader = {
		limit = {
			is_event_leader = no
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		change_background_ethic = ethic_gestalt_consciousness
		if = {
			limit = {
				prev = { NOT = { has_active_tradition = tr_synthetics_finish_machine } }
				has_trait = leader_trait_synthetic
			}
			remove_trait = leader_trait_synthetic
		}
	}

	ruler = {
		remove_all_traits = yes
		add_trait_no_notify = leader_trait_ruler_machine_intelligence
	}

	if = {
		limit = { NOT = { has_authority = auth_machine_intelligence } }
		set_origin = origin_default
		change_government = {
			authority = auth_machine_intelligence
			civics = {}
			cooldown = no
			remove_invalid_civics = yes
		}
	}

	country_create_gestalt_councilor = {
		CLASS = governor
		COUNCIL_POS = councilor_gestalt_governor
		DESC = councilor_gestalt_governor_desc
	}
	country_create_gestalt_councilor = {
		CLASS = scientist
		COUNCIL_POS = councilor_gestalt_scientist
		DESC = councilor_gestalt_scientist_desc
	}
	country_create_gestalt_councilor = {
		CLASS = admiral
		COUNCIL_POS = councilor_gestalt_admiral
		DESC = councilor_gestalt_admiral_desc
	}
	country_create_gestalt_councilor = {
		CLASS = general
		COUNCIL_POS = councilor_gestalt_general
		DESC = councilor_gestalt_general_desc
	}
}
xvcv_mdlc_ap_mind_integration_project_buildings_conversion_effect = {
	optimize_memory
	every_owned_planet = {
		while = {
			limit = { has_district = district_city }
			remove_district = district_city
			add_district = district_nexus
		}
		while = {
			limit = { has_district = district_rw_city }
			remove_district = district_rw_city
			add_district = district_rw_nexus
		}
		while = {
			limit = { has_district = xvcv_mdlc_pc_mechanical_district_city }
			remove_district = xvcv_mdlc_pc_mechanical_district_city
			add_district = xvcv_mdlc_pc_mechanical_district_nexus
		}
		while = {
			limit = { has_district = xvcv_mdlc_pc_machine_auto_district_city }
			remove_district = xvcv_mdlc_pc_machine_auto_district_city
			add_district = xvcv_mdlc_pc_machine_auto_district_nexus
		}

		if = {
			limit = { has_modifier = slave_colony }
			remove_modifier = slave_colony
		}
		if = {
			limit = { has_modifier = resort_colony }
			remove_modifier = resort_colony
		}
		if = {
			limit = { has_modifier = penal_colony }
			remove_modifier = penal_colony
		}

		if = {
			limit = { has_building = building_colony_shelter }
			remove_building = building_colony_shelter
			add_building = building_deployment_post
		}
		if = {
			limit = { has_building = building_capital }
			remove_building = building_capital
			add_building = building_machine_capital
		}			
		if = {
			limit = { has_building = building_major_capital }
			remove_building = building_major_capital
			add_building = building_machine_major_capital
		}
		if = {
			limit = { has_building = building_system_capital }
			remove_building = building_system_capital
			add_building = building_machine_system_capital
		}

		if = {
			limit = { has_building = building_resort_capital }
			remove_building = building_resort_capital
			add_building = building_machine_capital
		}
		if = {
			limit = { has_building = building_resort_major_capital }
			remove_building = building_resort_major_capital
			add_building = building_machine_system_capital
		}
		if = {
			limit = { has_building = building_slave_capital }
			remove_building = building_slave_capital
			add_building = building_machine_capital
		}
		if = {
			limit = { has_building = building_slave_major_capital }
			remove_building = building_slave_major_capital
			add_building = building_machine_system_capital
		}

		if = {
			limit = { has_building = building_robot_assembly_plant }
			remove_building = building_robot_assembly_plant
			add_building = building_machine_assembly_plant
		}
		if = {
			limit = { has_building = building_robot_assembly_complex }
			remove_building = building_robot_assembly_complex
			add_building = building_machine_assembly_complex
		}

		if = {
			limit = { has_building = building_ministry_production }
			remove_building = building_ministry_production
			add_building = building_production_center
		}
		if = {
			limit = { has_building = building_institute }
			remove_building = building_institute
			add_building = building_supercomputer
		}

		if = {
			limit = { has_building = building_clinic }
			remove_building = building_clinic
			add_building = building_uplink_node
		}
		if = {
			limit = { has_building = building_hospital }
			remove_building = building_hospital
			add_building = building_network_junction
		}

		while = {
			limit = { has_building = building_factory_1 }
			remove_building = building_factory_1
			add_building = building_foundry_1
		}
		while = {
			limit = { has_building = building_factory_2 }
			remove_building = building_factory_2
			add_building = building_foundry_2
		}
		while = {
			limit = { has_building = building_factory_3 }
			remove_building = building_factory_3
			add_building = building_foundry_3
		}

		if = {
			limit = { has_building = building_noble_estates }
			remove_building = building_noble_estates
			add_building = xvcv_mdlc_building_uplink_node_facility
		}
		if = {
			limit = { has_building = building_galactic_stock_exchange }
			remove_building = building_galactic_stock_exchange
			add_building = building_foundry_1
		}

		if = {
			limit = { has_building = building_psi_corps }
			remove_building = building_psi_corps
			add_building = building_sentinel_posts
		}
		while = {
			limit = { has_building = building_precinct_house }
			remove_building = building_precinct_house
			add_building = building_sentinel_posts
		}
		while = {
			limit = { has_building = building_hall_judgment }
			remove_building = building_hall_judgment
			add_building = building_sentinel_posts
		}
		while = {
			limit = { has_building = building_overseer_homes }
			remove_building = building_overseer_homes
			add_building = building_sentinel_posts
		}

		while = {
			limit = { has_building = building_holo_theatres }
			remove_building = building_holo_theatres
			add_building = building_simulation_1
		}
		while = {
			limit = { has_building = building_hyper_entertainment_forum }
			remove_building = building_hyper_entertainment_forum
			add_building = building_simulation_2
		}

		while = {
			limit = { has_building = building_commercial_zone }
			remove_building = building_commercial_zone
			add_building = building_foundry_2
		}
		while = {
			limit = { has_building = building_commercial_megaplex }
			remove_building = building_commercial_megaplex
			add_building = building_foundry_3
		}

		while = {
			limit = { has_building = building_luxury_residence }
			remove_building = building_luxury_residence
			add_building = building_drone_storage
		}
		while = {
			limit = { has_building = building_paradise_dome }
			remove_building = building_paradise_dome
			add_building = building_drone_megastorage
		}
		while = {
			limit = { has_building = building_communal_housing }
			remove_building = building_communal_housing
			add_building = building_drone_storage
		}
		while = {
			limit = { has_building = building_communal_housing_large }
			remove_building = building_communal_housing_large
			add_building = building_drone_megastorage
		}
		while = {
			limit = { has_building = building_slave_huts }
			remove_building = building_slave_huts
			add_building = building_drone_megastorage
		}
		if = {
			limit = { has_building = building_clone_vats }
			remove_building = building_clone_vats
		}
		while = {
			limit = { has_building = building_xeno_zoo }
			remove_building = building_xeno_zoo
			add_building = building_simulation_1
		}

		while = {
			limit = { has_building = building_bureaucratic_1 }
			remove_building = building_bureaucratic_1
			add_building = building_uplink_node
		}
		while = {
			limit = { has_building = building_bureaucratic_2 }
			remove_building = building_bureaucratic_2
			add_building = building_network_junction
		}
		while = {
			limit = { has_building = building_bureaucratic_3 }
			remove_building = building_bureaucratic_3
			add_building = building_system_conflux
		}

		while = {
			limit = { has_building = building_autochthon_monument }
			remove_building = building_autochthon_monument
			add_building = building_simulation_1
		}
		while = {
			limit = { has_building = building_heritage_site }
			remove_building = building_heritage_site
			add_building = building_simulation_2
		}
		while = {
			limit = { has_building = building_hypercomms_forum }
			remove_building = building_hypercomms_forum
			add_building = building_simulation_3
		}
		if = {
			limit = { has_building = building_autocurating_vault }
			remove_building = building_autocurating_vault
			add_building = building_alpha_hub
		}

		while = {
			limit = { has_building = building_temple }
			remove_building = building_temple
			add_building = building_simulation_1
		}
		while = {
			limit = { has_building = building_holotemple }
			remove_building = building_holotemple
			add_building = building_simulation_2
		}
		while = {
			limit = { has_building = building_sacred_nexus }
			remove_building = building_sacred_nexus
			add_building = building_simulation_3
		}
		if = {
			limit = { has_building = building_citadel_of_faith }
			remove_building = building_citadel_of_faith
			add_building = building_alpha_hub
		}

		while = {
			limit = { has_building = building_corporate_monument }
			remove_building = building_corporate_monument
			add_building = building_simulation_1
		}
		while = {
			limit = { has_building = building_corporate_site }
			remove_building = building_corporate_site
			add_building = building_simulation_2
		}
		while = {
			limit = { has_building = building_corporate_forum }
			remove_building = building_corporate_forum
			add_building = building_simulation_3
		}
		if = {
			limit = { has_building = building_corporate_vault }
			remove_building = building_corporate_vault
			add_building = building_alpha_hub
		}
	}
}
xvcv_mdlc_ap_mind_integration_project_temp_modifiers_add_effect = {
	switch = {
		trigger = has_modifier
		xvcv_mdlc_identity_conflict_10 = {
			remove_modifier = xvcv_mdlc_identity_conflict_10
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_9" days = 3240 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_9 = {
			remove_modifier = xvcv_mdlc_identity_conflict_9
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_8" days = 2880 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_8 = {
			remove_modifier = xvcv_mdlc_identity_conflict_8
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_7" days = 2520 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_7 = {
			remove_modifier = xvcv_mdlc_identity_conflict_7
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_6" days = 2160 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_6 = {
			remove_modifier = xvcv_mdlc_identity_conflict_6
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_5" days = 1800 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_5 = {
			remove_modifier = xvcv_mdlc_identity_conflict_5
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_4" days = 1440 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_4 = {
			remove_modifier = xvcv_mdlc_identity_conflict_4
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_3" days = 1080 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_3 = {
			remove_modifier = xvcv_mdlc_identity_conflict_3
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_2" days = 720 }
			country_event = { id = xvcv_mdlc.34 days = 360 }
		}
		xvcv_mdlc_identity_conflict_2 = {
			remove_modifier = xvcv_mdlc_identity_conflict_2
			add_modifier = { modifier = "xvcv_mdlc_identity_conflict_1" days = 360 }
		}
	}
	if = {
		limit = {
			NOR = {
				has_modifier = xvcv_mdlc_identity_conflict_10
				has_modifier = xvcv_mdlc_identity_conflict_9
				has_modifier = xvcv_mdlc_identity_conflict_8
				has_modifier = xvcv_mdlc_identity_conflict_7
				has_modifier = xvcv_mdlc_identity_conflict_6

				has_modifier = xvcv_mdlc_identity_conflict_5
				has_modifier = xvcv_mdlc_identity_conflict_4
				has_modifier = xvcv_mdlc_identity_conflict_3
				has_modifier = xvcv_mdlc_identity_conflict_2
				has_modifier = xvcv_mdlc_identity_conflict_1
			}
		}
		add_modifier = { modifier = "xvcv_mdlc_identity_conflict_10" days = 3600 }
		country_event = { id = xvcv_mdlc.34 days = 360 }
	}
}
xvcv_mdlc_pop_growth_scale_check_effect = {
	random_country = {
		limit = { any_owned_planet = { num_artificial_pops_per_year > 0 } }
		random_owned_planet = {
			limit = { num_artificial_pops_per_year > 0 }
			export_modifier_to_variable = { modifier = planet_pop_assembly_add variable = xvcv_mdlc_pop_assembly_add_var }
			if = {
				limit = { check_modifier_value = { modifier = planet_pop_assembly_mult value > 0 } }
				set_variable = { which = xvcv_mdlc_pop_assembly_mult_var value = 1 }
				change_variable = { which = xvcv_mdlc_pop_assembly_mult_var value = modifier:planet_pop_assembly_mult }
				multiply_variable = { which = xvcv_mdlc_pop_assembly_add_var value = xvcv_mdlc_pop_assembly_mult_var }
			}
			#log = "Assembly per Month: [This.xvcv_mdlc_pop_assembly_add_var]"
	
			export_trigger_value_to_variable = { trigger = num_artificial_pops_per_year variable = xvcv_mdlc_pops_per_year_var }
			set_variable = { which = xvcv_mdlc_assembly_requirement_var value = xvcv_mdlc_pop_assembly_add_var }
			multiply_variable = { which = xvcv_mdlc_assembly_requirement_var value = 12 }
			divide_variable = { which = xvcv_mdlc_assembly_requirement_var value = xvcv_mdlc_pops_per_year_var }
			#log = "Total Progress Required for New Pop: [This.xvcv_mdlc_assembly_requirement_var]"
	
			set_variable = { which = xvcv_mdlc_pop_growth_scale_var value = xvcv_mdlc_assembly_requirement_var }
			change_variable = { which = xvcv_mdlc_pop_growth_scale_var value = -100 }
			divide_variable = { which = xvcv_mdlc_pop_growth_scale_var value = prev.trigger:num_pops }
			multiply_variable = { which = xvcv_mdlc_pop_growth_scale_var value = 100 }
			floor_variable = xvcv_mdlc_pop_growth_scale_var
			divide_variable = { which = xvcv_mdlc_pop_growth_scale_var value = 100 }
			#log = "Current Growth Scale: [This.xvcv_mdlc_pop_growth_scale_var]"

			if = {
				limit = { check_variable = { which = xvcv_mdlc_pop_growth_scale_var value < 0 } }
				set_variable = { which = xvcv_mdlc_pop_growth_scale_var value = 0 } #failsafe
			}

			random_country = {
				limit = { is_country_type = xvcv_mdlc_data_storage }
				set_variable = {
					which = xvcv_mdlc_pop_growth_scale_var
					value = prev.xvcv_mdlc_pop_growth_scale_var
				}
			}

			#xvcv_mdlc_pops_per_year_var = (xvcv_mdlc_pop_assembly_add_var x 12) / total_assembly_required
			#total_assembly_required = (xvcv_mdlc_pop_assembly_add_var x 12) / xvcv_mdlc_pops_per_year_var
			#xvcv_mdlc_pop_growth_scale_var = total_assembly_required - 100 / empire_total_pop_number
		}
	}
}
xvcv_mdlc_ap_bio_robot_project_effect = {
	create_species = {
		adjective = "xvcv_mdlc_bio_robot_adjective"
		name = "xvcv_mdlc_bio_robot_name"
		namelist = this
		plural = "xvcv_mdlc_bio_robot_plural"
		class = "XVCV_MDLC_BIO_ROBOT"
		portrait = human
		traits = { trait = xvcv_mdlc_trait_bio_robot }
		homeworld = this.capital_scope
		effect = {
			if = {
				limit = { prev = { has_authority = auth_machine_intelligence } }
				modify_species = {
					add_trait = trait_machine_unit
					change_scoped_species = no
				}
				else = {
					modify_species = {
						add_trait = trait_mechanical
						change_scoped_species = no
					}
				}
			}
			rename_species = {
				prompt_country = prev
				name_list = ascension_list
			}
		}
	}
	every_owned_planet = { create_pop = { species = last_created_species } }
	every_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_bio_robot }
		prev = { add_resource = { food = 12 } } #12 foods per 1 created pop #1 default food upkeep per 1 month
	}
	random_owned_pop = {
		limit = { has_trait = xvcv_mdlc_trait_bio_robot }
		if = {
			limit = { prev = { has_authority = auth_machine_intelligence } }
			xvcv_mdlc_machine_species_rights_adjustments_effect = yes
			else = { xvcv_mdlc_robot_species_rights_adjustments_effect = yes }
		}
	}
	every_pool_leader = {
		limit = { is_same_species = last_created_species }
		add_trait_no_notify = xvcv_mdlc_leader_trait_bio_robot
	}
}
xvcv_mdlc_ap_bio_robot_project_dominant_species_change_effect = {
	this.species = {
		create_species = {
			adjective = this
			name = this
			namelist = prev
			plural = this
			class = "XVCV_MDLC_BIO_ROBOT"
			portrait = this
			traits = { trait = xvcv_mdlc_trait_bio_robot }
			homeworld = prev.capital_scope
			effect = {
				if = {
					limit = { prevprev = { has_authority = auth_machine_intelligence } }
					modify_species = {
						add_trait = trait_machine_unit
						change_scoped_species = no
					}
					else = {
						modify_species = {
							add_trait = trait_mechanical
							change_scoped_species = no
						}
					}
				}
				rename_species = {
					prompt_country = prevprev
					name_list = ascension_list
				}
			}
		}
	}
	every_owned_pop = {
		limit = { is_same_species = prev.species }
		prev = { add_resource = { food = 12 } }
	}
	xvcv_mdlc_dominant_species_changing_effect = yes
	random_owned_pop = {
		limit = { is_same_species = prev.species }
		if = {
			limit = { prev = { has_authority = auth_machine_intelligence } }
			xvcv_mdlc_machine_species_rights_adjustments_effect = yes
			else = { xvcv_mdlc_robot_species_rights_adjustments_effect = yes }
		}
	}
	xvcv_mdlc_leader_tied_traits_add_effect = yes
	xvcv_mdlc_leader_tied_traits_remove_effect = yes
}
xvcv_mdlc_bio_robot_auto_growth_effect = {
	every_owned_planet = {
		limit = { xvcv_mdlc_bio_robot_auto_growth_possible_planet_trigger = yes }

		#phase 1: set how much total progress is needed for a new pop
		set_variable = { which = xvcv_mdlc_bio_robot_growth_requirement_var value = 100 }
		random_country = {
			limit = { is_country_type = xvcv_mdlc_data_storage }
			prev = { set_variable = { which = xvcv_mdlc_pop_growth_scale_var value = prev.xvcv_mdlc_pop_growth_scale_var } } #get the current growth scale value from the data storage
		}
		multiply_variable = { which = xvcv_mdlc_pop_growth_scale_var value = owner.trigger:num_pops }
		change_variable = { which = xvcv_mdlc_bio_robot_growth_requirement_var value = xvcv_mdlc_pop_growth_scale_var }
		set_variable = { which = xvcv_mdlc_bio_robot_remaining_time_to_finish_growth_var value = xvcv_mdlc_bio_robot_growth_requirement_var }

		#phase 2: calculate how much progress is made per month in this planet
		change_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = 3 }
		set_variable = { which = xvcv_mdlc_bio_robot_growth_rate_per_month_var value = 3 } #set the variable's value to 0 for reusing it, but the default growth progress is 3 so add 3 here

		#additional progress per clone maker job
		every_owned_pop = {
			limit = {
				OR = {
					has_job = xvcv_mdlc_bio_robot_clone_drone
					has_job = xvcv_mdlc_bio_robot_clone_technician
				}
			}
			prev = {
				change_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = 1 }
				change_variable = { which = xvcv_mdlc_bio_robot_growth_rate_per_month_var value = 1 }
			}
		}

		random_owned_pop = {
			limit = { xvcv_mdlc_bio_robot_auto_growth_possible_pop_trigger = yes }
			#choose a species to be born (if there are more than one hybrid)
			weights = {
				base = 1
				modifier = { add = @xvcv_mdlc_bio_robot_growth_add_1 has_trait = xvcv_mdlc_bio_robot_trait_rapid_breeders }
				modifier = { add = @xvcv_mdlc_bio_robot_growth_add_1 has_trait = xvcv_mdlc_bio_robot_trait_robot_mass_produced }
				modifier = { add = @xvcv_mdlc_bio_robot_growth_add_2 has_trait = xvcv_mdlc_bio_robot_trait_org_body_copy_design }
			}
			if = {
				limit = { has_trait = xvcv_mdlc_bio_robot_trait_rapid_breeders }
				prev = {
					change_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = @xvcv_mdlc_bio_robot_growth_add_1 }
					change_variable = { which = xvcv_mdlc_bio_robot_growth_rate_per_month_var value = @xvcv_mdlc_bio_robot_growth_add_1 } #the variable used for 'xvcv_mdlc_bio_robot_growth_progress_percent_desc'
				}
			}
			if = {
				limit = { has_trait = xvcv_mdlc_bio_robot_trait_robot_mass_produced }
				prev = {
					change_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = @xvcv_mdlc_bio_robot_growth_add_1 }
					change_variable = { which = xvcv_mdlc_bio_robot_growth_rate_per_month_var value = @xvcv_mdlc_bio_robot_growth_add_1 }
				}
			}
			if = {
				limit = { has_trait = xvcv_mdlc_bio_robot_trait_org_body_copy_design }
				prev = {
					change_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = @xvcv_mdlc_bio_robot_growth_add_2 }
					change_variable = { which = xvcv_mdlc_bio_robot_growth_rate_per_month_var value = @xvcv_mdlc_bio_robot_growth_add_2 }
				}
			}
			prev = {
				#phase 3: create a pop
				if = {
					limit = { check_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value > xvcv_mdlc_bio_robot_growth_requirement_var } }
					subtract_variable = { which = xvcv_mdlc_bio_robot_growth_progress_var value = xvcv_mdlc_bio_robot_growth_requirement_var }
					create_pop = { species = prev.species }
				}
			}
		}

		#create things to show players some info
		subtract_variable = { which = xvcv_mdlc_bio_robot_remaining_time_to_finish_growth_var value = xvcv_mdlc_bio_robot_growth_progress_var }
		divide_variable = { which = xvcv_mdlc_bio_robot_remaining_time_to_finish_growth_var value = xvcv_mdlc_bio_robot_growth_rate_per_month_var }
		ceiling_variable = xvcv_mdlc_bio_robot_remaining_time_to_finish_growth_var #rounds a previously-set variable 'up' to the next integer
		if = {
			limit = { NOT = { has_modifier = xvcv_mdlc_bio_robot_growth_progress_percent } }
			add_modifier = { modifier = xvcv_mdlc_bio_robot_growth_progress_percent days = -1 }
		}
	}
}
xvcv_mdlc_bio_robot_auto_growth_stop_effect = {
	remove_modifier = xvcv_mdlc_bio_robot_growth_progress_percent
	#clear variables for using it later
	clear_variable = xvcv_mdlc_bio_robot_growth_progress_var 
	clear_variable = xvcv_mdlc_bio_robot_growth_rate_per_month_var
	clear_variable = xvcv_mdlc_bio_robot_remaining_time_to_finish_growth_var
	clear_variable = xvcv_mdlc_bio_robot_growth_requirement_var 
}
xvcv_mdlc_bio_robot_trait_species_changing_effect = {
	if = {
		limit = {
			from = {
				NOT = { is_archetype = XVCV_MDLC_BIO_ROBOT }
				has_trait = xvcv_mdlc_trait_bio_robot
			}
		}
		from = {
			create_species = {
				is_mod = yes
				adjective = this
				name = this
				namelist = prev
				plural = this
				class = "XVCV_MDLC_BIO_ROBOT"
				portrait = this
				traits = this
				homeworld = this.home_planet
			}
		}
		else = {
			if = {
				limit = { has_authority = auth_machine_intelligence }
				from = {
					create_species = {
						is_mod = yes
						adjective = this
						name = this
						namelist = prev
						plural = this
						class = "MACHINE"
						portrait = this
						traits = this
						homeworld = this.home_planet
					}
				}
				else = {
					from = {
						create_species = {
							is_mod = yes
							adjective = this
							name = this
							namelist = prev
							plural = this
							class = "ROBOT"
							portrait = this
							traits = this
							homeworld = this.home_planet
						}
					}
				}
			}
		}
	}
	if = {
		limit = { from = { is_same_species = prev.species } }
		xvcv_mdlc_dominant_species_changing_effect = yes
		random_owned_pop = {
			limit = { is_same_species = prev.species }
			if = {
				limit = { prev = { has_authority = auth_machine_intelligence } }
				xvcv_mdlc_machine_species_rights_adjustments_effect = yes
				else = { xvcv_mdlc_robot_species_rights_adjustments_effect = yes }
			}
		}
	}
	every_owned_pop = {
		limit = { species = { is_same_value = from } } #only 'this' sub-species should be affected #using 'is_same_species' changes all other sub-species of the main-species as well
		change_species = last_created_species
	}
}
xvcv_mdlc_pc_mechanical_terraforming_complete_effect = {
	while = {
		limit = { has_district = district_city }
		remove_district = district_city
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value = 1 }
	}
	while = {
		limit = { has_district = district_nexus }
		remove_district = district_nexus
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value = 1 }
	}
	while = {
		limit = { has_district = district_industrial }
		remove_district = district_industrial
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_industry_var value = 1 }
	}
	while = {
		limit = { has_district = district_generator }
		remove_district = district_generator
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_generator_var value = 1 }
	}
	while = {
		limit = { has_district = district_mining }
		remove_district = district_mining
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_mining_var value = 1 }
	}
	while = {
		limit = { has_district = district_farming }
		remove_district = district_farming
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_farming_var value = 1 }
	}
	while = {
		limit = { has_district = district_generator_uncapped }
		remove_district = district_generator_uncapped
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_generator_var value = 1 }
	}
	while = {
		limit = { has_district = district_mining_uncapped }
		remove_district = district_mining_uncapped
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_mining_var value = 1 }
	}
	while = {
		limit = { has_district = district_farming_uncapped }
		remove_district = district_farming_uncapped
		change_variable = { which = xvcv_mdlc_pc_mechanical_district_farming_var value = 1 }
	}
	change_pc = xvcv_mdlc_pc_mechanical
	#1:1 conversion #let the player remove remaining redundant districts
	if = {
		limit = { owner = { xvcv_mdlc_synth_empire_trigger = yes } }
		while = {
			limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value > 0 } }
			subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value = 1 }
			add_district = xvcv_mdlc_pc_mechanical_district_city
		}
		else = {
			while = {
				limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value > 0 } }
				subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_city_var value = 1 }
				add_district = xvcv_mdlc_pc_mechanical_district_nexus
			}
		}
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_industry_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_industry_var value = 1 }
		add_district = xvcv_mdlc_pc_mechanical_district_industrial
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_generator_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_generator_var value = 1 }
		add_district = xvcv_mdlc_pc_mechanical_district_generator
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_mining_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_mining_var value = 1 }
		add_district = xvcv_mdlc_pc_mechanical_district_mining
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_mechanical_district_farming_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_mechanical_district_farming_var value = 1 }
		add_district = xvcv_mdlc_pc_mechanical_district_farming
	}
	if = {
		limit = { has_modifier = natural_beauty }
		remove_modifier = natural_beauty
	}
	if = {
		limit = { has_modifier = atmospheric_aphrodisiac }
		remove_modifier = atmospheric_aphrodisiac
	}
	if = {
		limit = { has_modifier = atmospheric_hallucinogen }
		remove_modifier = atmospheric_hallucinogen
	}
	if = {
		limit = { has_modifier = lush_planet }
		remove_modifier = lush_planet
	}
}
xvcv_mdlc_planet_terraforming_resolution_breached_effect = {
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_ecology_environmental_control_board"
				is_active_resolution = "resolution_ecology_paradise_initiative"
			}
		}
		owner = { set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 } }
	}
}
xvcv_mdlc_decision_machine_world_automation_effect = {
	while = {
		limit = { has_district = district_city }
		remove_district = district_city
		change_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
	}
	while = {
		limit = { has_district = district_nexus }
		remove_district = district_nexus
		change_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
	}
	while = {
		limit = { has_district = district_industrial }
		remove_district = district_industrial
		change_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value = 1 }
	}
	while = {
		limit = { has_district = district_generator_uncapped }
		remove_district = district_generator_uncapped
		change_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value = 1 }
	}
	while = {
		limit = { has_district = district_mining_uncapped }
		remove_district = district_mining_uncapped
		change_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value = 1 }
	}
	change_pc = xvcv_mdlc_pc_machine_auto
	if = {
		limit = { NOT = { has_modifier = planet_population_control_gestalt } }
		add_modifier = { modifier = planet_population_control_gestalt days = -1 }
	}
	if = {
		limit = { owner = { has_authority = auth_machine_intelligence } }
		while = {
			limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value > 0 } }
			subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
			add_district = xvcv_mdlc_pc_machine_auto_district_nexus
		}
		else = {
			while = {
				limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value > 0 } }
				subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
				add_district = xvcv_mdlc_pc_machine_auto_district_city
			}
		}
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value = 1 }
		add_district = xvcv_mdlc_pc_machine_auto_district_industrial
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value = 1 }
		add_district = xvcv_mdlc_pc_machine_auto_district_generator
	}
	while = {
		limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value > 0 } }
		subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value = 1 }
		add_district = xvcv_mdlc_pc_machine_auto_district_mining
	}
}
xvcv_mdlc_world_machines_output_value_calc_effect = {
	#for 'xvcv_mdlc_world_machines_districts_heat_indicator_tooltip' tooltips too
	export_modifier_to_variable = { modifier = xvcv_mdlc_world_machines_districts_produces_mult variable = xvcv_mdlc_world_machines_districts_output_var }
	xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect = yes
}
xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect = {
	switch = {
		trigger = has_modifier
		xvcv_mdlc_world_machines_districts_heat_indicator_good = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good }
		xvcv_mdlc_world_machines_districts_heat_indicator_neutral = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral }
		xvcv_mdlc_world_machines_districts_heat_indicator_bad = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad }
	}
	if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value > 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value = 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value < 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad days = -1 }
	}
	set_variable = { which = xvcv_mdlc_world_machines_districts_current_output_for_display_var value = 1 }
	change_variable = { which = xvcv_mdlc_world_machines_districts_current_output_for_display_var value = xvcv_mdlc_world_machines_districts_output_var }
	multiply_variable = { which = xvcv_mdlc_world_machines_districts_current_output_for_display_var value = 100 }
}
xvcv_mdlc_world_machines_special_districts_deposits_calc_effect = {
	switch = {
		trigger = last_district_changed
		xvcv_mdlc_pc_machine_ecu_district_naval_cap = {
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = xvcv_mdlc_pc_machine_ecu_district_naval_cap }
				variable = xvcv_mdlc_pc_machine_ecu_district_naval_cap_count_var
			}
			#[23:12:37][effect_impl_variables.h:759]: export_trigger_value_to_variable uses unsupported trigger count_deposits, must be a simple trigger returning a number value
			#lol, count_deposits or any similar trigger is not supported #well, guess I have to use the old way #stellaris v3.3.4
			every_deposit = {
				limit = { is_deposit_type = xvcv_mdlc_d_pc_machine_ecu_naval_cap }
				remove_deposit = yes
			}
			while = {
				add_deposit = xvcv_mdlc_d_pc_machine_ecu_naval_cap
				count = xvcv_mdlc_pc_machine_ecu_district_naval_cap_count_var
			}
		}
		xvcv_mdlc_pc_machine_cpu_district_decryption = {
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = xvcv_mdlc_pc_machine_cpu_district_decryption }
				variable = xvcv_mdlc_pc_machine_cpu_district_decryption_count_var
			}
			every_deposit = {
				limit = { is_deposit_type = xvcv_mdlc_d_pc_machine_cpu_decryption }
				remove_deposit = yes
			}
			while = {
				add_deposit = xvcv_mdlc_d_pc_machine_cpu_decryption
				count = xvcv_mdlc_pc_machine_cpu_district_decryption_count_var
			}
		}
		xvcv_mdlc_pc_machine_ser_district_admin_cap = {
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = xvcv_mdlc_pc_machine_ser_district_admin_cap }
				variable = xvcv_mdlc_pc_machine_ser_district_admin_cap_count_var
			}
			every_deposit = {
				limit = { is_deposit_type = xvcv_mdlc_d_pc_machine_ser_admin_cap }
				remove_deposit = yes
			}
			while = {
				add_deposit = xvcv_mdlc_d_pc_machine_ser_admin_cap
				count = xvcv_mdlc_pc_machine_ser_district_admin_cap_count_var
			}
		}
		xvcv_mdlc_pc_machine_ser_district_crime = {
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = xvcv_mdlc_pc_machine_ser_district_crime }
				variable = xvcv_mdlc_pc_machine_ser_district_crime_count_var
			}
			every_deposit = {
				limit = {
					OR = {
						is_deposit_type = xvcv_mdlc_d_pc_machine_ser_crime
						is_deposit_type = xvcv_mdlc_d_pc_machine_ser_crime_alt
					}
				}
				remove_deposit = yes
			}
			if = {
				limit = { owner = { has_authority = auth_machine_intelligence } }
				while = {
					add_deposit = xvcv_mdlc_d_pc_machine_ser_crime
					count = xvcv_mdlc_pc_machine_ser_district_crime_count_var
				}
				else = {
					while = {
						add_deposit = xvcv_mdlc_d_pc_machine_ser_crime_alt
						count = xvcv_mdlc_pc_machine_ser_district_crime_count_var
					}
				}
			}
		}
		xvcv_mdlc_pc_machine_ser_district_encryption = {
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = xvcv_mdlc_pc_machine_ser_district_encryption }
				variable = xvcv_mdlc_pc_machine_ser_district_encryption_count_var
			}
			every_deposit = {
				limit = { is_deposit_type = xvcv_mdlc_d_pc_machine_ser_encryption }
				remove_deposit = yes
			}
			while = {
				add_deposit = xvcv_mdlc_d_pc_machine_ser_encryption
				count = xvcv_mdlc_pc_machine_ser_district_encryption_count_var
			}
		}
	}
}
xvcv_mdlc_trading_machine_special_projects_abort_effect = {
	#remember it's 'every' country, not a 'random' country
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_1
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_1_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_1 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 1 }
	}
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_2
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_2_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_2 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 2 }
	}
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_3
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_3_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_3 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 3 }
	}
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_4
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_4_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_4 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 4 }
	}
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_5
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_5_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_5 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 5 }
	}
	every_country = {
		limit = {
			has_special_project = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_6
			prev = { has_country_flag = xvcv_mdlc_civic_trading_machine_saved_target_6_@prev }
		}
		abort_special_project = { type = XVCV_MDLC_CIVIC_TRADING_MACHINE_SHIP_BUILD_PROJECT_6 }
		xvcv_mdlc_civic_trading_machine_ship_build_project_abort_effect = { ID = 6 }
	}
}
xvcv_mdlc_civic_emotion_emulator_pop_bonus_effect = {
	if = {
		limit = { has_modifier = xvcv_mdlc_goods_for_pop_unity_bonus }
		remove_modifier = xvcv_mdlc_goods_for_pop_unity_bonus
	}
	export_resource_income_to_variable = {
		resource = consumer_goods
		variable = xvcv_mdlc_civic_emotion_emulator_income_var
	}
	if = {
		limit = { is_ai = no }
		add_resource = {
			consumer_goods = -1
			mult = xvcv_mdlc_civic_emotion_emulator_income_var
		}
	}
	export_trigger_value_to_variable = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					is_pop_category = complex_drone
					is_pop_category = simple_drone
				}
			}
		}
		variable = xvcv_mdlc_civic_emotion_emulator_pop_var
	}
	#calculation e.g.
	#the total income = 19
	#the total pop = 33
	#19 / 33 = 0.5757575757575758
	#and this means about 0.57 more goods can be distributed per drone pop for additional unity creation
	#so it's 0.57 more unity per pop
	divide_variable = {
		which = xvcv_mdlc_civic_emotion_emulator_income_var
		value = xvcv_mdlc_civic_emotion_emulator_pop_var
	}
	add_modifier = { modifier = xvcv_mdlc_goods_for_pop_unity_bonus days = -1 multiplier = xvcv_mdlc_civic_emotion_emulator_income_var }
}
xvcv_mdlc_situation_machine_learning_add_progress_effect = {
	random_situation = {
		limit = { is_situation_type = xvcv_mdlc_situation_machine_learning }
		add_situation_progress = $VALUE$
	}
	create_message = {
		type = XVCV_MDLC_SITUATION_MACHINE_LEARNING_PROGRESS_TYPE
		localization = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$
		target = this.capital_scope #it seems that the target should be a planet #or the error occurs #[11:48:15][effect_impl.cpp:21052]: Error in create_message effect, target scope is invalid
		days = 10
	}
	change_variable = { which = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_var value = 1 }
}
xvcv_mdlc_situation_machine_learning_add_progress_alt_effect = {
	random_situation = {
		limit = { is_situation_type = xvcv_mdlc_situation_machine_learning }
		add_situation_progress = $VALUE$
	}
	create_message = {
		type = XVCV_MDLC_SITUATION_MACHINE_LEARNING_PROGRESS_TYPE
		localization = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_alt
		target = this.capital_scope
		days = 10
	}
	change_variable = { which = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_alt_var value = 1 }
}
#scripted_effects_config
xvcv_mdlc_config_free_jobs_count_effect = {
	#[14:21:59][effect_impl_variables.h:478]: clear_variable: variable xvcv_mdlc_empire_all_free_jobs_count_var is not set for scoped country
	if = {
		limit = { is_variable_set = xvcv_mdlc_empire_all_free_jobs_count_var }
		clear_variable = xvcv_mdlc_empire_all_free_jobs_count_var
	}
	every_owned_planet = {
		limit = { free_jobs > 0 }
		export_trigger_value_to_variable = { trigger = free_jobs variable = xvcv_mdlc_planet_free_jobs_count_var }
		root = { change_variable = { which = xvcv_mdlc_empire_all_free_jobs_count_var value = prev.xvcv_mdlc_planet_free_jobs_count_var } }
	}
	if = {
		limit = { NOT = { is_variable_set = xvcv_mdlc_empire_all_free_jobs_count_var } }
		set_variable = { which = xvcv_mdlc_empire_all_free_jobs_count_var value = 0 } #for showing the player that the value is 0 #better than showing an empty text
	}
}
xvcv_mdlc_config_free_housing_count_effect = {
	#[14:21:59][effect_impl_variables.h:478]: clear_variable: variable xvcv_mdlc_empire_all_free_housing_count_var is not set for scoped country
	if = {
		limit = { is_variable_set = xvcv_mdlc_empire_all_free_housing_count_var }
		clear_variable = xvcv_mdlc_empire_all_free_housing_count_var
	}
	every_owned_planet = {
		limit = { free_housing > 0 }
		export_trigger_value_to_variable = { trigger = free_housing variable = xvcv_mdlc_planet_free_housing_count_var }
		root = { change_variable = { which = xvcv_mdlc_empire_all_free_housing_count_var value = prev.xvcv_mdlc_planet_free_housing_count_var } }
	}
	if = {
		limit = { NOT = { is_variable_set = xvcv_mdlc_empire_all_free_housing_count_var } }
		set_variable = { which = xvcv_mdlc_empire_all_free_housing_count_var value = 0 }
	}
}
xvcv_mdlc_config_unemployed_pops_count_effect = {
	export_trigger_value_to_variable = {
		trigger = num_assigned_jobs
		parameters = { job = unemployed }
		variable = xvcv_mdlc_empire_all_unemployed_pops_count_var
	}
}