# giga_new_test = {

# 	every_country = {
# 		limit = {
# 			is_ai = no
# 		}
# 		if = {
# 			limit = { 
# 				not = {
# 					has_modifier = giga_new_test_modifier
# 				}
# 			}
# 			add_modifier = {
# 				modifier = giga_new_test_modifier
# 			}
# 		}
# 		else = {
# 			remove_modifier = giga_new_test_modifier
# 		}
# 	}
# }
giga_new_begin_ehof_fix = {
	if = {
		limit = { 
			is_scope_type = planet
			exists = owner
		}
		enable_special_project = {
			name = STUDY_ARCANE_ARTIFACT_1
			owner = owner
			location = this
		}
		owner = {
			giga_new_build_ehof_fix_effect = yes
			
		}
	}
	else_if = {
		limit = { 
			exists = owner
			owner = {
				count_owned_planet = {
					count > 0
				}
			}
		}
		owner = {
			random_owned_planet = {
				enable_special_project = {
					name = STUDY_ARCANE_ARTIFACT_1
					owner = owner
					location = this
				}
			}
			
			giga_new_build_ehof_fix_effect = yes
				
			
		}
	}
	else = {
		random_country = {
			limit = {
				is_ai =  no
				count_owned_planet = {
					count > 0
				}
			}
			enable_special_project = {
				name = STUDY_ARCANE_ARTIFACT_1
				owner = owner
				location = capital_scope
			}
			giga_new_build_ehof_fix_effect = yes
				
			
		}
	}
	
}
giga_new_build_ehof_fix_effect = {
	if = {
		limit = { 
			is_scope_type = country
		}
		destroy_all_ehofs = yes
		set_variable = {
			which = amount_of_ehofs
			value = 0
		}
		set_variable = {
			which = ehof_phase
			value = 0
		}
		remove_country_flag = ehof_p0_first_time
	}
	else_if = {
		limit = { 
			exists = owner
		}
		owner = {
			destroy_all_ehofs = yes
			set_variable = {
				which = amount_of_ehofs
				value = 0
			}
			set_variable = {
				which = ehof_phase
				value = 0
			}
			remove_country_flag = ehof_p0_first_time
		}
	}
	else = {
		random_country = {
			limit = {
				is_ai = no
			}
			destroy_all_ehofs = yes
			set_variable = {
				which = amount_of_ehofs
				value = 0
			}
			set_variable = {
				which = ehof_phase
				value = 0
			}
			remove_country_flag = ehof_p0_first_time
		}
	}

	
}
giga_new_begin_reality_code_fix = {
	if = {
		limit = { 
			
				
				exists = controller
			controller = {
				count_controlled_ship = {
					count > 0
				}
			}
			
		}
	
	controller = {
		remove_country_flag = code_intro
	random_controlled_ship = {
		limit = {
			exists = solar_system
			solar_system = {
				cohesive_system = yes
			}
		}
		controller = {
			set_country_flag = code_intro
			country_event = { id = ehof_reality_code.0011 }
		}
		fleet = {
			if = {
				limit = { exists = event_target:ehof_code_fleet }
				clear_global_event_target = ehof_code_fleet
			}
			save_global_event_target_as = ehof_code_fleet
		}
	}	
	}
}
else_if = {
	limit = { 
		any_country = {
			is_ai = no
			count_owned_planet = {
				count > 0
			}
			count_controlled_ship = {
				count > 0
			}

		}
	}
	random_country = {
		limit = {
			is_ai = no
			count_owned_planet = {
				count > 0
			}
		}
		random_owned_planet = {
			owner = {
				
					remove_country_flag = code_intro
				random_controlled_ship = {
					limit = {
						exists = solar_system
						solar_system = {
							cohesive_system = yes
						}
					}
					controller = {
						set_country_flag = code_intro
						country_event = { id = ehof_reality_code.0011 }
					}
					fleet = {
						if = {
							limit = { exists = event_target:ehof_code_fleet }
							clear_global_event_target = ehof_code_fleet
						}
						save_global_event_target_as = ehof_code_fleet
					}
				}	
				
			}
		}
	}
}
}
giga_new_reality_code_target_saves = {
	save_global_event_target_as = giga_new_fix_country

random_owned_fleet = {
	limit = {
		exists = solar_system
		solar_system = {
			has_star_flag = cohesive_system
			NOT = {
				has_star_flag = quest_system
			}
			any_system_planet = {
				has_owner = no
				is_star = no
				NOT = {
					exists = archaeological_site
				}
			}
			star = {
				NOT = {
					exists = archaeological_site
				}
			}
		}
	}
	solar_system = {
		save_global_event_target_as = giga_new_fix_system
	}
	save_global_event_target_as = giga_new_fix_fleet
}
}
giga_new_spawn_reality_code_arch = {
if = {
	limit = { 
		is_scope_type = country

		ehof_giga_new_eligible_spawn_fleet = yes
		
	}
	save_event_target_as = rl_digsite_finder
	giga_new_reality_code_target_saves = yes
}
else_if = {
	limit = { 
		exists = owner
		owner = {
			ehof_giga_new_eligible_spawn_fleet = yes
			
		}
	}
	owner = {
		save_event_target_as = rl_digsite_finder
		giga_new_reality_code_target_saves = yes
	}
}
else = {
	random_country = {
		limit = {
			ehof_giga_new_eligible_spawn_fleet = yes
		}
		giga_new_reality_code_target_saves = yes
		save_event_target_as = rl_digsite_finder
	}
	
	
	
}
set_global_flag = need_arch_site_$site_number$
set_country_flag = ehof_spawn_reality_code

switch = {
	trigger = has_global_flag
need_arch_site_1 = {
set_country_flag = ehof_code_toxic_world
}
need_arch_site_2 = {
	set_country_flag = ehof_code_broken_world
}
need_arch_site_3 = {
	set_country_flag = ehof_code_frozen_world
}
need_arch_site_4 = {
	set_country_flag = ehof_code_molten_world
}
need_arch_site_5 = {
	set_country_flag = ehof_code_gas_giant_world
}
need_arch_site_6 = {
	set_country_flag = ehof_code_star_world
}
}
event_target:giga_new_fix_system = {
	system_event = {
		id = ehof_giga_new_rc.0
		scopes = {
			from = event_target:giga_new_fix_country
		}
	}
}

remove_global_flag = need_arch_site_$site_number$

}

# giga_new_print_ehof_distances = {
# solar_system = {
	

# 	ordered_system = {
# 		limit = {
# 			ehof_hyperlane_eligible = yes
# 		}
# 		position = 0
# 		order_by = value:gigas_giga_new_euclidean_distance_sort|min_distance|$min_distance$|max_distance|$max_distance$|
#  inverse = yes
#  root = {
# 	set_variable = {
# 		which = giga_new_print_distance
# 		value = prev.value:gigas_giga_new_euclidean_distance_sort|min_distance|$min_distance$|max_distance|$max_distance$|
# 	}
#  }
#  log = "closest system is [this.GetName] with distance of [giga_new_print_distance]"
# print_scope_effect = yes


# 	}
# 	ordered_system = {
# 		limit = {
# 			ehof_hyperlane_eligible = yes
# 		}
# 		position = 1
# 		order_by = value:gigas_giga_new_euclidean_distance_sort|min_distance|$min_distance$|max_distance|$max_distance$|
#  inverse = yes
#  root = {
# 	set_variable = {
# 		which = giga_new_print_distance
# 		value = prev.value:gigas_giga_new_euclidean_distance_sort|min_distance|$min_distance$|max_distance|$max_distance$|
# 	}
#  }
#  log = "second closest system is [this.GetName] with distance of [giga_new_print_distance]"
# print_scope_effect = yes


# 	}
# }
# }

# effect random_country = {
# 	limit = {
# 		is_ai = no
# 	}
# 	save_global_event_target_as = current_system_creator
# }
# solar_system = {
# 	spawn_system = {
# 		initializer = ehof_unique_cplanet
# 		min_distance = 25
# 		max_distance = 30
# 	}
# }

# giga_test_slow_arch = {
# 	add_modifier = {
# 		modifier = giga_test_slow_arch
# 	}
# }

# giga_test_difficult_arch = {
# 	add_modifier = {
# 		modifier = giga_test_difficult_arch
# 	}
# }

# giga_ehof_tester_boost = {
# 	add_modifier = {
# 		modifier = giga_megatestboost
# 	}
# }