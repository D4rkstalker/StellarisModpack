#Scripted trigger to check for gigas prior to game start
has_gigastructures = { 
	always = yes 
}

has_gigastructural_constructs = {
	or = {
		and = {
			is_ai = yes
			has_country_flag = giga_gigastructural_constructs_override
		}

		has_ascension_perk = ap_gigastructural_constructs
	}
}

ndb_can_target_system = {
	cohesive_system = no
	compound_cluster = no
	annihilator_system = no
	urmazin_system = no
	everchanging_system = no

	NOR = {
		has_star_flag = blokkat_system_being_stripmined
	
		has_star_flag = blokkat_stripmined_system
		and = {
			exists = system_star
			system_star = { giga_is_compact_star = yes }
		}
		any_fleet_in_system = {
			exists = owner
			owner = {
			
				is_country_type = blokkat_stripminers
			}
		}
	
		any_ship_in_system = {
			OR = {
				is_ship_size = sofe_ancient_weapon
				is_ship_size = precursor_colossus
				
			}
			
		}
	
		any_system_planet = {
			OR = {
				has_planet_flag = cant_build_here
				has_planet_flag = cant_target_this_planet
				is_planet_class = pc_ai
				is_planet_class = pc_birch
				is_planet_class = pc_squareworld_habitable
				is_planet_class = pc_alderson_slice_ecu
				is_planet_class = pc_alderson_slice_machine
				is_planet_class = pc_alderson_slice_gaia
				is_planet_class = pc_alderson_slice_pc
				is_planet_class = pc_alderson_slice_hive
			}
		}
	}
}

ndb_can_target_planet = {
	NOR = {
		AND = {
			is_capital = yes
			exists = owner
			owner = {
				is_same_value = root
			}
		}
		is_star = yes
		is_planet_class = pc_birch
		is_planet_class = pc_alderson_slice_ecu
		is_planet_class = pc_alderson_slice_hive
		is_planet_class = pc_alderson_slice_machine
		is_planet_class = pc_alderson_slice_gaia
		is_planet_class = pc_alderson_slice_pc
		is_planet_class = pc_ai
		is_planet_class = pc_squareworld_habitable
		has_planet_flag = cant_build_here
		is_planet_class = pc_virtual_industry
		is_planet_class = pc_virtual_reality
		is_planet_class = pc_virtual_stellar_industry
	}
}

has_mineral_deposit = {
	OR = {
		has_deposit = d_minerals_1
		has_deposit = d_minerals_2
		has_deposit = d_minerals_3
		has_deposit = d_minerals_4
		has_deposit = d_minerals_5
		has_deposit = d_minerals_6
		has_deposit = d_minerals_7
		has_deposit = d_minerals_8
		has_deposit = d_minerals_9
		has_deposit = d_minerals_10
	}
}

has_energy_deposit = {
	OR = {
		has_deposit = d_energy_1
		has_deposit = d_energy_2
		has_deposit = d_energy_3
		has_deposit = d_energy_4
		has_deposit = d_energy_5
		has_deposit = d_energy_6
		has_deposit = d_energy_7
		has_deposit = d_energy_8
		has_deposit = d_energy_9
		has_deposit = d_energy_10
	}
}

has_trade_deposit = {
	OR = {
		has_deposit = d_trade_value_1
		has_deposit = d_trade_value_2
		has_deposit = d_trade_value_3
		has_deposit = d_trade_value_4
		has_deposit = d_trade_value_5
		has_deposit = d_trade_value_6
		has_deposit = d_trade_value_7
		has_deposit = d_trade_value_8
		has_deposit = d_trade_value_9
		has_deposit = d_trade_value_10
	}
}

giga_habitable_structure = {
	OR = {
		is_giga_ringworld = yes
		is_giga_habitat = yes
		is_giga_habitable_gas_giant = yes
		is_non_giga_habitat = yes
		giga_is_birch_world = yes
		is_planet_class = pc_equatorial_shipyard
		is_planet_class = pc_virtual_reality
		is_planet_class = pc_virtual_industry
		is_planet_class = pc_virtual_stellar_industry
		is_planet_class = pc_alderson_slice_gaia
		is_planet_class = pc_alderson_slice_pc
		is_planet_class = pc_alderson_slice_ecu
		is_planet_class = pc_alderson_slice_hive
		is_planet_class = pc_alderson_slice_machine
		is_planet_class = pc_pouchkinn_black_hole
		is_planet_class = pc_giga_frameworld
		is_planet_class = pc_giga_orbital
	}
}

is_giga_standard_ringworld = { #This is basically just things from the standard ringworld build path
	OR = {
		is_planet_class = pc_ringworld_city
		is_planet_class = pc_ringworld_machine
		is_planet_class = pc_ringworld_hive
		is_planet_class = pc_ringworld_habitable
		is_planet_class = pc_giga_maginot_ringworld
		is_planetary_diversity_ringworld = yes
	}
}

is_giga_shrouded_ringworld = {
	OR = {
		is_planet_class = pc_shrouded_equatorial_shipyard
		is_planet_class = pc_ringworld_habitable_shrouded
		is_planet_class = pc_interstellar_shrouded_ringworld_habitable
		is_planet_class = pc_giga_penrose_shrouded_habitable
		is_planet_class = pc_squareworld_shrouded_habitable
	}
}

is_giga_ringworld = {
	OR = {
		is_planet_class = pc_ringworld_habitable
		is_planet_class = pc_interstellar_ringworld_habitable
		is_planet_class = pc_giga_penrose_habitable
		is_planet_class = pc_ringworld_city
		is_planet_class = pc_ringworld_machine
		is_planet_class = pc_ringworld_hive
		is_planet_class = pc_squareworld_habitable
		is_planetary_diversity_ringworld = yes
	}
}

is_giga_habitat = {
	OR = {
		is_planet_class = pc_habitat
		is_planet_class = pc_interstellar_habitat
		is_planet_class = pc_flat_world
		is_planet_class = pc_giga_elysium
		is_planet_class = pc_giga_frameworld
		is_planet_class = pc_giga_orbital

		# old elysium
		is_planet_class = pc_gigaorbital_ring
		is_planet_class = pc_gigaorbital_ring_ruined
	}
}

#Compat for PD planet habs, specifically asteroid habs as the normal planet habs are mostly able to be treated as normal planets
is_non_giga_habitat = {
	OR = {
		has_planet_flag = giga_compat_hab
		has_planet_flag = pdiceasteroidhab
		has_planet_flag = pdcrystalasteroidhab
		has_planet_flag = pdasteroidhab
	}
}

is_giga_habitable_gas_giant = {
	OR = {
		is_planet_class = pc_habitable_gas_giant
	}
}

giga_is_bitrinary = {
	OR = {
		is_star_class = sc_binary_1
		is_star_class = sc_binary_2
		is_star_class = sc_binary_3
		is_star_class = sc_binary_4
		is_star_class = sc_binary_5
		is_star_class = sc_binary_6
		is_star_class = sc_binary_7
		is_star_class = sc_binary_8
		is_star_class = sc_binary_9
		is_star_class = sc_binary_10
		is_star_class = sc_trinary_1
		is_star_class = sc_trinary_2
		is_star_class = sc_trinary_3
		is_star_class = sc_trinary_4
		# Real Space
		is_binary = yes
		is_trinary = yes
		is_paired = yes
	}
}

giga_any_hab_planets = {
	any_system_planet = {
		OR = {
			is_planet_habitable = yes
			giga_habitable_structure = yes
		}
	}
}

giga_system_is_surveyed = {
	NOT = {
		any_system_planet = {
			is_surveyed = {
				who = root.from
				status = no
			}
		}
	}
}

giga_has_birch_world = {
	OR = {
		has_megastructure = birch_world_0
		has_megastructure = birch_world_1
		has_megastructure = birch_world_2
		has_megastructure = birch_world_3
	}
}

giga_has_psychic_hypersiphon = {
	OR = {
		has_megastructure = psychic_hypersiphon_0
		has_megastructure = psychic_hypersiphon_1
		has_megastructure = psychic_hypersiphon_2
		has_megastructure = psychic_hypersiphon_3
	}
}

giga_has_particle_accelerator = {
	OR = {
		has_megastructure = particle_accelerator_0
		has_megastructure = particle_accelerator_1
		has_megastructure = particle_accelerator_restored
		has_megastructure = particle_accelerator_ruined
	}
}

# used for sending notifications to empires when built by an empire
giga_is_final_megastructure_stage = {
	OR = {
		# vanilla
		is_megastructure_type = matter_decompressor_restored

		is_megastructure_type = strategic_coordination_center_restored

		is_megastructure_type = mega_art_installation_restored

		is_megastructure_type = interstellar_assembly_restored

		# gigas scaled dyson
		is_megastructure_type = dyson_sphere_5_b_star
		is_megastructure_type = dyson_sphere_5_m_giant_star
		is_megastructure_type = dyson_sphere_5_a_star
		is_megastructure_type = dyson_sphere_5_f_star
		is_megastructure_type = dyson_sphere_5_g_star
		is_megastructure_type = dyson_sphere_5_k_star
		is_megastructure_type = dyson_sphere_5_m_star

		is_megastructure_type = dyson_sphere_restored_b_star
		is_megastructure_type = dyson_sphere_restored_m_giant_star
		is_megastructure_type = dyson_sphere_restored_a_star
		is_megastructure_type = dyson_sphere_restored_f_star
		is_megastructure_type = dyson_sphere_restored_g_star
		is_megastructure_type = dyson_sphere_restored_k_star
		is_megastructure_type = dyson_sphere_restored_m_star

		# gigas scaled matrioshka
		is_megastructure_type = matrioshka_brain_5
		is_megastructure_type = matrioshka_brain_5_b_star
		is_megastructure_type = matrioshka_brain_5_m_giant_star
		is_megastructure_type = matrioshka_brain_5_a_star
		is_megastructure_type = matrioshka_brain_5_f_star
		is_megastructure_type = matrioshka_brain_5_g_star
		is_megastructure_type = matrioshka_brain_5_k_star
		is_megastructure_type = matrioshka_brain_5_m_star

		# full VR sections
		is_megastructure_type = matrioshka_brain_9
		is_megastructure_type = matrioshka_brain_9_b_star
		is_megastructure_type = matrioshka_brain_9_m_giant_star
		is_megastructure_type = matrioshka_brain_9_a_star
		is_megastructure_type = matrioshka_brain_9_f_star
		is_megastructure_type = matrioshka_brain_9_g_star
		is_megastructure_type = matrioshka_brain_9_k_star
		is_megastructure_type = matrioshka_brain_9_m_star

		# gigas scaled star lifter
		is_megastructure_type = star_lifter_5
		is_megastructure_type = star_lifter_5_b_star
		is_megastructure_type = star_lifter_5_m_giant_star
		is_megastructure_type = star_lifter_5_a_star
		is_megastructure_type = star_lifter_5_f_star
		is_megastructure_type = star_lifter_5_g_star
		is_megastructure_type = star_lifter_5_k_star
		is_megastructure_type = star_lifter_5_m_star

		# gigas
		is_megastructure_type = alderson_disk_2_ecu
		is_megastructure_type = alderson_disk_2_gaia
		is_megastructure_type = alderson_disk_2_pc
		is_megastructure_type = alderson_disk_2_hive
		is_megastructure_type = alderson_disk_2_machine

		is_megastructure_type = asteroid_manufactory_2

		is_megastructure_type = terraform_toxic_3

		is_megastructure_type = automated_stripmine_2

		is_megastructure_type = war_moon_2

		is_megastructure_type = war_planet_3

		is_megastructure_type = birch_world_3

		is_megastructure_type = crystal_megabore_3

		is_megastructure_type = terraform_barren_3

		is_megastructure_type = terraform_barren_3_restored

		is_megastructure_type = eq_shipyard_2

		is_megastructure_type = ehof_megastructure_phase1
		is_megastructure_type = ehof_megastructure_phase2
		is_megastructure_type = ehof_megastructure_phase3
		is_megastructure_type = ehof_megastructure_phase4
		is_megastructure_type = ehof_megastructure_restored

		is_megastructure_type = ehof_presphere_dyson

		is_megastructure_type = ehof_sm_forge_phase4

		is_megastructure_type = fusion_suppressor_6

		is_megastructure_type = terraform_molten_3

		is_megastructure_type = terraform_shattered_4

		# track everything NDB as dangerous
		is_megastructure_type = nicoll_beam_0
		is_megastructure_type = nicoll_beam_1
		is_megastructure_type = nicoll_beam_2
		is_megastructure_type = nicoll_beam_3
		is_megastructure_type = nicoll_beam_4
		# and when enemy has a beam ready
		is_megastructure_type = nicoll_beam_ready

		is_megastructure_type = hrae_mc_4

		is_megastructure_type = hyperstructural_ass_4

		is_megastructure_type = interstellar_habitat_2
		is_megastructure_type = interstellar_habitat_5 # ringworld

		is_megastructure_type = kugelblitz_2
		is_megastructure_type = kugelblitz_restored

		is_megastructure_type = lunar_disco_ball_2

		is_megastructure_type = macro_stabilizer_3

		is_megastructure_type = macro_test_site_1
		is_megastructure_type = macro_test_site_restored
		
		is_megastructure_type = orbital_bastion_3

		is_megastructure_type = neutronium_gigaforge_3
		is_megastructure_type = neutronium_gigaforge_restored

		is_megastructure_type = nidavellir_forge_4

		is_megastructure_type = orbital_arcology_1
		is_megastructure_type = orbital_arcology_1_m
		is_megastructure_type = orbital_arcology_1_l
		is_megastructure_type = orbital_arcology_2
		is_megastructure_type = orbital_arcology_3

		is_megastructure_type = orbital_artificial_eco_1
		is_megastructure_type = orbital_artificial_eco_restored

		is_megastructure_type = orbital_elysium_0

		is_megastructure_type = penrose_sphere_a3
		is_megastructure_type = penrose_sphere_b4
		is_megastructure_type = penrose_sphere_a42 # full ring

		is_megastructure_type = planetary_computer_2

		is_megastructure_type = psychic_beacon_4

		is_megastructure_type = psychic_hypersiphon_3

		# track everything QSO because it's deadly
		is_megastructure_type = quasi_stellar_obliterator_0
		is_megastructure_type = quasi_stellar_obliterator_1
		is_megastructure_type = quasi_stellar_obliterator_2
		is_megastructure_type = quasi_stellar_obliterator_3
		is_megastructure_type = quasi_stellar_obliterator_4
		is_megastructure_type = quasi_stellar_obliterator_5

		is_megastructure_type = particle_accelerator_1
		is_megastructure_type = particle_accelerator_restored

		is_megastructure_type = war_system_5

		is_megastructure_type = substellar_compressor_2

		is_megastructure_type = succ_2

		is_megastructure_type = yggdrasil_orchid_3
		is_megastructure_type = yggdrasil_orchid_restored

		# message when vat is able to produce units
		is_megastructure_type = the_vat_1
		is_megastructure_type = the_vat_2
		is_megastructure_type = the_vat_3
		is_megastructure_type = the_vat_4

		is_megastructure_type = r_square_world_restored
		is_megastructure_type = r_square_world_hub_powered

		is_megastructure_type = lunar_macroreplicator_2
		is_megastructure_type = lunar_macroreplicator_make_moon

		is_megastructure_type = planetcraft_printer_3
		is_megastructure_type = planetcraft_printer_make_planet

		is_megastructure_type = planetary_drive_yard_1
		is_megastructure_type = planetary_drive_yard_1_shipyard
		is_megastructure_type = planetary_drive_yard_1_fortress

		is_megastructure_type = maginot_world_2
		is_megastructure_type = maginot_world_ringworld_2

		is_megastructure_type = frameworld_penrose_2
		is_megastructure_type = frameworld_decompressor_2

		is_megastructure_type = stellar_ring_habitat_3
		is_megastructure_type = stellar_ring_habitat_restored
	}
}

giga_can_be_war_moon = {
	NOT = {
		has_planet_flag = dormant_war_moon
	}
	is_colony = no
	OR = {
		giga_is_frozen = yes
		giga_is_barren_cn = yes
		giga_is_molten = yes
	}
	is_moon = yes
}

giga_can_be_war_planet = {
	NOT = {
		has_planet_flag = dormant_war_planet
	}
	is_moon = no
	has_anomaly = no
	is_colony = no
	prev = {
		NOT = {
			has_ethic = ethic_fanatic_spiritualist
		}
	}
	OR = {
		giga_is_frozen = yes
		giga_is_barren_cn = yes
		giga_is_molten = yes
		giga_is_toxic = yes
	}
}


giga_is_wrecked_ship = {
	or = {
		is_megastructure_type = giga_titan_ruined
		is_megastructure_type = giga_titan_scrap
		is_megastructure_type = giga_titan_restored
		is_megastructure_type = giga_juggernaut_ruined
		is_megastructure_type = giga_juggernaut_scrap
		is_megastructure_type = giga_juggernaut_restored
		is_megastructure_type = giga_battleship_ruined
		is_megastructure_type = giga_battleship_scrap
		is_megastructure_type = giga_battleship_restored
		is_megastructure_type = giga_colossus_ruined
		is_megastructure_type = giga_colossus_scrap
		is_megastructure_type = giga_colossus_restored
	}
}

giga_is_playable_country = {
	any_playable_country = {
		is_same_empire = prev
	}
}

################### Culture Workers Types ###################
@Civic_death_cult = "civic_death_cult"
@Civic_death_cult_corporate = "civic_death_cult_corporate"
@Civic_memoralist = "civic_memorialist"
@Civic_memoralist_hive = "civic_hive_memorialist"
@Civic_memoralist_machine = "civic_machine_memorialist"
# culture workers
country_uses_culture_workers_ut = {
	is_megacorp = no
	is_spiritualist = no
	is_gestalt = no
	NOR = {
		has_valid_civic = @Civic_death_cult
		has_valid_civic = @Civic_death_cult_corporate
		has_valid_civic = @Civic_memoralist
	}
}

# priests
country_uses_priests_ut = {
	is_spiritualist = yes
	is_gestalt = no
	NOR = {
		has_valid_civic = @Civic_death_cult
		has_valid_civic = @Civic_death_cult_corporate
		has_valid_civic = @Civic_memoralist
	}
}

# managers
country_uses_managers_ut = {
	is_megacorp = yes
	is_spiritualist = no
	is_gestalt = no
	NOR = {
		has_valid_civic = @Civic_death_cult
		has_valid_civic = @Civic_death_cult_corporate
		has_valid_civic = @Civic_memoralist
	}
}

# death priests
country_uses_death_priests_ut = {
	OR = {
		has_valid_civic = @Civic_death_cult
		has_valid_civic = @Civic_death_cult_corporate
	}
}

# death chroniclers
country_uses_chroniclers_ut = {
	has_valid_civic = @Civic_memoralist
}

# death chronicler drones
country_uses_chronicle_drones_ut = {
	is_gestalt = yes
	OR = {
		has_valid_civic = @Civic_memoralist_hive
		has_valid_civic = @Civic_memoralist_machine
	}
}

#User preset trigger, here to prevent errors
has_giga_preset_mod = {
	always = yes
}

giga_is_megastructure_that_needs_planet = {
	OR = {
		is_megastructure_type = automated_stripmine_0
		is_megastructure_type = automated_stripmine_1
		is_megastructure_type = automated_stripmine_2
		is_megastructure_type = succ_0
		is_megastructure_type = succ_1
		is_megastructure_type = succ_2
		is_megastructure_type = crystal_megabore_0
		is_megastructure_type = crystal_megabore_1
		is_megastructure_type = crystal_megabore_2
		is_megastructure_type = crystal_megabore_3
		is_megastructure_type = moon_printer_orbital_mass_harvester_0
		is_megastructure_type = moon_printer_orbital_mass_harvester_1
		is_megastructure_type = eq_shipyard_0
		is_megastructure_type = eq_shipyard_1
		is_megastructure_type = eq_shipyard_2
		is_megastructure_type = lunar_disco_ball_0
		is_megastructure_type = lunar_disco_ball_1
		is_megastructure_type = lunar_disco_ball_2
		is_megastructure_type = lunar_disco_ball_2_manage
	}
}

giga_can_deploy_defense_squadron = {
	NOR = {
		has_planet_flag = defense_nexus_deploy_never
		has_planet_flag = giga_defence_squadron_cooldown
		has_planet_flag = defence_squadron_deployed
		is_occupied_flag = yes
		has_ground_combat = yes
	}
}

giga_is_core_system = {
	OR = {
		has_star_flag = giga_inner
		has_star_flag = giga_outer_01
		has_star_flag = giga_outer_02
		has_star_flag = giga_outer_03
		has_star_flag = giga_galactic_center
	}
}

giga_country_uses_priests = {
	or = {
		is_spiritualist = yes
		and = {
			is_gestalt = no
			has_make_spiritualist_perk = yes
		}
	}
}

# is this natural planet bereft of farming districts?
# used in the elysium job check to prevent farmers in the worker job split
giga_planet_no_farming = {
	or = {
		is_planet_class = pc_machine

		# planetary diversity
		uses_district_set = pdmachinefactory
		uses_district_set = pdmachinefort
		uses_district_set = pdmachinecapital
	}
}

giga_planet_is_ecumenopolis = {
	or = {
		uses_district_set = city_world

		# planetary diversity
		uses_district_set = pdnecrohive
		uses_district_set = pdmachinenecropolis
		uses_district_set = pdpalacearc
		uses_district_set = pdmilarc
		uses_district_set = pdecocity
		uses_district_set = pdcorpoarc
	}
}

giga_uses_habitat_capitals = {
	optimize_memory
	or = {
		is_planet_class = pc_giga_elysium
		is_planet_class = pc_giga_orbital
	}
}
giga_is_o_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_giga_o_star
		is_planet_class = pc_o_star
		is_planet_class = pc_o_super_star
		is_planet_class = pc_o_hyper_star
	}
}

giga_is_birch_world = {
	optimize_memory
	or = {
		is_planet_class = pc_birch
		is_planet_class = pc_origin_birch
		is_planet_class = pc_origin_dummy_birch
		is_planet_class = pc_void_birch
	}
}

giga_is_alderson_disk = {
	optimize_memory
	or = {
		is_planet_class = pc_alderson_slice_ecu
		is_planet_class = pc_alderson_slice_gaia
		is_planet_class = pc_alderson_slice_hive
		is_planet_class = pc_alderson_slice_machine
		is_planet_class = pc_alderson_slice_pc
	}
}

# whether the planet type allows gigas' bigger buildings specifically for big megas
# merger of rules: feel free to overwrite this to add other relevant large habitable megas
# but they will also require entries in the giga_ring_world_building_size script_value
giga_has_ringworld_buildings = {
	giga_is_frame_world = no
	or = {
		is_ringworld = yes
		giga_is_birch_world = yes
	}
}

giga_has_ringworld_output_boost = {
	optimize_memory
	OR = {
		# our ring worlds should already be covered by the vanilla trigger

		giga_is_birch_world = yes
		giga_is_alderson_disk = yes
	}
}

# for nanite swarm event
giga_has_artificial_preference_trait = {
	optimize_memory
	OR = {
		# vanilla 
		has_trait = trait_pc_habitat_preference
		has_trait = trait_pc_shattered_ring_habitable_preference
		has_trait = trait_pc_ringworld_habitable_preference # you can break the vanilla event with this...
		# gigas
		has_trait = trait_pc_giga_frameworld_preference
		has_trait = trait_pc_flusion_gaia_ecu_preference
		has_trait = trait_pc_virtual_reality_preference
		has_trait = trait_pc_virtual_industry_preference
		has_trait = trait_pc_virtual_stellar_industry_preference
		has_trait = trait_pc_squareworld_habitable_preference
		has_trait = trait_pc_gigaorbital_ring_preference
		has_trait = trait_pc_giga_orbital_preference
		has_trait = trait_pc_giga_elysium_preference
		has_trait = trait_pc_giga_penrose_habitable_preference
		has_trait = trait_pc_interstellar_habitat_preference
		has_trait = trait_pc_interstellar_ringworld_habitable_preference
		has_trait = trait_pc_flat_world_preference
		has_trait = trait_pc_ringworld_city_preference
		has_trait = trait_pc_ringworld_machine_preference
		has_trait = trait_pc_ringworld_hive_preference
		has_trait = trait_pc_birch_preference
		has_trait = trait_pc_origin_birch_preference
		has_trait = trait_pc_equatorial_shipyard_preference
		has_trait = trait_pc_giga_planetary_computer_preference
		has_trait = trait_pc_habitable_gas_giant_preference
		has_trait = trait_pc_alderson_slice_pc_preference
		has_trait = trait_pc_alderson_slice_ecu_preference
		has_trait = trait_pc_alderson_slice_hive_preference
		has_trait = trait_pc_alderson_slice_machine_preference
		has_trait = trait_pc_alderson_slice_gaia_preference
		has_trait = trait_pc_ehof_habitat_preference
		has_trait = trait_pc_void_birch_preference
		has_trait = trait_pc_alderson_slice_gaia_shattered_preference
		has_trait = trait_pc_giga_maginot_world_preference
		has_trait = trait_pc_giga_maginot_gas_giant_preference
		has_trait = trait_pc_giga_maginot_ringworld_preference
	}
}

#things players can become that don't change gamplay much
giga_is_standard_country_type = {
	OR = {
		is_country_type = default
		is_country_type = ascended_empire
		is_country_type = lost_empire
	}
}

#Things that players or standard ai can't be, or that significantly change gameplay like becoming blokkats 
giga_is_special_country_type = {
	OR = {
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		is_country_type = primitive
	}
}

#Helps cut down on lag from gigabank maths by not giving it to only to people who can actually use it
giga_country_gets_bank = {
	optimize_memory
	giga_country_gets_bank_exclude = no
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		giga_country_gets_bank_include = yes

		giga_is_playable_country = yes
	}
}

giga_country_gets_bank_exclude = {
	optimize_memory
	OR = {
		#Don't give it to these nerds EVER and terminate before even getting to playable
		#Exclusive list of vanilla country types to NEVER give it to
		#No leviathans
		is_guardian_country = yes
		is_tiyanki_country_type = yes
		is_amoeba_country_type = yes
		is_crystal_country_type = yes
		is_drone_country_type = yes
		is_country_type = guardian_warden
		is_country_type = ldragon_country
		is_country_type = cloud
		#No Crisis factions
		is_country_type = gray_goo
		is_country_type = swarm
		is_country_type = extradimensional
		is_country_type = extradimensional_2
		is_country_type = extradimensional_3
		is_country_type = ai_empire
		is_country_type = dormant_marauders
		is_country_type = ruined_marauders
		is_country_type = awakened_marauders
		#no caravaneers
		is_country_type = caravaneer_home
		is_country_type = caravaneer_fleet
		is_country_type = global_event #No Never.
		is_country_type = faction
		is_country_type = origin_dragon
		is_country_type = dragon_dummy
		is_country_type = clutch_of_whelps
		is_country_type = adversary
		is_country_type = neutral_faction
		is_country_type = nomad
		is_country_type = pirate
		is_country_type = primitive
		is_country_type = rebel
		is_country_type = ambient
		is_country_type = enclave
		is_country_type = enclave_mercenary
		is_country_type = shroud
		is_country_type = shroud_spirits
		is_country_type = gdf
		is_country_type = cybrex_empire
		is_country_type = sentinels
		is_country_type = gate_builders
		is_country_type = gray
		is_country_type = portal_holder
		is_country_type = feral_prethoryn
		is_country_type = feral_prethoryn_infighting
		is_country_type = marauder_raiders
		is_country_type = vol
		is_country_type = ratlings
		is_country_type = enigmatic_cache
		is_country_type = mechanocalibrator
		is_country_type = vluur
		is_country_type = slavers_dummy
		is_country_type = jaunting_traveler_dummy
		is_country_type = debt_collectors
	}
}
#To be on this list, a country type should have both construction AI and an economic module, if it doesn't meet both of those don't put it here
giga_country_gets_bank_include = {
	OR = {
		is_country_type = ascended_empire
		is_country_type = lost_empire
	}
}

#Stops them from doing any of the really bad observation events
giga_is_special_primitive = {
	OR = {
		has_country_flag = ezic_tropiana_country
		has_country_flag = corrona_primitives
		has_country_flag = giga_eaw_country
		has_country_flag = flusion_primitives
		has_country_flag = paluush_primitives
		has_country_flag = excognitor_primitives
		has_country_flag = dominion_primitives
	}
}

###################################
### Compat Planet type triggers ###
###################################
giga_is_katzenland = {
	is_planet_class = pc_katzenland
}
giga_is_edge_of_eternity = {
	is_planet_class = pc_giga_edge_of_eternity
}

### Uninhabitable planets ###

#master list of all basic uninhabitable world types
giga_is_uninhabitable = {
	optimize_memory
	OR = {
		giga_is_molten = yes
		giga_is_frozen = yes
		giga_is_barren_cn = yes
		giga_is_toxic = yes
		giga_is_gas_giant = yes
	}
}

#Gas giants
giga_is_gas_giant = {
	optimize_memory
	OR = {
		is_planet_class = pc_gas_giant
		atw_is_gas_giant = yes

		#These have been moved to a modifier
		is_planet_class = pc_dwarf_gas_giant #This one was forgor? or atleast it seems like that
		# is_planet_class = pc_cold_gas_giant
		# is_planet_class = pc_cloudless_gas_giant
		# is_planet_class = pc_hot_gas_giant
	}
}

#toxic worlds
giga_is_toxic = {
	optimize_memory
	OR = {
		is_planet_class = pc_toxic
		is_planet_class = pc_red_toxic
		atw_is_toxic = yes
		is_pd_toxic = yes #The rest of the uninhabitable PD triggers brought to you by Inny
	}
}

#Molten worlds
giga_is_molten = {
	optimize_memory
	OR = {
		is_planet_class = pc_molten
		atw_is_molten = yes
		is_pd_molten = yes
	}
}

#frozen
giga_is_frozen = {
	optimize_memory
	OR = {
		is_planet_class = pc_frozen
		atw_is_frozen = yes
	}
}

#Cold or normal barren
giga_is_barren_cn = {
	optimize_memory
	OR = {
		giga_is_barren = yes
		giga_is_barren_cold = yes
	}
}

giga_is_barren = {
	optimize_memory
	OR = {
		is_planet_class = pc_barren
		atw_is_barren = yes
		is_pd_barren = yes
	}
}

giga_is_barren_cold = {
	optimize_memory
	OR = {
		is_planet_class = pc_barren_cold
		atw_is_barren = yes
		is_pd_barren_cold = yes
	}
}

### Habitable worlds(pain) ###
giga_is_alpine = { 
	optimize_memory
	OR = {
		is_planet_class = pc_alpine
		is_pd_alpine = yes
		atw_is_alpine = yes
	} 
}

giga_is_arctic = { 
	optimize_memory
	OR = {
		is_planet_class = pc_arctic
		is_pd_arctic = yes
		atw_is_arctic = yes
	} 
}

giga_is_arid = { 
	optimize_memory
	OR = {
		is_planet_class = pc_arid
		is_pd_arid = yes
		atw_is_arid = yes
	} 
}

giga_is_continental = { 
	optimize_memory
	OR = {
		is_planet_class = pc_continental
		is_pd_continental = yes
		atw_is_continental = yes
	} 
}

giga_is_desert = { 
	optimize_memory
	OR = {
		is_planet_class = pc_desert
		is_pd_desert = yes
		atw_is_desert = yes
	} 
}

giga_is_ocean = { 
	optimize_memory
	OR = {
		is_planet_class = pc_ocean
		is_planet_class = pc_giga_edge_of_eternity
		is_pd_ocean = yes
		is_pd_aquatics = yes
		atw_is_ocean_basic = yes
	} 
}

giga_is_savannah = { 
	optimize_memory
	OR = {
		is_planet_class = pc_savannah
		is_pd_savannah = yes
		atw_is_savannah = yes 
	} 
}

giga_is_tropical = { 
	optimize_memory
	OR = {
		is_planet_class = pc_tropical
		is_pd_tropical = yes
		atw_is_tropical = yes
	} 
}

giga_is_tundra = { 
	optimize_memory
	OR = {
		is_planet_class = pc_tundra
		is_pd_tundra = yes
		atw_is_tundra = yes
	} 
}
#Lifeless worlds from terraforming megas
giga_is_lifeless = {
	optimize_memory
	OR = {
		is_planet_class = pc_ll_foggy
		is_planet_class = pc_ll_temperate
		is_planet_class = pc_ll_torrid
	}
}

giga_is_hive = {
	optimize_memory
	OR = {
		is_planet_class = pc_hive
		is_pd_hive_world = yes
	}
}

giga_is_machine = {
	optimize_memory
	OR = {
		is_planet_class = pc_machine
		is_pd_machine = yes
	}
}

giga_is_gaia = { 
	optimize_memory
	OR = {
		is_planet_class = pc_gaia
		is_pd_gaia = yes
		atw_is_gaia = yes
	} 
}

giga_is_nuked = { 
	optimize_memory
	OR = {
		is_planet_class = pc_nuked
		is_planet_class = pc_katzenland
		is_pd_nuked = yes
	} 

}

giga_is_arcology = {
	optimize_memory
	OR = {
		is_planet_class = pc_flusion_gaia_ecu
		is_planet_class = pc_city
		is_pd_arcology = yes
	}
}

# used in can_get_external_leader_pool_candidate rule overwrite
# This = country, Country that wants to get an external leader
# From = country, country that we are trying to get from
giga_can_get_external_leader_pool_candidate = {
	if = {
		limit = {
			giga_can_get_external_leader_pool_candidate_katzen = yes
		}
		giga_can_get_external_leader_pool_candidate_katzen = yes
	}
	else = {
		custom_tooltip = {
			text = frameworld_blank
			always = no
		}
	}
}
giga_can_get_external_leader_pool_candidate_katzen = {
	custom_tooltip = {
		text = giga_katzen_external_leader_trigger
		and = {
			exists = event_target:flusion_primitives_country
			has_country_flag = allied_to_kaiser
			from = {
				is_same_empire = event_target:flusion_primitives_country
			}
		}
	}
}

# used in the overwrite of ai_should_restrict_system in rules
# this = system
# root = country
giga_ai_should_restrict_system = {
	or = {
		# AI should avoid pre-ftl flusion to make sure the guaranteed kaiser doesn't get curbstomped as a pre-ftl
		AND = {
			NOT = { has_global_flag = katzenartig_imperium_happened }
			OR = {
				has_global_flag = katzenartig_always
				has_global_flag = katzenartig_deathwish
				has_global_flag = katzenartig_stellarite
				has_global_flag = katzenartig_improbable
			}
			has_star_flag = flusion_system
			event_target:gigaflusion = {
				exists = owner
				owner = { is_country_type = primitive }
			}
		}

		# kaiser should avoid fallen and awakened empires unless he's at war with them
		# this should finally stop him not caring about borders
		and = {
			root = {
				is_country_type = katzenartig_imperium
			}
			exists = owner
			owner = {
				or = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				not = { is_at_war_with = root }
			}
		}
	}
}

# used in can_generate_leader_from_pop rule overwrite
# should only prevent civilian leaders since the military ones are governred by a different trigger
#Root = country
#This = pop
giga_kaiser_prevent_civilian_candidates = {
	if = {
		limit = {
			exists = owner
			owner = {
				is_country_type = katzenartig_imperium
			}
		}
		root = {
			is_country_type = katzenartig_imperium
		}
	}
}

# used in can_generate_military_leader_from_pop rule overwrite
# should make sure external candidates drawn from the imperium are only katzen
#Root = country
#This = pop
giga_kaiser_only_katzen_military_candidates = {
	if = {
		limit = {
			exists = owner
			owner = {
				is_country_type = katzenartig_imperium
			}
			exists = event_target:flusion_katzens
		}
		or = {
			root = {
				is_country_type = katzenartig_imperium
			}
			is_same_species = event_target:flusion_katzens
		}
	}
}