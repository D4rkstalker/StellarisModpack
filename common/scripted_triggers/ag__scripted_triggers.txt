
# Use ag_print_scope = { ag_prifix = <Scope>-[This.GetName] } to print scope.
ag_print_scope = {
	optimize_memory
	switch = {
		trigger = is_scope_type
		megastructure = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Megastructure Scope" }
		planet = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Planet Scope" }
		country = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Country Scope" }
		ship = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Ship Scope" }
		pop = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Pop Scope" }
		fleet = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Fleet Scope" }
		galactic_object = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Galactic Object Scope" }
		leader = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Leader Scope" }
		army = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Army Scope" }
		ambient_object = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Ambient Object Scope" }
		species = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Species Scope" }
		design = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Design Scope" }
		pop_faction = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Pop Faction Scope" }
		war = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: War Scope" }
		alliance = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Alliance Scope" }
		starbase = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Starbase Scope" }
		deposit = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Deposit Scope" }
		observer = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Observer Scope" }
		sector = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Sector Scope" }
		default = { log = "[[ag_prifix]$ag_prifix$: ][This.GetName]: Unknown Scope(Default)" }
	}
}
ag_print_scope_all = {
	optimize_memory
	ag_print_scope = { ag_prifix = THIS - [[ag_prifix]_$ag_prifix$] }
	root = { ag_print_scope = { ag_prifix = ROOT - [[ag_prifix]_$ag_prifix$] } }
	if = { limit = { exists = owner } owner = { ag_print_scope = { ag_prifix = OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = space_owner } space_owner = { ag_print_scope = { ag_prifix = SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = solar_system } solar_system = { ag_print_scope = { ag_prifix = SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = from } from = { ag_print_scope = { ag_prifix = FROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.owner } from.owner = { ag_print_scope = { ag_prifix = FROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.space_owner } from.space_owner = { ag_print_scope = { ag_prifix = FROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = from.solar_system } from.solar_system = { ag_print_scope = { ag_prifix = FROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfrom } fromfrom = { ag_print_scope = { ag_prifix = FROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.owner } fromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.space_owner } fromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfrom.solar_system } fromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfromfrom } fromfromfrom = { ag_print_scope = { ag_prifix = FROMFROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.owner } fromfromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.space_owner } fromfromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfrom.solar_system } fromfromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = fromfromfromfrom } fromfromfromfrom = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.owner } fromfromfromfrom.owner = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.space_owner } fromfromfromfrom.space_owner = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = fromfromfromfrom.solar_system } fromfromfromfrom.solar_system = { ag_print_scope = { ag_prifix = FROMFROMFROMFROM_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prev } prev = { ag_print_scope = { ag_prifix = PREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.owner } prev.owner = { ag_print_scope = { ag_prifix = OWNE - R[[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.space_owner } prev.space_owner = { ag_print_scope = { ag_prifix = SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prev.solar_system } prev.solar_system = { ag_print_scope = { ag_prifix = SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprev } prevprev = { ag_print_scope = { ag_prifix = PREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.owner } prevprev.owner = { ag_print_scope = { ag_prifix = PREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.space_owner } prevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprev.solar_system } prevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprevprev } prevprevprev = { ag_print_scope = { ag_prifix = PREVPREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.owner } prevprevprev.owner = { ag_print_scope = { ag_prifix = PREVPREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.space_owner } prevprevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprev.solar_system } prevprevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
	
	if = { limit = { exists = prevprevprevprev } prevprevprevprev = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.owner } prevprevprevprev.owner = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.space_owner } prevprevprevprev.space_owner = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_SPACE_OWNER - [[ag_prifix]_$ag_prifix$] } } }
	if = { limit = { exists = prevprevprevprev.solar_system } prevprevprevprev.solar_system = { ag_print_scope = { ag_prifix = PREVPREVPREVPREV_SOLAR_SYSTEM - [[ag_prifix]_$ag_prifix$] } } }
}

ag_is_common_country = {
	optimize_memory
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		is_country_type = awakened_marauders
		is_country_type = primitive
		is_country_type = ratlings
		is_country_type = prikki
		
		is_country_type = default_ev
		
		is_country_type = ascended_empire
		is_country_type = lost_empire
	}
}

ag_no_normal_district_planet = {
	optimize_memory
	OR = {
		is_planet_class = pc_ag_void_star
		is_planet_class = pc_ag_void_planet
		is_planet_class = pc_ag_ringworld_shrouded
		is_planet_class = pc_ag_ringworld_ocean
		is_planet_class = pc_ag_ringworld_city
		is_planet_class = pc_ag_ringworld_machine
		is_planet_class = pc_ag_ringworld_tropical
		is_planet_class = pc_ag_ringworld_gaia
	}
}

ag_is_ancient_ringworld = {
	optimize_memory
	OR = {
		is_planet_class = pc_ag_ringworld_shrouded
		is_planet_class = pc_ag_ringworld_desert
		is_planet_class = pc_ag_ringworld_arid
		is_planet_class = pc_ag_ringworld_savannah
		is_planet_class = pc_ag_ringworld_ocean
		is_planet_class = pc_ag_ringworld_continental
		is_planet_class = pc_ag_ringworld_tropical
		is_planet_class = pc_ag_ringworld_tundra
		is_planet_class = pc_ag_ringworld_arctic
		is_planet_class = pc_ag_ringworld_alpine
		is_planet_class = pc_ag_ringworld_city
		is_planet_class = pc_ag_ringworld_machine
		is_planet_class = pc_ag_ringworld_gaia
		is_planet_class = pc_ag_ringworld_tech_psionic
	}
}

ag_can_do_orbital_bombardment_country = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_primitive_crisis
		is_country_type = ag_ancient_gamma_guardian
		is_country_type = ag_ancient_epsilon_guardian
		is_country_type = ag_ancient_eta_guardian
		is_country_type = ag_zeta_crisis_country
		AND = {
			is_country_type = ag_ancient_psi_guardian
			from.controller = { is_hostile = root.owner }
		}
	}
}
ag_can_be_orbital_bombardment_country = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_primitive_crisis
		is_country_type = ag_ancient_epsilon_guardian
		is_country_type = ag_zeta_crisis_country
		is_country_type = ag_ancient_psi_guardian
	}
}

ag_all_ancient_system_exists_or_known = {
	optimize_memory
	AND = {
		OR = { has_global_flag = ag_alpha_area_spawned has_special_project = ag_located_alpha_area }
		OR = { has_global_flag = ag_beta_area_spawned has_special_project = ag_located_beta_area }
		OR = { has_global_flag = ag_gamma_area_spawned has_special_project = ag_located_gamma_area }
		OR = { has_global_flag = ag_delta_area_spawned has_special_project = ag_located_delta_area }
		OR = { has_global_flag = ag_epsilon_area_spawned has_special_project = ag_located_epsilon_area }
		OR = { has_global_flag = ag_zeta_area_spawned has_special_project = ag_located_zeta_area }
		OR = { has_global_flag = ag_eta_area_spawned has_special_project = ag_located_eta_area }
		OR = { has_global_flag = ag_iota_area_spawned has_special_project = ag_located_iota_area }
	}
}

ag_is_ancient_system = {
	optimize_memory
	OR = {
		has_star_flag = ag_ancient_system
		has_star_flag = ag_gamma_station_small_in_system
		# has_star_flag = ag_zeta_crisis_psionic_storm_system
		# has_star_flag = ag_zeta_crisis_psionic_singularity_system
	}
}
ag_is_star_killer_special_system = {
	optimize_memory
	OR = {
		has_star_flag = ag_no_star_killer_target_system

		kuat_is_kuat_system = yes
		# has_star_flag = Kuat_system
		# has_star_flag = Kuat_system_1
		# has_star_flag = Kuat_system_2
		# has_star_flag = Kuat_system_3
		# has_star_flag = starkiller_system
	}
}

ag_is_mod_special_system = {
	optimize_memory
	OR = {
		has_star_flag = isolated_home_system_gate
		has_star_flag = isolated_home_system

		kuat_is_kuat_system = yes
		# has_star_flag = Kuat_system
		# has_star_flag = Kuat_system_1
		# has_star_flag = Kuat_system_2
		# has_star_flag = Kuat_system_3
		# has_star_flag = starkiller_system

		has_star_flag = uf_mega_habitat_origin_core_system
		has_star_flag = uf_mega_habitat_system
		has_star_flag = uf_shipyard_system
		has_star_flag = uf_galaxy_gun_system
		has_star_flag = uf_ancient_galaxy_gun_system
	}
}

ag_is_mod_country = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_guardian_passive
		is_country_type = ag_ancient_guardian_aggressive
		is_country_type = ag_ancient_guardian_passive_auto_delete
		is_country_type = ag_ancient_guardian_aggressive_auto_delete
		is_country_type = ag_ancient_primitive_monitor
		is_country_type = ag_ancient_beta_guardian
		is_country_type = ag_ancient_gamma_guardian
		is_country_type = ag_ancient_delta_guardian
		is_country_type = ag_ancient_delta_guardian_passive
		is_country_type = ag_epsilon_fallen_empire_guardian
		is_country_type = ag_ancient_epsilon_guardian
		is_country_type = ag_ancient_epsilon_obelisk_guardian
		is_country_type = ag_ancient_zeta_guardian
		is_country_type = ag_ancient_eta_guardian
		is_country_type = ag_ancient_eta_guardian_passive
		is_country_type = ag_ancient_psi_guardian
		is_country_type = ag_ancient_iota_enclave
		is_country_type = ag_ancient_wanderer_country
		is_country_type = ag_ancient_anchor_station_country
		is_country_type = ag_lost_ancient_ship_country
		is_country_type = ag_ancient_astronomy_station_country
		is_country_type = ag_ancient_beta_signal_station_guardian
		is_country_type = ag_zeta_crisis_country
		is_country_type = ag_zeta_crisis_portal_holder
		is_country_type = ag_zeta_crisis_relic_country
		is_country_type = ag_ancient_primitive_crisis
	}
}
ag_is_ancient_country = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_guardian_passive
		is_country_type = ag_ancient_guardian_aggressive
		is_country_type = ag_ancient_guardian_passive_auto_delete
		is_country_type = ag_ancient_guardian_aggressive_auto_delete
		is_country_type = ag_ancient_primitive_monitor
		is_country_type = ag_ancient_beta_guardian
		is_country_type = ag_ancient_beta_signal_station_guardian
		is_country_type = ag_ancient_gamma_guardian
		is_country_type = ag_ancient_delta_guardian
		is_country_type = ag_ancient_delta_guardian_passive
		is_country_type = ag_ancient_epsilon_guardian
		is_country_type = ag_ancient_epsilon_obelisk_guardian
		is_country_type = ag_ancient_eta_guardian_passive
		is_country_type = ag_ancient_eta_guardian
		is_country_type = ag_ancient_eta_gateway_guardian
		is_country_type = ag_ancient_zeta_guardian
		is_country_type = ag_ancient_psi_guardian
		is_country_type = ag_ancient_astronomy_station_country
		is_country_type = ag_ancient_iota_enclave
		is_country_type = ag_ancient_wanderer_country
		is_country_type = ag_ancient_anchor_station_country
		is_country_type = ag_lost_ancient_ship_country
	}
}
ag_is_crisis_country = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_gamma_guardian
		is_country_type = ag_zeta_crisis_country
		is_country_type = ag_ancient_primitive_crisis
	}
}

ag_is_special_constructable_shipyard = {
	optimize_memory
	custom_tooltip = {
		fail_text = "ag_need_ancient_construction_facilities"
		OR = {
			AND = { is_scope_type = starbase OR = {
				has_starbase_size = ag_gamma_station_hostile
				has_starbase_size = ag_gamma_station_0
				has_starbase_size = ag_gamma_station_1

				has_starbase_size = swfo_supremacy
				has_starbase_size = exe_megastructure_starbase
			} }
			AND = { is_scope_type = megastructure OR = {
				is_megastructure_type = ag_ancient_construction_section
				has_megastructure_flag = ag_ancient_construction_section_megashipyard
				
				# is_megastructure_type = Shield_Gate
				is_megastructure_type = StarForge
				is_megastructure_type = exe_black_hole_restore
				is_megastructure_type = exe_black_hole_facility
			} }
			AND = { exists = owner owner = { has_modifier = "ag_debug_modifier_buff_common" } }
		}
	}
}

ag_beta_psionic_effect_event_active = {
	optimize_memory
	has_global_flag = ag_aneient_beta_psionic_effect_begins
	NOT = { has_global_flag = ag_aneient_beta_psionic_effect_ended }
}
ag_gamma_crisis_event_active = {
	optimize_memory
	has_global_flag = ag_gamma_crisis_began
	NOT = { has_global_flag = ag_gamma_crisis_ended }
}
ag_zeta_crisis_event_active = {
	optimize_memory
	has_global_flag = ag_zeta_crisis_stage_3
	NOT = { has_global_flag = ag_zeta_crisis_ended }
}
ag_eta_titan_event_active = {
	optimize_memory
	has_global_flag = ag_eta_titan_spawned
	NOT = { has_global_flag = ag_eta_titan_event_ended }
}

ag_spawnsystem_gatekeeper_trigger = {
	optimize_memory
	OR = {
		has_global_flag = ag_spawnsystem_gatekeeper_any_time
		AND = {
			has_global_flag = ag_spawnsystem_gatekeeper_mid_game
			mid_game_years_passed >= 0
		}
		end_game_years_passed >= 0
	}
}

ag_spawnsystem_trigger = {
	optimize_memory
	AND = {
		OR = {
			AND = {
				has_global_flag = ag_system_spawn_in_home
				exists = space_owner
				space_owner = { is_same_value = event_target:ag_system_discover_country }
			}
			NOT = { has_global_flag = ag_system_spawn_in_home }
		}
		NOR = {
			has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system
			any_neighbor_system = { OR = {
				AND = {
					exists = space_owner
					space_owner = {	OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } }
				}
				has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system
			} }
		}
	}
}

ag_spawnsystem_trigger_fallback = {
	optimize_memory
	AND = {
		OR = {
			AND = {
				has_global_flag = ag_system_spawn_in_home
				exists = space_owner
				space_owner = { is_same_value = event_target:ag_system_discover_country }
			}
			NOT = { has_global_flag = ag_system_spawn_in_home }
		}
		NOR = { has_star_flag = guardian has_star_flag = lcluster has_star_flag = ag_ancient_system has_star_flag = ag_no_jump_in_system }
	}
}

ag_ai_allowed_trigger = {
	optimize_memory
	OR = {
		has_global_flag = ag_ai_event_triggers_allowed
		is_ai = no
	}
}

ag_zeta_crisis_fallback_system_spawn_trigger = {
	optimize_memory
	NOR = {
		has_star_flag = guardian
		has_star_flag = lcluster
		any_neighbor_system = { OR = {
			AND = {
				exists = space_owner
				space_owner = {	OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				} }
			}
			has_star_flag = guardian
		} }
	}
}

ag_zeta_crisis_fallback_system_spawn_trigger_fallback = {
	optimize_memory
	NOR = {
		has_star_flag = guardian
		has_star_flag = lcluster
	}
}

ag_is_unhabitable_ringworld = {
	optimize_memory
	OR = {
		is_planet_class = pc_ringworld_tech
		is_planet_class = pc_ringworld_seam
		is_planet_class = pc_ringworld_habitable_damaged
		is_planet_class = pc_ringworld_tech_damaged
		is_planet_class = pc_ringworld_seam_damaged
		is_planet_class = pc_ringworld_shielded
	}
}
ag_is_ringworld = {
	optimize_memory
	OR = {
		is_planet_class = pc_ringworld_habitable
		is_planet_class = pc_ringworld_tech
		is_planet_class = pc_ringworld_seam
		is_planet_class = pc_ringworld_habitable_damaged
		is_planet_class = pc_ringworld_tech_damaged
		is_planet_class = pc_ringworld_seam_damaged
		is_planet_class = pc_ringworld_shielded
		is_planet_class = pc_ag_ringworld_desert
		is_planet_class = pc_ag_ringworld_arid
		is_planet_class = pc_ag_ringworld_savannah
		is_planet_class = pc_ag_ringworld_ocean
		is_planet_class = pc_ag_ringworld_continental
		is_planet_class = pc_ag_ringworld_tropical
		is_planet_class = pc_ag_ringworld_tundra
		is_planet_class = pc_ag_ringworld_arctic
		is_planet_class = pc_ag_ringworld_alpine
		is_planet_class = pc_ag_ringworld_machine
		is_planet_class = pc_ag_ringworld_city
		is_planet_class = pc_ag_ringworld_gaia
		is_planet_class = pc_ag_ringworld_shrouded
		
		# For Compatibility
		# wsg
		is_planet_class = pc_ringworld_habitable_sh
		is_planet_class = pc_ringworld_habitable_wsg
		# gigastructure
		is_planet_class = pc_ringworld_city
		is_planet_class = pc_ringworld_machine
		is_planet_class = pc_ringworld_hive 
		is_planet_class = pc_city_ringworld_habitable
		is_planet_class = pc_gigaorbital_ring
		is_planet_class = pc_giga_ringworld_habitable
		# ascendancy_ringworlds
		is_planet_class = pc_ringworld_eco_city 
		is_planet_class = pc_ringworld_energy_city 
		is_planet_class = pc_ringworld_shrouded_paradise 
		is_planet_class = pc_square_ringworld_city 
		is_planet_class = pc_square_ringworld_energy_city 
		is_planet_class = pc_square_ringworld_machine 
		is_planet_class = pc_square_ringworld_hive 
		is_planet_class = pc_ringworld_assimilated 
		is_planet_class = pc_ringworld_assimilated2 
		is_planet_class = pc_ringworld_assimilated3 
		is_planet_class = pc_ringworld_assimilated4 
		is_planet_class = pc_ringworld_machine_factory 
		is_planet_class = pc_ringworld_bioforge 
		is_planet_class = pc_ringworld_mining 
		is_planet_class = pc_ringworld_energy 
		is_planet_class = pc_ringworld_trade 
		is_planet_class = pc_ringworld_training 
		is_planet_class = pc_ringworld_training_shielded 
		is_planet_class = pc_ringworld_eco 
		is_planet_class = pc_ringworld_farming 
		is_planet_class = pc_ringworld_razed_city 
		is_planet_class = pc_ringworld_razed_energy 
		is_planet_class = pc_ringworld_razed_farming 
		is_planet_class = pc_ringworld_razed_mining 
		is_planet_class = pc_ringworld_razed_training 
		is_planet_class = pc_ringworld_razed_eco 
		# acot
		is_planet_class = pc_omega_ringworld_seam
		is_planet_class = pc_omega_ringworld_habitable
	}
}
ag_is_habitat = {
	optimize_memory
	OR = {
		is_planet_class = pc_habitat
		# gigastructure
		is_planet_class = pc_flat_world
		is_planet_class = pc_squareworld_habitable
		is_planet_class = pc_interstellar_habitat
		# Plentiful Traditions
		is_planet_class = pc_mem_vazuran_habitat
		is_planet_class = pc_habitat_robot
		#PD - Planetary Habitats
		is_planet_class = pc_gghab
		is_planet_class = pc_tmhab
		is_planet_class = pc_tmhab2
		is_planet_class = pc_mmhab
		is_planet_class = pc_mmhab2
		is_planet_class = pc_bhab
		is_planet_class = pc_bchab
		is_planet_class = pc_mhab
		is_planet_class = pc_fhab
		is_planet_class = pc_fmhab
		is_planet_class = pc_mehab
	}
}

ag_is_mod_habitable_ringworld = {
	optimize_memory
	OR = {
		is_planet_class = pc_ag_ringworld_desert
		is_planet_class = pc_ag_ringworld_arid
		is_planet_class = pc_ag_ringworld_savannah
		is_planet_class = pc_ag_ringworld_ocean
		is_planet_class = pc_ag_ringworld_continental
		is_planet_class = pc_ag_ringworld_tropical
		is_planet_class = pc_ag_ringworld_tundra
		is_planet_class = pc_ag_ringworld_arctic
		is_planet_class = pc_ag_ringworld_alpine
		is_planet_class = pc_ag_ringworld_machine
		is_planet_class = pc_ag_ringworld_city
		is_planet_class = pc_ag_ringworld_gaia
	}
}

ag_is_normal_system = {
	optimize_memory
	NOR = {
		is_star_class = sc_black_hole
		is_star_class = sc_neutron_star
		is_star_class = sc_pulsar
		is_star_class = sc_binary_1
		is_star_class = sc_binary_2
		is_star_class = sc_binary_3
		is_star_class = sc_binary_4
		is_star_class = sc_binary_5
		is_star_class = sc_binary_6
		is_star_class = sc_binary_7
		is_star_class = sc_binary_8
		is_star_class = sc_binary_9
		is_star_class = sc_binary_10
		is_star_class = sc_trinary_1
		is_star_class = sc_trinary_2
		is_star_class = sc_trinary_3
		is_star_class = sc_trinary_4
	}
}

ag_spawn_system_locked = {
	optimize_memory
	OR = {
		has_global_flag = ag_$ag_index$_area_spawned
		has_country_flag = ag_$ag_index$_system_locked
	} 
}

ag_megashipyard_can_recv_construction_section = {
	optimize_memory
	OR = {
		is_megastructure_type = mega_shipyard_3
		is_megastructure_type = mega_shipyard_restored
	}
}

ag_is_constructing_ancient_megastructure = {
	optimize_memory
	OR = {
		is_megastructure_type = ag_alpha_titan_megastructure_0
		is_megastructure_type = ag_alpha_titan_megastructure_1
		is_megastructure_type = ag_alpha_titan_megastructure_2
		is_megastructure_type = ag_alpha_titan_megastructure_3
		is_megastructure_type = ag_delta_titan_megastructure_0
		is_megastructure_type = ag_delta_titan_megastructure_1
		is_megastructure_type = ag_epsilon_titan_megastructure_0
		is_megastructure_type = ag_epsilon_titan_megastructure_1
		is_megastructure_type = ag_epsilon_titan_megastructure_2
		is_megastructure_type = ag_eta_titan_megastructure_0
		is_megastructure_type = ag_eta_titan_megastructure_1
		is_megastructure_type = ag_eta_titan_megastructure_2
		is_megastructure_type = ag_eta_titan_megastructure_3
		is_megastructure_type = ag_gamma_station_megastructure_0
		is_megastructure_type = ag_gamma_station_megastructure_1
		is_megastructure_type = ag_gamma_station_megastructure_2
		is_megastructure_type = ag_gamma_station_megastructure_3
		is_megastructure_type = ag_gamma_station_megastructure_4
		is_megastructure_type = ag_gamma_station_megastructure_5
		is_megastructure_type = ag_gamma_station_megastructure_6
		is_megastructure_type = ag_gamma_station_megastructure_7
		is_megastructure_type = ag_gamma_station_megastructure_8
		is_megastructure_type = ag_gamma_titan_megastructure_0
		is_megastructure_type = ag_ancient_wandering_ship_megastructure_0
		is_megastructure_type = ag_ancient_wandering_ship_megastructure_1
		is_megastructure_type = ag_ancient_wandering_ship_megastructure_2
		is_megastructure_type = ag_ancient_wandering_ship_megastructure_3
		is_megastructure_type = ag_ancient_wandering_ship_megastructure_4
		is_megastructure_type = ag_zeta_titan_megastructure_0
	}
}

ag_zeta_crisis_spawn_army_trigger = {
	optimize_memory
	AND = {
		exists = owner
		owner = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
		is_capital = no
		has_ground_combat = no
		is_colony = yes
		num_pops > 0
	}
}

ag_psi_area_support_target = {
	optimize_memory
	OR = {
		is_country_type = ag_ancient_psi_guardian
		is_country_type = ag_zeta_crisis_country
		is_country_type = ai_empire
		is_country_type = swarm
		is_country_type = extradimensional
		is_country_type = extradimensional_2
		is_country_type = extradimensional_3
		is_country_type = ag_zeta_crisis_portal_holder
		is_country_type = gray_goo

		is_country_type = ag_kuat_invasion_country
	}
}

ag_mod_ship_modifier_check = {
	optimize_memory
	OR = {
		AND = { check_modifier_value = { modifier = ship_shield_damage_mult value < @ag_ship_shield_damage_mult_min } NOT = { has_ship_flag = ag_ship_shield_damage_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_damage_mult value < @ag_ship_armor_damage_mult_min } NOT = { has_ship_flag = ag_ship_armor_damage_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_hull_damage_mult value < @ag_ship_hull_damage_mult_min } NOT = { has_ship_flag = ag_ship_hull_damage_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_weapon_range_mult value < @ag_ship_weapon_range_mult_min } NOT = { has_ship_flag = ag_ship_weapon_range_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_shield_penetration_mult value < 0 } NOT = { has_ship_flag = ag_ship_penetration_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_penetration_mult value < 0 } NOT = { has_ship_flag = ag_ship_penetration_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_weapon_damage value < @ag_ship_weapon_damage_min } NOT = { has_ship_flag = ag_ship_weapon_damage_locked } }
		AND = { check_modifier_value = { modifier = ship_fire_rate_mult value < @ag_ship_fire_rate_mult_min } NOT = { has_ship_flag = ag_ship_fire_rate_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_tracking_mult value < @ag_ship_tracking_mult_min } NOT = { has_ship_flag = ag_ship_tracking_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_accuracy_mult value < @ag_ship_accuracy_mult_min } NOT = { has_ship_flag = ag_ship_accuracy_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_tracking_add value < @ag_ship_tracking_add_min } NOT = { has_ship_flag = ag_ship_tracking_add_locked } }
		AND = { check_modifier_value = { modifier = ship_accuracy_add value < @ag_ship_accuracy_add_min } NOT = { has_ship_flag = ag_ship_accuracy_add_locked } }
		AND = { check_modifier_value = { modifier = force_disparity_fire_rate_mult value < @ag_force_disparity_fire_rate_mult_min } NOT = { has_ship_flag = ag_force_disparity_fire_rate_mult_locked } }
		AND = { check_modifier_value = { modifier = ship_shield_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_shield_regen_add_perc_locked } }
		AND = { check_modifier_value = { modifier = ship_shield_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_shield_regen_add_static_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_armor_regen_add_perc_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_armor_regen_add_static_locked } }
		AND = { check_modifier_value = { modifier = ship_hull_regen_add_perc value < 0 } NOT = { has_ship_flag = ag_ship_hull_regen_add_perc_locked } }
		AND = { check_modifier_value = { modifier = ship_hull_regen_add_static value < 0 } NOT = { has_ship_flag = ag_ship_hull_regen_add_static_locked } }
		AND = { check_modifier_value = { modifier = ship_shield_reduction value > 0 } NOT = { has_ship_flag = ag_ship_shield_reduction_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_reduction value > 0 } NOT = { has_ship_flag = ag_ship_armor_reduction_locked } }
		AND = { check_modifier_value = { modifier = ship_shield_hardening_add value < 1 } NOT = { has_ship_flag = ag_ship_shield_hardening_add_locked } }
		AND = { check_modifier_value = { modifier = ship_armor_hardening_add value < 1 } NOT = { has_ship_flag = ag_ship_armor_hardening_add_locked } }
		AND = { check_modifier_value = { modifier = weapon_type_energy_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_energy_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_energy_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_gravity_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_gravity_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_gravity_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_psionic_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_psionic_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_psionic_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_anti_psionic_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_anti_psionic_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_ancient_primary_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_ancient_primary_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_ancient_primary_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_primary_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_primary_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_primary_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_secondary_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_secondary_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_titan_secondary_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_primary_alt_speed_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_weapon_damage_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_weapon_fire_rate_mult value < 0 } }
		AND = { check_modifier_value = { modifier = weapon_type_zeta_crisis_secondary_speed_mult value < 0 } }
	}
}

ag_can_first_contact_with_iota_enclave = {
	optimize_memory
	AND = {
		exists = event_target:ag_ancient_iota_enclave
		NOR = {
			is_country_type = ag_ancient_iota_enclave
			is_hostile = event_target:ag_ancient_iota_enclave
			# has_communications = event_target:ag_ancient_iota_enclave
		}
	}
}

ag_can_communicate_with_iota_enclave = {
	optimize_memory
	AND = {
		is_ai = no
		exists = event_target:ag_ancient_iota_enclave
		has_communications = event_target:ag_ancient_iota_enclave
		OR = {
			AND = {
				NOT = {
					has_country_flag = ag_ancient_iota_enclave_diplomacy_engaged
				}
				root.from = {
					is_country_type = ag_ancient_iota_enclave
				}
			}
			root.from = {
				is_same_value = root
			}
		}
	}
}

ag_has_recently_flag_iota_enclave = {
	optimize_memory
	OR = {
		has_country_flag = ag_recently_support_iota_enclave
		has_country_flag = ag_recently_cancel_support_iota_enclave
		has_country_flag = ag_recently_living_metal_trade_iota_enclave
		has_country_flag = ag_recently_nanites_trade_iota_enclave
		has_country_flag = ag_recently_dark_matter_trade_iota_enclave
		has_country_flag = ag_recently_cancel_living_metal_trade_iota_enclave
		has_country_flag = ag_recently_cancel_nanites_trade_iota_enclave
		has_country_flag = ag_recently_cancel_dark_matter_trade_iota_enclave
		has_country_flag = ag_recently_ask_for_building_iota_enclave
	}
}

ag_has_valid_trade_with_iota_enclave = {
	optimize_memory
	OR = {
		has_country_flag = ag_living_metal_trade_iota_enclave_actived
		has_country_flag = ag_nanites_trade_iota_enclave_actived
		has_country_flag = ag_dark_matter_trade_iota_enclave_actived
	}
}

ag_has_researcher = {
	optimize_memory
	AND = {
		planet_resource_compare = { resource = physics_research value > 0 type = produces }
		planet_resource_compare = { resource = society_research value > 0 type = produces }
		planet_resource_compare = { resource = engineering_research value > 0 type = produces }
	}
}
ag_has_planetary_shield = {
	optimize_memory
	has_building = building_planetary_shield_generator
}
ag_ancient_anchor_system_location_trigger = {
	optimize_memory
	OR = {
		has_star_flag = empire_cluster
		is_fe_cluster = yes
		any_neighbor_system = { OR = {
			has_megastructure = gateway_ruined
			has_megastructure = lgate_base
		} }
		any_system = {
			OR = {
				AND = { galaxy_size = tiny distance = { source = prev min_distance >= 5 max_distance <= 150 type = euclidean same_solar_system = no } }
				AND = { galaxy_size = small distance = { source = prev min_distance >= 5 max_distance <= 200 type = euclidean same_solar_system = no } }
				AND = { galaxy_size = medium distance = { source = prev min_distance >= 5 max_distance <= 300 type = euclidean same_solar_system = no } }
				AND = { galaxy_size = large distance = { source = prev min_distance >= 5 max_distance <= 350 type = euclidean same_solar_system = no } }
				AND = { galaxy_size = huge distance = { source = prev min_distance >= 5 max_distance <= 380 type = euclidean same_solar_system = no } }
			}
			has_star_flag = ag_ancient_anchor_system
		}
	}
}

ag_is_compact_star = {
	optimize_memory
	OR = {
		is_planet_class = pc_black_hole
		is_planet_class = pc_neutron_star
		is_planet_class = pc_pulsar
	}
}

ag_lost_ancient_ship_action_basic_check = {
	optimize_memory
	custom_tooltip = {
		fail_text = "ag_side.32.a.fail_text.a"
		event_target:ag_starlight_2_ship = { OR = {
			AND = {
				is_scope_type = ship
				exists = fleet
				fleet = { is_in_combat = no }
			}
			AND = {
				is_scope_type = leader
				OR = {
					NOR = { exists = fleet exists = planet }
					AND = { exists = fleet fleet = { is_in_combat = no } }
					AND = { exists = planet planet = { has_ground_combat = no is_occupied_flag = no } }
				}
			}
		} }
	}
	custom_tooltip = {
		fail_text = "ag_side.32.a.fail_text.b"
		event_target:ag_starlight_2_ship = { OR = {
			is_scope_type = leader
			AND = {
				is_scope_type = ship
				has_hp_percentage > 0.85
			}
		} }
	}
}
ag_lost_ancient_ship_guaridan_check = {
	optimize_memory
	OR = {
		has_country_flag = ag_lost_ancient_ship_target_$ag_target_guardian$_protected
		has_country_flag = ag_lost_ancient_ship_target_$ag_target_guardian$_failed
		NOT = { has_country_flag = ag_exists_$ag_target_guardian$ }
	}
}

ag_zeta_crisis_special_ship_spawn_trigger = {
	optimize_memory
	solar_system = {
		any_ship_in_system = {
			is_ship_size = ag_zeta_crisis_portal
			exists = owner
			owner = { OR = {
				is_country_type = ag_zeta_crisis_country
				is_country_type = ag_zeta_crisis_portal_holder
			} }
		}
		NOT = { any_ship_in_system = { has_ship_flag = ag_zeta_crisis_special_$ag_angle$ } }
	}
}

ag_is_eta_gateway_inaccessible_system = {
	optimize_memory
	OR = {
		ag_is_ancient_system = yes
		has_star_flag = ag_zeta_crisis_core_system
		has_star_flag = ag_zeta_crisis_psionic_storm_system
		has_star_flag = ag_zeta_crisis_psionic_singularity_system
		has_star_flag = ag_no_jump_in_system
		has_star_flag = ag_no_eta_wormhole_system
	}
}
ag_eta_gateway_wormhole_target_system_selector_trigger = {
	optimize_memory
	OR = {
		hidden_trigger = { root = { NOT = { has_country_flag = ag_enabled_eta_wormhole_target_selector } } }
		AND = {
			custom_tooltip = {
				fail_text = "ag_requires_no_more_than_one_system" 
				OR = {
					ag_system_selector_system_selected_trigger = { ag_system_seq = $ag_system_seq$ }
					root = { check_variable = { which = ag_num_system_selector_selected_systems value < 1 } }
				}
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_inaccessible_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { ag_is_eta_gateway_inaccessible_system = no }
			}
		}
	}
}

ag_is_gateway_megastructure = {
	optimize_memory
	OR = {
		is_megastructure_type = gateway_0
		is_megastructure_type = gateway_ruined
		is_megastructure_type = gateway_restored
		is_megastructure_type = gateway_final
		is_megastructure_type = lgate_base
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_0
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_1
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_2
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_3
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_4
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_5
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening_blue
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closing
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_damaged
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_damaged_alt
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closed
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closed_alt
	}
}
ag_is_ancient_gateway_megastructure = {
	optimize_memory
	OR = {
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_0
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_1
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_2
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_3
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_4
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_5
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening_blue
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closing
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_damaged
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_damaged_alt
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closed
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closed_alt
	}
}
ag_is_ancient_gateway_megastructure_alt = {
	optimize_memory
	OR = {
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_0
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_1
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_2
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_3
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_4
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_5
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_opening_blue
		is_megastructure_type = ag_ancient_eta_gateway_megastructure_closing
		is_megastructure_type = ag_ancient_eta_gateway_galactic_gateway
		is_megastructure_type = ag_ancient_eta_gateway_lgate
		is_megastructure_type = ag_ancient_eta_gateway_ancient_gateway
		is_megastructure_type = ag_ancient_eta_gateway_wormhole_temporary
		is_megastructure_type = ag_ancient_eta_gateway_wormhole_temporary_alt
	}
}

ag_is_eta_hallucination_inaccessible_system = {
	optimize_memory
	OR = {
		ag_is_ancient_system = yes
		has_star_flag = ag_zeta_crisis_core_system
		has_star_flag = ag_zeta_crisis_psionic_storm_system
		has_star_flag = ag_zeta_crisis_psionic_singularity_system
		has_star_flag = lcluster
		has_star_flag = sealed_system
		has_star_flag = ag_no_jump_in_system
	}
}
ag_eta_hallucination_target_system_selector_trigger = {
	optimize_memory
	OR = {
		hidden_trigger = { root = { NOT = { has_country_flag = ag_enabled_eta_hallucination_target_selector } } }
		AND = {
			custom_tooltip = {
				fail_text = "ag_requires_no_more_than_one_system" 
				OR = {
					ag_system_selector_system_selected_trigger = { ag_system_seq = $ag_system_seq$ }
					root = { check_variable = { which = ag_num_system_selector_selected_systems value < 1 } }
				}
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_inaccessible_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { ag_is_eta_hallucination_inaccessible_system = no }
			}
		}
	}
}
ag_eta_titan_is_idle = {
	optimize_memory
	is_fleet_idle = yes
	OR = {
		AND = {
			has_global_flag = ag_eta_titan_stage_1
			NAND = { exists = orbit orbit = { has_modifier = "ag_eta_titan_in_orbit" } }
		}
		AND = {
			has_global_flag = ag_eta_titan_stage_2
			NAND = { exists = orbit orbit = { exists = owner owner = { is_hostile = prevprev.owner } } }
		}
	}
}

ag_beta_psionic_station_target_system_selector_trigger = {
	optimize_memory
	OR = {
		hidden_trigger = { root = { NOT = { has_country_flag = ag_enabled_beta_psionic_station_target_selector } } }
		AND = {
			custom_tooltip = {
				fail_text = "ag_requires_no_too_many_system"
				OR = {
					ag_system_selector_system_selected_trigger = { ag_system_seq = $ag_system_seq$ }
					root = { OR = {
						AND = {
							NOT = { check_variable = { which = ag_beta_station_requires_attack_range value = 2 } }
							check_variable = { which = ag_num_system_selector_selected_systems value < 1 }
						}
						AND = {
							check_variable = { which = ag_beta_station_requires_attack_range value = 2 }
							check_variable = { which = ag_num_system_selector_selected_systems value < 2 }
						}
					} }
				}
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_ancient_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { ag_is_ancient_system = no }
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_zeta_crisis_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { NOT = { has_star_flag = ag_zeta_crisis_core_system } }
			}
		}
	}
}
ag_sci_constructor_intel_selector_trigger = {
	optimize_memory
	OR = {
		hidden_trigger = { root = { NOT = { has_country_flag = ag_enabled_sci_constructor_intel_selector } } }
		AND = {
			custom_tooltip = {
				fail_text = "ag_requires_no_more_than_one_system" 
				OR = {
					ag_system_selector_system_selected_trigger = { ag_system_seq = $ag_system_seq$ }
					root = { check_variable = { which = ag_num_system_selector_selected_systems value < 1 } }
				}
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_ancient_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { ag_is_ancient_system = no }
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_zeta_crisis_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { NOT = { has_star_flag = ag_zeta_crisis_core_system } }
			}
			custom_tooltip = {
				fail_text = "ag_requires_no_special_system" 
				event_target:ag_system_selector_marked_system_[[ag_system_seq]$ag_system_seq$] = { ag_is_star_killer_special_system = no }
			}
		}
	}
}

ag_eta_symbols_all_variables_set = {
	optimize_memory
	AND = {
		is_variable_set = ag_eta_control_group_1_color
		OR = {
			check_variable = { which = ag_eta_control_group_1_color value = 1 }
			check_variable = { which = ag_eta_control_group_1_color value = 2 }
			check_variable = { which = ag_eta_control_group_1_color value = 3 }
			check_variable = { which = ag_eta_control_group_1_color value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_var
		OR = {
			check_variable = { which = ag_eta_symbol_1_var value = 1 }
			check_variable = { which = ag_eta_symbol_1_var value = 2 }
			check_variable = { which = ag_eta_symbol_1_var value = 3 }
			check_variable = { which = ag_eta_symbol_1_var value = 4 }
		}
		is_variable_set = ag_eta_control_group_2_color
		OR = {
			check_variable = { which = ag_eta_control_group_2_color value = 1 }
			check_variable = { which = ag_eta_control_group_2_color value = 2 }
			check_variable = { which = ag_eta_control_group_2_color value = 3 }
			check_variable = { which = ag_eta_control_group_2_color value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_var
		OR = {
			check_variable = { which = ag_eta_symbol_2_var value = 1 }
			check_variable = { which = ag_eta_symbol_2_var value = 2 }
			check_variable = { which = ag_eta_symbol_2_var value = 3 }
			check_variable = { which = ag_eta_symbol_2_var value = 4 }
		}
		is_variable_set = ag_eta_control_group_3_color
		OR = {
			check_variable = { which = ag_eta_control_group_3_color value = 1 }
			check_variable = { which = ag_eta_control_group_3_color value = 2 }
			check_variable = { which = ag_eta_control_group_3_color value = 3 }
			check_variable = { which = ag_eta_control_group_3_color value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_var
		OR = {
			check_variable = { which = ag_eta_symbol_3_var value = 1 }
			check_variable = { which = ag_eta_symbol_3_var value = 2 }
			check_variable = { which = ag_eta_symbol_3_var value = 3 }
			check_variable = { which = ag_eta_symbol_3_var value = 4 }
		}
		is_variable_set = ag_eta_control_group_4_color
		OR = {
			check_variable = { which = ag_eta_control_group_4_color value = 1 }
			check_variable = { which = ag_eta_control_group_4_color value = 2 }
			check_variable = { which = ag_eta_control_group_4_color value = 3 }
			check_variable = { which = ag_eta_control_group_4_color value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_var
		OR = {
			check_variable = { which = ag_eta_symbol_4_var value = 1 }
			check_variable = { which = ag_eta_symbol_4_var value = 2 }
			check_variable = { which = ag_eta_symbol_4_var value = 3 }
			check_variable = { which = ag_eta_symbol_4_var value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_color_req
		OR = {
			check_variable = { which = ag_eta_symbol_1_color_req value = 1 }
			check_variable = { which = ag_eta_symbol_1_color_req value = 2 }
			check_variable = { which = ag_eta_symbol_1_color_req value = 3 }
			check_variable = { which = ag_eta_symbol_1_color_req value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_color_req
		OR = {
			check_variable = { which = ag_eta_symbol_2_color_req value = 1 }
			check_variable = { which = ag_eta_symbol_2_color_req value = 2 }
			check_variable = { which = ag_eta_symbol_2_color_req value = 3 }
			check_variable = { which = ag_eta_symbol_2_color_req value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_color_req
		OR = {
			check_variable = { which = ag_eta_symbol_3_color_req value = 1 }
			check_variable = { which = ag_eta_symbol_3_color_req value = 2 }
			check_variable = { which = ag_eta_symbol_3_color_req value = 3 }
			check_variable = { which = ag_eta_symbol_3_color_req value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_color_req
		OR = {
			check_variable = { which = ag_eta_symbol_4_color_req value = 1 }
			check_variable = { which = ag_eta_symbol_4_color_req value = 2 }
			check_variable = { which = ag_eta_symbol_4_color_req value = 3 }
			check_variable = { which = ag_eta_symbol_4_color_req value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_req_1
		OR = {
			check_variable = { which = ag_eta_symbol_1_req_1 value = 1 }
			check_variable = { which = ag_eta_symbol_1_req_1 value = 2 }
			check_variable = { which = ag_eta_symbol_1_req_1 value = 3 }
			check_variable = { which = ag_eta_symbol_1_req_1 value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_req_2
		OR = {
			check_variable = { which = ag_eta_symbol_1_req_2 value = 1 }
			check_variable = { which = ag_eta_symbol_1_req_2 value = 2 }
			check_variable = { which = ag_eta_symbol_1_req_2 value = 3 }
			check_variable = { which = ag_eta_symbol_1_req_2 value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_req_3
		OR = {
			check_variable = { which = ag_eta_symbol_1_req_3 value = 1 }
			check_variable = { which = ag_eta_symbol_1_req_3 value = 2 }
			check_variable = { which = ag_eta_symbol_1_req_3 value = 3 }
			check_variable = { which = ag_eta_symbol_1_req_3 value = 4 }
		}
		is_variable_set = ag_eta_symbol_1_req_4
		OR = {
			check_variable = { which = ag_eta_symbol_1_req_4 value = 1 }
			check_variable = { which = ag_eta_symbol_1_req_4 value = 2 }
			check_variable = { which = ag_eta_symbol_1_req_4 value = 3 }
			check_variable = { which = ag_eta_symbol_1_req_4 value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_req_1
		OR = {
			check_variable = { which = ag_eta_symbol_2_req_1 value = 1 }
			check_variable = { which = ag_eta_symbol_2_req_1 value = 2 }
			check_variable = { which = ag_eta_symbol_2_req_1 value = 3 }
			check_variable = { which = ag_eta_symbol_2_req_1 value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_req_2
		OR = {
			check_variable = { which = ag_eta_symbol_2_req_2 value = 1 }
			check_variable = { which = ag_eta_symbol_2_req_2 value = 2 }
			check_variable = { which = ag_eta_symbol_2_req_2 value = 3 }
			check_variable = { which = ag_eta_symbol_2_req_2 value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_req_3
		OR = {
			check_variable = { which = ag_eta_symbol_2_req_3 value = 1 }
			check_variable = { which = ag_eta_symbol_2_req_3 value = 2 }
			check_variable = { which = ag_eta_symbol_2_req_3 value = 3 }
			check_variable = { which = ag_eta_symbol_2_req_3 value = 4 }
		}
		is_variable_set = ag_eta_symbol_2_req_4
		OR = {
			check_variable = { which = ag_eta_symbol_2_req_4 value = 1 }
			check_variable = { which = ag_eta_symbol_2_req_4 value = 2 }
			check_variable = { which = ag_eta_symbol_2_req_4 value = 3 }
			check_variable = { which = ag_eta_symbol_2_req_4 value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_req_1
		OR = {
			check_variable = { which = ag_eta_symbol_3_req_1 value = 1 }
			check_variable = { which = ag_eta_symbol_3_req_1 value = 2 }
			check_variable = { which = ag_eta_symbol_3_req_1 value = 3 }
			check_variable = { which = ag_eta_symbol_3_req_1 value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_req_2
		OR = {
			check_variable = { which = ag_eta_symbol_3_req_2 value = 1 }
			check_variable = { which = ag_eta_symbol_3_req_2 value = 2 }
			check_variable = { which = ag_eta_symbol_3_req_2 value = 3 }
			check_variable = { which = ag_eta_symbol_3_req_2 value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_req_3
		OR = {
			check_variable = { which = ag_eta_symbol_3_req_3 value = 1 }
			check_variable = { which = ag_eta_symbol_3_req_3 value = 2 }
			check_variable = { which = ag_eta_symbol_3_req_3 value = 3 }
			check_variable = { which = ag_eta_symbol_3_req_3 value = 4 }
		}
		is_variable_set = ag_eta_symbol_3_req_4
		OR = {
			check_variable = { which = ag_eta_symbol_3_req_4 value = 1 }
			check_variable = { which = ag_eta_symbol_3_req_4 value = 2 }
			check_variable = { which = ag_eta_symbol_3_req_4 value = 3 }
			check_variable = { which = ag_eta_symbol_3_req_4 value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_req_1
		OR = {
			check_variable = { which = ag_eta_symbol_4_req_1 value = 1 }
			check_variable = { which = ag_eta_symbol_4_req_1 value = 2 }
			check_variable = { which = ag_eta_symbol_4_req_1 value = 3 }
			check_variable = { which = ag_eta_symbol_4_req_1 value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_req_2
		OR = {
			check_variable = { which = ag_eta_symbol_4_req_2 value = 1 }
			check_variable = { which = ag_eta_symbol_4_req_2 value = 2 }
			check_variable = { which = ag_eta_symbol_4_req_2 value = 3 }
			check_variable = { which = ag_eta_symbol_4_req_2 value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_req_3
		OR = {
			check_variable = { which = ag_eta_symbol_4_req_3 value = 1 }
			check_variable = { which = ag_eta_symbol_4_req_3 value = 2 }
			check_variable = { which = ag_eta_symbol_4_req_3 value = 3 }
			check_variable = { which = ag_eta_symbol_4_req_3 value = 4 }
		}
		is_variable_set = ag_eta_symbol_4_req_4
		OR = {
			check_variable = { which = ag_eta_symbol_4_req_4 value = 1 }
			check_variable = { which = ag_eta_symbol_4_req_4 value = 2 }
			check_variable = { which = ag_eta_symbol_4_req_4 value = 3 }
			check_variable = { which = ag_eta_symbol_4_req_4 value = 4 }
		}
	}
}

ag_kae_interaction_trigger = {
	optimize_memory
	is_ai = no
	has_global_flag = install_kuat_mod
	NOT = { has_origin = origin_kuat_apocalyptic }
	exists = event_target:fallen_empire_kuat
	event_target:global_event_country = { check_variable = { which = ag_scaled_difficulty value > 2 } }
}

# ag_check_scripted_value = {
# 	optimize_memory
# 	event_target:global_event_country = { check_variable_arithmetic = { which = ag_zero_variable add = prev.value:$ag_which$ value = prev.$ag_value$ } }
# }

ag_can_auto_build_outpost = {
	optimize_memory
	exists = owner
	OR = {
		AND = {
			fleet = { has_fleet_flag = ag_science_constructor_fleet }
			# any_controlled_ship = {
				is_ship_size = ag_science_constructor
				has_component = ag_science_constructor_outpost_module
			# }
		}
		AND = {
			owner = { has_country_flag = ag_lost_ancient_ship_auto_outpost }
			has_ship_flag = ag_lost_ancient_ship
			# any_controlled_ship = { has_ship_flag = ag_lost_ancient_ship }
		}
	}
}
ag_can_auto_build_station = {
	optimize_memory
	exists = owner
	OR = {
		AND = {
			fleet = { has_fleet_flag = ag_science_constructor_fleet }
			# has_fleet_flag = ag_science_constructor_fleet
			# any_controlled_ship = {
				is_ship_size = ag_science_constructor
				has_component = ag_science_constructor_station_module
			# }
		}
		AND = {
			owner = { has_country_flag = ag_lost_ancient_ship_auto_station }
			has_ship_flag = ag_lost_ancient_ship
			# any_controlled_ship = { has_ship_flag = ag_lost_ancient_ship }
		}
	}
}
ag_can_auto_build_hyper_relay = {
	optimize_memory
	exists = owner
	owner = { has_technology = "tech_hyper_relays" }
	# OR = {
		# AND = {
			# fleet = { has_fleet_flag = ag_science_constructor_fleet }
			# # has_fleet_flag = ag_science_constructor_fleet
			# # any_controlled_ship = {
				# is_ship_size = ag_science_constructor
				# has_component = ag_science_constructor_station_module
			# # }
		# }
		# AND = {
			owner = { has_country_flag = ag_lost_ancient_ship_auto_hyper_relay }
			has_ship_flag = ag_lost_ancient_ship
			# any_controlled_ship = { has_ship_flag = ag_lost_ancient_ship }
		# }
	# }
}

ag_is_construction_section = {
	optimize_memory
	custom_tooltip = {
		fail_text = "ag_requires_ancient_construction_section"
		OR = {
			has_planet_flag = ag_ancient_construction_section
			solar_system.star = {
				is_variable_set = ag_construction_section_counter
				check_variable = { which = ag_construction_section_counter value > 0 }
			}
		}
	}
}

ag_has_ship_design = {
	optimize_memory
	has_country_flag = $ag_design$_design
}

ag_can_spawn_psionic_storm_in_system = {
	optimize_memory
	ag_is_ancient_system = no
	ag_is_mod_special_system = no
	NOR = {
		has_star_flag = ag_zeta_crisis_no_psionic_storm_flag
		any_ship_in_system = { OR = {
			is_ship_size = ag_psionic_inhibition_station
			is_ship_size = dimensional_portal_ed
			is_ship_size = ag_zeta_crisis_portal
			is_ship_size = ag_zeta_crisis_psionic_storm
			is_ship_size = ag_zeta_crisis_psionic_singularity
			is_ship_size = ag_gamma_station_hostile
			is_ship_size = ag_gamma_station_0
			is_ship_size = ag_gamma_station_1
			is_ship_size = ag_gamma_station_small_hostile
			is_ship_size = ag_gamma_station_small_moving_hostile
			is_ship_size = ag_zeta_military_station_large
			is_ship_size = ag_zeta_military_station_large_psi
		} }
	}
}

ag_auto_starbase_slot_empty = {
	optimize_memory
	OR = {
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_1 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_1_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_2 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_2_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_3 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_3_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_4 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_4_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_5 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_5_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_6 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_module_slot_6_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_1 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_building_slot_1_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_2 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_building_slot_2_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_3 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_building_slot_3_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_4 has_country_flag = ag_auto_starbase_settings_starbase check_variable = { which = ag_auto_starbase_building_slot_4_starbase value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_1 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_module_slot_1_orbital_ring value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_2 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_module_slot_2_orbital_ring value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_3 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_module_slot_3_orbital_ring value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_4 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_module_slot_4_orbital_ring value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_1 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_building_slot_1_orbital_ring value != 0 } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_building_2 has_country_flag = ag_auto_starbase_settings_orbital_ring check_variable = { which = ag_auto_starbase_building_slot_2_orbital_ring value != 0 } }
	}
}

ag_auto_starbase_requires_no_starbase_module = {
	optimize_memory
	NOR = {
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_1 check_variable = { which = ag_auto_starbase_module_slot_1_starbase value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_2 check_variable = { which = ag_auto_starbase_module_slot_2_starbase value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_3 check_variable = { which = ag_auto_starbase_module_slot_3_starbase value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_4 check_variable = { which = ag_auto_starbase_module_slot_4_starbase value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_5 check_variable = { which = ag_auto_starbase_module_slot_5_starbase value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_6 check_variable = { which = ag_auto_starbase_module_slot_6_starbase value = @ag_auto_starbase_$ag_component$_id } }
	}
}
ag_auto_starbase_requires_no_starbase_building = {
	optimize_memory
	NOR = {
		check_variable = { which = ag_auto_starbase_building_slot_1_starbase value = @ag_auto_starbase_$ag_component$_id }
		check_variable = { which = ag_auto_starbase_building_slot_2_starbase value = @ag_auto_starbase_$ag_component$_id }
		check_variable = { which = ag_auto_starbase_building_slot_3_starbase value = @ag_auto_starbase_$ag_component$_id }
		check_variable = { which = ag_auto_starbase_building_slot_4_starbase value = @ag_auto_starbase_$ag_component$_id }
	}
}
ag_auto_starbase_requires_no_orbital_ring_module = {
	optimize_memory
	NOR = {
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_1 check_variable = { which = ag_auto_starbase_module_slot_1_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_2 check_variable = { which = ag_auto_starbase_module_slot_2_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_3 check_variable = { which = ag_auto_starbase_module_slot_3_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
		AND = { has_country_flag = ag_auto_starbase_slot_selector_module_4 check_variable = { which = ag_auto_starbase_module_slot_4_orbital_ring value = @ag_auto_starbase_$ag_component$_id } }
	}
}
ag_auto_starbase_requires_no_orbital_ring_building = {
	optimize_memory
	NOR = {
		check_variable = { which = ag_auto_starbase_building_slot_1_orbital_ring value = @ag_auto_starbase_$ag_component$_id }
		check_variable = { which = ag_auto_starbase_building_slot_2_orbital_ring value = @ag_auto_starbase_$ag_component$_id }
	}
}
ag_auto_starbase_requires_no_building = {
	optimize_memory
	NAND = {
		has_country_flag = ag_auto_starbase_settings_starbase
		OR = {
			check_variable = { which = ag_auto_starbase_building_slot_1_starbase value = @ag_auto_starbase_$ag_component$_id }
			check_variable = { which = ag_auto_starbase_building_slot_2_starbase value = @ag_auto_starbase_$ag_component$_id }
			check_variable = { which = ag_auto_starbase_building_slot_3_starbase value = @ag_auto_starbase_$ag_component$_id }
			check_variable = { which = ag_auto_starbase_building_slot_4_starbase value = @ag_auto_starbase_$ag_component$_id }
		}
	}
	NAND = {
		has_country_flag = ag_auto_starbase_settings_orbital_ring
		OR = {
			check_variable = { which = ag_auto_starbase_building_slot_1_orbital_ring value = @ag_auto_starbase_$ag_component$_id }
			check_variable = { which = ag_auto_starbase_building_slot_2_orbital_ring value = @ag_auto_starbase_$ag_component$_id }
		}
	}
}

ag_zeta_psionics_is_chosen_one = {
	optimize_memory
	OR = {
		has_trait = leader_trait_chosen
		has_trait = ag_dummy_leader_trait_chosen
	}
}

ag_is_incorrect_leader = {
	optimize_memory
	OR = {
		AND = {
			owner = { is_ai = yes NOT = { is_country_type = ag_zeta_crisis_country } }
			OR = {
				has_trait = ag_leader_trait_shroud_invader_01
				has_trait = ag_leader_trait_shroud_invader_02
				has_trait = ag_leader_trait_shroud_invader_03
				has_trait = ag_leader_trait_shroud_invader_04
				has_trait = ag_leader_trait_shroud_invader_05
				has_trait = ag_leader_trait_shroud_invader_06
				has_trait = ag_leader_trait_shroud_invader_07
				has_trait = ag_leader_trait_shroud_invader_08
				has_trait = ag_leader_trait_shroud_invader_09
				has_trait = ag_leader_trait_shroud_invader_10
				has_trait = ag_leader_trait_shroud_invader_11
				has_trait = ag_leader_trait_shroud_invader_12
				has_trait = ag_leader_trait_shroud_invader_13
			}
		}
		AND = {
			owner = { is_ai = yes NOT = { is_country_type = ag_ancient_gamma_guardian } }
			has_trait = leader_trait_ag_ancient_ai_gamma_crisis
		}
		AND = {
			owner = { is_ai = yes NOT = { is_country_type = ag_ancient_zeta_guardian } }
			has_trait = leader_trait_ag_ancient_ai_zeta_guardian
		}
		AND = {
			owner = { is_ai = yes NOT = { is_country_type = ag_ancient_psi_guardian } }
			has_trait = leader_trait_ag_ancient_ai_psi_guardian
		}
		AND = {
			has_leader_flag = ag_lost_ancient_ship
			OR = {
				NOT = { exists = event_target:ag_lost_ancient_ship_owner }
				owner = { NOR = { is_same_value = event_target:ag_lost_ancient_ship_owner is_country_type = global_event } }
			}
		}
		# AND = {
			# has_leader_flag = ag_epsilon_titan_leader
			# OR = {
				# NOT = { exists = event_target:ag_epsilon_titan_leader_owner }
				# owner = { NOR = { is_same_value = event_target:ag_epsilon_titan_leader_owner is_country_type = global_event } }
			# }
		# }
	}
}

ag_alpha_system_locator_trigger = {
	optimize_memory
	ag_is_ancient_system = no
	ag_is_mod_special_system = no
	is_capital_system = no
	NOR = {
		has_star_flag = guardian
		has_star_flag = lcluster
		has_star_flag = ag_no_jump_in_system
		has_star_flag = ag_no_hyperlane_system
		AND = { exists = space_owner space_owner = { OR = { is_country_type = fallen_empire is_country_type = awakened_fallen_empire } } }
	}
}
ag_alpha_system_locator_trigger_fallback = {
	optimize_memory
	ag_is_ancient_system = no
	ag_is_mod_special_system = no
	is_capital_system = no
	NOR = {
		has_star_flag = guardian
		has_star_flag = lcluster
	}
}

ag_lost_ancient_ship_special_dialog = {
	optimize_memory
	OR = {
		has_country_flag = ag_lost_ancient_ship_subsystem_repaired_recent
		has_country_flag = ag_lost_ancient_ship_zeta_guardian_destroyed_recent
		ag_zeta_crisis_event_active = yes
	}
}
ag_lost_ancient_ship_recent_repaired_dialog = {
	optimize_memory
	has_country_flag = ag_lost_ancient_ship_subsystem_repaired_recent
	NOT = { has_country_flag = ag_lost_ancient_ship_zeta_guardian_destroyed_recent }
}
ag_lost_ancient_ship_zeta_guardian_destroyed_dialog = {
	optimize_memory
	has_country_flag = ag_lost_ancient_ship_zeta_guardian_destroyed_recent
}
ag_lost_ancient_ship_zeta_crisis_dialog = {
	optimize_memory
	NOR = {
		has_country_flag = ag_lost_ancient_ship_subsystem_repaired_recent
		has_country_flag = ag_lost_ancient_ship_zeta_guardian_destroyed_recent
	}
	ag_zeta_crisis_event_active = yes
}

ag_cannot_be_killed_by_subspace_weapon = {
	optimize_memory
	OR = {
		has_trait = leader_trait_chosen
		has_trait = leader_trait_great_khan
		has_trait = leader_trait_ag_ancient_ai_StarlightII
		has_trait = leader_trait_ag_ancient_ai_StarInAurora
		has_trait = leader_trait_ag_ancient_ai_gamma_crisis
		has_trait = leader_trait_ag_ancient_ai_zeta_guardian
		has_trait = leader_trait_ag_ancient_ai_psi_guardian
		# Interaction event.
		AND = {
			has_global_flag = has_StellarRegulator_Array_mod
			has_trait = leader_trait_SRA_ag_StarLightII_adm1
		}
	}
}
ag_cannot_be_killed_by_psionic_weapon = {
	optimize_memory
	OR = {
		has_trait = leader_trait_chosen
		has_trait = leader_trait_great_khan
		has_trait = leader_trait_ag_ancient_ai_StarlightII
		has_trait = leader_trait_ag_ancient_ai_StarInAurora
		has_trait = leader_trait_ag_ancient_ai_zeta_guardian
		has_trait = leader_trait_ag_ancient_ai_psi_guardian
		# Interaction event.
		AND = {
			has_global_flag = has_StellarRegulator_Array_mod
			has_trait = leader_trait_SRA_ag_StarLightII_adm1
		}
	}
}
