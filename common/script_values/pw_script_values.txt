
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

#Country Scope
pw_art_exhibition_cost_1 = {
	base = 0

	#Increase the multiplier by 1 for every planet with a wonder.
	complex_trigger_modifier = {
		trigger = count_owned_planet
		trigger_scope = owner
		parameters = {
			limit = {
				OR = {
					has_active_building = pw_building_pavilion_of_wonders
					has_active_building = pw_building_fair_of_worlds
					has_active_building = pw_building_museum_of_the_grotesque
				}
			}
		}
		mode = add
		mult = 1
	}
}

#Country Scope
pw_art_exhibition_cost_2 = {
	base = 0

	#Increase the multiplier by 1 for each planet with 10 or more pops.
	complex_trigger_modifier = {
		trigger = count_owned_planet
		trigger_scope = owner
		parameters = {
			limit = { num_pops > 10 }
		}
		mode = add
		mult = 1
	}
}

#Planet Scope
pw_mining_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_mining
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_hab_mining
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_mining_uncapped
		}
		mode = add
		mult = $MULT|1$
	}
}

#Planet Scope
pw_generator_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_generator
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_hab_energy
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_generator_uncapped
		}
		mode = add
		mult = $MULT|1$
	}
}

#Planet Scope
pw_farming_district_count = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_farming
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_rw_farming
		}
		mode = add
		mult = $MULT|1$
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_farming_uncapped
		}
		mode = add
		mult = $MULT|1$
	}
}

#Planet Scope
pw_pop_factor = {
	base = 0.1
	mult = trigger:num_pops
}

#Planet Scope
pw_trade_factor = {
	base = 0.05
	mult = solar_system.trigger:has_system_trade_value
}

#Planet Scope
pw_housing_factor = {
	base = 20
	divide = trigger:free_housing
}

#Planet Scope
pw_crime_factor = {
	base = 0.1
	mult = trigger:planet_crime
}

#Planet Scope
pw_job_factor = {
	base = 0.5

	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				has_job = $JOB$
			}
		}
		mode = mult
	}
}

# Factor is used to scale number of districts, useful to make bigger districts provide more value
pw_districts_value = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $TYPE$
		}
		[[FACTOR]
			mult = $FACTOR$
		]
		mode = add
	}
}

pw_buildings_value = {
	complex_trigger_modifier = {
		trigger = num_buildings
		parameters = {
			type = $TYPE$
		}
		[[FACTOR]
			mult = $FACTOR$
		]
		mode = add
	}
}

pw_farming_value = {
	add = value:pw_farming_districts_value
	add = value:pw_farming_buildings_value
}

pw_farming_districts_value = {
	# Normal
	add = value:pw_districts_value|TYPE|district_farming|
	add = value:pw_districts_value|TYPE|district_farming_uncapped|
	# Habitat
	modifier = {
		has_designation = col_habitat_farming
		NOT = { has_global_flag = stellarisevolved }
		add = value:pw_districts_value|TYPE|district|FACTOR|0.5|
	}
	# RW
	add = value:pw_districts_value|TYPE|district_rw_farming|FACTOR|4|
	# Evovled
	add = value:pw_districts_value|TYPE|district_tec_aqua_farming|
	add = value:pw_districts_value|TYPE|district_tec_hab_food|
	add = value:pw_districts_value|TYPE|district_tec_eco_farming|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_eco_aqua_farming|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_proto_farming|
	# PD
	add = value:pw_districts_value|TYPE|district_pdhab_food|
	# Giga
	add = value:pw_districts_value|TYPE|district_giga_alderson_farming|FACTOR|10|
	add = value:pw_districts_value|TYPE|district_flusion_farming|FACTOR|3|
	add = value:pw_districts_value|TYPE|district_giga_frameworld_farming|
	add = value:pw_districts_value|TYPE|district_penrose_farming|FACTOR|4|
}

pw_farming_buildings_value = {
	add = value:pw_buildings_value|TYPE|building_hydroponics_farm|

	# Evolved
	add = value:pw_buildings_value|TYPE|building_hydroponics_farm_2|
	add = value:pw_buildings_value|TYPE|building_hydroponics_farm_3|
	add = value:pw_buildings_value|TYPE|building_tec_biomass_farm_1|
	add = value:pw_buildings_value|TYPE|building_tec_biomass_farm_2|
	add = value:pw_buildings_value|TYPE|building_tec_biomass_farm_3|
}

pw_mining_value = {
	add = value:pw_mining_districts_value
	add = value:pw_mining_buildings_value
}

pw_mining_districts_value = {
	# Normal
	add = value:pw_districts_value|TYPE|district_mining|
	add = value:pw_districts_value|TYPE|district_mining_uncapped|
	add = value:pw_districts_value|TYPE|district_hab_mining|
	# RW
	add = value:pw_districts_value|TYPE|district_tec_rw_replicator|FACTOR|4|
	# Evovled
	add = value:pw_districts_value|TYPE|district_tec_aqua_mining|
	add = value:pw_districts_value|TYPE|district_tec_eco_mining|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_eco_aqua_mining|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_proto_mining|
	# PD
	add = value:pw_districts_value|TYPE|district_pdhab_mining|
	# Giga
	add = value:pw_districts_value|TYPE|district_giga_alderson_mining|FACTOR|10|
	add = value:pw_districts_value|TYPE|district_flusion_mining|FACTOR|3|
	add = value:pw_districts_value|TYPE|district_giga_frameworld_mining|
	add = value:pw_districts_value|TYPE|district_giga_frameworld_decompressor|FACTOR|3|
	add = value:pw_districts_value|TYPE|district_giga_hab_scavenger|

	
}

pw_mining_buildings_value = {
	# Buildings
	# Evolved
	add = value:pw_buildings_value|TYPE|building_tec_stripmine_1|
	add = value:pw_buildings_value|TYPE|building_tec_stripmine_2|
	add = value:pw_buildings_value|TYPE|building_tec_stripmine_3|
	add = value:pw_buildings_value|TYPE|building_tec_biohive_mining_1|
	add = value:pw_buildings_value|TYPE|building_tec_biohive_mining_2|
	add = value:pw_buildings_value|TYPE|building_tec_biohive_mining_3|
}

pw_generators_value = {
	add = value:pw_generators_districts_value
	add = value:pw_generators_buildings_value
}

pw_generators_districts_value = {
	# Normal
	add = value:pw_districts_value|TYPE|district_generator|
	add = value:pw_districts_value|TYPE|district_generator_uncapped|
	add = value:pw_districts_value|TYPE|district_hab_energy|
	# RW
	add = value:pw_districts_value|TYPE|district_rw_generator|FACTOR|4|
	# Evovled
	add = value:pw_districts_value|TYPE|district_tec_aqua_generator|
	add = value:pw_districts_value|TYPE|district_tec_hab_generator|
	add = value:pw_districts_value|TYPE|district_tec_eco_generator|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_eco_aqua_generator|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_tec_proto_generator|
	# PD
	add = value:pw_districts_value|TYPE|district_pdhab_energy|
	add = value:pw_districts_value|TYPE|district_archive_energy|
	# Giga
	add = value:pw_districts_value|TYPE|district_giga_alderson_generator|FACTOR|10|
	add = value:pw_districts_value|TYPE|district_flusion_heavy_industry|FACTOR|1.5|
	add = value:pw_districts_value|TYPE|district_giga_frameworld_generator|
	add = value:pw_districts_value|TYPE|district_giga_frameworld_penrose|FACTOR|3|
	add = value:pw_districts_value|TYPE|district_giga_gas_giant_habitat_wind|FACTOR|2|
	add = value:pw_districts_value|TYPE|district_interstellar_generator|FACTOR|4|
	add = value:pw_districts_value|TYPE|district_giga_planet_wind|
	add = value:pw_districts_value|TYPE|district_giga_planet_solar|
	add = value:pw_districts_value|TYPE|district_giga_planet_geothermal|

	
}

pw_generators_buildings_value = {
	# Evolved
	add = value:pw_buildings_value|TYPE|building_tec_energrid_1|
	add = value:pw_buildings_value|TYPE|building_tec_energrid_2|
	add = value:pw_buildings_value|TYPE|building_tec_energrid_3|
	add = value:pw_buildings_value|TYPE|building_tec_machine_anglers_extractor|
	add = value:pw_buildings_value|TYPE|building_tec_machine_anglers_extractor_on|
	add = value:pw_buildings_value|TYPE|building_tec_machine_anglers_nexus_A|
}