
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

SS_ap_hive_flesh_ascension_bonus = {
	base = 0
	complex_trigger_modifier = {
   		trigger = resource_income_compare
   		parameters = {
   		   	resource = $RESOURCE$
   		}
   		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_pops
		trigger_scope = this
		mode = divide
	}
	#complex_trigger_modifier = {
	#	trigger = count_owned_planet
	#	trigger_scope = this
	#	mode = divide
	#}
	max = 10
	min = 0
}

SS_test1 = {
	base = 0
	complex_trigger_modifier = {
   		trigger = resource_income_compare
   		parameters = {
   		   	resource = $RESOURCE$
   		}
   		mode = add
	}
}

SS_test2 = {
	base = 0
	complex_trigger_modifier = {
   		trigger = resource_income_compare
   		parameters = {
   		   	resource = $RESOURCE$
   		}
   		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_pops
		trigger_scope = this
		mode = divide
	}
}

SS_ap_materialist_future_seekers_bonus = {
	base = 0
	complex_trigger_modifier = {
   		trigger = resource_stockpile_compare
   		parameters = {
   		   	resource = minor_artifacts
   		}
   		mode = add
	}
	max = 300
	min = 0
	mult = 0.25
}

SSAB_num_commerical_pacts = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_country
   		parameters = {
			limit = {
				AND = {
					has_commercial_pact = prev
					is_in_federation_with = prev
					has_federation = yes
					federation = {
						has_federation_perk = SSAB_diplo_pact_bonus
					}
				}
			}
   		}
   		mode = add
	}
}

SSAB_num_research_pacts = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_country
   		parameters = {
			limit = {
				AND = {
					has_research_agreement = prev
					is_in_federation_with = prev
					has_federation = yes
					federation = {
						has_federation_perk = SSAB_diplo_pact_bonus
					}
				}
			}
   		}
   		mode = add
	}
}

SSAB_AB_wave_size_mult = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_system
   		parameters = {
			limit = {}
   		}
   		mode = add
	}
	subtract = 599
	min = 0
	divide = 200
	floor = yes
}

SSAB_AB_wave_reinforcement = {
	base = 0
	add = value:SSAB_AB_wave_size_mult
	multiply = 40
	divide = 3
	floor = yes
}

SSAB_num_colonised_planets = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_system
		trigger_scope = owner
   		parameters = {
			limit = {}
   		}
   		mode = add
	}
}

SSAB_num_protagonist_system = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_system
		trigger_scope = root
   		parameters = {
			limit = {
				exists = owner
				owner = { has_country_flag = SSAB_protagonist }
			}
   		}
   		mode = add
	}
}

SSAB_num_antagonist_system = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_system
		trigger_scope = root
   		parameters = {
			limit = {
				exists = owner
				owner = { has_country_flag = SSAB_antagonist }
			}
   		}
   		mode = add
	}
}

SSAB_take_protagonist_system = {
	base = 1
	
	#A protagonist retakes a protagonist system
	modifier = {
 		divide = event_target:global_event_country.num_protagonist_systems_owned
		PREVPREV.FROM = { has_system_flag = SSAB_protagonist_system }
		PREVPREV = { 
			has_country_flag = SSAB_protagonist 
			is_variable_set = event_target:global_event_country.num_protagonist_systems_owned
		}

 	}
	
	#An antagonist takes an protagonist system
	modifier = {
 		divide = event_target:global_event_country.num_protagonist_systems_owned
		PREVPREV.FROM = { has_system_flag = SSAB_protagonist_system }
		PREVPREV = { 
			has_country_flag = SSAB_antagonist 
			is_variable_set = event_target:global_event_country.num_protagonist_systems_owned
		}
 	}
	modifier = {
 		mult = -1
		PREVPREV.FROM = { has_system_flag = SSAB_protagonist_system }
		PREVPREV = { 
			has_country_flag = SSAB_antagonist 
			is_variable_set = event_target:global_event_country.num_protagonist_systems_owned
		}
 	}
	mult = 25
}

SSAB_take_antagonist_system = {
	base = 1
	
	#A protagonist takes an antagonist system
	modifier = {
 		divide = event_target:global_event_country.num_antagonist_systems_owned
		PREVPREV.FROM = { has_system_flag = SSAB_antagonist_system }
		PREVPREV = {
			has_country_flag = SSAB_protagonist
			is_variable_set = event_target:global_event_country.num_antagonist_systems_owned
		}
 	}
	
	#An antagonist retakes an antagonist system
	modifier = {
 		divide = event_target:global_event_country.num_antagonist_systems_owned
		PREVPREV.FROM = { has_system_flag = SSAB_antagonist_system }
		PREVPREV = {
			has_country_flag = SSAB_antagonist
			is_variable_set = event_target:global_event_country.num_antagonist_systems_owned
		}
 	}
	modifier = {
 		mult = -1
		PREVPREV.FROM = { has_system_flag = SSAB_antagonist_system }
		PREVPREV = {
			has_country_flag = SSAB_antagonist
			is_variable_set = event_target:global_event_country.num_antagonist_systems_owned
		}
 	}
	
	mult = 50
}

SSAB_anchors_remaining = {
	base = 0
	complex_trigger_modifier = {
   		trigger = count_owned_fleet
		trigger_scope = event_target:SSAB_ab_country
   		parameters = {
			limit = {
				has_fleet_flag = SSAB_abyssal_host_anchor
			}
   		}
   		mode = add
	}
}