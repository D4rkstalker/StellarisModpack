##########################################################################################
# 兼容性规则复制于"! Universial Game Rules Patch" (2409276081)
# compatibility rules copied from "! Universial Game Rules Patch" (2409276081)
##########################################################################################

###_[轨道轰炸]	FW/AUP/Teif/ev/wsg/swg/阿夸/古代帝国/失落帝国历史/多彩/TAC/SRA	/ACOT/SOFE/bwm/HFE/Giga/Ehof/RSnf/MEM	#########
#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	###_|禁止条件|	+RSnf/阿夸
	NOR = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
		# RSnf
		FROM = { is_planet_class = pc_hollow }
		# 阿夸
		FROM.OWNER = { is_country_type = kuat_fire_base_hositle }
		FROM = { has_planet_flag = enable_kuat_shield }
	}
	##_|特殊星球|	FW/Teif/MOP_M
	#	此类星球只在特定情况下允许轨道轰炸
	NAND = {
		FROM = {
			OR = {
				is_planet_class = pc_shielded_gaia		# Teif
				has_building = building_training_bomboardment	# MOP_M
			}
		}
		ROOT.OWNER = {
			NOR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = gray_goo
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_with_preset = { PRESET = preset_satrapy }
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
	}
	
	###_|基本条件|
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		#	AUP/HFE
		ROOT.CONTROLLER = { is_hostile = FROM.CONTROLLER }
		#_|V可随意轰炸|	+bwm
		FROM = {
			OR = {
				is_planet_class = pc_infested
				has_planet_flag = bwm_ancestor_world			# bwm
			}
		}
		#	TAC		---禁用|高能耗|
	#	ROOT = { has_component = AI_MATRICES }
		##_|可被轰炸|	+古代帝国/SOFE/bwm/Giga/Ehof/阿夸/多彩
		FROM.CONTROLLER = {
			OR = {
				#	VANILLA
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}

				is_country_type = mem_ancestor_guardian			# bwm
				is_country_type = original_empire				# SOFE
				is_country_type = compound_empire				# Giga/Ehof
				is_country_type = void_lifeforms_1				# Giga/ACOT
				is_country_type = void_lifeforms_2				# Giga/ACOT
				is_country_type = katzenartig_imperium			# Giga/ACOT
				ag_can_be_orbital_bombardment_country = yes		# 古代帝国	安装=|has_ancient_empire_mod|
				kuat_can_be_orbital_bombarment_country = yes	# 阿夸		安装=|install_kuat_mod|
				is_country_type = ten_crisis_empire				# 多彩
			}
		}
		##_|可以轰炸|	+Teif/ev/wsg/swg/阿夸/古代帝国/失落帝国历史/多彩		/SOFE/bwm/Giga/Ehof
		ROOT.CONTROLLER = {
			OR = {
				#	VANILLA
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire					# <aup去除了此项>
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = { is_hostile = prev }
				}

				is_country_type = mercenary_fleet				# Teif
				is_country_type = ev_leviathans_crisis			# ev
				is_country_type = afk_crisis_country			# swg
				is_country_type = LsE_fallen_empire				# 失落帝国历史
				is_country_type = ten_crisis_empire				# 多彩
				# wsg
				is_country_type = wg_crisis_country
				is_khan_country_type = yes
				#	古代帝国
				ag_can_do_orbital_bombardment_country = yes
				#	阿夸
				kuat_can_do_bombarment_country = yes
				
				is_country_type = mem_ancestor_guardian			# bwm
				is_country_type = original_empire				# SOFE
				#	Giga/Ehof
				is_country_type = compound_empire
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				is_country_type = acot_crazed_stellarite
				is_country_type = katzenartig_imperium
				#	MEM
				is_country_type = mem_surveyor_country_red		# 瓦祖兰
				is_country_type = mem_vazurans
				#	SRA
				SRA_can_do_orbital_bombardment_country = yes
			}
		}
		#_星球所有者轰炸被其他阵营占据的星球	-SOFE<去掉了此项>
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = ROOT.CONTROLLER }
			}
			from.owner = {
				is_same_value = ROOT.CONTROLLER
			}
		}
	}
}

#AI是否限制星系出入
###_[AUP/ZOFE/SOFE/EE/TAC]	####################################
# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
ai_should_restrict_system = {
	OR = {
		#_强力帝国避开
		AND = {
			## +ZOFE/EE
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire		# ZOFE
					is_country_type = eternal_empire	# EE
				}
			}
			exists = owner
			## +AUP
			owner = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = dormant_marauders		# AUP
				}
			}
		}
		#_掠夺者避开
		AND = {
			## +AUP
			root = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders		# AUP
				}
			}
			exists = owner
			## +ZOFE/SOFE/EE
			owner = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire		# ZOFE
					is_country_type = eternal_empire	# EE
					is_progenitor_empires = yes			# SOFE
				}
			}
		}
		#_避开boss星系
		AND = {
			## +AUP/ZOFE/SOFE
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders	# AUP
					is_country_type = lost_empire		# ZOFE
					is_country_type = eternal_empire	# EE
				}
			}
			has_star_flag = guardian
			## +SOFE	---存疑
			any_fleet_in_system = {
				exists = owner
				owner = {
					OR = {
						is_guardian_country = yes
						is_country_type = sofe_sentinel_active		# SOFE=守门人
					}
				}
			}
		}
		## +vanilla	避开神秘堡垒
		AND = {
			root = {
				OR = {
					is_crisis_faction = yes
					is_country_type = awakened_fallen_empire
				}
			}
			has_star_flag = guardian
			any_fleet_in_system = {
				exists = owner
				owner = {
					is_country_type = guardian_fortress
				}
			}
		}
		
		# AUP		避开野怪家园
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders
					is_country_type = original_empire	# SOFE
					is_country_type = eternal_empire	# EE
				}
			}
			OR = {
				AND = {#_水晶
					has_star_flag = crystal_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
				}
				AND = {#_阿米巴
					has_star_flag = amoeba_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = amoeba_garrison }
					}
				}
				AND = {#_矿蜂
					has_star_flag = drone_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = drone }
					}
				}
			}
		}
		# 古代帝国
		AND = {
			OR = {
				has_star_flag = ag_zeta_crisis_psionic_storm_system
				has_star_flag = ag_zeta_crisis_psionic_singularity_system
			}
			root = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_crisis_faction = yes
					is_country_type = awakened_marauders
					is_country_type = ag_ancient_psi_guardian
				}
			}
		}
		# SOFE		普通帝国避开始源
		AND = {
			root = { is_country_type = default }
			exists = owner
			owner = { is_country_type = original_empire }
		}
		# TAC
		AND = {
			OR = {
				has_star_flag = AI_system1
				has_star_flag = AI_system2
				has_star_flag = AI_system3
				has_star_flag = AI_system4
			}
			root = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_country_type = awakened_marauders
					is_country_type = ag_ancient_psi_guardian
				}
			}
		}
	}
}

#是否能获取星系内的视野
###_[FW/LCTR/RS星云/Sexp		/wsg/古代帝国/ws/SMCO/S_tnatc/莉莉]	####################################
#_sys_trgr	ws_[is_ws_system]
# this = system
# root = country
system_blocks_sensors = {
	# FW/LCTR
	root = {
		NOR = {
			has_modifier = LCTR_mod_cntr_sensor			#_|LCTR|
		}
	}
	## 
	OR = {
		## +RS星云/Sexp
		AND = {
			OR = {
				is_inside_nebula = yes
				has_modifier = space_storm
				# RS星云
				is_star_class = sc_collapsar
				is_star_class = sc_p_purple
				is_star_class = sc_p_green
				is_star_class = sc_p_red
			}
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_nebula } }	# Sexp
		}
		## +Sexp
		AND = {
			OR = {
				has_star_flag = lcluster
				has_star_flag = sealed_system
			}
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_sealed } }	# Sexp
		}

		# wsg
		has_star_flag = wg_sealed_system
		has_star_flag = wg_psionic_systems
		# 古代帝国
		has_star_flag = ag_no_sensor_system
		# ws
		is_ws_system = yes
		# SMCO
		has_star_flag = bok_globules
		has_star_flag = star_flag_GAPS_sealed_system
		# S_tnatc
		AND = {
			exists = owner
			owner = { has_relic = r_invisibility_rune }
			NOT = { root = { is_same_empire = prev.owner } }
		}
		# Sexp
		AND = {
			has_global_flag = ariphaos_sensors_installed
			AND = {
				OR = {
					is_star_class = sc_binary_2
					is_star_class = sc_neutron_star
				}
				ROOT = { NOT = { has_technology = tech_sensors_4 } }
			}
			AND = {
				OR = {
					is_star_class = sc_binary_1
					is_star_class = sc_pulsar
				}
				ROOT = { NOT = { has_technology = tech_ariphaos_sensors_pulsar } }
			}
			AND = {
				has_natural_wormhole = yes
				ROOT = { NOT = { has_technology = tech_ariphaos_sensors_wormhole } }
			}
			AND = {
				is_star_class = sc_black_hole
				ROOT = { NOT = { has_technology = tech_ariphaos_sensors_black_hole } }
			}
			AND = {
				exists = starbase
				starbase = { has_starbase_building = ariphaos_sensors_jammer_starbase }
				ROOT = { NOT = { has_technology = tech_ariphaos_sensors_jammed } }
			}
		}
		# 莉莉
		has_star_flag = Uberzain
	#	AND = {#<运行负担>
	#		exists = sector
	#		sector = {
	#			exists = leader
	#			leader = {
	#				OR = {
	#					has_trait = leader_trait_AL_Rareskill_governor_Uberzain
	#					has_trait = leader_trait_AL_Rareskill_governor_UberzainS
	#					has_trait = leader_trait_AL_Rareskill_governor_UberzainEX
	#				}
	#			}
	#		}
	#	}
	}
}

#舰队是否能迁跃
# Root：准备迁跃的舰队
###_[可跃迁]	FW/古代帝国/seooc/莉莉	####################################
#_|通用禁行|	多彩
# THIS = Fleet
can_jump_drive = {
#	always = yes	# Moved cooldown to code
	exists = solar_system
	
	# FW
	if = {
		limit = {
			OR = {
				has_fleet_flag = FW_flg_flt_JUMP	# FW特殊跃迁flt
				controller = {
					OR = {
						has_country_flag = FW_flg_cntr_CHT_orrery_ON		# 璀璨星图
						has_country_flag = FW_flg_cntr_CHT_beacon_ON		# 永恒星炬
					}
				}
			}
		}
		always = yes
	}
	#_|通用禁行|	多彩
	else_if = { limit = { solar_system = { has_star_flag = ELF_Singularity_System } }
		always = no
	}
	# 古代帝国
	else_if = { limit = { solar_system = { has_star_flag = ag_no_jump_out_system } }
		custom_tooltip = { fail_text = ag_jump_drive_unable_system_tooltip
			always = no
		}
	}
	# seooc
	else_if = { limit = { solar_system = { has_star_flag = nep_Scrus_cluster } }
		custom_tooltip = { fail_text = "CAN_NOT_JUMP_WHEN_IN_SCRUS"
			always = no
		}
	}
	else_if = {
		limit = {
			solar_system = {
				OR = {
					has_star_flag = nep_whitegoo_1
					has_star_flag = nep_whitegoo_2
					has_star_flag = nep_whitegoo_3
				}
			}
			owner = { NOT = { has_technology = tech_nep_whitegoo_3_2 } }
		}
		custom_tooltip = { fail_text = "CAN_NOT_JUMP_IN_WHITEGOO"
			always = no
		}
	}
	# 莉莉		<运行负担>
#	else_if = {
#		limit = {
#			exists = solar_system
#			NOT = {
#				solar_system = {
#					exists = starbase
#					starbase = {
#						has_starbase_building = AL_AntiFTL
#						owner = { is_hostile = prevprevprev.owner }
#					}
#				}
#			}
#		}
#		custom_tooltip = {
#			text = "AL_cannot_start_jump"
#			always = no
#		}
#	}
	# 其他
	else = {
		always = yes
	}
}

#是否能迁跃进入某星系
###_[星系跃迁限制]	FW/AAR	/古代帝国/wsg/阿夸/SOFE/Giga/Ehof/seooc/多彩/TAC/莉莉	####################################
# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system
		OR = {
			###_绝对通行	FW
			root = {
				OR = {
					has_country_flag = FW_flg_cntr_CHT_orrery_ON			# 璀璨星图
					has_country_flag = FW_flg_cntr_CHT_beacon_ON			# 永恒星炬
				}
			}
			###_特殊通行	AAR/TAC
			root = {
				#	|禁止条件|
				#	|通行可用|
				OR = {
					# AAR
					has_country_flag = AAR_flg_cntr_JUMP_webway_TGT			# 网道行者
					# TAC
					has_country_flag = TAC_traveler
				}
			}
			
			###_基础条件
			AND = {
				##_Sealed system
				OR = {
					# vanilla
					NOT = { has_star_flag = sealed_system }
					AND = {
						root = { has_country_flag = entered_sealed_system }
						has_star_flag = sealed_system
					}
				}

				##_特殊禁入星系		+wsg/古代帝国/阿夸/SOFE/Giga/Ehof/seooc/多彩/TAC/莉莉
				NOR = {
					# vanilla
					has_star_flag = lcluster

					# wsg
					AND = { has_global_flag = has_wsg_mod	# 舰r激活
						OR = {
							has_star_flag = wg_sealed_system
							has_star_flag = wg_psionic_systems
							AND = { exists = space_owner
								space_owner = { is_country_type = monolith_crisis_country }
							}
						}
					}
					# 古代帝国
					has_star_flag = ag_no_jump_in_system
					# 阿夸
					has_star_flag = kuat_initial_system
					has_star_flag = Kuat_empire_system
					has_star_flag = ag_kae_e_area_system
					AND = {
						has_global_flag = starkillerbase_not_passed
						has_star_flag = starkiller_system	
					}
					# SOFE
					has_star_flag = outercluster
					# Giga
					has_star_flag = ehof_compound_system
					has_star_flag = giga_core_03
					cohesive_system = yes
					urmazin_system = yes
					everchanging_system = yes
					katzen_jump_blocked_system = yes
					# seooc
					has_star_flag = nep_Krahen_cluster
					has_star_flag = nep_Scrus_cluster
					AND = {
						has_global_flag = nep_not_pass_Aemethms 
						OR = {
							has_star_flag = nep_dragon_system
							has_star_flag = nep_heptagram_cluster
						}
					}
					# 多彩
					has_star_flag = ELF_Singularity_System
					AND = {
						has_global_flag = love_between_us
						OR = {
							has_star_flag = ten_crisis_system
							any_neighbor_system = { has_star_flag = ten_crisis_system }
						}
					}
					# TAC
				#	has_star_flag = AI_system1
				#	has_star_flag = AI_system2
				#	has_star_flag = AI_system3
				#	has_star_flag = AI_system4
				#	this = {
				#		OR = {
				#			has_megastructure = AIgate_opened
				#			has_megastructure = AIgate_opened_02
				#		}
				#	}
					# 莉莉
					has_star_flag = al_huge_home_bed
				}
			}
		}
	}
}
