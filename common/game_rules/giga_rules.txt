# Overwritten to add isolated systems
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster/Compound_Cluster
		NOR = {
			has_star_flag = lcluster
			has_star_flag = ehof_compound_system
			cohesive_system = yes
			urmazin_system = yes
			everchanging_system = yes
		}
	}
}

# Overwritten to add sphere
can_orbital_bombard = {
	exists = from.owner
	NOT = {
		any_owned_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			root.OWNER = {
				NOT = { has_communications = from.OWNER }
			}
			from.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			root.OWNER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			from.OWNER = { is_country_type = primitive }
		}
		root.OWNER = { is_at_war_with = from.CONTROLLER }
		from = { is_planet_class = pc_infested }
		from.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = compound_empire
			}
		}
		root.OWNER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = vol
				is_country_type = compound_empire
				AND = {
					is_country_type = awakened_marauders
					from.CONTROLLER = {
						NAND = {
							is_subject_type = satrapy
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
		AND = {
    	    from.controller = {
    	        is_country_type = faction
    	        NOT = { is_same_value = root.owner }
    	    }
    	    from.owner = {
    	        is_same_value = root.owner
    	    }
		}
	}
}