#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	NOT = {
		any_owned_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			ROOT.OWNER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			} 
		}
		AND = {
			ROOT.OWNER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.OWNER = { is_at_war_with = FROM.CONTROLLER }
		FROM = { is_planet_class = pc_infested }
		FROM.CONTROLLER = { 
			OR = {
				is_country_type = swarm 
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = original_empire
			}
		}
		ROOT.OWNER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = vol
				is_country_type = original_empire
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = { 
						NAND = {
							is_subject_type = satrapy 
							NOT = { has_country_flag = rebelling_satrapy }							
						}
					}
				}
			}
		}
	}
}

# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
ai_should_restrict_system = {
	OR = {
		AND = {
			root = { 
				OR = {
					is_country_type = fallen_empire 
					is_country_type = lost_empire
				}
			}
			exists = owner
			owner = { is_country_type = awakened_marauders }
		}
		AND = {
			root = { is_country_type = default }
			exists = owner
			owner = { is_country_type = original_empire }
		}	
		AND = {
			root = { is_country_type = awakened_marauders }
			exists = owner
			owner = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire
				}
			}
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire
					is_country_type = awakened_marauders
				}
			}
			any_ship_in_system = {
				exists = owner
				owner = {
					OR = {
						is_country_type = guardian_dragon
						is_country_type = guardian_stellarite
						is_country_type = guardian_wraith
						is_country_type = guardian_horror
						is_country_type = guardian_fortress
						is_country_type = guardian_dreadnought
						is_country_type = sofe_sentinel_active
					}
				}
			}
		}
	}
}

# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = {
	OR = {
		has_megastructure = spy_orb_4
		has_megastructure = spy_orb_restored
		has_megastructure = sofe_omega_spy_orb_center
	}
}

# this = starbase
can_starbase_repair_ships = {
	OR = {
		has_starbase_size >= starbase_starport
		has_starbase_size >= ls_starbase_starport		
		has_starbase_size = origin_super_citadel_playable
		has_starbase_size = origin_super_citadel
	}
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster
		NOT = { has_star_flag = lcluster }
		# Outer-Cluster
		NOT = { has_star_flag = outercluster }
	}
}
