
#能否轨道轰炸
# Root：进行轰炸的舰队
# From：被轰炸的行星
can_orbital_bombard = {
	exists = FROM.OWNER
	#_+teif/rsnf
	NOR = {
		any_owned_ship = {
			is_ship_size = colossus
			is_ship_size = fe_colossus	#_teif
		}
		#_rsnf	冰川世界和地下世界无法轰炸
		FROM = {
			OR = {
				has_modifier = "underground_world"
				has_modifier = "ice_world"
			}
		}
	}
	#_z_fw/teif/mop_m		<防御优先planet,此类星球只在特定情况下允许轨道轰炸>
	NAND = {
		FROM = {
			OR = {
				is_planet_class = pc_shielded_gaia	#_teif
				has_building = building_training_bomboardment	#_[mop_m]
			}
		}
		ROOT.OWNER = {
			NOR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = gray_goo
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_type = satrapy
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
	}
	OR = {
		AND = {
			ROOT.OWNER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.OWNER = {
				NOR = {
					has_policy_flag = interference_passive
					has_policy_flag = interference_active
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.OWNER = { is_at_war_with = FROM.CONTROLLER }
		#_aup/hfe
		ROOT.OWNER = { is_hostile = FROM.CONTROLLER }
		#_+bwm
		FROM = {
			OR = {
				is_planet_class = pc_infested
				has_planet_flag = bwm_ancestor_world			#_bwm
			}
		}
		#_+ag/sofe/bwm/giga/ehof/kuat
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = ag_ancient_primitive_crisis	#_ag
				is_country_type = ag_zeta_crisis_country		#_ag
				is_country_type = ag_ancient_psi_guardian		#_ag
				is_country_type = original_empire				#_sofe
				is_country_type = mem_ancestor_guardian			#_bwm
				is_country_type = compound_empire				#_giga/ehof
				is_country_type = void_lifeforms_1				#_giga/acot
				is_country_type = void_lifeforms_2				#_giga/acot
				is_country_type = katzenartig_imperium			#_giga/acot
				is_country_type = awakened_return_kuat_empire	#_kuat
			}
		}
		#_+teif/ev/wsg/swg/kuat/ag/sofe/bwm/giga/ehof
		ROOT.OWNER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire					#_	<aup去除了此项>
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = vol
				is_country_type = mercenary_fleet				#_teif
				is_country_type = ev_leviathans_crisis			#_ev
				is_country_type = wg_crisis_country				#_wsg
				is_country_type = afk_crisis_country			#_swg
				is_khan_country_type = yes						#_wsg
				is_country_type = kuat_fleet					#_kuat
				is_country_type = kuat_fallen_empire			#_kuat
				is_country_type = kuat_awakened_fallen_empire	#_kuat
				is_country_type = awakened_return_kuat_empire	#_kuat
				is_country_type = ag_kuat_invasion_country		#_ag
				is_country_type = ag_ancient_primitive_crisis	#_ag
				is_country_type = ag_ancient_gamma_guardian		#_ag
				is_country_type = ag_zeta_crisis_country		#_ag
				AND = {#_ag
					is_country_type = ag_ancient_psi_guardian
					from.controller = { is_hostile = root.owner }
				}
				is_country_type = acot_crazed_stellarite		#_giga/acot
				is_country_type = original_empire				#_sofe
				is_country_type = mem_ancestor_guardian			#_bwm
				is_country_type = compound_empire				#_giga/ehof
				is_country_type = void_lifeforms_1				#_giga/acot
				is_country_type = void_lifeforms_2				#_giga/acot
				is_country_type = katzenartig_imperium			#_giga/acot
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_type = satrapy
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
			}
		}
		#_星球所有者轰炸被其他阵营占据的星球	-sofe<去掉了此项>
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = root.owner }
			}
			from.owner = {
				is_same_value = root.owner
			}
		}
	}
}

#AI是否限制星系出入
# this：目标星系
# root：AI国家
ai_should_restrict_system = {
	OR = {
		#_强力帝国避开
		AND = {
			#_+zofe/ee
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire		#_ZOFE
					is_country_type = eternal_empire	#_EE
				}
			}
			exists = owner
			#_+aup
			owner = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = dormant_marauders		#_aup
				}
			}
		}
		#_掠夺者避开
		AND = {
			#_+aup
			root = { 
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders		#_aup
				}
			}
			exists = owner
			#_+zofe/sofe/ee
			owner = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = lost_empire		#_ZOFE
					is_country_type = eternal_empire	#_EE
					is_progenitor_empires = yes			#_SOFE
				}
			}
		}
		#_避开boss星系
		AND = {
			#_+aup/zofe/sofe
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders	#_aup
					is_country_type = lost_empire		#_ZOFE
					is_country_type = eternal_empire	#_EE
				}
			}
			#_+aup/sofe
			any_fleet_in_system = {
				exists = owner
				owner = {
					OR = {
						is_country_type = guardian_dragon
						is_country_type = guardian_stellarite
						is_country_type = guardian_wraith
						is_country_type = guardian_horror
						is_country_type = guardian_fortress
						is_country_type = guardian_dreadnought
						is_country_type = guardian_elderly_tiyanki	#_aup
						is_country_type = guardian_hatchling		#_aup
						is_country_type = guardian_scavenger_bot	#_aup
						is_country_type = sofe_sentinel_active		#_SOFE	守门人
					}
				}
			}
		}
		#_aup	避开水晶家园
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
					is_country_type = marauder_raiders
					is_country_type = original_empire	#_sofe
					is_country_type = eternal_empire	#_EE
				}
			}
			OR = {
				AND = {#_水晶
					has_star_flag = crystal_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
				}
				AND = {#_阿米巴
					has_star_flag = amoeba_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = amoeba_garrison }
					}
				}
				AND = {#_矿蜂
					has_star_flag = drone_home_system
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = drone }
					}
				}
			}
		}
		#_[ag]
		AND = {
			root = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_country_type = awakened_marauders
					is_country_type = ag_ancient_psi_guardian
				}
			}
			OR = {
				has_star_flag = ag_zeta_crisis_psionic_storm_system
				has_star_flag = ag_zeta_crisis_psionic_singularity_system
			}
		}
		#_sofe
		AND = {
			root = { is_country_type = default }
			exists = owner
			owner = { is_country_type = original_empire }
		}	
	}
}

#是否能获取星系内的视野
# this：星系
# root：国家
system_blocks_sensors = {
	#_z_fw/z_lctr
	root = {
		NOR = {
			has_modifier = z_lctr_mod_cntr_sensor			#_[z_lctr]
		}
	}
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_star_flag = lcluster
		has_star_flag = sealed_system
		has_star_flag = wg_sealed_system			#_wsg
		has_star_flag = fallen_sol_system			#_teif
		root = { is_country_type = teif_primitive }	#_teif
		has_star_flag = ag_no_sensor_system			#_ag
		has_star_flag = bok_globules					#_smco
		has_star_flag = star_flag_GAPS_sealed_system	#_smco
		is_ws_system = yes			#_ws
		AND = {#_s_tnatc
			exists = owner
			owner = { has_relic = r_invisibility_rune }
			NOT = { root = { is_same_empire = prev.owner } }
		}
	}
}

#舰队是否能迁跃
# Root：准备迁跃的舰队
can_jump_drive = {
	#_[seooc]
	custom_tooltip = {
		fail_text = "CAN_NOT_JUMP_WHEN_IN_SCRUS"
		NAND = {
			exists = solar_system
			solar_system = { has_star_flag = nep_Scrus_cluster } 
		}
	}
	custom_tooltip = {
		fail_text = "CAN_NOT_JUMP_IN_WHITEGOO"
		NAND = {
			exists = solar_system
			solar_system = { 
				OR = {
					has_star_flag = nep_whitegoo_1
					has_star_flag = nep_whitegoo_2
					has_star_flag = nep_whitegoo_3
				}
			}
			owner = { NOT = { has_technology = tech_nep_whitegoo_3_2 } }
		}
	}
	#_[ag]
	custom_tooltip = {
		fail_text = ag_jump_drive_unable_system_tooltip
		NOT = {
			solar_system = {
				has_star_flag = ag_no_jump_out_system
			}
		}
	}
	custom_tooltip = {
		fail_text = ag_jump_drive_unable_tooltip
		NAND = {
			has_fleet_flag = ag_gamma_station_player
			owner = { NOT = { has_country_flag = ag_ship_subsystem_enabled_301_10 } }
		}
	}
}

#是否能迁跃进入某星系
# This：目标星系
# Root：准备进入目标星系的国家
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system
		OR = {
			#_绝对通行
			root = { has_country_flag = z_fw_r_celestial_orrey_activited }		#_[z_fw]璀璨星图
			root = { has_country_flag = z_fw_r_cheat_quantum_beacon_activited }	#_[z_fw]永恒星炬
			#_基础条件
			AND = {
				#_ugrp禁用条件
				NOT = {
					root = { is_country_type = teif_primitive }	#_teif
				}
				
				#_Sealed system
				OR = {
					#_+teif
					NOR = {
						has_star_flag = sealed_system
						has_star_flag = fallen_sol_system	#_teif
					}
					#_teif
					AND = {
						root = { has_country_flag = entered_fallen_sol_system }
						has_star_flag = fallen_sol_system
					}
					#_teif
					AND = {
						root = { has_country_flag = entered_sealed_system }
						has_star_flag = sealed_system
					}
				}
				#_特殊星系	+wsg/ag/kuat/sofe/giga/ehof
				NOR = {
					has_star_flag = lcluster
					has_star_flag = wg_sealed_system			#_wsg
					has_star_flag = ag_no_jump_in_system		#_ag
					has_star_flag = Kuat_system					#_kuat
					has_star_flag = Kuat_system_1				#_kuat
					has_star_flag = Kuat_system_2				#_kuat
					has_star_flag = Kuat_system_3				#_kuat
					has_star_flag = outercluster				#_SOFE	外星门
					has_star_flag = ehof_compound_system		#_giga/ehof
					has_star_flag = katzen_jump_blocked_system	#_giga
					cohesive_system = yes						#_giga
					urmazin_system = yes						#_giga
					everchanging_system = yes					#_giga
					ehof_cohesive_system = yes					#_ehof
					ehof_trader_system = yes					#_ehof
					ehof_creator_system = yes					#_ehof
					has_star_flag = nep_Krahen_cluster			#_seooc
					has_star_flag = nep_Scrus_cluster			#_seooc
					AND = {#_seooc
						has_global_flag = nep_not_pass_Aemethms 
						OR = {
							has_star_flag = nep_dragon_system
							has_star_flag = nep_heptagram_cluster
						}
					}
				}
			}
		}
	}
}