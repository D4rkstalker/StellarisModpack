eq_shipyard_0 = {
	entity = "construction_platform_entity"
	construction_entity = "construction_platform_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	prerequisites = { giga_tech_equatorial_shipyard }

	build_time = 1800
	resources = {
		category = megastructures
		cost = {
			alloys = 2500
			influence = 200
		}
	}

	potential = {
		has_technology = giga_tech_equatorial_shipyard
		NOT = { has_global_flag = shipyard_disabled }
		OR = {
			check_variable = { which = giga_shipyard_cap value = 0 }						# No Cap
			check_variable = { which = giga_current_shipyard value < giga_shipyard_cap }
		}
	}

	possible = {
		custom_tooltip = { fail_text = "requires_inside_border"		is_inside_border = from }
		custom_tooltip = {
			fail_text = "requires_not_capped"
			from = {
				OR = {
					check_variable = { which = giga_shipyard_cap value = 0 }						# No Cap
					check_variable = { which = giga_current_shipyard value < giga_shipyard_cap }
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = { fail_text = "requires_no_anomaly"				has_anomaly = no }
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"	planet_has_no_megastructure = yes }
			custom_tooltip = { fail_text = "requires_smaller_than_25"			planet_size <= 25 }
			custom_tooltip = {
				fail_text = "requires_survey_not_habitable"
				is_surveyed = {
					who = prev.from status = yes
				}
				is_planet_habitable = no
				NOT = { any_moon = { is_colony = yes } }
			}
			custom_tooltip = { fail_text = "must_build_around_molten"			is_planet_class = pc_molten }
			custom_tooltip = { fail_text = "requires_not_minor_planetary_body"	is_asteroid = no is_moon = no }
			custom_tooltip = { fail_text = "requires_not_star"					is_star = no }
		}
	}

	ai_weight = {
		weight = 100	# Default = 100

		# Can we afford the upkeep
		modifier = { factor = 1.00	chk_afford_alloys_10 = yes }
		modifier = { factor = 0.90	chk_afford_alloys_09 = yes }
		modifier = { factor = 0.80	chk_afford_alloys_08 = yes }
		modifier = { factor = 0.70	chk_afford_alloys_07 = yes }
		modifier = { factor = 0.60	chk_afford_alloys_06 = yes }
		modifier = { factor = 0.50	chk_afford_alloys_05 = yes }
		modifier = { factor = 0.40	chk_afford_alloys_04 = yes }
		modifier = { factor = 0.30	chk_afford_alloys_03 = yes }
		modifier = { factor = 0.20	chk_afford_alloys_25 = yes }
		modifier = { factor = 0.10	chk_afford_alloys_02 = yes }
		modifier = { factor = 0.00	chk_afford_alloys_15 = yes }

		modifier = { factor = 1.00	chk_afford_energy_10 = yes }
		modifier = { factor = 0.90	chk_afford_energy_09 = yes }
		modifier = { factor = 0.80	chk_afford_energy_08 = yes }
		modifier = { factor = 0.70	chk_afford_energy_07 = yes }
		modifier = { factor = 0.60	chk_afford_energy_06 = yes }
		modifier = { factor = 0.50	chk_afford_energy_05 = yes }
		modifier = { factor = 0.40	chk_afford_energy_04 = yes }
		modifier = { factor = 0.30	chk_afford_energy_03 = yes }
		modifier = { factor = 0.20	chk_afford_energy_25 = yes }
		modifier = { factor = 0.10	chk_afford_energy_02 = yes }
		modifier = { factor = 0.00	chk_afford_energy_15 = yes }

		# Do we want the production

		# Is this system a good location?
		modifier = { factor = 0.1	any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } }
		modifier = { factor = 0.5	any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }

		# Do we lean towards this from federation/ethic/civic?
		modifier = { factor = 2		from = { has_federation = yes federation = { has_federation_type = military_federation } } }
		modifier = { factor = 3		from = { has_ethic = ethic_fanatic_militarist } }
		modifier = { factor = 1.5	from = { has_ethic = ethic_militarist } }
		modifier = { factor = 1.5	from = { has_civic = civic_machine_terminator } }
		modifier = { factor = 1.5	from = { has_civic = civic_fanatic_purifiers } }
		modifier = { factor = 1.5	from = { has_civic = civic_hive_devouring_swarm } }
		modifier = { factor = 2		from = { is_at_war = yes } }

		# How many of this megastructure can the AI build?
		modifier = { factor = 0.00	from = { has_country_flag = has_recently_built_eq_shipyard } }
		modifier = { factor = 0.00	from = { count_owned_megastructure = { limit = { is_megastructure_type = eq_shipyard_2 } count > 2 } } }
		modifier = { factor = 0.33	from = { count_owned_megastructure = { limit = { is_megastructure_type = eq_shipyard_2 } count = 2 } } }
		modifier = { factor = 0.66	from = { count_owned_megastructure = { limit = { is_megastructure_type = eq_shipyard_2 } count = 1 } } }
		modifier = {
			factor = 0
			from = {
				OR = {
					has_megastructure = eq_shipyard_0
					has_megastructure = eq_shipyard_1
				}
			}
		}
	}

	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = {
			set_timed_country_flag = { flag = has_recently_built_eq_shipyard years = 20 }
			country_event = { id = giga_dialog.3601 }	# Notification
			change_variable = { which = giga_current_shipyard value = 1 }
		}
		fromfrom.planet = {
			if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
			set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
			set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
		}
	}
}

eq_shipyard_1 = {
	entity = "fixed_planetary_ring_inner_scaffold_two_entity"
	construction_entity = "fixed_planetary_ring_inner_scaffold_two_entity"
	portrait = "GFX_megastructure_molten_world"
	upgrade_from = { eq_shipyard_0 }

	build_time = 1800
	resources = {
		category = megastructures
		cost = { alloys = 5000 }
		upkeep = { energy = 10 }
	}

	potential = { NOT = { has_global_flag = shipyard_disabled } }
	possible = { from = { has_technology = giga_tech_equatorial_shipyard } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		fromfrom.planet = { every_moon = { remove_planet = yes } }
	}
}

eq_shipyard_2 = {
	entity = "big_planetary_ring_game_01_entity"
	construction_entity = "planetary_ring_game_construction_entity"
	portrait = "GFX_megastructure_molten_world"
	upgrade_from = { eq_shipyard_1 }

	build_time = 1800
	resources = {
		category = megastructures
		cost = { alloys = 5000 }
		upkeep = { energy = 50 }
	}

	potential = { NOT = { has_global_flag = shipyard_disabled } }
	possible = { from = { has_technology = giga_tech_equatorial_shipyard } }

	country_modifier = {	starbase_shipyard_build_speed_mult = 0.05 }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = {
			country_event = { id = giga_dialog.3602 }				# Notification
			set_country_flag = has_built_or_repaired_megastructure	# Triggers Galactic Wonders
			if = {
				limit = {
					NOR = {
						has_global_flag = giga_achievements_disabled
						has_country_flag = giga_achievement_70
					}
				}
				set_country_flag = giga_achievement_70
				set_timed_country_flag = { flag = giga_achievement_70_notification days = 30 }
				giga_achievement_sound = yes
			}
		}
		spawn_planet = {
			class = "pc_equatorial_shipyard"
			location = fromfrom.planet
			orbit_location = yes
			orbit_angle_offset = 0
			orbit_distance_offset = 0
			size = 12
			has_ring = no

			init_effect = {
				set_name = "Processing Ring"
				set_planet_entity = {
					entity = "planetary_ring_game_01_entity"
					graphical_culture = root.from
				}
				set_surveyed = { surveyed = yes surveyor = from }
				clear_blockers = yes
				set_planet_flag = forbid_guillis_planet_modifiers
				set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
				set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
				set_planet_flag = colony_event			# Vanilla uses to prevent unwanted events on planets
				set_planet_flag = giga_equatorial_shipyard
				add_modifier = { modifier = ringyard_alloys days = -1 }
			}
		}
	}
}