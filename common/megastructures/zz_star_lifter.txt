star_lifter_0 = {
	entity = "giga_consite_7_7_entity"
	construction_entity = "giga_consite_7_7_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	prerequisites = { giga_tech_star_lifter }

	build_time = 1800
	resources = {
		category = megastructures
		cost = {
			alloys = 3500
			influence = 300
		}
		upkeep = { energy = 5 }
	}

	potential = {
		has_technology = giga_tech_star_lifter
		NOT = { has_global_flag = lifters_disabled }
		OR = {
			check_variable = { which = giga_lifters_cap value = 0 }						# No Cap
			check_variable = { which = giga_current_lifters value < giga_lifters_cap }
		}
	}

	possible = {
		custom_tooltip = { fail_text = "requires_inside_border"			is_inside_border = from }
		custom_tooltip = { fail_text = "requires_surveyed_system"		giga_system_is_surveyed = yes }
		custom_tooltip = {
			fail_text = "requires_not_capped"
			from = {
				OR = {
					check_variable = { which = giga_lifters_cap value = 0 }						# No Cap
					check_variable = { which = giga_current_lifters value < giga_lifters_cap }
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"		planet_has_no_megastructure = yes }
			custom_tooltip = { fail_text = "must_build_around_star"					is_star = yes }
			custom_tooltip = { fail_text = "requires_no_anomaly"					has_anomaly = no }
			custom_tooltip = { 
				fail_text = "requires_standard_planet_class_o_star"			
				OR = { 
					giga_is_standard_star = yes
					AND = {
						is_planet_class = pc_giga_o_star 
						from = { has_technology = giga_tech_lifter_o_star }
					}
				} 
			}
		}
	}

	ai_weight = {
		weight = 100	# Default = 100

		# Can we afford the upkeep
		modifier = { factor = 1.00	chk_afford_energy_10 = yes }
		modifier = { factor = 0.90	chk_afford_energy_09 = yes }
		modifier = { factor = 0.80	chk_afford_energy_08 = yes }
		modifier = { factor = 0.70	chk_afford_energy_07 = yes }
		modifier = { factor = 0.60	chk_afford_energy_06 = yes }
		modifier = { factor = 0.50	chk_afford_energy_05 = yes }
		modifier = { factor = 0.40	chk_afford_energy_04 = yes }
		modifier = { factor = 0.30	chk_afford_energy_03 = yes }
		modifier = { factor = 0.20	chk_afford_energy_25 = yes }
		modifier = { factor = 0.10	chk_afford_energy_02 = yes }
		modifier = { factor = 0.00	chk_afford_energy_15 = yes }

		# Do we want the production
		modifier = { factor = 3.75	chk_needs_minerals_10 = yes }
		modifier = { factor = 3.50	chk_needs_minerals_09 = yes }
		modifier = { factor = 3.25	chk_needs_minerals_08 = yes }
		modifier = { factor = 3.00	chk_needs_minerals_07 = yes }
		modifier = { factor = 2.75	chk_needs_minerals_06 = yes }
		modifier = { factor = 2.50	chk_needs_minerals_05 = yes }
		modifier = { factor = 2.25	chk_needs_minerals_04 = yes }
		modifier = { factor = 2.00	chk_needs_minerals_03 = yes }
		modifier = { factor = 1.75	chk_needs_minerals_25 = yes }
		modifier = { factor = 1.50	chk_needs_minerals_02 = yes }
		modifier = { factor = 1.25	chk_needs_minerals_15 = yes }

		# Is this system a good location?
		modifier = { factor = 0.1	any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } }
		modifier = { factor = 0.5	any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }

		# Do we lean towards this from federation/ethic/civic?

		# How many of this megastructure can the AI build?
		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_star_lifter } }
		modifier = { factor = 0.00 from = { count_owned_megastructure = { limit = { is_megastructure_type = star_lifter_5 } count > 2 } } }
		modifier = { factor = 0.33 from = { count_owned_megastructure = { limit = { is_megastructure_type = star_lifter_5 } count = 2 } } }
		modifier = { factor = 0.66 from = { count_owned_megastructure = { limit = { is_megastructure_type = star_lifter_5 } count = 1 } } }
		modifier = {
			factor = 0
			from = {
				OR = {
					has_megastructure = star_lifter_0
					has_megastructure = star_lifter_0_b_star
					has_megastructure = star_lifter_0_m_giant_star
					has_megastructure = star_lifter_0_a_star
					has_megastructure = star_lifter_0_f_star
					has_megastructure = star_lifter_0_g_star
					has_megastructure = star_lifter_0_k_star
					has_megastructure = star_lifter_0_m_star
					has_megastructure = star_lifter_1
					has_megastructure = star_lifter_1_b_star
					has_megastructure = star_lifter_1_m_giant_star
					has_megastructure = star_lifter_1_a_star
					has_megastructure = star_lifter_1_f_star
					has_megastructure = star_lifter_1_g_star
					has_megastructure = star_lifter_1_k_star
					has_megastructure = star_lifter_1_m_star
					has_megastructure = star_lifter_2
					has_megastructure = star_lifter_2_b_star
					has_megastructure = star_lifter_2_m_giant_star
					has_megastructure = star_lifter_2_a_star
					has_megastructure = star_lifter_2_f_star
					has_megastructure = star_lifter_2_g_star
					has_megastructure = star_lifter_2_k_star
					has_megastructure = star_lifter_2_m_star
					has_megastructure = star_lifter_3
					has_megastructure = star_lifter_3_b_star
					has_megastructure = star_lifter_3_m_giant_star
					has_megastructure = star_lifter_3_a_star
					has_megastructure = star_lifter_3_f_star
					has_megastructure = star_lifter_3_g_star
					has_megastructure = star_lifter_3_k_star
					has_megastructure = star_lifter_3_m_star
					has_megastructure = star_lifter_4
					has_megastructure = star_lifter_4_b_star
					has_megastructure = star_lifter_4_m_giant_star
					has_megastructure = star_lifter_4_a_star
					has_megastructure = star_lifter_4_f_star
					has_megastructure = star_lifter_4_g_star
					has_megastructure = star_lifter_4_k_star
					has_megastructure = star_lifter_4_m_star
				}
			}
		}
	}

	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = {
			save_event_target_as = giga_planet
			if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
			set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
			set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
		}
		if = {	limit = { fromfrom.planet = { is_planet_class = pc_giga_o_star } }	spawn_megastructure = { type = "star_lifter_0_o_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
		if = {
			limit = { has_global_flag = giga_lifter_scaling }
			if = {		limit = { fromfrom.planet = { is_planet_class = pc_b_star } }		spawn_megastructure = { type = "star_lifter_0_b_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_m_giant_star } }	spawn_megastructure = { type = "star_lifter_0_m_giant_star"	owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_a_star } }		spawn_megastructure = { type = "star_lifter_0_a_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_f_star } }		spawn_megastructure = { type = "star_lifter_0_f_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_g_star } }		spawn_megastructure = { type = "star_lifter_0_g_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_k_star } }		spawn_megastructure = { type = "star_lifter_0_k_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
			else_if = {	limit = { fromfrom.planet = { is_planet_class = pc_m_star } }		spawn_megastructure = { type = "star_lifter_0_m_star"		owner = from coords_from = fromfrom.planet } remove_megastructure = fromfrom }
		}
		from = {
			set_timed_country_flag = { flag = has_recently_built_star_lifter years = 20 }
			country_event = { id = giga_dialog.1601 }	# Notification
			change_variable = { which = giga_current_lifters value = 1 }
		}
	}
}

star_lifter_1 = {
	entity = "starlifter_01_entity"
	construction_entity = "starlifter_01_entity"
	portrait = "GFX_megastructure_construction_background"
	upgrade_from = { star_lifter_0 }

	build_time = @starlifter_p1_buildtime_g_star
	resources = {
		category = megastructures
		cost = { alloys = @starlifter_p1_cost_alloys_g_star }
	}

	potential = { NOT = { has_global_flag = lifters_disabled } }
	possible = { from = { has_technology = giga_tech_star_lifter } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_dialog.1602 } }	# Notification
	}
}

star_lifter_2 = {
	entity = "starlifter_02_entity"
	construction_entity = "starlifter_02_construction_entity"
	portrait = "GFX_megastructure_construction_background"
	upgrade_from = { star_lifter_1 }

	build_time = @starlifter_p2_buildtime_g_star
	resources = {
		category = megastructures
		cost = { alloys = @starlifter_p2_cost_alloys_g_star }
		produces = { minerals = @starlifter_p2_produces_minerals_g_star }
		upkeep = { energy = @starlifter_p2_upkeep_energy_g_star }
	}

	potential = { NOT = { has_global_flag = lifters_disabled } }
	possible = { from = { has_technology = giga_tech_star_lifter } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_dialog.1603 } }	# Notification
	}
}

star_lifter_3 = {
	entity = "starlifter_03_entity"
	construction_entity = "starlifter_03_construction_entity"
	portrait = "GFX_megastructure_construction_background"
	upgrade_from = { star_lifter_2 }

	build_time = @starlifter_p3_buildtime_g_star
	resources = {
		category = megastructures
		cost = { alloys = @starlifter_p3_cost_alloys_g_star }
		produces = { minerals = @starlifter_p3_produces_minerals_g_star }
		upkeep = { energy = @starlifter_p3_upkeep_energy_g_star }
	}

	potential = { NOT = { has_global_flag = lifters_disabled } }
	possible = { from = { has_technology = giga_tech_star_lifter } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_dialog.1604 } }	# Notification
	}
}

star_lifter_4 = {
	entity = "starlifter_04_entity"
	construction_entity = "starlifter_04_construction_entity"
	portrait = "GFX_megastructure_construction_background"
	upgrade_from = { star_lifter_3 }

	build_time = @starlifter_p4_buildtime_g_star
	resources = {
		category = megastructures
		cost = { alloys = @starlifter_p4_cost_alloys_g_star }
		produces = { minerals = @starlifter_p4_produces_minerals_g_star }
		upkeep = { energy = @starlifter_p4_upkeep_energy_g_star }
	}

	potential = { NOT = { has_global_flag = lifters_disabled } }
	possible = { from = { has_technology = giga_tech_star_lifter } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_dialog.1604 } }	# Notification
	}
}

star_lifter_5 = {
	entity = "starlifter_05_entity"
	construction_entity = "starlifter_05_construction_entity"
	portrait = "GFX_megastructure_star_lifters"
	upgrade_from = { star_lifter_4 }

	build_time = @starlifter_p5_buildtime_g_star
	resources = {
		category = megastructures
		cost = { alloys = @starlifter_p5_cost_alloys_g_star }
		produces = { minerals = @starlifter_p5_produces_minerals_g_star }
		upkeep = { energy = @starlifter_p5_upkeep_energy_g_star }
	}

	potential = { NOT = { has_global_flag = lifters_disabled } }
	possible = { from = { has_technology = giga_tech_star_lifter } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = {
			country_event = { id = giga_dialog.1605 }				# Notification
			set_country_flag = has_built_or_repaired_gigastructure	# Triggers Gigastructural Constructs
			if = {
				limit = {
					NOR = {
						has_global_flag = giga_achievements_disabled
						has_country_flag = giga_achievement_79
					}
				}
				set_country_flag = giga_achievement_79
				set_timed_country_flag = { flag = giga_achievement_79_notification days = 30 }
				giga_achievement_sound = yes
			}
		}
		every_system_planet = {
			limit = {
				OR = {
					is_planet_class = pc_molten
					is_planet_class = pc_toxic
					is_planet_class = pc_barren
				}
			}
			if = {		limit = { OR = { is_planet_class = pc_molten is_planet_class = pc_toxic } }	change_pc = pc_frozen }
			else_if = {	limit = { is_planet_class = pc_barren }										change_pc = pc_barren_cold }
		}
	}
}