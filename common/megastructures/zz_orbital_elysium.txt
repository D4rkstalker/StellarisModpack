orbital_elysium_0 = {
	entity = "giga_orbital_habitat_entity_01_entity"
	construction_entity = "giga_orbital_habitat_entity_01_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	prerequisites = { giga_tech_orbital_elysium }

	build_time = 3000
	resources = {
		category = megastructures
		cost = {
			alloys = 5000
			influence = 50
		}
		upkeep = { energy = 5 }
	}

	potential = {
		NOT = { has_global_flag = giga_habitats_disabled }
		has_ascension_perk = ap_voidborn
		has_technology = giga_tech_orbital_elysium
	}

	possible = {
		custom_tooltip = { fail_text = "requires_inside_border"		is_inside_border = from }
		custom_tooltip = { fail_text = "requires_more_pops"
			OR = {
				has_global_flag = giga_habitats_system_3
				has_global_flag = giga_habitats_system_10
				has_global_flag = giga_habitats_system_25
				has_global_flag = giga_habitats_unlimited
				AND = {
					OR = {
						has_global_flag = giga_habitats_pop_25
						has_global_flag = giga_habitats_pop_50
						has_global_flag = giga_habitats_pop_100
					}
					from = { check_variable = { which = habitat_count value < allowed_habitats } }
				}
			}
		}
		custom_tooltip = { fail_text = "requires_more_systems"
			OR = {
				has_global_flag = giga_habitats_pop_25
				has_global_flag = giga_habitats_pop_50
				has_global_flag = giga_habitats_pop_100
				has_global_flag = giga_habitats_unlimited
				AND = {
					OR = {
						has_global_flag = giga_habitats_system_3
						has_global_flag = giga_habitats_system_10
						has_global_flag = giga_habitats_system_25
					}
					from = { check_variable = { which = habitat_count value < allowed_habitats } }
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = { fail_text = "requires_surveyed_planet"			is_surveyed = { who = prev.from status = yes } }
			custom_tooltip = { fail_text = "requires_no_anomaly"				has_anomaly = no }
			custom_tooltip = { fail_text = "requires_not_star"					is_star = no }
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"	planet_has_no_megastructure = yes }
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"	NOT = { has_planet_flag = has_orbital_elysium } }
		}
	}

	ai_weight = {
		weight = 100	# Default = 100

		# Can we afford the upkeep

		# Do we want the production
		modifier = { factor = 3.75	chk_needs_society_10 = yes }
		modifier = { factor = 3.50	chk_needs_society_09 = yes }
		modifier = { factor = 3.25	chk_needs_society_08 = yes }
		modifier = { factor = 3.00	chk_needs_society_07 = yes }
		modifier = { factor = 2.75	chk_needs_society_06 = yes }
		modifier = { factor = 2.50	chk_needs_society_05 = yes }
		modifier = { factor = 2.25	chk_needs_society_04 = yes }
		modifier = { factor = 2.00	chk_needs_society_03 = yes }
		modifier = { factor = 1.75	chk_needs_society_25 = yes }
		modifier = { factor = 1.50	chk_needs_society_02 = yes }
		modifier = { factor = 1.25	chk_needs_society_15 = yes }

		modifier = { factor = 3.75	chk_needs_unity_10 = yes }
		modifier = { factor = 3.50	chk_needs_unity_09 = yes }
		modifier = { factor = 3.25	chk_needs_unity_08 = yes }
		modifier = { factor = 3.00	chk_needs_unity_07 = yes }
		modifier = { factor = 2.75	chk_needs_unity_06 = yes }
		modifier = { factor = 2.50	chk_needs_unity_05 = yes }
		modifier = { factor = 2.25	chk_needs_unity_04 = yes }
		modifier = { factor = 2.00	chk_needs_unity_03 = yes }
		modifier = { factor = 1.75	chk_needs_unity_25 = yes }
		modifier = { factor = 1.50	chk_needs_unity_02 = yes }
		modifier = { factor = 1.25	chk_needs_unity_15 = yes }

		# Is this system a good location?
		modifier = { factor = 0.5	any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } }

		# Do we lean towards this from federation/ethic/civic?

		# How many of this megastructure can the AI build?
		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_giga_orbital_elysiums } }
		modifier = { factor = 0.00	from = { check_variable = { which = giga_orbital_elysiums value > 3 } } }
		modifier = { factor = 0.25	from = { check_variable = { which = giga_orbital_elysiums value = 3 } } }
		modifier = { factor = 0.50	from = { check_variable = { which = giga_orbital_elysiums value = 2 } } }
		modifier = { factor = 0.75	from = { check_variable = { which = giga_orbital_elysiums value = 1 } } }
	}

	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = {
			save_event_target_as = giga_planet
			set_planet_flag = has_orbital_elysium
			if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
		}
		from = {
			set_timed_country_flag = { flag = has_recently_built_giga_orbital_elysiums years = 20 }
			country_event = { id = giga_dialog.1101 }	# Notification
			change_variable = { which = giga_orbital_elysiums value = 1 }
			change_variable = { which = giga_current_elysium value = 1 }
			change_variable = { which = habitat_count value = 1 }
			if = {
				limit = {
					NOR = {
						has_global_flag = giga_achievements_disabled
						has_country_flag = giga_achievement_63
					}
				}
				set_country_flag = giga_achievement_63
				set_timed_country_flag = { flag = giga_achievement_63_notification days = 30 }
				giga_achievement_sound = yes
			}
		}
		spawn_planet = {
			class = "pc_gigaorbital_ring"
			location = fromfrom.planet
			orbit_location = yes
			size = 10
			has_ring = no

			init_effect = {
				set_name = "Orbital Elysium"
				set_surveyed = { surveyed = yes surveyor = from }
				add_modifier = { modifier = "orbital_elysium" days = -1 }
				set_all_comms_surveyed = yes
				clear_blockers = yes
				set_planet_flag = forbid_guillis_planet_modifiers
				set_planet_flag = megastructure			# Vanilla uses to check if a megastrucure can be built here
				set_planet_flag = has_megastructure		# Vanilla uses to check if an orbital station can be built here
				set_planet_flag = colony_event			# Vanilla uses to prevent unwanted events on planets
				set_planet_flag = giga_elysium
			}
		}
		remove_megastructure = fromfrom
	}
}