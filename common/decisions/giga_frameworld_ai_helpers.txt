###############################################################################################################
###############################################################################################################
#          AI HELPERS
###############################################################################################################
###############################################################################################################

# AI only backup outpost placement

# giga_frameworld_ai_outpost = {
# 	owned_planets_only = no
	
# 	enactment_time = 360
	
# 	resources = {
# 		category = colonies
# 		cost = {
# 			alloys = 400
# 			influence = 50
# 		}
# 	}
	
# 	potential = {
# 		exists = space_owner
# 		exists = from
# 		exists = solar_system.starbase
# 		exists = solar_system.starbase.controller
# 		space_owner = { is_same_empire = from }
# 		from = { 
# 			is_same_empire = solar_system.starbase.controller
# 			is_ai = yes # this isn't for human players, who can properly prioritise their construction
# 			has_origin = origin_frameworld
# 		}
# 		can_have_frameworld_outpost = yes
# 	}

# 	allow = {
# 		from = {
# 			# if we either have a lot of ground to cover or have many candidates, or it's midgame and we're not fighting
# 			or = {
# 				controlled_systems > 20
# 				check_variable = {
# 					which = frameworld_ai_outpost_candidate_count
# 					value >= 3
# 				}
# 				and = {
# 					is_at_war = no
# 					mid_game_years_passed > 0
# 				}
# 			}

# 			resource_stockpile_compare = {
# 				resource = alloys
# 				value >= 2000
# 			}
# 			resource_stockpile_compare = {
# 				resource = influence
# 				value >= 500
# 			}
# 		}
# 	}
	
# 	effect = {
# 		giga_frameworld_create_outpost = { 
# 			WHO = space_owner 
# 		}
# 	}
	
# 	ai_weight = {
# 		# important!
# 		weight = 100000 
# 	}
# }

# # AI only backup asteroid harvest

# giga_frameworld_ai_asteroid = {
# 	owned_planets_only = no
	
# 	enactment_time = 360
	
# 	resources = {
# 		category = deposit_blockers_frameworld
# 		cost = {
# 			energy = 1000
# 			influence = 25
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_1
# 				}
# 			}
# 			energy = -150
# 			influence = -3.75
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_2
# 				}
# 			}
# 			energy = -150
# 			influence = -3.75
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_3
# 				}
# 			}
# 			energy = -150
# 			influence = -3.75
# 		}
# 	}
	
# 	potential = {
# 		mid_game_years_passed > 0
# 		exists = space_owner
# 		exists = from
# 		exists = solar_system.starbase
# 		exists = solar_system.starbase.controller
# 		space_owner = { is_same_value = from }
# 		from = { is_same_empire = solar_system.starbase.controller }

# 		from = {
# 			is_ai = yes # this isn't for human players, who can properly prioritise their construction
# 			has_origin = origin_frameworld
# 		}
		
# 		frameworld_can_harvest_asteroid = yes
		
# 		frameworld_asteroid_has_rare_resource = no
# 	}

# 	on_queued = { from = { set_country_flag = frameworld_harvesting@root } }
# 	on_unqueued = { from = { remove_country_flag = frameworld_harvesting@root } }
	
# 	effect = {
# 		# get the country who started the decision
# 		random_country = {
# 			limit = {
# 				has_origin = origin_frameworld
# 				has_country_flag = frameworld_harvesting@root
# 			}

# 			remove_country_flag = frameworld_harvesting@root

# 			# get their home frameworld
# 			random_owned_planet = {
# 				limit = {
# 					has_planet_flag = giga_frameworld@prev
# 				}

# 				giga_frameworld_expand_deposit = { 
# 					DEPOSIT = d_frameworld_asteroid
# 					VAR = giga_frameworld_asteroids
# 				}
# 				giga_frameworld_expand_deposit = { 
# 					DEPOSIT = d_frameworld_expansion 
# 					VAR = giga_frameworld_expansions
# 				}
# 				change_planet_size = 1
# 				giga_frameworld_update_entity_with_fallback = yes
# 				frameworld_conduct_audit_check_ai = yes

# 				# if we successfully expanded, remove the harvested object
# 				root = { giga_frameworld_remove_asteroid = yes }
# 			}
# 		}

# 		# if = {
# 		# 	# sanity check in case the thing changed hands
# 		# 	limit = { from = { has_origin = origin_frameworld } }

# 		# 	giga_frameworld_remove_asteroid = yes
			
# 		# 	from = {
# 		# 		capital_scope = {
# 		# 			add_deposit = d_frameworld_asteroid
# 		# 			add_deposit = d_frameworld_expansion
# 		# 			change_planet_size = 1
# 		# 			giga_frameworld_update_entity_with_fallback = { WHO = from }
# 		# 			frameworld_conduct_audit = yes
# 		# 		}
# 		# 	}
# 		# }
# 	}
	
# 	ai_weight = {
# 		weight = 10
		
# 		modifier = {
# 			factor = 100
			
# 			exists = from
# 			from.capital_scope = {
# 				free_district_slots < 1
# 			}
# 		}
# 	}
# }

# # AI only backup habitat harvest

# giga_frameworld_ai_habitat = {
# 	owned_planets_only = no
	
# 	enactment_time = 720
	
# 	resources = {
# 		category = deposit_blockers_frameworld
# 		cost = {
# 			energy = 2500
# 			influence = 50
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_1
# 				}
# 			}
# 			energy = -325
# 			influence = -7.5
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_2
# 				}
# 			}
# 			energy = -325
# 			influence = -7.5
# 		}
		
# 		cost = {
# 			trigger = {
# 				exists = from
# 				from = {
# 					has_technology = tech_frameworld_harvest_3
# 				}
# 			}
# 			energy = -325
# 			influence = -7.5
# 		}
# 	}
	
# 	potential = {
# 		exists = space_owner
# 		exists = from
# 		exists = solar_system.starbase
# 		exists = solar_system.starbase.controller
# 		space_owner = { is_same_value = from }
# 		from = { is_same_empire = solar_system.starbase.controller }

# 		from = {
# 			is_ai = yes # this isn't for human players, who can properly prioritise their construction
# 			has_origin = origin_frameworld
# 			has_technology = tech_habitat_1
# 		}
		
# 		frameworld_can_salvage_habitat = yes
# 	}

# 	on_queued = { from = { set_country_flag = frameworld_harvesting@root } }
# 	on_unqueued = { from = { remove_country_flag = frameworld_harvesting@root } }
	
# 	effect = {
# 		# get the country who started the decision
# 		random_country = {
# 			limit = {
# 				has_origin = origin_frameworld
# 				has_country_flag = frameworld_harvesting@root
# 			}

# 			remove_country_flag = frameworld_harvesting@root

# 			# get their home frameworld
# 			random_owned_planet = {
# 				limit = {
# 					has_planet_flag = giga_frameworld@prev
# 				}

# 				giga_frameworld_expand_deposit = { 
# 					DEPOSIT = d_frameworld_habitat
# 					VAR = giga_frameworld_habitats
# 					COUNT = fromfrom.planet.trigger:planet_size
# 				}
# 				giga_frameworld_expand_deposit = { 
# 					DEPOSIT = d_frameworld_expansion 
# 					VAR = giga_frameworld_expansions
# 					COUNT = fromfrom.planet.trigger:planet_size
# 				}
# 				change_planet_size = fromfrom.planet.trigger:planet_size
# 				giga_frameworld_update_entity_with_fallback = yes
# 				frameworld_conduct_audit_check_ai = yes

# 				# if we successfully expanded, remove the harvested object
# 				root = { giga_frameworld_remove_asteroid = yes }
# 			}
# 		}

# 		# if = {
# 		# 	# sanity check in case the thing changed hands
# 		# 	limit = { from = { has_origin = origin_frameworld } }
		
# 		# 	giga_frameworld_remove_asteroid = yes
			
# 		# 	from = {
# 		# 		capital_scope = {
# 		# 			while = {
# 		# 				count = fromfrom.planet.trigger:planet_size

# 		# 				add_deposit = d_frameworld_habitat
# 		# 				add_deposit = d_frameworld_expansion
# 		# 				change_planet_size = 1
# 		# 			}
# 		# 			giga_frameworld_update_entity_with_fallback = yes
# 		# 			frameworld_conduct_audit_check_ai = yes
# 		# 		}
# 		# 	}
# 		# }
# 	}
	
# 	ai_weight = {
# 		weight = 10
		
# 		modifier = {
# 			factor = 100
			
# 			exists = from
# 			from.capital_scope = {
# 				free_district_slots < 1
# 			}
# 		}
# 	}
# }

###############################################################################################################
###############################################################################################################
#          AI DISTRICT DECISIONS
###############################################################################################################
###############################################################################################################

# these decisions replicate building the districts which the AI doesn't understand when to build

@base_cost = 300
@city_cost = 500
@advanced_cost = 1000
@advanced_rare_cost = 50
@advanced_double_cost = 2000
@advanced_double_rare_cost = 100
@mega_cost = 2000
@mega_alloy_cost = 500
@mega_rare_cost = 250

@base_upkeep = 1
@city_upkeep = 2
@advanced_upkeep = 5
@advanced_rare_upkeep = 1
@advanced_double_upkeep = 10
@advanced_double_rare_upkeep = 2
@mega_upkeep = 20
@mega_alloy_upkeep = 5
@mega_rare_upkeep = 5

@base_time = 240
@city_time = 480
@advanced_time = 720
@mega_time = 960

# giga_frameworld_building_audit = {
# 	owned_planets_only = yes
	
# 	enactment_time = 5
	
# 	potential = {
# 		exists = owner
# 		owner = {
# 			is_ai = yes
# 			has_origin = origin_frameworld
# 		}
# 		is_planet_class = pc_giga_frameworld
# 	}
	
# 	allow = {
# 		hidden_trigger = {
# 			frameworld_should_conduct_audit = yes
# 		}
# 	}
	
# 	effect = {
# 		frameworld_conduct_audit = yes
# 	}
	
# 	ai_weight = {
# 		weight = 0 # they never did this even when allowed so might as well just use it for viewing
# 	}
# }

giga_frameworld_ai_build_district_anticrime = {
	owned_planets_only = yes
	
	enactment_time = @advanced_time
	
	resources = {
		category = planet_districts
		cost = {
			minerals = @advanced_cost
			volatile_motes = @advanced_rare_cost
		}
	}
	
	potential = {
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
			has_technology = "tech_colonial_centralization"
		}
		is_planet_class = pc_giga_frameworld
		free_district_slots > 0
	}
	
	allow = {
		free_district_slots > 0
		has_frameworld_build_cooldown = no
		frameworld_want_anticrime = yes
	}
	
	effect = {
		add_district = district_giga_frameworld_anticrime
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}

# giga_frameworld_ai_build_district_industrial = {
# 	owned_planets_only = yes
	
# 	enactment_time = @city_time
	
# 	resources = {
# 		category = planet_districts
# 		cost = {
# 			minerals = @city_cost
# 		}
# 	}
	
# 	potential = {
# 		exists = owner
# 		owner = {
# 			is_ai = yes
# 			has_origin = origin_frameworld
# 		}
# 		is_planet_class = pc_giga_frameworld
# 		free_district_slots > 0
# 	}
	
# 	allow = {
# 		free_district_slots > 0
# 		has_frameworld_build_cooldown = no
# 		frameworld_want_industrial = yes
# 	}
	
# 	effect = {
# 		if = {
# 			limit = {
# 				has_deposit = d_frameworld_advanced_industrial
# 			}
# 			add_district = district_giga_frameworld_industrial_advanced
# 		}
# 		else = {
# 			add_district = district_giga_frameworld_industrial
# 		}
# 		giga_frameworld_start_ai_build_cooldown = yes
# 		frameworld_conduct_audit = yes
# 	}
	
# 	ai_weight = {
# 		weight = 2000000 # we should do this if we aren't stopped
# 	}
# }

# giga_frameworld_ai_build_district_refinery = {
# 	owned_planets_only = yes
	
# 	enactment_time = @advanced_time
	
# 	resources = {
# 		category = planet_districts
# 		cost = {
# 			minerals = @advanced_cost
# 		}
# 	}
	
# 	potential = {
# 		exists = owner
# 		owner = {
# 			is_ai = yes
# 			has_origin = origin_frameworld
# 			OR = {
# 				has_technology = "tech_volatile_motes"
# 				has_technology = "tech_exotic_gases"
# 				has_technology = "tech_rare_crystals"
# 			}
# 		}
# 		is_planet_class = pc_giga_frameworld
# 		free_district_slots > 0
# 	}
	
# 	allow = {
# 		free_district_slots > 0
# 		has_frameworld_build_cooldown = no
# 		frameworld_want_refinery = yes
# 	}
	
# 	effect = {
# 		add_district = district_giga_frameworld_refinery
# 		giga_frameworld_start_ai_build_cooldown = yes
# 		frameworld_conduct_audit = yes
# 	}
	
# 	ai_weight = {
# 		weight = 2000000 # we should do this if we aren't stopped
# 	}
# }

# giga_frameworld_ai_build_district_science = {
# 	owned_planets_only = yes
	
# 	enactment_time = @advanced_time
	
# 	resources = {
# 		category = planet_districts
# 		cost = {
# 			minerals = @advanced_cost
# 			exotic_gases = @advanced_rare_cost
# 		}
# 	}
	
# 	potential = {
# 		exists = owner
# 		owner = {
# 			is_ai = yes
# 			has_origin = origin_frameworld
# 			has_technology = "tech_basic_science_lab_2"
# 		}
# 		is_planet_class = pc_giga_frameworld
# 		free_district_slots > 0
# 	}
	
# 	allow = {
# 		free_district_slots > 0
# 		has_frameworld_build_cooldown = no
# 		frameworld_want_science = yes
# 	}
	
# 	effect = {
# 		add_district = district_giga_frameworld_science
# 		giga_frameworld_start_ai_build_cooldown = yes
# 		frameworld_conduct_audit = yes
# 	}
	
# 	ai_weight = {
# 		weight = 2000000 # we should do this if we aren't stopped
# 	}
# }

giga_frameworld_ai_build_district_fortress = {
	owned_planets_only = yes
	
	enactment_time = @advanced_time
	
	resources = {
		category = planet_districts
		cost = {
			minerals = @advanced_cost
			volatile_motes = @advanced_rare_cost
		}
	}
	
	potential = {
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
			has_technology = "tech_global_defense_grid"
		}
		is_planet_class = pc_giga_frameworld
		free_district_slots > 0
	}
	
	allow = {
		free_district_slots > 0
		has_frameworld_build_cooldown = no
		frameworld_want_fortress = yes
	}
	
	effect = {
		add_district = district_giga_frameworld_fortress
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}

giga_frameworld_ai_build_building_sanctuary = {
	owned_planets_only = yes
	
	enactment_time = 360
	
	resources = {
		category = planet_buildings
		cost = {
			minerals = 400
		}
	}
	
	potential = {
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
			has_valid_civic = civic_machine_servitor
			not = { has_technology = "tech_paradise_dome" }
		}
		is_planet_class = pc_giga_frameworld
		or = {
			free_building_slots > 0
			has_building = building_drone_storage
			has_building = building_drone_megastorage
		}
	}
	
	allow = {
		or = {
			free_building_slots > 0
			has_building = building_drone_storage
			has_building = building_drone_megastorage
		}
		has_frameworld_build_cooldown = no
		frameworld_want_sanctuary_building = yes
	}
	
	effect = {
		frameworld_audit_remove_drone_storage = yes
		add_building = building_organic_sanctuary
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}

giga_frameworld_ai_build_district_sanctuary = {
	owned_planets_only = yes
	
	enactment_time = @advanced_time
	
	resources = {
		category = planet_districts
		cost = {
			trigger = {
				not = { has_deposit = d_frameworld_advanced_sanctuary }
			}
			minerals = @advanced_cost
			exotic_gases = @advanced_rare_cost
		}
		cost = {
			trigger = {
				has_deposit = d_frameworld_advanced_sanctuary
			}
			minerals = @advanced_double_cost
			exotic_gases = @advanced_double_rare_cost
		}
	}
	
	potential = {
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
			has_valid_civic = civic_machine_servitor
			has_technology = "tech_paradise_dome"
		}
		is_planet_class = pc_giga_frameworld
		free_district_slots > 0
	}
	
	allow = {
		free_district_slots > 0
		has_frameworld_build_cooldown = no
		frameworld_want_sanctuary = yes
	}
	
	effect = {
		if = {
			limit = {
				not = { has_deposit = d_frameworld_advanced_sanctuary }
			}
			add_district = district_giga_frameworld_sanctuary
		}
		else = {
			add_district = district_giga_frameworld_sanctuary_advanced
		}
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}

giga_frameworld_ai_build_district_decompressor = {
	owned_planets_only = yes
	
	enactment_time = @mega_time
	
	resources = {
		category = planet_districts
		cost = {
			minerals = @mega_cost
			#alloys = @mega_alloy_cost # AI doesn't budget a lot for this
		}
	}
	
	potential = {
		has_deposit = d_frameworld_decompressor
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
		}
		is_planet_class = pc_giga_frameworld
		free_district_slots > 0
	}
	
	allow = {
		free_district_slots > 0
		has_frameworld_build_cooldown = no
		frameworld_want_decompressor_district = yes
	}
	
	effect = {
		add_district = district_giga_frameworld_decompressor
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}

giga_frameworld_ai_build_district_penrose = {
	owned_planets_only = yes
	
	enactment_time = @mega_time
	
	resources = {
		category = planet_districts
		cost = {
			minerals = @mega_cost
			#alloys = @mega_alloy_cost # AI doesn't budget a lot for this
		}
	}
	
	potential = {
		has_deposit = d_frameworld_penrose
		exists = owner
		owner = {
			is_ai = yes
			has_origin = origin_frameworld
		}
		is_planet_class = pc_giga_frameworld
		free_district_slots > 0
	}
	
	allow = {
		free_district_slots > 0
		has_frameworld_build_cooldown = no
		frameworld_want_penrose_district = yes
	}
	
	effect = {
		add_district = district_giga_frameworld_penrose
		giga_frameworld_start_ai_build_cooldown = yes
		frameworld_conduct_audit = yes
	}
	
	ai_weight = {
		weight = 2000000 # we should do this if we aren't stopped
	}
}