####################################################
#
# War Amoeba Anomaly Events
#
# Written by Wyatt Sanders and Jared Sager
#
####################################################

# amoeba eggs found
amoeba_eggs_category = {
	should_ai_and_humans_use = yes								# 	Allows AI empires to generate the category.
	desc = {
		text = "amoeba_eggs_found"								#	amoeba_eggs_found is used for localization as the tag for the description of this anomaly before it's researched
	}

	picture = GFX_evt_microscopic_life							# 	picture that shows when the anomaly is found 
	level = 2 													# 	Anomaly level, 1 to 10 represents how difficult the anomaly is to research
	
	spawn_chance = {		
		modifier = {
			add = 40
			is_asteroid = yes
		}
		modifier = {											# 	nations that have encountered amoebas before have double the chance of finding this anomaly 
			factor =2 
			from.owner = { 
				has_country_flag = amoeba_encountered 
			}
		}
	}

	potential = {
		always = yes
	}

	max_once = yes 												# 	anomaly can only be found once 

	on_success = war_amoeba_mod_anomaly.1						# 	on_success = <event id>,  eventID = namespace.event_specific_tag

}

# broken remnant starbase for how to produce ameobas
amoeba_planet_destroyed_hatchery_category = {
	should_ai_and_humans_use = yes 								
	desc = {
		text = "amoeba_planet_destroyed_hatchery"				
	}

	picture = GFX_evt_atmospheric_entry							# 	picture that shows when the anomaly is found 
	level = 2 													# 	Anomaly level, 1 to 10 represents how difficult the anomaly is to research
	
	spawn_chance = {		
	modifier = {
		add = 40
		AND {
			has_any_strategic_resource = no
			uninhabitable_regular_planet = yes	
		}
		modifier = {											# 	nations that have encountered amoebas before have double the chance of finding this anomaly 
			factor = 2 
			from.owner = { 
				has_country_flag = amoeba_encountered 
			}
		}
	}

	potential = {
		always = yes
	}

	max_once = yes 												# 	anomaly can only be found once 

	on_success = {
		1 = war_amoeba_mod_anomaly.2
		1 = war_amoeba_mod_anomaly.3
	}

}

# broken remnant tech planetside for how to produce ameobas
amoeba_research_facilities_category = {
	should_ai_and_humans_use = yes 								
	desc = {
		text = "amoeba_research_facilities"				
	}

	picture = GFX_evt_alien_ruins						# 	picture that shows when the anomaly is found 
	level = 2 													# 	Anomaly level, 1 to 10 represents how difficult the anomaly is to research
	
	spawn_chance = {		
	modifier = {
		add = 40
		AND {
			has_any_strategic_resource = no
			uninhabitable_regular_planet = yes
		}	
		modifier = {											# 	nations that have encountered amoebas before have double the chance of finding this anomaly 
			factor =2 
			from.owner = { 
				has_country_flag = amoeba_encountered 
			}
		}
	}

	potential = {
		always = yes
	}

	max_once = yes 												# 	anomaly can only be found once 

	on_success = war_amoeba_mod_anomaly.4						# 	on_success = <event id>,  eventID = namespace.event_specific_tag

}

# destroyed hatchery in orbit around star
amoeba_star_destroyed_hatchery_category = {
	should_ai_and_humans_use = yes 								# 	Allows AI empires to generate the category.
	desc = {
		text = "amoeba_star_destroyed_hatchery"								#	amoeba_eggs_found is used for localization as the tag for the description of this anomaly before it's researched
	}

	picture = GFX_evt_space_debris							# 	picture that shows when the anomaly is found 
	level = 3 													# 	Anomaly level, 1 to 10 represents how difficult the anomaly is to research
	
	spawn_chance = {		
	modifier = {
		add = 40
		AND {
			has_any_strategic_resource = no
			is_star = yes
		}
		modifier = {											# 	nations that have encountered amoebas before have double the chance of finding this anomaly 
			factor =2 
			from.owner = { 
				has_country_flag = amoeba_encountered 
			}
		}
	}

	potential = {
		always = yes
	}

	max_once = yes 												# 	anomaly can only be found once 

	on_success = war_amoeba_mod_anomaly.5						# 	on_success = <event id>,  eventID = namespace.event_specific_tag

}

##########################
# HOW TO MAKE AN ANOMALY #
##########################


# 	from dev diary 115  <link up to date as of 6/8/2019>
# 	https://forum.paradoxplaza.com/forum/index.php?threads/stellaris-dev-diary-115-2-1-anomaly-modding-bonus.1098533/

#an_anomaly_category = {                # Anomaly category ID key
#
#    should_ai_use = yes/no            # Allows AI empires to generate the category. Default: no
#
#    desc = "key"                    # Optional, if no desc is given "<category key>_desc" is assumed
#
#   desc = {                        # Can also use triggered descs. First valid entry will be used.
#        trigger = { ... }            # Scope: planet, from = ship
#        text = "key"                # Localization key for description
#    }
#    picture = GFX_picture            # Picture displayed in category window
#    level = int                        # Anomaly level, 1 to 10
#
#    null_spawn_chance = 0.5            # Default 0. 0.0 - 1.0 (0 to 100%) chance category will NOT spawn
#                                    # even if it is picked by the anomaly die roll. Used to make
#                                    # categories for unusual objects (e.g. black holes) actually rare.
#   
#    max_once = yes/no                # default NO, if true will spawn category only once per empire
#    max_once_global = yes/no        # default NO, if true will spawn category only once per game
#
#    spawn_chance = {                # Chance for this anomaly category to spawn, 
#        base = <num>                # relative to other valid categories. Default: base = 0
#        modifier = {                # Spawn chance modifier
#            add/factor = <num>
#            <triggers>                # Scope: planet, from = ship
#        }
#    }
#
#    on_spawn = { <effects> }        # Executes immediately when anomaly category is spawned. 
#                                    # Scopes are this/root: planet, from: ship
#                                    # NOTE: on_spawn effects will not run if category is spawned through console
#
#    on_success = {                    # Picks anomaly event to fire; similar to random_list
#        1 = {                        # Base chance
#            max_once = yes            # Individual outcomes default to max_once = yes,
#            max_once_global = no     # and max_once_global = no
#            modifier = {            # Optional modifiers
#                add/factor = <num>
#                <triggers>            # Scope: ship, from: planet
#            }
#            anomaly_event = <id>    # New effect anomaly_event fires specified event ID. Scope: ship, from: planet           
#        }                            # Can also use ship_event, though it gets different scopes:
#                                    # ship, from: ship, fromfrom: planet       
#
#        1 = <event id>                # shorthand for 1 = { anomaly_event = <event id> }
#    }
#
#    on_success = <event id>            # Shorthand for on_success = { 1 = { anomaly_event = <event id> } }
#}    								   # Only use if there is only one outcome in the category